<PREPROCESSOR>#include &lt;<STRING>vector</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>map</STRING>&gt;</PREPROCESSOR>

<PREPROCESSOR>#include &lt;<STRING>assimp.hpp</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>aiPostProcess.h</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>aiScene.h</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>aiAnim.h</STRING>&gt;</PREPROCESSOR>

<PREPROCESSOR>#include <STRING>"keyframe.h"</STRING></PREPROCESSOR>

<KEYWORD>namespace</KEYWORD> Animator
{

    <OBJ>KeyFrameController</OBJ>::<OO>KeyFrameController</OO>(<KEYWORD>const</KEYWORD> aiScene <OPERATOR>*</OPERATOR>
                                           model_):standstill(<TYPE>false</TYPE>),
        root_for_standstill(<TYPE>NULL</TYPE>), num_animations(<NUMERIC>0</NUMERIC>)
    {
        <COMMENT>// num_animations = 0;</COMMENT>
        model <OPERATOR>=</OPERATOR> model_;
        FinalizeFrame();
    }

    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>NewFrame</OO>(<TYPE>void</TYPE>)
    {
        <OBJ>global_node_positions</OBJ>.<OO>clear</OO>();
        <OBJ>local_node_positions</OBJ>.<OO>clear</OO>();
        <OBJ>node_transforms</OBJ>.<OO>clear</OO>();
        <OBJ>node_weightings</OBJ>.<OO>clear</OO>();
        <COMMENT>// weightings.clear();</COMMENT>
        num_animations <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;
        <OBJ>node_weightings_total</OBJ>.<OO>clear</OO>();
    }

    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>FinalizeFrame</OO>(<TYPE>void</TYPE>)
    {
        aiMatrix4x4 identity;

        CalcLocalPositions(<OBJ>model</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRootNode</OO>);
        CalcGlobalPositions(<OBJ>model</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRootNode</OO>, root_modifier);
    }

    aiMatrix4x4 <OBJ>KeyFrameController</OBJ>::<OO>GetLocalPosition</OO>(<KEYWORD>const</KEYWORD> <TYPE>char</TYPE> <OPERATOR>*</OPERATOR>nodename)
    {
        <KEYWORD>return</KEYWORD> local_node_positions<OPERATOR>[</OPERATOR>(<OBJ>std</OBJ>::<TYPE>string</TYPE>) nodename<OPERATOR>]</OPERATOR>;
    }

    <KEYWORD>const</KEYWORD> aiMatrix4x4 <OPERATOR>&amp;</OPERATOR>
        <OBJ>KeyFrameController</OBJ>::<OO>GetGlobalPosition</OO>(<KEYWORD>const</KEYWORD> <TYPE>char</TYPE> <OPERATOR>*</OPERATOR>nodename)
    {
        <OBJ>std</OBJ>::<TYPE>string</TYPE> name <OPERATOR>=</OPERATOR> nodename;
        <KEYWORD>const</KEYWORD> aiMatrix4x4 <OPERATOR>&amp;</OPERATOR> m <OPERATOR>=</OPERATOR> global_node_positions<OPERATOR>[</OPERATOR>name<OPERATOR>]</OPERATOR>;

        <KEYWORD>return</KEYWORD> m;
    }

    aiMatrix4x4 <OBJ>KeyFrameController</OBJ>::<OO>CalcNodeLocalPosition</OO>(<KEYWORD>const</KEYWORD> aiNode <OPERATOR>*</OPERATOR> node)
    {

        <OBJ>std</OBJ>::<TYPE>string</TYPE> name <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>;
        <TYPE>size_t</TYPE> num_transforms <OPERATOR>=</OPERATOR> <OBJ>node_transforms</OBJ>.<OO>size</OO>();

        <TYPE>struct</TYPE> animation_data <OPERATOR>*</OPERATOR>data <OPERATOR>=</OPERATOR>
            <KEYWORD>new</KEYWORD> <TYPE>struct</TYPE> animation_data<OPERATOR>[</OPERATOR>num_transforms<OPERATOR>]</OPERATOR>;

        <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> <OBJ>node_transforms</OBJ>.<OO>size</OO>(); i<OPERATOR>++</OPERATOR>)
        {
            <OBJ>std</OBJ>::<TYPE>map</TYPE> <OPERATOR>&lt;</OPERATOR> <OBJ>std</OBJ>::<TYPE>string</TYPE>, <TYPE>struct</TYPE> animation_data <OPERATOR>&gt;</OPERATOR><OPERATOR>&amp;</OPERATOR>nodes <OPERATOR>=</OPERATOR>
                node_transforms<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>;

            <KEYWORD>if</KEYWORD> (<OBJ>nodes</OBJ>.<OO>count</OO>(name) <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC>)
            {
                data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> nodes<OPERATOR>[</OPERATOR>name<OPERATOR>]</OPERATOR>;
            }
            <KEYWORD>else</KEYWORD>
            {
                aiVector3D translation;
                aiVector3D scaling;
                aiQuaternion rotation;
                <KEYWORD>const</KEYWORD> aiMatrix4x4 <OPERATOR>&amp;</OPERATOR> m <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mTransformation</OO>;

                <OBJ>m</OBJ>.<OO>Decompose</OO>(scaling, rotation, translation);

                data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>.<OO>translation</OO> <OPERATOR>=</OPERATOR> translation;
                data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>.<OO>scale</OO> <OPERATOR>=</OPERATOR> scaling;
                data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>.<OO>rotation</OO> <OPERATOR>=</OPERATOR> rotation;
            }
        }

        <COMMENT>// <COMMENT_NOTE>FIXME</COMMENT_NOTE>: below doesn't correctly handle a set of zero-ed weightings.</COMMENT>

        <COMMENT>// float cumulative_weighting = weightings[0];</COMMENT>
        <TYPE>float</TYPE> cumulative_weighting <OPERATOR>=</OPERATOR> GetNodeWeighting(<NUMERIC>0</NUMERIC>, <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>);
        aiVector3D t <OPERATOR>=</OPERATOR> data<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>.<OO>translation</OO>;
        aiVector3D s <OPERATOR>=</OPERATOR> data<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>.<OO>scale</OO>;
        aiQuaternion r <OPERATOR>=</OPERATOR> data<OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR>.<OO>rotation</OO>;
        <OBJ>Assimp</OBJ>::<OO>Interpolator</OO> <OPERATOR>&lt;</OPERATOR> aiQuaternion <OPERATOR>&gt;</OPERATOR> interp_q;
        <OBJ>Assimp</OBJ>::<OO>Interpolator</OO> <OPERATOR>&lt;</OPERATOR> aiVector3D <OPERATOR>&gt;</OPERATOR> interp_v;

        <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> <OBJ>node_transforms</OBJ>.<OO>size</OO>(); i<OPERATOR>++</OPERATOR>)
        {
            <TYPE>float</TYPE> weighting <OPERATOR>=</OPERATOR> GetNodeWeighting(i, <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>);    <COMMENT>// weightings[i];</COMMENT>
            <KEYWORD>const</KEYWORD> aiVector3D <OPERATOR>&amp;</OPERATOR> translation <OPERATOR>=</OPERATOR> data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>.<OO>translation</OO>;
            <KEYWORD>const</KEYWORD> aiQuaternion <OPERATOR>&amp;</OPERATOR> rotation <OPERATOR>=</OPERATOR> data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>.<OO>rotation</OO>;
            <KEYWORD>const</KEYWORD> aiVector3D <OPERATOR>&amp;</OPERATOR> scale <OPERATOR>=</OPERATOR> data<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>.<OO>scale</OO>;
            <TYPE>float</TYPE> w <OPERATOR>=</OPERATOR> <NUMERIC>1.0f</NUMERIC> <OPERATOR>-</OPERATOR> weighting;

            interp_v(t, translation, t, w);
            interp_v(s, scale, s, w);
            <COMMENT>// t += translation * w;</COMMENT>
            <COMMENT>// s += scale * w;</COMMENT>
            interp_q(r, rotation, r, w);
            cumulative_weighting <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> weighting;
        }

        <COMMENT>// float recip = (num_transforms == 0)? 1: 1.0f/num_transforms;</COMMENT>
        <COMMENT>// t *= recip;</COMMENT>
        <COMMENT>// s *= recip;</COMMENT>
        
        aiMatrix4x4 r_matrix(<OBJ>r</OBJ>.<OO>GetMatrix</OO>());
        aiMatrix4x4 s_matrix;
        aiMatrix4x4 t_matrix;
        <OBJ>aiMatrix4x4</OBJ>::<OO>Scaling</OO>(s, s_matrix);
        <OBJ>aiMatrix4x4</OBJ>::<OO>Translation</OO>(t, t_matrix);

        aiMatrix4x4 transform <OPERATOR>=</OPERATOR> (t_matrix <OPERATOR>*</OPERATOR> r_matrix <OPERATOR>*</OPERATOR> s_matrix);

        <KEYWORD>delete</KEYWORD><OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR>data;
        <KEYWORD>return</KEYWORD> transform;
    }


    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>CalcLocalPositions</OO>(<KEYWORD>const</KEYWORD> aiNode <OPERATOR>*</OPERATOR> node)
    {
        <OBJ>std</OBJ>::<TYPE>string</TYPE> nodename <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>;
        aiMatrix4x4 transform;

        <KEYWORD>if</KEYWORD> (<OBJ>node_transforms</OBJ>.<OO>size</OO>() <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>)
            transform <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mTransformation</OO>;
        <KEYWORD>else</KEYWORD>
            transform <OPERATOR>=</OPERATOR> CalcNodeLocalPosition(node);


        local_node_positions<OPERATOR>[</OPERATOR>nodename<OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> transform;

        <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumChildren</OO>; i<OPERATOR>++</OPERATOR>)
            CalcLocalPositions(<OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mChildren</OO><OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>);
    }

    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>CalcGlobalPositions</OO>(<KEYWORD>const</KEYWORD> aiNode <OPERATOR>*</OPERATOR> node,
                                                 <KEYWORD>const</KEYWORD> aiMatrix4x4 <OPERATOR>&amp;</OPERATOR>
                                                 parent_matrix)
    {
        <KEYWORD>const</KEYWORD> <OBJ>std</OBJ>::<TYPE>string</TYPE> <OPERATOR>&amp;</OPERATOR> nodename <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>;
        aiMatrix4x4 m(parent_matrix);
        m <OPERATOR>*</OPERATOR><OPERATOR>=</OPERATOR> GetLocalPosition(<OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>);
        global_node_positions<OPERATOR>[</OPERATOR>nodename<OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> m;


        <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumChildren</OO>; i<OPERATOR>++</OPERATOR>)
            CalcGlobalPositions(<OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mChildren</OO><OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>, m);
    }


    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>SetNodeWeighting</OO>(<TYPE>size_t</TYPE> animation_id,
                                              <KEYWORD>const</KEYWORD> <TYPE>char</TYPE> <OPERATOR>*</OPERATOR>nodename,
                                              <TYPE>float</TYPE> weighting, <TYPE>bool</TYPE> recursive)
    {
        <KEYWORD>if</KEYWORD> (<OBJ>node_weightings</OBJ>.<OO>size</OO>() <OPERATOR>&lt;</OPERATOR><OPERATOR>=</OPERATOR> animation_id)
            <COMMENT>// return;</COMMENT>
            <OBJ>node_weightings</OBJ>.<OO>resize</OO>(animation_id <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>);

        <KEYWORD>if</KEYWORD> (recursive)
        {
            aiNode <OPERATOR>*</OPERATOR>node <OPERATOR>=</OPERATOR> <OBJ>model</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mRootNode</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>FindNode</OO>(nodename);
            SetNodeWeighting(animation_id, node, weighting, <TYPE>true</TYPE>);
        }
        <KEYWORD>else</KEYWORD>
        {
            <OBJ>std</OBJ>::<TYPE>map</TYPE> <OPERATOR>&lt;</OPERATOR> <OBJ>std</OBJ>::<TYPE>string</TYPE>, <TYPE>float</TYPE> <OPERATOR>&gt;</OPERATOR><OPERATOR>&amp;</OPERATOR>m <OPERATOR>=</OPERATOR> node_weightings<OPERATOR>[</OPERATOR>animation_id<OPERATOR>]</OPERATOR>;
            m<OPERATOR>[</OPERATOR>nodename<OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> weighting;
        }
    }

    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>SetNodeWeighting</OO>(<TYPE>size_t</TYPE> animation_id,
                                              <KEYWORD>const</KEYWORD> aiNode <OPERATOR>*</OPERATOR> node,
                                              <TYPE>float</TYPE> weighting, <TYPE>bool</TYPE> recursive)
    {
        SetNodeWeighting(animation_id, <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>, weighting);
        
        <KEYWORD>if</KEYWORD> (recursive)
        {
            <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumChildren</OO>; i<OPERATOR>++</OPERATOR>)
                SetNodeWeighting(animation_id, <OBJ>node</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mChildren</OO><OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>, weighting,
                                 recursive);
        }
    }




    <TYPE>float</TYPE>
        <OBJ>KeyFrameController</OBJ>::<OO>GetNodeWeighting</OO>(<TYPE>size_t</TYPE> animation_index,
                                             <KEYWORD>const</KEYWORD> <TYPE>char</TYPE> <OPERATOR>*</OPERATOR>nodename)
    {


        <TYPE>float</TYPE> weighting <OPERATOR>=</OPERATOR> node_weightings<OPERATOR>[</OPERATOR>animation_index<OPERATOR>]</OPERATOR><OPERATOR>[</OPERATOR>nodename<OPERATOR>]</OPERATOR>;

        <COMMENT>// std::map&lt;std::string, float&gt;::const_iterator it =</COMMENT>
        <COMMENT>// node_weightings_total.find(nodename);</COMMENT>
        <COMMENT>// if (it != node_weightings_total.end())</COMMENT>
        <COMMENT>// {</COMMENT>
        <COMMENT>// return weighting / it-&gt;second;</COMMENT>
        <COMMENT>// }</COMMENT>

        <TYPE>float</TYPE> total <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;

        <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> num_animations; i<OPERATOR>++</OPERATOR>)
        {
            total <OPERATOR>+</OPERATOR><OPERATOR>=</OPERATOR> node_weightings<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR><OPERATOR>[</OPERATOR>nodename<OPERATOR>]</OPERATOR>;
        }

        <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>total)
            total <OPERATOR>=</OPERATOR> <NUMERIC>1.0f</NUMERIC>;

        <COMMENT>// node_weightings_total.insert(std::pair&lt;std::string,</COMMENT>
        <COMMENT>// float&gt;(nodename, total));</COMMENT>

        <KEYWORD>return</KEYWORD> weighting <OPERATOR>/</OPERATOR> total;
    }



    <COMMENT>// <COMMENT_NOTE>TODO</COMMENT_NOTE>:</COMMENT>
    <COMMENT>// this function is long and confusing. </COMMENT>
    <COMMENT>// shoiuld at least split it up into a bunch of short and confusing</COMMENT>
    <COMMENT>// functions instead.</COMMENT>
    <COMMENT>// also this function is the biggest bottleneck in this class so get</COMMENT>
    <COMMENT>// optimising</COMMENT>

    <TYPE>size_t</TYPE>
        <OBJ>KeyFrameController</OBJ>::<OO>PlayAnimation</OO>(<KEYWORD>const</KEYWORD> aiAnimation <OPERATOR>*</OPERATOR> anim,
                                          <TYPE>float</TYPE> weighting, <TYPE>float</TYPE> time)
    {
        <COMMENT>// Exception?</COMMENT>
        <KEYWORD>if</KEYWORD> (anim <OPERATOR>==</OPERATOR> <TYPE>NULL</TYPE>)
            <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC>;

        num_animations<OPERATOR>++</OPERATOR>;

        <COMMENT>// weightings.resize(num_animations);</COMMENT>
        <COMMENT>// weightings[num_animations-1] = weighting;</COMMENT>


        <COMMENT>// testing only.</COMMENT>
        <COMMENT>// double duration = anim-&gt;mDuration;</COMMENT>
        <COMMENT>// while (time &gt; duration)</COMMENT>
        <COMMENT>// time-= duration;</COMMENT>

        aiVector3D scaling(<NUMERIC>1</NUMERIC>, <NUMERIC>1</NUMERIC>, <NUMERIC>1</NUMERIC>);

        <COMMENT>// double this_frame_time_scaling;</COMMENT>
        <COMMENT>// double next_frame_time_scaling;</COMMENT>


        aiQuatKey last_rotation;
        aiQuatKey next_rotation;
        aiVectorKey last_translation;
        aiVectorKey next_translation;
        <OBJ>Assimp</OBJ>::<OO>Interpolator</OO> <OPERATOR>&lt;</OPERATOR> aiQuatKey <OPERATOR>&gt;</OPERATOR> interp_q;
        <OBJ>Assimp</OBJ>::<OO>Interpolator</OO> <OPERATOR>&lt;</OPERATOR> aiVectorKey <OPERATOR>&gt;</OPERATOR> interp_v;
        aiQuaternion rotation;
        aiVector3D translation;

        <KEYWORD>for</KEYWORD> (<KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; i <OPERATOR>&lt;</OPERATOR> <OBJ>anim</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumChannels</OO>; i<OPERATOR>++</OPERATOR>)
        {
            aiNodeAnim <OPERATOR>*</OPERATOR>channel <OPERATOR>=</OPERATOR> <OBJ>anim</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mChannels</OO><OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>;
            
            <OBJ>scaling</OBJ>.<OO>x</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>;
            <OBJ>scaling</OBJ>.<OO>y</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>;
            <OBJ>scaling</OBJ>.<OO>z</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>;

            <KEYWORD>if</KEYWORD> (<OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumScalingKeys</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC>)
            {
                <COMMENT>// scaling</COMMENT>
                <KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> s_index;
                <TYPE>bool</TYPE> found <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;

                <KEYWORD>for</KEYWORD> (s_index <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; s_index <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumScalingKeys</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>;
                     s_index<OPERATOR>++</OPERATOR>)
                {
                    <KEYWORD>if</KEYWORD> (time <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mScalingKeys</OO><OPERATOR>[</OPERATOR>s_index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>.<OO>mTime</OO>)
                    {
                        found <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
                        <KEYWORD>break</KEYWORD>;
                    }
                }
                <KEYWORD>if</KEYWORD> (found)
                {
                    <KEYWORD>if</KEYWORD> (s_index <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumScalingKeys</OO>)
                        scaling <OPERATOR>=</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mScalingKeys</OO><OPERATOR>[</OPERATOR>s_index<OPERATOR>]</OPERATOR>.<OO>mValue</OO>;
                }
            }
            
            <COMMENT>// rotation </COMMENT>
            
            <COMMENT>// just to stop warnings about uninitialised data, but they</COMMENT>
            <COMMENT>// wouldn't be used anyway.</COMMENT>
            <OBJ>last_rotation</OBJ>.<OO>mTime</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;
            <OBJ>next_rotation</OBJ>.<OO>mTime</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;

            <TYPE>bool</TYPE> interp_rotation <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;

            <KEYWORD>if</KEYWORD> (<OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumRotationKeys</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC>)
            {
                <KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> r_index;
                <TYPE>bool</TYPE> found <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
                
                <KEYWORD>for</KEYWORD> (r_index <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; r_index <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumRotationKeys</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>;
                     r_index<OPERATOR>++</OPERATOR>)
                {
                    <KEYWORD>if</KEYWORD> (time <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRotationKeys</OO><OPERATOR>[</OPERATOR>r_index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>.<OO>mTime</OO>)
                    {
                        found <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
                        <KEYWORD>break</KEYWORD>;
                    }
                }
                <KEYWORD>if</KEYWORD> (found)
                {
                    last_rotation <OPERATOR>=</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRotationKeys</OO><OPERATOR>[</OPERATOR>r_index<OPERATOR>]</OPERATOR>;
                    next_rotation <OPERATOR>=</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRotationKeys</OO><OPERATOR>[</OPERATOR>r_index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>;
                }
                <KEYWORD>else</KEYWORD>
                {
                    last_rotation <OPERATOR>=</OPERATOR>
                        <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRotationKeys</OO><OPERATOR>[</OPERATOR><OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumRotationKeys</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>;
                    interp_rotation <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
                }

            }
            <KEYWORD>else</KEYWORD>
                interp_rotation <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;

            <COMMENT>// translation </COMMENT>
            <OBJ>last_translation</OBJ>.<OO>mTime</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;
            <OBJ>next_translation</OBJ>.<OO>mTime</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;

            <TYPE>bool</TYPE> interp_translation <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;

            <KEYWORD>if</KEYWORD> (<OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumPositionKeys</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC>)
            {
                <KEYWORD>unsigned</KEYWORD> <TYPE>int</TYPE> t_index;

                <TYPE>bool</TYPE> found <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;

                <KEYWORD>for</KEYWORD> (t_index <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>; t_index <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumPositionKeys</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>;
                     t_index<OPERATOR>++</OPERATOR>)
                {
                    <KEYWORD>if</KEYWORD> (time <OPERATOR>&lt;</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mPositionKeys</OO><OPERATOR>[</OPERATOR>t_index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>.<OO>mTime</OO>)
                    {
                        found <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
                        <KEYWORD>break</KEYWORD>;
                    }
                }
                <KEYWORD>if</KEYWORD> (found)
                {
                    last_translation <OPERATOR>=</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mPositionKeys</OO><OPERATOR>[</OPERATOR>t_index<OPERATOR>]</OPERATOR>;
                    next_translation <OPERATOR>=</OPERATOR> <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mPositionKeys</OO><OPERATOR>[</OPERATOR>t_index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>;
                }
                <KEYWORD>else</KEYWORD>
                {
                    last_translation <OPERATOR>=</OPERATOR>
                        <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mPositionKeys</OO><OPERATOR>[</OPERATOR><OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mNumPositionKeys</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>;
                    interp_translation <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
                }
            }
            <KEYWORD>else</KEYWORD>
                interp_translation <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;

            <COMMENT>// the docs aren't clear on how the time input to the interp func</COMMENT>
            <COMMENT>// works but I think it should be normalised</COMMENT>
            <COMMENT>// to [0, 1] even in the case of giving it a Vectorkey/Quatkey</COMMENT>
            <COMMENT>// it seems like the library should normalise it itself if it's</COMMENT>
            <COMMENT>// taken in a key (as they have)</COMMENT>
            <COMMENT>// their time inbuilt; so this might break in future if the</COMMENT>
            <COMMENT>// library is changed to do that.  </COMMENT>

            <KEYWORD>if</KEYWORD> (interp_rotation)
            {
                <TYPE>double</TYPE> last_r_time <OPERATOR>=</OPERATOR> <OBJ>last_rotation</OBJ>.<OO>mTime</OO>;
                <TYPE>double</TYPE> next_r_time <OPERATOR>=</OPERATOR> <OBJ>next_rotation</OBJ>.<OO>mTime</OO>;
                <TYPE>double</TYPE> r_time_normalised <OPERATOR>=</OPERATOR>
                    (time <OPERATOR>-</OPERATOR> last_r_time) <OPERATOR>/</OPERATOR> (next_r_time <OPERATOR>-</OPERATOR> last_r_time);
                interp_q(rotation, last_rotation, next_rotation,
                         r_time_normalised);
            }
            <KEYWORD>else</KEYWORD>
                rotation <OPERATOR>=</OPERATOR> <OBJ>last_rotation</OBJ>.<OO>mValue</OO>;

            <KEYWORD>if</KEYWORD> (interp_translation)
            {
                <TYPE>double</TYPE> last_t_time <OPERATOR>=</OPERATOR> <OBJ>last_translation</OBJ>.<OO>mTime</OO>;
                <TYPE>double</TYPE> next_t_time <OPERATOR>=</OPERATOR> <OBJ>next_translation</OBJ>.<OO>mTime</OO>;
                <TYPE>double</TYPE> t_time_normalised <OPERATOR>=</OPERATOR>
                    (time <OPERATOR>-</OPERATOR> last_t_time) <OPERATOR>/</OPERATOR> (next_t_time <OPERATOR>-</OPERATOR> last_t_time);
                interp_v(translation, last_translation, next_translation,
                         t_time_normalised);
            }
            <KEYWORD>else</KEYWORD>
                translation <OPERATOR>=</OPERATOR> <OBJ>last_translation</OBJ>.<OO>mValue</OO>;

            <COMMENT>// this is a really horrible hack to enforce that the DOOM3 models </COMMENT>
            <COMMENT>// don't move</COMMENT>
            <COMMENT>// the problem is that every other model type I've seen keeps the</COMMENT>
            <COMMENT>// model in its own</COMMENT>
            <COMMENT>// little space and walking animations don't move it,</COMMENT>
            <COMMENT>// but the doom 3 ones actually translate along the axes when they </COMMENT>
            <COMMENT>// walk.</COMMENT>
            <COMMENT>// HOWEVER, the DOOM3 ones have the most rich animations I've been </COMMENT>
            <COMMENT>// able to find </COMMENT>
            <COMMENT>// in a model format that works well with the library.</COMMENT>
            <COMMENT>// perhaps the best way to do this would be to move the axis along </COMMENT>
            <COMMENT>// with them or something?</COMMENT>

            <KEYWORD>if</KEYWORD> (standstill <OPERATOR>&amp;&amp;</OPERATOR>
                root_for_standstill <OPERATOR>!</OPERATOR><OPERATOR>=</OPERATOR> <TYPE>NULL</TYPE> <OPERATOR>&amp;&amp;</OPERATOR>
                <OPERATOR>!</OPERATOR><FUNCTION>strcmp</FUNCTION>(<OBJ>root_for_standstill</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mName</OBJ>.<OO>data</OO>,
                        <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mNodeName</OBJ>.<OO>data</OO>))
            {
                aiNode <OPERATOR>*</OPERATOR>root <OPERATOR>=</OPERATOR> <OBJ>model</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>mRootNode</OO>;
                aiVector3D s, t;
                aiQuaternion r;

                <OBJ>root</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mTransformation</OBJ>.<OO>Decompose</OO>(s, r, t);
                <OBJ>translation</OBJ>.<OO>Set</OO>(<OBJ>t</OBJ>.<OO>x</OO>, <OBJ>t</OBJ>.<OO>y</OO>, <OBJ>t</OBJ>.<OO>z</OO>);
            }
            <TYPE>struct</TYPE> animation_data data <OPERATOR>=</OPERATOR>
                BuildTransformData(scaling, rotation, translation);


            AddNodeTransform(<OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mNodeName</OBJ>.<OO>data</OO>, data,
                             num_animations <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>);
            SetNodeWeighting(num_animations <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>, <OBJ>channel</OBJ><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OBJ>mNodeName</OBJ>.<OO>data</OO>,
                             weighting);
        }

        <KEYWORD>return</KEYWORD> num_animations <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>;


    }

    <TYPE>void</TYPE> <OBJ>KeyFrameController</OBJ>::<OO>AddNodeTransform</OO>(<KEYWORD>const</KEYWORD> <TYPE>char</TYPE> <OPERATOR>*</OPERATOR>nodename,
                                              <KEYWORD>const</KEYWORD> <TYPE>struct</TYPE> animation_data
                                              <OPERATOR>&amp;</OPERATOR>data, <TYPE>size_t</TYPE> index)
    {
        <KEYWORD>if</KEYWORD> (index <OPERATOR>&gt;</OPERATOR><OPERATOR>=</OPERATOR> <OBJ>node_transforms</OBJ>.<OO>size</OO>())
            <OBJ>node_transforms</OBJ>.<OO>resize</OO>(index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>);
        <OBJ>std</OBJ>::<TYPE>map</TYPE> <OPERATOR>&lt;</OPERATOR> <OBJ>std</OBJ>::<TYPE>string</TYPE>, <TYPE>struct</TYPE> animation_data <OPERATOR>&gt;</OPERATOR><OPERATOR>&amp;</OPERATOR>nodes <OPERATOR>=</OPERATOR>
            node_transforms<OPERATOR>[</OPERATOR>index<OPERATOR>]</OPERATOR>;
        nodes<OPERATOR>[</OPERATOR>nodename<OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> data;
    }


    <KEYWORD>inline</KEYWORD> <TYPE>struct</TYPE> animation_data
        <OBJ>KeyFrameController</OBJ>::<OO>BuildTransformData</OO>(<KEYWORD>const</KEYWORD> aiVector3D <OPERATOR>&amp;</OPERATOR> scaling,
                                               <KEYWORD>const</KEYWORD> aiQuaternion <OPERATOR>&amp;</OPERATOR> rotation,
                                               <KEYWORD>const</KEYWORD> aiVector3D <OPERATOR>&amp;</OPERATOR> translation)
        <KEYWORD>const</KEYWORD>
    {
        <TYPE>struct</TYPE> animation_data data;
        aiMatrix4x4 <OPERATOR>&amp;</OPERATOR> transformation_matrix <OPERATOR>=</OPERATOR> <OBJ>data</OBJ>.<OO>transform</OO>;
        aiMatrix4x4 scaling_matrix;
        aiMatrix4x4 t_matrix;
        <OBJ>aiMatrix4x4</OBJ>::<OO>Scaling</OO>(scaling, scaling_matrix);
        aiMatrix4x4 r_matrix <OPERATOR>=</OPERATOR> aiMatrix4x4(<OBJ>rotation</OBJ>.<OO>GetMatrix</OO>());
        <OBJ>aiMatrix4x4</OBJ>::<OO>Translation</OO>(translation, t_matrix);
        transformation_matrix <OPERATOR>=</OPERATOR> t_matrix <OPERATOR>*</OPERATOR> r_matrix <OPERATOR>*</OPERATOR> scaling_matrix;
        
        <OBJ>data</OBJ>.<OO>scale</OO> <OPERATOR>=</OPERATOR> scaling;
        <OBJ>data</OBJ>.<OO>translation</OO> <OPERATOR>=</OPERATOR> translation;
        <OBJ>data</OBJ>.<OO>rotation</OO> <OPERATOR>=</OPERATOR> rotation;

        <KEYWORD>return</KEYWORD> data;
    }
}
