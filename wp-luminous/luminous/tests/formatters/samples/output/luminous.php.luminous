<KEYWORD>&lt;?php</KEYWORD>

<COMMENT>/*</COMMENT>
<COMMENT> * Copyright 2010 Mark Watkinson</COMMENT>
<COMMENT> * </COMMENT>
<COMMENT> * This file is part of Luminous.</COMMENT>
<COMMENT> * </COMMENT>
<COMMENT> * Luminous is free software: you can redistribute it and/or</COMMENT>
<COMMENT> * modify</COMMENT>
<COMMENT> * it under the terms of the GNU General Public License as published by</COMMENT>
<COMMENT> * the Free Software Foundation, either version 3 of the License, or</COMMENT>
<COMMENT> * (at your option) any later version.</COMMENT>
<COMMENT> * </COMMENT>
<COMMENT> * Luminous is distributed in the hope that it will be useful,</COMMENT>
<COMMENT> * but WITHOUT ANY WARRANTY; without even the implied warranty of</COMMENT>
<COMMENT> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</COMMENT>
<COMMENT> * GNU General Public License for more details.</COMMENT>
<COMMENT> * </COMMENT>
<COMMENT> * You should have received a copy of the GNU General Public License</COMMENT>
<COMMENT> * along with Luminous.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</COMMENT>
<COMMENT> * </COMMENT>
<COMMENT> */</COMMENT>


 <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\file</DOCTAG><DOCPROPERTY> luminous.php </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Easy (non-OO, single line call) API for Luminous.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\author</DOCTAG><DOCSTR> Mark Watkinson</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\defgroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY>LuminousEasyAPI</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\example</DOCTAG><DOCPROPERTY> example.php </DOCPROPERTY>Example calling and arrangement</DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>

  
  <FUNCTION>require_once</FUNCTION>(<STRING>'core/luminous.class.php'</STRING>);
  <FUNCTION>require_once</FUNCTION>(<STRING>'formatters/luminous_formatter.class.php'</STRING>);  
  <FUNCTION>require_once</FUNCTION>(<STRING>'luminous_cache.class.php'</STRING>);
  <FUNCTION>require_once</FUNCTION>(<STRING>'luminous_grammars.class.php'</STRING>);
  <FUNCTION>require_once</FUNCTION>(<STRING>'luminous_grammar_callbacks.php'</STRING>);
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Maximum age of a cached file before it expires (in seconds), or -1</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.20</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>   
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_MAX_AGE</VARIABLE>;
  <VARIABLE>$LUMINOUS_MAX_AGE</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>;
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Maximum lenth of time between cache purges (deletion of everything) in seconds, or -1</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.20</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_PURGE_TIME</VARIABLE>;
  <VARIABLE>$LUMINOUS_PURGE_TIME</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>;
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Line wrap at x characters, set to -1 to disable wrapping</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.20</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_WRAP_WIDTH</VARIABLE>;
  <VARIABLE>$LUMINOUS_WRAP_WIDTH</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>;
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Enables or disables line numbering</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.20</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_LINE_NUMBERS</VARIABLE>;
  <VARIABLE>$LUMINOUS_LINE_NUMBERS</VARIABLE> <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> So-called 'verbosity' level control</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ref</DOCTAG><DOCSTR> verbosity</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.25</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>   
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_HIGHLIGHTING_LEVEL</VARIABLE>;
  <VARIABLE>$LUMINOUS_HIGHLIGHTING_LEVEL</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>4</NUMERIC>;
  
  <DOCCOMMENT>/** </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Enables or disables URI linking by the formatter.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_LINK_URIS</VARIABLE>;
  <VARIABLE>$LUMINOUS_LINK_URIS</VARIABLE> <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * Information variable which logs whether the most recent Luminous call was</DOCCOMMENT>
<DOCCOMMENT>   * read from the cache or generated. </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_WAS_CACHED</VARIABLE>;
  <VARIABLE>$LUMINOUS_WAS_CACHED</VARIABLE> <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * The maximum height, in pixels, of the resulting widget. Use 0 or -1 to </DOCCOMMENT>
<DOCCOMMENT>   * unconstrain. The excess height will be scrollable.</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>   
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_WIDGET_HEIGHT</VARIABLE>;
  <VARIABLE>$LUMINOUS_WIDGET_HEIGHT</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>500</NUMERIC>;
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Version number of Luminous</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>   
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_VERSION</VARIABLE>;
  <VARIABLE>$LUMINOUS_VERSION</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'0.5.5'</STRING>;
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Performance log</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Performance log. Each array element has the keys</DOCCOMMENT>
<DOCCOMMENT>   * time (float, s)</DOCCOMMENT>
<DOCCOMMENT>   * parse_time (float, s)</DOCCOMMENT>
<DOCCOMMENT>   * format_time (float, s)</DOCCOMMENT>
<DOCCOMMENT>   * cache_time (float, s) </DOCCOMMENT>
<DOCCOMMENT>   * cached (bool)</DOCCOMMENT>
<DOCCOMMENT>   * language (str)</DOCCOMMENT>
<DOCCOMMENT>   * input_size (int, bytes)</DOCCOMMENT>
<DOCCOMMENT>   * output_size (int, bytes)</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * The log is ordered chronologically starting from index 0 as the first </DOCCOMMENT>
<DOCCOMMENT>   * highlight on this page load.</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>     
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_PERFORMANCE_LOG</VARIABLE>;
  <VARIABLE>$LUMINOUS_PERFORMANCE_LOG</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>();
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Sets whether to escape Luminous input or whether it is pre-escaped.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Luminous operates on a string of text and uses some special characters </DOCCOMMENT>
<DOCCOMMENT>   * internally. The characters &amp;lt;, &amp;gt; and &amp;amp; are escaped to their HTML</DOCCOMMENT>
<DOCCOMMENT>   * entity codes (&amp;amp;lt; &amp;amp;gt; &amp;amp;amp;) by default. In some cases </DOCCOMMENT>
<DOCCOMMENT>   * you may be feeding &amp;Luminous code which is already escaped like this, in</DOCCOMMENT>
<DOCCOMMENT>   * which case you will want to set this flag to false so that Luminous doesn't</DOCCOMMENT>
<DOCCOMMENT>   * double-escape these characters.</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_ESCAPE_INPUT</VARIABLE>;
  <VARIABLE>$LUMINOUS_ESCAPE_INPUT</VARIABLE> <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
  
  

  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR>  0.5.4</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> The output format (as string). </DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Current recognised formats are 'html' and 'latex'.</DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_OUTPUT_FORMAT</VARIABLE>;
  <VARIABLE>$LUMINOUS_OUTPUT_FORMAT</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"html"</STRING>;
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.5.4</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> The theme to use. </DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * The theme must exist as a (css) file in luminous/style/</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\warning</DOCTAG><DOCSTR> This has no direct effect in HTML output, you can still include</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * whatever stylesheet you like and ignore this completely.</DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_THEME</VARIABLE>;
  <VARIABLE>$LUMINOUS_THEME</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'luminous_light'</STRING>;
  
  
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR>  0.5.4</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> returns what %Luminous believes is its root directory on the filesystem.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * For various reasons internally, we need to know where %Luminous is located </DOCCOMMENT>
<DOCCOMMENT>   * on the filesystem.</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * replaces $_LUMINOUS_ROOT, because that being writable represents something </DOCCOMMENT>
<DOCCOMMENT>   * of a security consideration</DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_root</USER_FUNCTION>()
  {
    <KEYWORD>return</KEYWORD> realpath(dirname(<CONSTANT>__FILE__</CONSTANT>) . <STRING>'<REGEX>/<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>.</REGEX_OPERATOR>/</REGEX>'</STRING>);
  }
  
  
  <DOCCOMMENT>///<DOCTAG>\cond</DOCTAG><DOCPROPERTY> DEV </DOCPROPERTY></DOCCOMMENT>
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Collects settings together into an array</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\internal</DOCTAG></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.30</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_create_settings</USER_FUNCTION>()
  {
    <VARIABLE>$settings</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>(
      <STRING>'escape'</STRING><OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_ESCAPE_INPUT'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'linenos'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_LINE_NUMBERS'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'highlight_level'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_HIGHLIGHTING_LEVEL'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'linkify'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_LINK_URIS'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'height'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_WIDGET_HEIGHT'</STRING><OPERATOR>]</OPERATOR>,     
      <STRING>'version'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_VERSION'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'wrap'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_WRAP_WIDTH'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'theme'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_THEME'</STRING><OPERATOR>]</OPERATOR>,
      <STRING>'format'</STRING> <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_OUTPUT_FORMAT'</STRING><OPERATOR>]</OPERATOR>
      
    );    
    ksort(<VARIABLE>$settings</VARIABLE>);
    <KEYWORD>return</KEYWORD> <VARIABLE>$settings</VARIABLE>;      
  }
  <DOCCOMMENT>///<DOCTAG>\endcond</DOCTAG></DOCCOMMENT>
  
  <DOCCOMMENT>///<DOCTAG>\cond</DOCTAG><DOCPROPERTY> DEV </DOCPROPERTY></DOCCOMMENT>
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\internal</DOCTAG></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR>  0.5.4</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> returns the output formatter currently specified in the LUMINOUS_OUTPUT_FORMAT variable</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\throw</DOCTAG><DOCPROPERTY> Exception </DOCPROPERTY>if an unknown formatter is specified</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\return</DOCTAG><DOCSTR> A LuminousFormatter object.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
   
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_get_formatter</USER_FUNCTION>()
  {
    <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_OUTPUT_FORMAT</VARIABLE>;
    <VARIABLE>$fmt_path</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'formatters/'</STRING>;
    <COMMENT>// this is a bit ugly but I don't see a compelling reason to change it to</COMMENT>
    <COMMENT>// a heavier solution like the one used with the gramamrs.</COMMENT>
    <KEYWORD>switch</KEYWORD>(<FUNCTION>strtolower</FUNCTION>(<VARIABLE>$LUMINOUS_OUTPUT_FORMAT</VARIABLE>))
    {
      <KEYWORD>case</KEYWORD> <STRING>'html'</STRING>:
        <FUNCTION>require_once</FUNCTION>(<VARIABLE>$fmt_path</VARIABLE> . <STRING>'htmlformatter.class.php'</STRING>);
        <KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> LuminousFormatterHTML();
        
      <KEYWORD>case</KEYWORD> <STRING>'latex'</STRING>:
        <FUNCTION>require_once</FUNCTION>(<VARIABLE>$fmt_path</VARIABLE> . <STRING>'latexformatter.class.php'</STRING>);
        <KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> LuminousFormatterLatex();
      
      <KEYWORD>default</KEYWORD>:
        <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> Exception(<STRING>'Unknown formatter: '</STRING> . <VARIABLE>$LUMINOUS_OUTPUT_FORMAT</VARIABLE>);
        <KEYWORD>return</KEYWORD> <TYPE>null</TYPE>;
    }
  }
  
  <DOCCOMMENT>/// <DOCTAG>\endcond</DOCTAG></DOCCOMMENT>
  
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Simple call to luminous with language grammar</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> grammar </DOCPROPERTY>The grammar to use to parse the string, as LuminousGrammar</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> src </DOCPROPERTY>the source string to be formatted (string)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> use_cache </DOCPROPERTY>determines whether to use the caching system, </DOCCOMMENT>
<DOCCOMMENT>   *    default is true. (true|false)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\return</DOCTAG><DOCSTR> an HTML formatted piece of text representing the input string</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\throw</DOCTAG><DOCPROPERTY> Exception </DOCPROPERTY>if luminous encounters a fatal error (a more descriptive</DOCCOMMENT>
<DOCCOMMENT>   *    string will be set as its message)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\see</DOCTAG><DOCSTR> Luminous</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\see</DOCTAG><DOCSTR> LuminousEasyAPI::$luminous_grammars</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_grammar</USER_FUNCTION>(LuminousGrammar <VARIABLE>$grammar</VARIABLE>, <VARIABLE>$src</VARIABLE>, <VARIABLE>$use_cache</VARIABLE><OPERATOR>=</OPERATOR><TYPE>true</TYPE>)
  {
    <KEYWORD>global</KEYWORD> <VARIABLE>$LUMINOUS_PERFORMANCE_LOG</VARIABLE>;
    <VARIABLE>$start</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
    <VARIABLE>$perf_log</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>();
    <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'language'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VARIABLE>$grammar</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>info</OO><OPERATOR>[</OPERATOR><STRING>'language'</STRING><OPERATOR>]</OPERATOR>;
    <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'input_size'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$src</VARIABLE>);
    <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'cache_time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>;
    
    <VARIABLE>$o</VARIABLE> <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
    <VARIABLE>$cache</VARIABLE> <OPERATOR>=</OPERATOR> <TYPE>null</TYPE>;
    
    
    <KEYWORD>if</KEYWORD> (<VARIABLE>$use_cache</VARIABLE>)
    {
      <VARIABLE>$c_t</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
      <COMMENT>// the cache's unique ID needs to be an alagamation of the input source,</COMMENT>
      <COMMENT>// grammar, and highlighting settings.</COMMENT>
      <VARIABLE>$md5</VARIABLE> <OPERATOR>=</OPERATOR> md5(<VARIABLE>$src</VARIABLE>);      
      <VARIABLE>$id</VARIABLE> <OPERATOR>=</OPERATOR> md5(<VARIABLE>$md5</VARIABLE> . serialize(<VARIABLE>$grammar</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>info</OO>));
      <VARIABLE>$id</VARIABLE> <OPERATOR>=</OPERATOR> md5(<VARIABLE>$id</VARIABLE> . serialize(luminous_create_settings()));
      <VARIABLE>$cache</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> LuminousCache(<VARIABLE>$id</VARIABLE>, <VARIABLE>$md5</VARIABLE>);
      <VARIABLE>$cache</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>version</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_VERSION'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$cache</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>cache_max_age</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_MAX_AGE'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$cache</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>purge_time</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_PURGE_TIME'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$cache</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>Purge</OO>();
      <VARIABLE>$o</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$cache</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>ReadCache</OO>();
      <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_WAS_CACHED'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'cached'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <TYPE>true</TYPE>;
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'parse_time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>;
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'format_time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <NUMERIC>0.0</NUMERIC>;
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'cache_time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>) <OPERATOR>-</OPERATOR> <VARIABLE>$c_t</VARIABLE>;
    }
    
    <KEYWORD>if</KEYWORD> (<VARIABLE>$o</VARIABLE> <OPERATOR>===</OPERATOR> <TYPE>false</TYPE>)
    {
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'cached'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
      
      <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_WAS_CACHED'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <TYPE>false</TYPE>;
      <VARIABLE>$p_start</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
      <VARIABLE>$l</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Luminous();    
      <VARIABLE>$l</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>verbosity</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_HIGHLIGHTING_LEVEL'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$l</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>pre_escaped</OO> <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR><VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_ESCAPE_INPUT'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$l</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>separate_lines</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_LINE_NUMBERS'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$o</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$l</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>Easy_Parse</OO>(<VARIABLE>$src</VARIABLE>, <VARIABLE>$grammar</VARIABLE>);  
      <VARIABLE>$p_end</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
      <VARIABLE>$f_start</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
      
      <VARIABLE>$f</VARIABLE> <OPERATOR>=</OPERATOR> luminous_get_formatter();
<COMMENT>//       $f = new LuminousFormatterHTML(); </COMMENT>
      <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>SetTheme</OO>(luminous_get_theme());
      <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>wrap_length</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_WRAP_WIDTH'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>line_numbers</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_LINE_NUMBERS'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>link</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_LINK_URIS'</STRING><OPERATOR>]</OPERATOR>;
      <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>height</OO> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_WIDGET_HEIGHT'</STRING><OPERATOR>]</OPERATOR>;
      
      <COMMENT>// this really shouldn't be here.</COMMENT>
      <KEYWORD>if</KEYWORD> (<VARIABLE>$grammar</VARIABLE> <KEYWORD>instanceof</KEYWORD> LuminousGrammarWhitespace)
        <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>tab_width</OO> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>;
      <VARIABLE>$o</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$f</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>Format</OO>(<VARIABLE>$o</VARIABLE>);
      <VARIABLE>$f_end</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
      
      <KEYWORD>if</KEYWORD> (<VARIABLE>$use_cache</VARIABLE>)
        <VARIABLE>$cache</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>WriteCache</OO>(<VARIABLE>$o</VARIABLE>);
      
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'format_time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VARIABLE>$f_end</VARIABLE> <OPERATOR>-</OPERATOR> <VARIABLE>$f_start</VARIABLE>;
      <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'parse_time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VARIABLE>$p_end</VARIABLE> <OPERATOR>-</OPERATOR> <VARIABLE>$p_start</VARIABLE>;
    }
    <VARIABLE>$end</VARIABLE> <OPERATOR>=</OPERATOR> microtime(<TYPE>true</TYPE>);
    <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'time'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VARIABLE>$end</VARIABLE><OPERATOR>-</OPERATOR><VARIABLE>$start</VARIABLE>;
    <VARIABLE>$perf_log</VARIABLE><OPERATOR>[</OPERATOR><STRING>'output_size'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$o</VARIABLE>);
    <VARIABLE>$LUMINOUS_PERFORMANCE_LOG</VARIABLE><OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VARIABLE>$perf_log</VARIABLE>;
    
    <KEYWORD>return</KEYWORD> <VARIABLE>$o</VARIABLE>;
    
  }
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Simple call to luminous with language code</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> language </DOCPROPERTY>The language code (which shall be looked up in </DOCCOMMENT>
<DOCCOMMENT>   *    luminous_grammars. If no corresponding grammar is found, its default </DOCCOMMENT>
<DOCCOMMENT>   *    will be used. In the event that no default is specified luminous, will </DOCCOMMENT>
<DOCCOMMENT>   *    raise an Exception. </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> src </DOCPROPERTY>the source string to be formatted (string)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> use_cache </DOCPROPERTY>determines whether to use the caching system, </DOCCOMMENT>
<DOCCOMMENT>   *    default is true. (true|false)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\return</DOCTAG><DOCSTR> a piece of text representing the input string, formatted according</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   *    to the format specified in LuminousEasyAPI::$LUMINOUS_OUTPUT_FORMAT</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\throw</DOCTAG><DOCPROPERTY> Exception </DOCPROPERTY>if luminous encounters a fatal error (a more descriptive</DOCCOMMENT>
<DOCCOMMENT>   *    string will be set as its message)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\see</DOCTAG><DOCSTR> Luminous</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\see</DOCTAG><DOCSTR> LuminousEasyAPI::$luminous_grammars</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous</USER_FUNCTION>(<VARIABLE>$language</VARIABLE>, <VARIABLE>$src</VARIABLE>, <VARIABLE>$use_cache</VARIABLE><OPERATOR>=</OPERATOR><TYPE>true</TYPE>)
  {
    <KEYWORD>global</KEYWORD> <VARIABLE>$luminous_grammars</VARIABLE>;
    <VARIABLE>$grammar</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>GetGrammar</OO>(<VARIABLE>$language</VARIABLE>);
    <KEYWORD>return</KEYWORD> luminous_grammar(<VARIABLE>$grammar</VARIABLE>, <VARIABLE>$src</VARIABLE>, <VARIABLE>$use_cache</VARIABLE>);
  }
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Simple call to Luminous with a file path to use as src.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> language </DOCPROPERTY>The language code (which shall be looked up in </DOCCOMMENT>
<DOCCOMMENT>   *    luminous_grammars. If no corresponding grammar is found, its default </DOCCOMMENT>
<DOCCOMMENT>   *    will be used. In the event that no default is specified luminous, will </DOCCOMMENT>
<DOCCOMMENT>   *    raise an Exception.</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> path </DOCPROPERTY>The path to the source file which shall be read by Luminous.</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> use_cache </DOCPROPERTY>determines whether to use the caching system, </DOCCOMMENT>
<DOCCOMMENT>   *    default is true. (true|false)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\return</DOCTAG><DOCSTR> an HTML formatted piece of text representing the input string</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\throw</DOCTAG><DOCPROPERTY> Exception </DOCPROPERTY>if luminous encounters a fatal error (a more descriptive</DOCCOMMENT>
<DOCCOMMENT>   *    string will be set as its message)</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\see</DOCTAG><DOCSTR> Luminous</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\see</DOCTAG><DOCSTR> LuminousEasyAPI::$luminous_grammars </DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_file</USER_FUNCTION>(<VARIABLE>$language</VARIABLE>, <VARIABLE>$path</VARIABLE>, <VARIABLE>$use_cache</VARIABLE><OPERATOR>=</OPERATOR><TYPE>true</TYPE>)
  {
    <VARIABLE>$src</VARIABLE> <OPERATOR>=</OPERATOR> file_get_contents(<VARIABLE>$path</VARIABLE>);
    <KEYWORD>return</KEYWORD> luminous(<VARIABLE>$language</VARIABLE>, <VARIABLE>$src</VARIABLE>, <VARIABLE>$use_cache</VARIABLE>); 
  }
  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Prints a table of known languages and their codes to output</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * This is a convenience function the user can call to determine which </DOCCOMMENT>
<DOCCOMMENT>   * languages are supported, and how they can access them.</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Similar to phpinfo()</DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_supported_languages</USER_FUNCTION>()
  {
    <KEYWORD>global</KEYWORD> <VARIABLE>$luminous_grammars</VARIABLE>;
    <VARIABLE>$list</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>ListGrammars</OO>();
    ksort(<VARIABLE>$list</VARIABLE>);
    <KEYWORD>echo</KEYWORD> <STRING>'&lt;h1&gt;Luminous Supported Languages&lt;/h1&gt;'</STRING>;
    <KEYWORD>echo</KEYWORD> <STRING>'&lt;table style="margin-left:auto;margin-right:auto; "&gt;</STRING>
<STRING>      &lt;tr style="font-weight:bold"&gt;&lt;td&gt;&lt;/td&gt;</STRING>
<STRING>      &lt;td&gt;Language&lt;/td&gt;&lt;td&gt;Valid Codes&lt;/td&gt;&lt;/tr&gt;'</STRING>;
    <VARIABLE>$count</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$list</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$k</VARIABLE><OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR><VARIABLE>$l</VARIABLE>)
    {
      <VARIABLE>$count</VARIABLE><OPERATOR>++</OPERATOR>;
      sort(<VARIABLE>$l</VARIABLE>);
      <KEYWORD>echo</KEYWORD> <STRING>"&lt;tr&gt;&lt;td&gt; <VARIABLE>$count</VARIABLE> &lt;/td&gt;&lt;td&gt;<VARIABLE>$k</VARIABLE>&lt;/td&gt;&lt;td&gt;"</STRING> . <FUNCTION>join</FUNCTION>(<VARIABLE>$l</VARIABLE>, <STRING>", "</STRING>) 
        . <STRING>"&lt;/td&gt;&lt;/tr&gt;"</STRING>;
    }
    <KEYWORD>echo</KEYWORD> <STRING>"&lt;/table&gt;"</STRING>;
  }

  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * Returns a list of themes present in the $ROOT/style/ directory.</DOCCOMMENT>
<DOCCOMMENT>   * The names will simply be the filename, not including the parent directory</DOCCOMMENT>
<DOCCOMMENT>   * structure.</DOCCOMMENT>
<DOCCOMMENT>   *</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\return</DOCTAG><DOCSTR> the list, as array</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_get_themes</USER_FUNCTION>()
  {
    <VARIABLE>$themes_uri</VARIABLE> <OPERATOR>=</OPERATOR> luminous_root() . <STRING>"<REGEX>/style/</REGEX>"</STRING>;
    <VARIABLE>$themes</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>();
    <KEYWORD>foreach</KEYWORD>(glob(<VARIABLE>$themes_uri</VARIABLE> . <STRING>"/*.css"</STRING>) <KEYWORD>as</KEYWORD> <VARIABLE>$css</VARIABLE>)
    {
      <VARIABLE>$fn</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<FUNCTION>preg_replace</FUNCTION>(<STRING>"<REGEX>%<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR>/%</REGEX>"</STRING>, <STRING>''</STRING>, <VARIABLE>$css</VARIABLE>));
      <KEYWORD>switch</KEYWORD>(<VARIABLE>$fn</VARIABLE>)
      {
      <KEYWORD>case</KEYWORD> <STRING>'luminous.css'</STRING>:
      <KEYWORD>case</KEYWORD> <STRING>'luminous_print.css'</STRING>:
      <KEYWORD>case</KEYWORD> <STRING>'luminous.min.css'</STRING>:
        <KEYWORD>continue</KEYWORD>;
      <KEYWORD>default</KEYWORD>:
        <VARIABLE>$themes</VARIABLE><OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VARIABLE>$fn</VARIABLE>;        
      }

    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$themes</VARIABLE>;
  }
  
  
  <DOCCOMMENT>///<DOCTAG>\cond</DOCTAG><DOCPROPERTY> DEV </DOCPROPERTY></DOCCOMMENT>
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * returns the theme file as a string.</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * If you need to access the raw contents of a theme, this method is </DOCCOMMENT>
<DOCCOMMENT>   * preferred as it includes security checks against reading arbitrary files</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\todo</DOCTAG><DOCSTR> this probably shouldn't be here, since it's internal.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\internal</DOCTAG></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_get_theme</USER_FUNCTION>(<VARIABLE>$theme</VARIABLE><OPERATOR>=</OPERATOR><TYPE>null</TYPE>)
  {
    <KEYWORD>if</KEYWORD> (<VARIABLE>$theme</VARIABLE> <OPERATOR>===</OPERATOR> <TYPE>null</TYPE>)
      <VARIABLE>$theme</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_THEME'</STRING><OPERATOR>]</OPERATOR>;
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>preg_match</FUNCTION>(<STRING>'<REGEX>/\.css$/<KEYWORD>i</KEYWORD></REGEX>'</STRING>, <VARIABLE>$theme</VARIABLE>))
      <VARIABLE>$theme</VARIABLE> .<OPERATOR>=</OPERATOR> <STRING>'.css'</STRING>;
    
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>preg_match</FUNCTION>(<STRING>'<REGEX>/^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>a-zA-Z0-9_\-<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>\.css<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$/<KEYWORD>i</KEYWORD></REGEX>'</STRING>, <VARIABLE>$theme</VARIABLE>))
    {
      <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> Exception(<STRING>"Invalid theme filename: "</STRING> . htmlentities(<VARIABLE>$theme</VARIABLE>));
      <KEYWORD>return</KEYWORD> <TYPE>null</TYPE>;
    }
    
    <VARIABLE>$path</VARIABLE> <OPERATOR>=</OPERATOR> luminous_root() . <STRING>'<REGEX>/style/</REGEX>'</STRING> . <VARIABLE>$theme</VARIABLE>;
    
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR>file_exists(<VARIABLE>$path</VARIABLE>))
    {
      <KEYWORD>throw</KEYWORD> <KEYWORD>new</KEYWORD> Exception(<STRING>"No such theme file: "</STRING> . htmlentities(<VARIABLE>$path</VARIABLE>));
      <KEYWORD>return</KEYWORD>;
    }
    <KEYWORD>return</KEYWORD> file_get_contents(<VARIABLE>$path</VARIABLE>);
  }
  <DOCCOMMENT>///<DOCTAG>\endcond</DOCTAG></DOCCOMMENT>
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Returns a string representing everything that needs to be printed in </DOCCOMMENT>
<DOCCOMMENT>   * the \<HTMLTAG>&lt;head\&gt;</HTMLTAG> section of a website.</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> $theme </DOCPROPERTY>(str) the theme to use. The theme file should exist</DOCCOMMENT>
<DOCCOMMENT>   *    as a file of the same name in luminous/style/. If you leave this as </DOCCOMMENT>
<DOCCOMMENT>   *    \c NULL, the theme in LuminousEasyAPI::$LUMINOUS_THEME will be used</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> $javascript </DOCPROPERTY>(boolean) whether or not to use JavaScript</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> $jquery </DOCPROPERTY>(boolean) whether or not to include jQuery: jQuery is required for </DOCCOMMENT>
<DOCCOMMENT>   *    javascript to work, but you may include it yourself (if you need a different</DOCCOMMENT>
<DOCCOMMENT>   *    version). If so, it must be included before this function's output is </DOCCOMMENT>
<DOCCOMMENT>   *    echoed.</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\param</DOCTAG><DOCPROPERTY> relative_root </DOCPROPERTY>Optionally, you may specify the path to luminous/</DOCCOMMENT>
<DOCCOMMENT>   *    relative to the document root (remember to include the leading slash).</DOCCOMMENT>
<DOCCOMMENT>   *    If you don't specify this, Luminous attempts to work it out. See</DOCCOMMENT>
<DOCCOMMENT>   *    warning.</DOCCOMMENT>
<DOCCOMMENT>   *    </DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\warning</DOCTAG><DOCSTR> due to shortcomings in PHP, it's not really possible to figure</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * out the include path if there are symbolic links involved In this case, you</DOCCOMMENT>
<DOCCOMMENT>   * \b must specify relative_root.</DOCCOMMENT>
<DOCCOMMENT>   * http://bugs.php.net/46260</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\since</DOCTAG><DOCSTR> 0.5.0</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>luminous_get_html_head</USER_FUNCTION>(<VARIABLE>$theme</VARIABLE><OPERATOR>=</OPERATOR><TYPE>null</TYPE>, <VARIABLE>$javascript</VARIABLE><OPERATOR>=</OPERATOR><TYPE>true</TYPE>,
    <VARIABLE>$jquery</VARIABLE><OPERATOR>=</OPERATOR><TYPE>true</TYPE>, <VARIABLE>$relative_root</VARIABLE><OPERATOR>=</OPERATOR><TYPE>null</TYPE>)
  {

    <KEYWORD>if</KEYWORD> (<VARIABLE>$relative_root</VARIABLE> <OPERATOR>===</OPERATOR> <TYPE>null</TYPE>)
    {
      <VARIABLE>$relative_root</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>str_replace</FUNCTION>(<VARIABLE>$_SERVER</VARIABLE><OPERATOR>[</OPERATOR><STRING>'DOCUMENT_ROOT'</STRING><OPERATOR>]</OPERATOR>, <STRING>'/'</STRING>, dirname(<CONSTANT>__FILE__</CONSTANT>));
      <VARIABLE>$relative_root</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>str_replace</FUNCTION>(<STRING>'<ESC>\\</ESC>'</STRING>, <STRING>'/'</STRING>, <VARIABLE>$relative_root</VARIABLE>); <COMMENT>// bah windows</COMMENT>
      <VARIABLE>$relative_root</VARIABLE> <OPERATOR>=</OPERATOR> rtrim(<VARIABLE>$relative_root</VARIABLE>, <STRING>'/'</STRING>);
      <COMMENT>// go up one level.</COMMENT>
      <VARIABLE>$relative_root</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>'<REGEX>%/<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^/<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$%</REGEX>'</STRING>, <STRING>''</STRING>, <VARIABLE>$relative_root</VARIABLE>);
    }
    <VARIABLE>$relative_root</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>'<REGEX>%<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?!</REGEX_SUBPATTERN>/<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>//<REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?&lt;!</REGEX_SUBPATTERN>/<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>%</REGEX>'</STRING>, <STRING>'/'</STRING>, <VARIABLE>$relative_root</VARIABLE>);
    
    <KEYWORD>if</KEYWORD> (<VARIABLE>$theme</VARIABLE> <OPERATOR>===</OPERATOR> <TYPE>null</TYPE> <OPERATOR>||</OPERATOR> <VARIABLE>$theme</VARIABLE> <OPERATOR>===</OPERATOR> <STRING>''</STRING> <OPERATOR>||</OPERATOR> <VARIABLE>$theme</VARIABLE> <OPERATOR>===</OPERATOR> <TYPE>false</TYPE>)
      <VARIABLE>$theme</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$GLOBALS</VARIABLE><OPERATOR>[</OPERATOR><STRING>'LUMINOUS_THEME'</STRING><OPERATOR>]</OPERATOR>;
    
    <VARIABLE>$theme</VARIABLE> <OPERATOR>=</OPERATOR> urlencode(<FUNCTION>trim</FUNCTION>(<VARIABLE>$theme</VARIABLE>));
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>preg_match</FUNCTION>(<STRING>'<REGEX>%\.css$%<KEYWORD>i</KEYWORD></REGEX>'</STRING>, <VARIABLE>$theme</VARIABLE>))
      <VARIABLE>$theme</VARIABLE> .<OPERATOR>=</OPERATOR> <STRING>'.css'</STRING>;

    <VARIABLE>$abs_root</VARIABLE> <OPERATOR>=</OPERATOR> luminous_root();
    <VARIABLE>$lcss</VARIABLE> <OPERATOR>=</OPERATOR> file_exists(<STRING>"<VARIABLE>$abs_root</VARIABLE>/style/luminous.min.css"</STRING>)? 
      <STRING>"luminous.min.css"</STRING> : <STRING>"luminous.css"</STRING>;

    <VARIABLE>$out</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING>;
    <VARIABLE>$out</VARIABLE> .<OPERATOR>=</OPERATOR> <STRING>"&lt;link rel='stylesheet' type='text/css' href='<VARIABLE>$relative_root</VARIABLE>/style/<VARIABLE>$lcss</VARIABLE>'&gt;<ESC>\n</ESC>"</STRING>;
    <VARIABLE>$out</VARIABLE> .<OPERATOR>=</OPERATOR> <STRING>"&lt;link rel='stylesheet' type='text/css' href='<VARIABLE>$relative_root</VARIABLE>/style/<VARIABLE>$theme</VARIABLE>'&gt;<ESC>\n</ESC>"</STRING>;
    <KEYWORD>if</KEYWORD> (<VARIABLE>$javascript</VARIABLE>)
    {
      <KEYWORD>if</KEYWORD>(<VARIABLE>$jquery</VARIABLE>)
        <VARIABLE>$out</VARIABLE> .<OPERATOR>=</OPERATOR> <STRING>"&lt;script type='text/javascript' src='<VARIABLE>$relative_root</VARIABLE>/client/jquery-1.4.2.min.js'&gt;&lt;/script&gt;<ESC>\n</ESC>"</STRING>;
      <VARIABLE>$ljs</VARIABLE> <OPERATOR>=</OPERATOR> file_exists(<STRING>"<VARIABLE>$abs_root</VARIABLE>/client/luminous.min.js"</STRING>)? <STRING>"luminous.min.js"</STRING>
        : <STRING>"luminous.js"</STRING>;
      <VARIABLE>$out</VARIABLE> .<OPERATOR>=</OPERATOR> <STRING>"&lt;script type='text/javascript' src='<VARIABLE>$relative_root</VARIABLE>/client/<VARIABLE>$ljs</VARIABLE>'&gt;&lt;/script&gt;<ESC>\n</ESC>"</STRING>;
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$out</VARIABLE>;
  }
  
  
  
  
  

  
  
  <DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\ingroup</DOCTAG><DOCPROPERTY> LuminousEasyAPI </DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\brief</DOCTAG><DOCSTR> Lookup table for language codes to grammars.</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Global variable holding a LuminousGrammars language to grammar lookup </DOCCOMMENT>
<DOCCOMMENT>   * table .This is used in any call to the easy API where a language code is </DOCCOMMENT>
<DOCCOMMENT>   * specified. Add your own grammars to this using its AddGrammar method.</DOCCOMMENT>
<DOCCOMMENT>   * Anything stored in here is accessible by luminous()</DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\sa</DOCTAG><DOCSTR> LuminousGrammars</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   * <DOCTAG>\sa</DOCTAG><DOCSTR> LuminousGrammars::AddGrammar</DOCSTR></DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT>
  <KEYWORD>global</KEYWORD> <VARIABLE>$luminous_grammars</VARIABLE>;
  <VARIABLE>$luminous_grammars</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> LuminousGrammars();
  
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'as'</STRING>, <STRING>'LuminousGrammarActionscript'</STRING>,
    <STRING>'ActionScript'</STRING>, luminous_root() . <STRING>"/languages/actionscript.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'bnf'</STRING>, <STRING>'LuminousGrammarBNF'</STRING>, 
    <STRING>'Backus Naur Form'</STRING>, luminous_root() . <STRING>"/languages/bnf.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'c'</STRING>, <STRING>'cpp'</STRING>, <STRING>'h'</STRING>, <STRING>'hpp'</STRING>, <STRING>'hxx'</STRING>, <STRING>'cxx'</STRING>), 
    <STRING>'LuminousGrammarCpp'</STRING>, <STRING>'C/C++'</STRING>, luminous_root() . <STRING>"/languages/cpp_stateful.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'changelog'</STRING>, <STRING>'LuminousGrammarChangelog'</STRING>, 
    <STRING>'Changelog'</STRING>, luminous_root() . <STRING>"/languages/changelog.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>"cs"</STRING>, <STRING>"csharp"</STRING>), 
    <STRING>'LuminousGrammarCSharp'</STRING>, <STRING>'C#'</STRING>, luminous_root() . <STRING>"/languages/csharp.php"</STRING>);    
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"css"</STRING>, <STRING>'LuminousGrammarCSS'</STRING>, 
  <STRING>'CSS'</STRING>, luminous_root() . <STRING>"/languages/css.php"</STRING>);
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"diff"</STRING>, <STRING>'LuminousGrammarDiff'</STRING>, 
    <STRING>'Diff'</STRING>, luminous_root() . <STRING>"/languages/diff.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'erl'</STRING>, <STRING>'erlang'</STRING>),
    <STRING>'LuminousGrammarErlang'</STRING>, <STRING>'Erlang'</STRING>, 
    luminous_root() . <STRING>"/languages/erlang.php"</STRING>); 
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'groovy'</STRING>, <STRING>'LuminousGrammarGroovy'</STRING>,
    <STRING>'Groovy'</STRING>, luminous_root() . <STRING>"/languages/groovy.php"</STRING>, <STRING>'java'</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'haskell'</STRING>, <STRING>'hs'</STRING>), 
    <STRING>'LuminousGrammarHaskell'</STRING>, <STRING>'Haskell'</STRING>, 
    luminous_root() . <STRING>"/languages/haskell.php"</STRING>);  
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"html"</STRING>, <STRING>'LuminousGrammarJavaScriptEmbedded'</STRING>, 
    <STRING>'HTML'</STRING>, luminous_root() . <STRING>"/languages/javascript.php"</STRING>, <FUNCTION>array</FUNCTION>(<STRING>'xml'</STRING>, <STRING>'css'</STRING>));
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'go'</STRING>, <STRING>'LuminousGrammarGo'</STRING>, 
    <STRING>'Go'</STRING>, luminous_root() . <STRING>"/languages/go.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"java"</STRING>, <STRING>'LuminousGrammarJava'</STRING>,
  <STRING>'Java'</STRING>, luminous_root() . <STRING>"/languages/java.php"</STRING>);  
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"js"</STRING>, <STRING>'LuminousGrammarJavaScript'</STRING>,
    <STRING>'JavaScript'</STRING>, luminous_root() . <STRING>"/languages/javascript.php"</STRING>);  
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'latex'</STRING>, <STRING>'tex'</STRING>), <STRING>'LuminousGrammarLatex'</STRING>,         
  <STRING>'LaTeX'</STRING>, luminous_root() . <STRING>"/languages/latex.php"</STRING>);   
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'lolcode'</STRING>, <STRING>'lol'</STRING>),
    <STRING>'LuminousGrammarLolcode'</STRING>, <STRING>'LOLCODE'</STRING>,
    luminous_root() . <STRING>"/languages/lolcode.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'make'</STRING>, <STRING>'makefile'</STRING>), 
    <STRING>'LuminousGrammarMakefile'</STRING>, <STRING>'Make'</STRING>, luminous_root() . <STRING>"/languages/make.php"</STRING>,
    <STRING>'bash'</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'matlab'</STRING>, <STRING>'m'</STRING>), <STRING>'LuminousGrammarMATLAB'</STRING>,
  <STRING>'MATLAB'</STRING>, luminous_root() . <STRING>"/languages/matlab.php"</STRING>);  
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'mxml'</STRING>, <STRING>'LuminousGrammarActionscriptEmbedded'</STRING>,
    <STRING>'XML + ActionScript'</STRING>, luminous_root() . <STRING>"/languages/actionscript_xml.php"</STRING>,
    <FUNCTION>array</FUNCTION>(<STRING>'as'</STRING>, <STRING>'html'</STRING>)
  );
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'pas'</STRING>, <STRING>'pascal'</STRING>), 
    <STRING>'LuminousGrammarPascal'</STRING>, <STRING>'Pascal/Delphi'</STRING>, 
    luminous_root() . <STRING>"/languages/pascal.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"php"</STRING>, <STRING>'LuminousGrammarPHP'</STRING>, <STRING>'PHP'</STRING>,
    luminous_root() . <STRING>"/languages/php.php"</STRING>, <STRING>'html'</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'pl'</STRING>, <STRING>'perl'</STRING>), <STRING>'LuminousGrammarPerl'</STRING>,
  <STRING>'Perl'</STRING>, luminous_root() . <STRING>"/languages/perl.php"</STRING>);
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'plain'</STRING>,
    <STRING>'LuminousGrammarPlain'</STRING>, <STRING>'Plain text'</STRING>, 
    luminous_root() . <STRING>"/languages/plain.php"</STRING>);
  
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>"py"</STRING>, <STRING>'python'</STRING>), 
    <STRING>'LuminousGrammarPython'</STRING>, <STRING>'Python'</STRING>, luminous_root() . <STRING>"/languages/python.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'rails'</STRING>, <STRING>'rhtml'</STRING>), 
    <STRING>'LuminousGrammarRubyHTML'</STRING>, <STRING>'Ruby On Rails'</STRING>,
    luminous_root() . <STRING>"/languages/ruby_xml.php"</STRING>, <FUNCTION>array</FUNCTION>(<STRING>'ruby'</STRING>, <STRING>'html'</STRING>));  
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'ruby'</STRING>, <STRING>'rb'</STRING>), <STRING>'LuminousGrammarRuby'</STRING>,
    <STRING>'Ruby'</STRING>, luminous_root() . <STRING>"/languages/ruby.php"</STRING>);
    

  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'scala'</STRING>, 
    <STRING>'LuminousGrammarScala'</STRING>, <STRING>'Scala'</STRING>, luminous_root() . <STRING>"/languages/scala.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'shell'</STRING>, <STRING>'sh'</STRING>, <STRING>'bash'</STRING>), 
    <STRING>'LuminousGrammarBash'</STRING>, <STRING>'Bash'</STRING>, luminous_root() . <STRING>"/languages/bash.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"sql"</STRING>, <STRING>'LuminousGrammarSQL'</STRING>, <STRING>'SQL'</STRING>,
  luminous_root() . <STRING>"/languages/sql.php"</STRING>);
  

  
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'vim'</STRING>, <STRING>'LuminousGrammarVim'</STRING>,
  <STRING>'Vim script'</STRING>, luminous_root() . <STRING>"/languages/vim.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"vb"</STRING>, <STRING>'LuminousGrammarVisualBasic'</STRING>, 
  <STRING>'Visual Basic'</STRING>, luminous_root() . <STRING>"/languages/vb.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<FUNCTION>array</FUNCTION>(<STRING>'ws'</STRING>, <STRING>'whitespace'</STRING>), 
  <STRING>'LuminousGrammarWhitespace'</STRING>, <STRING>'Whitespace'</STRING>, luminous_root() . <STRING>"/languages/whitespace.php"</STRING>);
    
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>"xml"</STRING>, <STRING>'LuminousGrammarHTML'</STRING>, <STRING>'XML'</STRING>,
  luminous_root() . <STRING>"/languages/xml.php"</STRING>);  
  
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>AddGrammar</OO>(<STRING>'generic'</STRING>, <STRING>'LuminousGrammarGeneric'</STRING>, 
    <STRING>'Generic C-like language'</STRING>, luminous_root() . <STRING>"/languages/generic.php"</STRING>);
  
  <VARIABLE>$luminous_grammars</VARIABLE><OPERATOR>-</OPERATOR><OPERATOR>&gt;</OPERATOR><OO>SetDefaultGrammar</OO>(<STRING>'plain'</STRING>);
  
  
