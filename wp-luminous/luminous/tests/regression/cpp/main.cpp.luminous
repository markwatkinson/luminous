<COMMENT>/* This file is part of Clementine.</COMMENT>
<COMMENT>   Copyright 2010, David Sansome &lt;me@davidsansome.com&gt;</COMMENT>
<COMMENT></COMMENT>
<COMMENT>   Clementine is free software: you can redistribute it and/or modify</COMMENT>
<COMMENT>   it under the terms of the GNU General Public License as published by</COMMENT>
<COMMENT>   the Free Software Foundation, either version 3 of the License, or</COMMENT>
<COMMENT>   (at your option) any later version.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>   Clementine is distributed in the hope that it will be useful,</COMMENT>
<COMMENT>   but WITHOUT ANY WARRANTY; without even the implied warranty of</COMMENT>
<COMMENT>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</COMMENT>
<COMMENT>   GNU General Public License for more details.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>   You should have received a copy of the GNU General Public License</COMMENT>
<COMMENT>   along with Clementine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</COMMENT>
<COMMENT>*/</COMMENT>

<PREPROCESSOR>#include &lt;<STRING>QtGlobal</STRING>&gt;</PREPROCESSOR>

<PREPROCESSOR>#ifdef Q_OS_WIN32</PREPROCESSOR>
<PREPROCESSOR>#  define _WIN32_WINNT 0x0500</PREPROCESSOR>
<PREPROCESSOR>#  include &lt;<STRING>windows.h</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#  include &lt;<STRING>iostream</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#endif <COMMENT>// Q_OS_WIN32</COMMENT></PREPROCESSOR>

<PREPROCESSOR>#include <STRING>"config.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/commandlineoptions.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/database.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/encoding.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/mac_startup.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/network.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/networkproxyfactory.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/player.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/potranslator.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/song.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"core/utilities.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"engines/enginebase.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"library/directory.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"playlist/playlist.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"remote/httpserver.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"remote/zeroconf.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"smartplaylists/generator.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"ui/equalizer.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"ui/iconloader.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"ui/mainwindow.h"</STRING></PREPROCESSOR>

<PREPROCESSOR>#include <STRING>"qtsingleapplication.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#include <STRING>"qtsinglecoreapplication.h"</STRING></PREPROCESSOR>

<PREPROCESSOR>#include &lt;<STRING>QDir</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>QLibraryInfo</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>QNetworkProxyFactory</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>QSqlDatabase</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>QSqlQuery</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>QTranslator</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>QtDebug</STRING>&gt;</PREPROCESSOR>

<PREPROCESSOR>#include &lt;<STRING>glib-object.h</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>glib/gutils.h</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#include &lt;<STRING>gst/gst.h</STRING>&gt;</PREPROCESSOR>

<PREPROCESSOR>#include &lt;<STRING>echonest/Config.h</STRING>&gt;</PREPROCESSOR>

<PREPROCESSOR>#ifdef Q_OS_DARWIN</PREPROCESSOR>
  <PREPROCESSOR>#include &lt;<STRING>sys/resource.h</STRING>&gt;</PREPROCESSOR>
  <PREPROCESSOR>#include &lt;<STRING>sys/sysctl.h</STRING>&gt;</PREPROCESSOR>
<PREPROCESSOR>#endif</PREPROCESSOR>

<PREPROCESSOR>#ifdef HAVE_LIBLASTFM</PREPROCESSOR>
  <PREPROCESSOR>#include <STRING>"radio/lastfmservice.h"</STRING></PREPROCESSOR>
<PREPROCESSOR>#endif</PREPROCESSOR>

<KEYWORD>class</KEYWORD> GstEnginePipeline;

<COMMENT>// Load sqlite plugin on windows and mac.</COMMENT>
<PREPROCESSOR>#ifdef HAVE_STATIC_SQLITE</PREPROCESSOR>
<PREPROCESSOR># include &lt;<STRING>QtPlugin</STRING>&gt;</PREPROCESSOR>
  <CONSTANT>Q_IMPORT_PLUGIN</CONSTANT>(qsqlite)
<PREPROCESSOR>#endif</PREPROCESSOR>

<TYPE>void</TYPE> LoadTranslation(<KEYWORD>const</KEYWORD> QString<OPERATOR>&amp;</OPERATOR> prefix, <KEYWORD>const</KEYWORD> QString<OPERATOR>&amp;</OPERATOR> path,
                     <KEYWORD>const</KEYWORD> QString<OPERATOR>&amp;</OPERATOR> override_language <OPERATOR>=</OPERATOR> QString()) {
<PREPROCESSOR>#if QT_VERSION &lt; 0x040700</PREPROCESSOR>
  <COMMENT>// QTranslator::load will try to open and read "clementine" if it exists,</COMMENT>
  <COMMENT>// without checking if it's a file first.</COMMENT>
  <COMMENT>// This was fixed in Qt 4.7</COMMENT>
  QFileInfo maybe_clementine_directory(path <OPERATOR>+</OPERATOR> <STRING>"/clementine"</STRING>);
  <KEYWORD>if</KEYWORD> (<OBJ>maybe_clementine_directory</OBJ><OPERATOR>.</OPERATOR><OO>exists</OO>() <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>maybe_clementine_directory</OBJ><OPERATOR>.</OPERATOR><OO>isFile</OO>())
    <KEYWORD>return</KEYWORD>;
<PREPROCESSOR>#endif</PREPROCESSOR>

  QString language <OPERATOR>=</OPERATOR> <OBJ>override_language</OBJ><OPERATOR>.</OPERATOR><OO>isEmpty</OO>() <OPERATOR>?</OPERATOR>
                     <OBJ>QLocale</OBJ><OPERATOR>::</OPERATOR><OO>system</OO>()<OPERATOR>.</OPERATOR><OO>name</OO>() <OPERATOR>:</OPERATOR> override_language;

  QTranslator<OPERATOR>*</OPERATOR> t <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> PoTranslator;
  <KEYWORD>if</KEYWORD> (<OBJ>t</OBJ><OPERATOR>-&gt;</OPERATOR><OO>load</OO>(prefix <OPERATOR>+</OPERATOR> <STRING>"_"</STRING> <OPERATOR>+</OPERATOR> language, path))
    <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>installTranslator</OO>(t);
  <KEYWORD>else</KEYWORD>
    <KEYWORD>delete</KEYWORD> t;
}

<TYPE>void</TYPE> GLog(<KEYWORD>const</KEYWORD> gchar<OPERATOR>*</OPERATOR> domain,
          GLogLevelFlags level,
          <KEYWORD>const</KEYWORD> gchar<OPERATOR>*</OPERATOR> message,
          gpointer user_data) {
  qDebug() <OPERATOR>&lt;&lt;</OPERATOR> <STRING>"GLOG"</STRING> <OPERATOR>&lt;&lt;</OPERATOR> message;
}

<TYPE>int</TYPE> main(<TYPE>int</TYPE> argc, <TYPE>char</TYPE> <OPERATOR>*</OPERATOR>argv[]) {
<PREPROCESSOR>#ifdef Q_OS_DARWIN</PREPROCESSOR>
  <COMMENT>// Do Mac specific startup to get media keys working.</COMMENT>
  <COMMENT>// This must go before QApplication initialisation.</COMMENT>
  <OBJ>mac</OBJ><OPERATOR>::</OPERATOR><OO>MacMain</OO>();

  {
    <COMMENT>// Bump the soft limit for the number of file descriptors from the default of 256 to</COMMENT>
    <COMMENT>// the maximum (usually 10240).</COMMENT>
    <TYPE>struct</TYPE> rlimit limit;
    getrlimit(<CONSTANT>RLIMIT_NOFILE</CONSTANT>, <OPERATOR>&amp;</OPERATOR>limit);

    <COMMENT>// getrlimit() lies about the hard limit so we have to check sysctl.</COMMENT>
    <TYPE>int</TYPE> max_fd <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC>;
    <TYPE>size_t</TYPE> len <OPERATOR>=</OPERATOR> <KEYWORD>sizeof</KEYWORD>(max_fd);
    sysctlbyname(<STRING>"kern.maxfilesperproc"</STRING>, <OPERATOR>&amp;</OPERATOR>max_fd, <OPERATOR>&amp;</OPERATOR>len, <KEYWORD>NULL</KEYWORD>, <NUMERIC>0</NUMERIC>);

    <OBJ>limit</OBJ><OPERATOR>.</OPERATOR><OO>rlim_cur</OO> <OPERATOR>=</OPERATOR> max_fd;
    <TYPE>int</TYPE> ret <OPERATOR>=</OPERATOR> setrlimit(<CONSTANT>RLIMIT_NOFILE</CONSTANT>, <OPERATOR>&amp;</OPERATOR>limit);

    <KEYWORD>if</KEYWORD> (ret <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
      qDebug() <OPERATOR>&lt;&lt;</OPERATOR> <STRING>"Max fd:"</STRING> <OPERATOR>&lt;&lt;</OPERATOR> max_fd;
    }
  }
<PREPROCESSOR>#endif</PREPROCESSOR>

  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setApplicationName</OO>(<STRING>"Clementine"</STRING>);
  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setApplicationVersion</OO>(<CONSTANT>CLEMENTINE_VERSION_DISPLAY</CONSTANT>);
  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setOrganizationName</OO>(<STRING>"Clementine"</STRING>);
  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setOrganizationDomain</OO>(<STRING>"davidsansome.com"</STRING>);

<PREPROCESSOR>#ifdef Q_OS_DARWIN</PREPROCESSOR>
  <COMMENT>// Must happen after QCoreApplication::setOrganizationName().</COMMENT>
  <KEYWORD>if</KEYWORD> (<OBJ>mac</OBJ><OPERATOR>::</OPERATOR><OO>MigrateLegacyConfigFiles</OO>()) {
    QSqlDatabase db <OPERATOR>=</OPERATOR> <OBJ>QSqlDatabase</OBJ><OPERATOR>::</OPERATOR><OO>addDatabase</OO>(<STRING>"QSQLITE"</STRING>);
    <OBJ>db</OBJ><OPERATOR>.</OPERATOR><OO>setDatabaseName</OO>(<OBJ>Utilities</OBJ><OPERATOR>::</OPERATOR><OO>GetConfigPath</OO>(
        <OBJ>Utilities</OBJ><OPERATOR>::</OPERATOR><OO>Path_Root</OO>) <OPERATOR>+</OPERATOR> <STRING>"/"</STRING> <OPERATOR>+</OPERATOR> <OBJ>Database</OBJ><OPERATOR>::</OPERATOR><OO>kDatabaseFilename</OO>);
    <OBJ>db</OBJ><OPERATOR>.</OPERATOR><OO>open</OO>();
    QSqlQuery query(
        <STRING>"UPDATE songs SET art_manual = replace("</STRING>
        <STRING>"art_manual, '.config', 'Library/Application Support') "</STRING>
        <STRING>"WHERE art_manual LIKE '%.config%'"</STRING>, db);
    <OBJ>query</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>();
    <OBJ>db</OBJ><OPERATOR>.</OPERATOR><OO>close</OO>();
    <OBJ>QSqlDatabase</OBJ><OPERATOR>::</OPERATOR><OO>removeDatabase</OO>(<OBJ>db</OBJ><OPERATOR>.</OPERATOR><OO>connectionName</OO>());
  }
<PREPROCESSOR>#endif</PREPROCESSOR>

  <COMMENT>// This makes us show up nicely in gnome-volume-control</COMMENT>
  g_type_init();
  g_set_application_name(<OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>applicationName</OO>()<OPERATOR>.</OPERATOR><OO>toLocal8Bit</OO>());

  g_log_set_default_handler(<OPERATOR>&amp;</OPERATOR>GLog, <KEYWORD>NULL</KEYWORD>);

  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>Directory<OPERATOR>&gt;</OPERATOR>(<STRING>"Directory"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>DirectoryList<OPERATOR>&gt;</OPERATOR>(<STRING>"DirectoryList"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>Subdirectory<OPERATOR>&gt;</OPERATOR>(<STRING>"Subdirectory"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>SubdirectoryList<OPERATOR>&gt;</OPERATOR>(<STRING>"SubdirectoryList"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>SongList<OPERATOR>&gt;</OPERATOR>(<STRING>"SongList"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>PlaylistItemList<OPERATOR>&gt;</OPERATOR>(<STRING>"PlaylistItemList"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR><OBJ>Engine</OBJ><OPERATOR>::</OPERATOR><OO>State</OO><OPERATOR>&gt;</OPERATOR>(<STRING>"Engine::State"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR><OBJ>Engine</OBJ><OPERATOR>::</OPERATOR><OO>SimpleMetaBundle</OO><OPERATOR>&gt;</OPERATOR>(<STRING>"Engine::SimpleMetaBundle"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR><OBJ>Equalizer</OBJ><OPERATOR>::</OPERATOR><OO>Params</OO><OPERATOR>&gt;</OPERATOR>(<STRING>"Equalizer::Params"</STRING>);
  qRegisterMetaTypeStreamOperators<OPERATOR>&lt;</OPERATOR><OBJ>Equalizer</OBJ><OPERATOR>::</OPERATOR><OO>Params</OO><OPERATOR>&gt;</OPERATOR>(<STRING>"Equalizer::Params"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR><KEYWORD>const</KEYWORD> <TYPE>char</TYPE><OPERATOR>*&gt;</OPERATOR>(<STRING>"const char*"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>QNetworkReply<OPERATOR>*&gt;</OPERATOR>(<STRING>"QNetworkReply*"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>QNetworkReply<OPERATOR>**&gt;</OPERATOR>(<STRING>"QNetworkReply**"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR><OBJ>smart_playlists</OBJ><OPERATOR>::</OPERATOR><OO>GeneratorPtr</OO><OPERATOR>&gt;</OPERATOR>(<STRING>"smart_playlists::GeneratorPtr"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>ColumnAlignmentMap<OPERATOR>&gt;</OPERATOR>(<STRING>"ColumnAlignmentMap"</STRING>);
  qRegisterMetaTypeStreamOperators<OPERATOR>&lt;</OPERATOR>QMap<OPERATOR>&lt;</OPERATOR><TYPE>int</TYPE>, <TYPE>int</TYPE><OPERATOR>&gt;</OPERATOR> <OPERATOR>&gt;</OPERATOR>(<STRING>"ColumnAlignmentMap"</STRING>);

  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>GstBuffer<OPERATOR>*&gt;</OPERATOR>(<STRING>"GstBuffer*"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>GstElement<OPERATOR>*&gt;</OPERATOR>(<STRING>"GstElement*"</STRING>);
  qRegisterMetaType<OPERATOR>&lt;</OPERATOR>GstEnginePipeline<OPERATOR>*&gt;</OPERATOR>(<STRING>"GstEnginePipeline*"</STRING>);

<PREPROCESSOR>#ifdef HAVE_LIBLASTFM</PREPROCESSOR>
  <OBJ>lastfm</OBJ><OPERATOR>::</OPERATOR><OO>ws</OO><OPERATOR>::</OPERATOR><OO>ApiKey</OO> <OPERATOR>=</OPERATOR> <OBJ>LastFMService</OBJ><OPERATOR>::</OPERATOR><OO>kApiKey</OO>;
  <OBJ>lastfm</OBJ><OPERATOR>::</OPERATOR><OO>ws</OO><OPERATOR>::</OPERATOR><OO>SharedSecret</OO> <OPERATOR>=</OPERATOR> <OBJ>LastFMService</OBJ><OPERATOR>::</OPERATOR><OO>kSecret</OO>;
<PREPROCESSOR>#endif</PREPROCESSOR>

  CommandlineOptions options(argc, argv);

  {
    <COMMENT>// Only start a core application now so we can check if there's another</COMMENT>
    <COMMENT>// Clementine running without needing an X server.</COMMENT>
    <COMMENT>// This MUST be done before parsing the commandline options so QTextCodec</COMMENT>
    <COMMENT>// gets the right system locale for filenames.</COMMENT>
    QtSingleCoreApplication a(argc, argv);

    <COMMENT>// Parse commandline options - need to do this before starting the</COMMENT>
    <COMMENT>// full QApplication so it works without an X server</COMMENT>
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>Parse</OO>())
      <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC>;

    <KEYWORD>if</KEYWORD> (<OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>isRunning</OO>()) {
      <KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>is_empty</OO>()) {
        qDebug() <OPERATOR>&lt;&lt;</OPERATOR> <STRING>"Clementine is already running - activating existing window"</STRING>;
      }
      <KEYWORD>if</KEYWORD> (<OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>sendMessage</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>Serialize</OO>(), <NUMERIC>5000</NUMERIC>)) {
        <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC>;
      }
      <COMMENT>// Couldn't send the message so start anyway</COMMENT>
    }
  }

  <COMMENT>// Detect technically invalid usage of non-ASCII in ID3v1 tags.</COMMENT>
  UniversalEncodingHandler handler;
  <OBJ>TagLib</OBJ><OPERATOR>::</OPERATOR><OO>ID3v1</OO><OPERATOR>::</OPERATOR><OO>Tag</OO><OPERATOR>::</OPERATOR><OO>setStringHandler</OO>(<OPERATOR>&amp;</OPERATOR>handler);

  QtSingleApplication a(argc, argv);
<PREPROCESSOR>#ifdef Q_OS_DARWIN</PREPROCESSOR>
  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setLibraryPaths</OO>(
      QStringList() <OPERATOR>&lt;&lt;</OPERATOR> <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>applicationDirPath</OO>() <OPERATOR>+</OPERATOR> <STRING>"/../PlugIns"</STRING>);
<PREPROCESSOR>#endif</PREPROCESSOR>

  <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>setQuitOnLastWindowClosed</OO>(<KEYWORD>false</KEYWORD>);

  <COMMENT>// Do this check again because another instance might have started by now</COMMENT>
  <KEYWORD>if</KEYWORD> (<OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>isRunning</OO>() <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>sendMessage</OO>(<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>Serialize</OO>(), <NUMERIC>5000</NUMERIC>)) {
    <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC>;
  }

<PREPROCESSOR>#ifndef Q_OS_DARWIN</PREPROCESSOR>
  <COMMENT>// Gnome on Ubuntu has menu icons disabled by default.  I think that's a bad</COMMENT>
  <COMMENT>// idea, and makes some menus in Clementine look confusing.</COMMENT>
  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setAttribute</OO>(<OBJ>Qt</OBJ><OPERATOR>::</OPERATOR><OO>AA_DontShowIconsInMenus</OO>, <KEYWORD>false</KEYWORD>);
<PREPROCESSOR>#else</PREPROCESSOR>
  <OBJ>QCoreApplication</OBJ><OPERATOR>::</OPERATOR><OO>setAttribute</OO>(<OBJ>Qt</OBJ><OPERATOR>::</OPERATOR><OO>AA_DontShowIconsInMenus</OO>, <KEYWORD>true</KEYWORD>);
<PREPROCESSOR>#endif</PREPROCESSOR>

  <COMMENT>// Resources</COMMENT>
  <CONSTANT>Q_INIT_RESOURCE</CONSTANT>(data);
  <CONSTANT>Q_INIT_RESOURCE</CONSTANT>(translations);

  <COMMENT>// Has the user forced a different language?</COMMENT>
  QString language <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>language</OO>();
  <KEYWORD>if</KEYWORD> (<OBJ>language</OBJ><OPERATOR>.</OPERATOR><OO>isEmpty</OO>()) {
    QSettings s;
    <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>beginGroup</OO>(<STRING>"General"</STRING>);
    language <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>value</OO>(<STRING>"language"</STRING>)<OPERATOR>.</OPERATOR><OO>toString</OO>();
  }

  <COMMENT>// Translations</COMMENT>
  LoadTranslation(<STRING>"qt"</STRING>, <OBJ>QLibraryInfo</OBJ><OPERATOR>::</OPERATOR><OO>location</OO>(<OBJ>QLibraryInfo</OBJ><OPERATOR>::</OPERATOR><OO>TranslationsPath</OO>), language);
  LoadTranslation(<STRING>"clementine"</STRING>, <STRING>":/translations"</STRING>, language);
  LoadTranslation(<STRING>"clementine"</STRING>, <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>applicationDirPath</OO>(), language);
  LoadTranslation(<STRING>"clementine"</STRING>, <OBJ>QDir</OBJ><OPERATOR>::</OPERATOR><OO>currentPath</OO>(), language);

  <COMMENT>// Icons</COMMENT>
  <OBJ>IconLoader</OBJ><OPERATOR>::</OPERATOR><OO>Init</OO>();

  <OBJ>Echonest</OBJ><OPERATOR>::</OPERATOR><OO>Config</OO><OPERATOR>::</OPERATOR><OO>instance</OO>()<OPERATOR>-&gt;</OPERATOR><OO>setAPIKey</OO>(<STRING>"DFLFLJBUF4EGTXHIG"</STRING>);
  <OBJ>Echonest</OBJ><OPERATOR>::</OPERATOR><OO>Config</OO><OPERATOR>::</OPERATOR><OO>instance</OO>()<OPERATOR>-&gt;</OPERATOR><OO>setNetworkAccessManager</OO>(<KEYWORD>new</KEYWORD> NetworkAccessManager);

  <COMMENT>// Network proxy</COMMENT>
  <OBJ>QNetworkProxyFactory</OBJ><OPERATOR>::</OPERATOR><OO>setApplicationProxyFactory</OO>(
      <OBJ>NetworkProxyFactory</OBJ><OPERATOR>::</OPERATOR><OO>Instance</OO>());

  <COMMENT>// Seed the random number generator</COMMENT>
  <FUNCTION>srand</FUNCTION>(<FUNCTION>time</FUNCTION>(<KEYWORD>NULL</KEYWORD>));

  Zeroconf<OPERATOR>*</OPERATOR> zeroconf <OPERATOR>=</OPERATOR> <OBJ>Zeroconf</OBJ><OPERATOR>::</OPERATOR><OO>GetZeroconf</OO>();
  <KEYWORD>if</KEYWORD> (zeroconf) {
    HttpServer<OPERATOR>*</OPERATOR> server <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> HttpServer;
    <OBJ>server</OBJ><OPERATOR>-&gt;</OPERATOR><OO>Listen</OO>(<OBJ>QHostAddress</OBJ><OPERATOR>::</OPERATOR><OO>Any</OO>, <NUMERIC>12345</NUMERIC>);

    <OBJ>zeroconf</OBJ><OPERATOR>-&gt;</OPERATOR><OO>Publish</OO>(<STRING>"local"</STRING>, <STRING>"_clementine._tcp"</STRING>, <STRING>"Clementine"</STRING>, <NUMERIC>12345</NUMERIC>);
  }

  <COMMENT>// Window</COMMENT>
  MainWindow w;

  <OBJ>QObject</OBJ><OPERATOR>::</OPERATOR><OO>connect</OO>(<OPERATOR>&amp;</OPERATOR>a, <KEYWORD>SIGNAL</KEYWORD>(messageReceived(QByteArray)), <OPERATOR>&amp;</OPERATOR>w, <KEYWORD>SLOT</KEYWORD>(CommandlineOptionsReceived(QByteArray)));
  <OBJ>w</OBJ><OPERATOR>.</OPERATOR><OO>CommandlineOptionsReceived</OO>(options);

  <KEYWORD>return</KEYWORD> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>();
}
