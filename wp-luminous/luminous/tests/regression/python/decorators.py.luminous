<COMMENT># You create the function you will use as a decorator. And stick a decorator on it :-)</COMMENT>
<COMMENT># Donc forget, the signature is "decorator(func, *args, **kwargs)"</COMMENT>
<TYPE>@decorator_with_args</TYPE> 
<KEYWORD>def</KEYWORD> <USER_FUNCTION>decorated_decorator</USER_FUNCTION><OPERATOR>(</OPERATOR>func<OPERATOR>,</OPERATOR> <OPERATOR>*</OPERATOR>args<OPERATOR>,</OPERATOR> <OPERATOR>**</OPERATOR>kwargs<OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR> 
    <KEYWORD>def</KEYWORD> <USER_FUNCTION>wrapper</USER_FUNCTION><OPERATOR>(</OPERATOR>function_arg1<OPERATOR>,</OPERATOR> function_arg2<OPERATOR>)</OPERATOR> <OPERATOR>:</OPERATOR>
        <KEYWORD>print</KEYWORD> <STRING>"Decorated with"</STRING><OPERATOR>,</OPERATOR> args<OPERATOR>,</OPERATOR> kwargs
        <KEYWORD>return</KEYWORD> func<OPERATOR>(</OPERATOR>function_arg1<OPERATOR>,</OPERATOR> function_arg2<OPERATOR>)</OPERATOR>
    <KEYWORD>return</KEYWORD> <FUNCTION>wrapper</FUNCTION>

<COMMENT># Then you decorate the functions you wish with your brand new decorated decorator.</COMMENT>

<TYPE>@decorated_decorator</TYPE><OPERATOR>(</OPERATOR><NUMERIC>42</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>404</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1024</NUMERIC><OPERATOR>)</OPERATOR>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>decorated_function</USER_FUNCTION><OPERATOR>(</OPERATOR>function_arg1<OPERATOR>,</OPERATOR> function_arg2<OPERATOR>)</OPERATOR> <OPERATOR>:</OPERATOR>
    <KEYWORD>print</KEYWORD> <STRING>"Hello"</STRING><OPERATOR>,</OPERATOR> function_arg1<OPERATOR>,</OPERATOR> function_arg2

<FUNCTION>decorated_function</FUNCTION><OPERATOR>(</OPERATOR><STRING>"Universe and"</STRING><OPERATOR>,</OPERATOR> <STRING>"everything"</STRING><OPERATOR>)</OPERATOR>
<COMMENT>#outputs:</COMMENT>
<COMMENT>#Decorated with (42, 404, 1024) {}</COMMENT>
<COMMENT>#Hello Universe and everything</COMMENT>

<COMMENT># Whoooot ! </COMMENT>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>bar</USER_FUNCTION><OPERATOR>(</OPERATOR>func<OPERATOR>)</OPERATOR> <OPERATOR>:</OPERATOR>
    <COMMENT># We say that "wrapper", is wrapping "func"</COMMENT>
    <COMMENT># and the magic begins</COMMENT>
    <TYPE>@functools.wraps</TYPE><OPERATOR>(</OPERATOR>func<OPERATOR>)</OPERATOR>
    <KEYWORD>def</KEYWORD> <USER_FUNCTION>wrapper</USER_FUNCTION><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR> <OPERATOR>:</OPERATOR>
        <KEYWORD>print</KEYWORD> <STRING>"bar"</STRING>
        <KEYWORD>return</KEYWORD> func<OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR>
    <KEYWORD>return</KEYWORD> <FUNCTION>wrapper</FUNCTION>

<TYPE>@bar</TYPE>
<KEYWORD>def</KEYWORD> <USER_FUNCTION>foo</USER_FUNCTION><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR> <OPERATOR>:</OPERATOR>
    <KEYWORD>print</KEYWORD> <STRING>"foo"</STRING>

<KEYWORD>print</KEYWORD> <OBJ>foo</OBJ><OPERATOR>.</OPERATOR><OO>__name__</OO>
<COMMENT>#outputs: foo</COMMENT>