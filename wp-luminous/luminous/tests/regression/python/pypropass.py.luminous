<COMMENT>#!/usr/bin/env python</COMMENT>

<KEYWORD>import</KEYWORD> <USER_FUNCTION>sys</USER_FUNCTION>

<KEYWORD>from</KEYWORD> markov <KEYWORD>import</KEYWORD> <USER_FUNCTION>Markov</USER_FUNCTION>
<KEYWORD>from</KEYWORD> generator <KEYWORD>import</KEYWORD> <USER_FUNCTION>PasswordGenerator</USER_FUNCTION>
<KEYWORD>from</KEYWORD> trainer <KEYWORD>import</KEYWORD> <USER_FUNCTION>MarkovTrainer</USER_FUNCTION>

ui_data <OPERATOR>=</OPERATOR> <OPERATOR>{</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>:</OPERATOR><VALUE>None</VALUE><OPERATOR>}</OPERATOR>


<KEYWORD>def</KEYWORD> <USER_FUNCTION>print_usage</USER_FUNCTION><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
  <KEYWORD>print</KEYWORD> <STRING>"""</STRING>
<STRING>Usage: {0} [OPTIONS] [LENGTH]</STRING>
<STRING>  </STRING>
<STRING>Options:</STRING>
<STRING>  </STRING>
<STRING>  </STRING>
<STRING>  --dont-mangle </STRING>
<STRING>                Doesn't mangle the password at all (equivalent to </STRING>
<STRING>                  --dont-mangle-case --dont-mangle-chars --dont-mangle-punc)</STRING>
<STRING>  --dont-mangle-case</STRING>
<STRING>                Doesn't mangle the case of the password                  </STRING>
<STRING>  --dont-mangle-chars</STRING>
<STRING>                Doesn't mangle the characters of the password (i.e. l will    </STRING>
<STRING>                  not be converted to 1, e will not be converted to 3, etc)</STRING>
<STRING>  --dont-mangle-punc</STRING>
<STRING>                Doesn't mangle the punctuation of the password (i.e. all </STRING>
<STRING>                  spaces will be preserved as spaces)</STRING>
<STRING>                  </STRING>
<STRING>  -f</STRING>
<STRING>  --fresh       Does not load any previously saved training data. Use in </STRING>
<STRING>                combination with -l and/or -r</STRING>
<STRING>  </STRING>
<STRING>  -l PATH PATH2 ... @</STRING>
<STRING>  --local-train PATH PATH2 ... @</STRING>
<STRING>                The file(s) in the given path are used to train the model.</STRING>
<STRING>                PATH may be either a single file or a directory. Directories</STRING>
<STRING>                are not scanned recursively. Terminate this list with an @</STRING>
<STRING>                                </STRING>
<STRING>  -m password,</STRING>
<STRING>  --mangle password</STRING>
<STRING>                Mangles the given password, does not generate a new one</STRING>
<STRING>  -n n,</STRING>
<STRING>  --number n    Number of passwords to generate. Each will be printed on an </STRING>
<STRING>                individual line</STRING>
<STRING>                </STRING>
<STRING>  -r n</STRING>
<STRING>  --remote-train n</STRING>
<STRING>                Enables remote training. Random articles are fetched from </STRING>
<STRING>                Wikipedia. N is the number of articles to fetch to use as the </STRING>
<STRING>                training data. Note that for reasons of etiquette, there is</STRING>
<STRING>                a pause of 1 second between requesting pages.</STRING>
<STRING>  -s,</STRING>
<STRING>  --save        Saves the training data. This is a potential security risk as</STRING>
<STRING>                someone with access to it would be able to drastically reduce</STRING>
<STRING>                the entropy of the password. But it means future runs can run</STRING>
<STRING>                without needing to re-train.                </STRING>
<STRING></STRING>
<STRING>  -v            Be verbose</STRING>
<STRING>  </STRING>
<STRING>                </STRING>
<STRING>  LENGTH:       Approximate length of resulting password in characters. </STRING>
<STRING>                Default:20</STRING>
<STRING>                </STRING>
<STRING>                </STRING>
<STRING>  """</STRING><OPERATOR>.</OPERATOR><OO>format</OO><OPERATOR>(</OPERATOR> <OPERATOR>(</OPERATOR><OBJ>sys</OBJ><OPERATOR>.</OPERATOR><OO>argv</OO><OPERATOR>[</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR> <OPERATOR>)</OPERATOR>
  
  
<KEYWORD>def</KEYWORD> <USER_FUNCTION>verbose</USER_FUNCTION><OPERATOR>(</OPERATOR>string<OPERATOR>,</OPERATOR> level<OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
  <KEYWORD>if</KEYWORD> level<OPERATOR>:</OPERATOR>
    <KEYWORD>print</KEYWORD> string


<KEYWORD>def</KEYWORD> <USER_FUNCTION>main_</USER_FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
  
  <KEYWORD>if</KEYWORD> ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>is</KEYWORD> <KEYWORD>not</KEYWORD> <VALUE>None</VALUE><OPERATOR>:</OPERATOR>
    ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR><OPERATOR>(</OPERATOR><STRING>''</STRING><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>)</OPERATOR>
    
  <KEYWORD>if</KEYWORD> <STRING>'-h'</STRING> <KEYWORD>in</KEYWORD> argv <KEYWORD>or</KEYWORD> <STRING>'--help'</STRING> <KEYWORD>in</KEYWORD> argv<OPERATOR>:</OPERATOR>
    <FUNCTION>print_usage</FUNCTION><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR>
    <OBJ>sys</OBJ><OPERATOR>.</OPERATOR><OO>exit</OO><OPERATOR>(</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>)</OPERATOR>
    
  opts <OPERATOR>=</OPERATOR> <OPERATOR>{</OPERATOR>
      <STRING>'length'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR>
      <STRING>'save'</STRING><OPERATOR>:</OPERATOR> <VALUE>False</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'local'</STRING><OPERATOR>:</OPERATOR><OPERATOR>[</OPERATOR><OPERATOR>]</OPERATOR><OPERATOR>,</OPERATOR>
      <STRING>'remote'</STRING><OPERATOR>:</OPERATOR><VALUE>False</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'mangle'</STRING> <OPERATOR>:</OPERATOR> <VALUE>True</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'mangle-case'</STRING> <OPERATOR>:</OPERATOR> <VALUE>True</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'mangle-chars'</STRING><OPERATOR>:</OPERATOR> <VALUE>True</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'mangle-punc'</STRING><OPERATOR>:</OPERATOR> <VALUE>True</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'num'</STRING><OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
      <STRING>'to_mangle'</STRING><OPERATOR>:</OPERATOR><VALUE>False</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'fresh'</STRING><OPERATOR>:</OPERATOR> <VALUE>False</VALUE><OPERATOR>,</OPERATOR>
      <STRING>'verbose'</STRING><OPERATOR>:</OPERATOR><NUMERIC>0</NUMERIC>

    <OPERATOR>}</OPERATOR>
  i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC>
  
  <KEYWORD>while</KEYWORD> i <OPERATOR>&lt;</OPERATOR> <FUNCTION>len</FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
    a <OPERATOR>=</OPERATOR> argv<OPERATOR>[</OPERATOR>i<OPERATOR>]</OPERATOR>
    
    <KEYWORD>if</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--save'</STRING> <KEYWORD>or</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-s'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'save'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VALUE>True</VALUE>

    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--dont-mangle'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'mangle'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VALUE>False</VALUE>
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--dont-mangle-case'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'mangle-case'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VALUE>False</VALUE>
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--dont-mangle-chars'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'mangle-chars'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VALUE>False</VALUE>
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--dont-mangle-punc'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'mangle-punc'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VALUE>False</VALUE>
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-n'</STRING> <KEYWORD>or</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--number'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'num'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>[</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>
      i<OPERATOR>+=</OPERATOR><NUMERIC>1</NUMERIC>
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-r'</STRING> <KEYWORD>or</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--remote-train'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'remote'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>[</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>
      i<OPERATOR>+=</OPERATOR><NUMERIC>1</NUMERIC>
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-l'</STRING> <KEYWORD>or</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--local-train'</STRING><OPERATOR>:</OPERATOR>
      
      <KEYWORD>while</KEYWORD> i <OPERATOR>&lt;</OPERATOR> <FUNCTION>len</FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>)</OPERATOR><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>:</OPERATOR>        
        <KEYWORD>if</KEYWORD> argv<OPERATOR>[</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR><OPERATOR>.</OPERATOR><OO>startswith</OO><OPERATOR>(</OPERATOR><STRING>'-'</STRING><OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
          <KEYWORD>break</KEYWORD>
        <KEYWORD>if</KEYWORD> argv<OPERATOR>[</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR> <OPERATOR>==</OPERATOR> <STRING>'@'</STRING><OPERATOR>:</OPERATOR>
          i<OPERATOR>+=</OPERATOR><NUMERIC>1</NUMERIC> 
          <KEYWORD>break</KEYWORD>
        opts<OPERATOR>[</OPERATOR><STRING>'local'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>+=</OPERATOR> <OPERATOR>[</OPERATOR>argv<OPERATOR>[</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR><OPERATOR>]</OPERATOR>
        i<OPERATOR>+=</OPERATOR><NUMERIC>1</NUMERIC>
      
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-m'</STRING> <KEYWORD>or</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--mangle'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'to_mangle'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> argv<OPERATOR>[</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>]</OPERATOR>
      
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-f'</STRING> <KEYWORD>or</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'--fresh'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'fresh'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <VALUE>True</VALUE>
      
    <KEYWORD>elif</KEYWORD> a <OPERATOR>==</OPERATOR> <STRING>'-v'</STRING><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'verbose'</STRING><OPERATOR>]</OPERATOR><OPERATOR>+=</OPERATOR><NUMERIC>1</NUMERIC>
      
    <KEYWORD>else</KEYWORD><OPERATOR>:</OPERATOR>
      opts<OPERATOR>[</OPERATOR><STRING>'length'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>a<OPERATOR>)</OPERATOR>
    i<OPERATOR>+=</OPERATOR><NUMERIC>1</NUMERIC>
  
  opts<OPERATOR>[</OPERATOR><STRING>'length'</STRING><OPERATOR>]</OPERATOR> <OPERATOR>=</OPERATOR> <FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'length'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>

  m <OPERATOR>=</OPERATOR> <VALUE>None</VALUE>
  trainer <OPERATOR>=</OPERATOR> <TYPE>MarkovTrainer</TYPE><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR>
  <KEYWORD>if</KEYWORD> opts<OPERATOR>[</OPERATOR><STRING>'fresh'</STRING><OPERATOR>]</OPERATOR><OPERATOR>:</OPERATOR>
    <FUNCTION>verbose</FUNCTION><OPERATOR>(</OPERATOR><STRING>'Fresh load -- no previous data restored'</STRING><OPERATOR>,</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'verbose'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>
  <KEYWORD>else</KEYWORD><OPERATOR>:</OPERATOR>
    m <OPERATOR>=</OPERATOR> <OBJ>trainer</OBJ><OPERATOR>.</OPERATOR><OO>load_state</OO><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR>
    
  <KEYWORD>if</KEYWORD> m <KEYWORD>is</KEYWORD> <VALUE>None</VALUE><OPERATOR>:</OPERATOR>  
    m <OPERATOR>=</OPERATOR> <TYPE>Markov</TYPE><OPERATOR>(</OPERATOR><OPERATOR>)</OPERATOR>
    

  <KEYWORD>if</KEYWORD> opts<OPERATOR>[</OPERATOR><STRING>'remote'</STRING><OPERATOR>]</OPERATOR><OPERATOR>:</OPERATOR>
    <FUNCTION>verbose</FUNCTION><OPERATOR>(</OPERATOR><STRING>'Training remotely'</STRING><OPERATOR>,</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'verbose'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>
    <KEYWORD>for</KEYWORD> x <KEYWORD>in</KEYWORD> <FUNCTION>xrange</FUNCTION><OPERATOR>(</OPERATOR><FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'remote'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
      <KEYWORD>if</KEYWORD> ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>is</KEYWORD> <KEYWORD>not</KEYWORD> <VALUE>None</VALUE><OPERATOR>:</OPERATOR>
        ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR><OPERATOR>(</OPERATOR><STRING>'Training remotely'</STRING><OPERATOR>,</OPERATOR> <OPERATOR>(</OPERATOR>x<OPERATOR>+</OPERATOR><NUMERIC>1.0</NUMERIC><OPERATOR>)</OPERATOR>/<FUNCTION>float</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'remote'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>)</OPERATOR>
      m <OPERATOR>=</OPERATOR> <OBJ>trainer</OBJ><OPERATOR>.</OPERATOR><OO>train_remotely</OO><OPERATOR>(</OPERATOR>m<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>)</OPERATOR>
  
    
  <KEYWORD>if</KEYWORD> opts<OPERATOR>[</OPERATOR><STRING>'local'</STRING><OPERATOR>]</OPERATOR><OPERATOR>:</OPERATOR>
    <KEYWORD>for</KEYWORD> i<OPERATOR>,</OPERATOR> path <KEYWORD>in</KEYWORD> <FUNCTION>enumerate</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'local'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
      <FUNCTION>verbose</FUNCTION><OPERATOR>(</OPERATOR><STRING>'Training locally: {0}'</STRING><OPERATOR>.</OPERATOR><OO>format</OO><OPERATOR>(</OPERATOR>path<OPERATOR>)</OPERATOR><OPERATOR>,</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'verbose'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>
      <KEYWORD>if</KEYWORD> ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>is</KEYWORD> <KEYWORD>not</KEYWORD> <VALUE>None</VALUE><OPERATOR>:</OPERATOR>
        ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR><OPERATOR>(</OPERATOR><STRING>'Training locally'</STRING><OPERATOR>,</OPERATOR> <OPERATOR>(</OPERATOR>i<OPERATOR>+</OPERATOR><NUMERIC>1.0</NUMERIC><OPERATOR>)</OPERATOR>/<FUNCTION>len</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'local'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>)</OPERATOR>
      m <OPERATOR>=</OPERATOR> <OBJ>trainer</OBJ><OPERATOR>.</OPERATOR><OO>train_locally</OO><OPERATOR>(</OPERATOR>m<OPERATOR>,</OPERATOR> path<OPERATOR>)</OPERATOR>
      
      
  <KEYWORD>if</KEYWORD> opts<OPERATOR>[</OPERATOR><STRING>'save'</STRING><OPERATOR>]</OPERATOR><OPERATOR>:</OPERATOR>
    <OBJ>trainer</OBJ><OPERATOR>.</OPERATOR><OO>save_state</OO><OPERATOR>(</OPERATOR>m<OPERATOR>)</OPERATOR>
  
  <KEYWORD>for</KEYWORD> x <KEYWORD>in</KEYWORD> <FUNCTION>xrange</FUNCTION><OPERATOR>(</OPERATOR><FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'num'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
    pg <OPERATOR>=</OPERATOR> <TYPE>PasswordGenerator</TYPE><OPERATOR>(</OPERATOR>m<OPERATOR>)</OPERATOR>  
    <OBJ>pg</OBJ><OPERATOR>.</OPERATOR><OO>mangle_punc</OO> <OPERATOR>=</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'mangle-punc'</STRING><OPERATOR>]</OPERATOR>
    <OBJ>pg</OBJ><OPERATOR>.</OPERATOR><OO>mangle_case</OO> <OPERATOR>=</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'mangle-case'</STRING><OPERATOR>]</OPERATOR>
    <OBJ>pg</OBJ><OPERATOR>.</OPERATOR><OO>mangle_chars</OO> <OPERATOR>=</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'mangle-chars'</STRING><OPERATOR>]</OPERATOR>
    
    <KEYWORD>if</KEYWORD> ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>is</KEYWORD> <KEYWORD>not</KEYWORD> <VALUE>None</VALUE><OPERATOR>:</OPERATOR>
      ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR><OPERATOR>(</OPERATOR><STRING>'Generating passwords'</STRING><OPERATOR>,</OPERATOR> <OPERATOR>(</OPERATOR>x<OPERATOR>+</OPERATOR><NUMERIC>1.0</NUMERIC><OPERATOR>)</OPERATOR>/<FUNCTION>int</FUNCTION><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'num'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR><OPERATOR>)</OPERATOR>

    
    phrase <OPERATOR>=</OPERATOR> opts<OPERATOR>[</OPERATOR><STRING>'to_mangle'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>if</KEYWORD> opts<OPERATOR>[</OPERATOR><STRING>'to_mangle'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>is</KEYWORD> <KEYWORD>not</KEYWORD> <VALUE>False</VALUE> <KEYWORD>else</KEYWORD> <OBJ>pg</OBJ><OPERATOR>.</OPERATOR><OO>generate_base_phrase</OO><OPERATOR>(</OPERATOR>opts<OPERATOR>[</OPERATOR><STRING>'length'</STRING><OPERATOR>]</OPERATOR><OPERATOR>)</OPERATOR>
    
    <KEYWORD>if</KEYWORD> opts<OPERATOR>[</OPERATOR><STRING>'mangle'</STRING><OPERATOR>]</OPERATOR><OPERATOR>:</OPERATOR>
      phrase <OPERATOR>=</OPERATOR> <OBJ>pg</OBJ><OPERATOR>.</OPERATOR><OO>mangle</OO><OPERATOR>(</OPERATOR>phrase<OPERATOR>)</OPERATOR>
    <KEYWORD>yield</KEYWORD> phrase
  <KEYWORD>if</KEYWORD> ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR> <KEYWORD>is</KEYWORD> <KEYWORD>not</KEYWORD> <VALUE>None</VALUE><OPERATOR>:</OPERATOR>
    ui_data<OPERATOR>[</OPERATOR><STRING>'progress_cb'</STRING><OPERATOR>]</OPERATOR><OPERATOR>(</OPERATOR><STRING>'Done'</STRING><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>)</OPERATOR>
 
<KEYWORD>def</KEYWORD> <USER_FUNCTION>main</USER_FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
  
  <KEYWORD>for</KEYWORD> out <KEYWORD>in</KEYWORD> <FUNCTION>main_</FUNCTION><OPERATOR>(</OPERATOR>argv<OPERATOR>)</OPERATOR><OPERATOR>:</OPERATOR>
    <KEYWORD>print</KEYWORD> out

<KEYWORD>if</KEYWORD> __name__ <OPERATOR>==</OPERATOR> <STRING>'__main__'</STRING><OPERATOR>:</OPERATOR>
  <FUNCTION>main</FUNCTION><OPERATOR>(</OPERATOR><OBJ>sys</OBJ><OPERATOR>.</OPERATOR><OO>argv</OO><OPERATOR>)</OPERATOR>