<KEYWORD>package</KEYWORD> <OBJ>free</OBJ>.<OO>cafekiwi</OO>.<OO>gotapi</OO>;
<KEYWORD>import</KEYWORD> <OBJ>groovy</OBJ>.<OO>xml</OO>.<OO>MarkupBuilder</OO>
<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>* <DOCTAG>@author</DOCTAG> Marc DEXET</DOCCOMMENT>
<DOCCOMMENT>**/</DOCCOMMENT>
<KEYWORD>class</KEYWORD> XmlGotApiGenerator {


        <KEYWORD>static</KEYWORD> <TYPE>void</TYPE> main(args) {
          <KEYWORD>def</KEYWORD> writer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>FileWriter</TYPE>( <KEYWORD>new</KEYWORD> <TYPE>File</TYPE>(<STRING>'gotapi.xml'</STRING>))
          <KEYWORD>def</KEYWORD> xml <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> MarkupBuilder(writer)
          <KEYWORD>def</KEYWORD> pages <OPERATOR>=</OPERATOR> []

          <KEYWORD>def</KEYWORD> apidocRoot <OPERATOR>=</OPERATOR> <STRING>'http://groovy.codehaus.org/api'</STRING>
          <KEYWORD>def</KEYWORD> parser <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> JavaDocParser();

          <KEYWORD>def</KEYWORD> methodNameFilter  <OPERATOR>=</OPERATOR> {
                        anchor <OPERATOR>-&gt;</OPERATOR>
                        <KEYWORD>def</KEYWORD> name <OPERATOR>=</OPERATOR> <OBJ>anchor</OBJ>.<STRING>'@name'</STRING>
                        name <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>name</OBJ>.<OO>indexOf</OO>(<STRING>'('</STRING>) <OPERATOR>&gt;=</OPERATOR><NUMERIC>0</NUMERIC>
          }


          <KEYWORD>def</KEYWORD> packageFilter     <OPERATOR>=</OPERATOR> {
                          anchor <OPERATOR>-&gt;</OPERATOR>
                          <KEYWORD>def</KEYWORD> url <OPERATOR>=</OPERATOR> <OBJ>anchor</OBJ>.<STRING>'@href'</STRING>
                          url <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD>  <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>url</OBJ>.<OO>endsWith</OO>( <STRING>"/package-frame.html"</STRING>)
          }

          <KEYWORD>def</KEYWORD> classFilter <OPERATOR>=</OPERATOR>  {
                          anchor <OPERATOR>-&gt;</OPERATOR>
                          <KEYWORD>def</KEYWORD> url <OPERATOR>=</OPERATOR> <OBJ>anchor</OBJ>.<STRING>'@href'</STRING>
                          url <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR> <OBJ>url</OBJ>.<OO>contains</OO> (<STRING>'/'</STRING>)
          }

          <KEYWORD>def</KEYWORD> parseAndGet <OPERATOR>=</OPERATOR> {
                          url, filter <OPERATOR>-&gt;</OPERATOR>
                          <OBJ>parser</OBJ>.<OO>parse</OO>( url ).depthFirst().<OBJ>A</OBJ>.<OO>findAll</OO>( filter )
          }

         parseAndGet(<STRING>"$apidocRoot/overview-frame.html"</STRING>, packageFilter).each {

                  <KEYWORD>def</KEYWORD> packBaseURL <OPERATOR>=</OPERATOR> <OBJ>it</OBJ>.<STRING>'@href'</STRING> <OPERATOR>-</OPERATOR> <STRING>"/package-frame.html"</STRING>
                  <KEYWORD>def</KEYWORD> packPage <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Page(      title<OPERATOR>:</OPERATOR> <OBJ>packBaseURL</OBJ>.<OO>replace</OO>(<STRING>'/'</STRING>, <STRING>'.'</STRING>) ,
                                                                        type<OPERATOR>:</OPERATOR> <STRING>'package'</STRING>,
                                                                        url<OPERATOR>:</OPERATOR> <STRING>"</STRING><DELIMITER>${</DELIMITER><INTERPOLATION>apidocRoot</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>/</STRING><DELIMITER>${</DELIMITER><INTERPOLATION><OBJ>it</OBJ>.<STRING>'@href'</STRING></INTERPOLATION><DELIMITER>}</DELIMITER><STRING>"</STRING>
                                                                        );

                  pages <OPERATOR>&lt;&lt;</OPERATOR> packPage
                  <KEYWORD>println</KEYWORD> <STRING>"PackPAGE </STRING><DELIMITER>${</DELIMITER><INTERPOLATION>packPage</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>"</STRING>

                  parseAndGet( <OBJ>packPage</OBJ>.<OO>url</OO>, classFilter).each {

                          <KEYWORD>def</KEYWORD> url <OPERATOR>=</OPERATOR> <OBJ>it</OBJ>.<STRING>'@href'</STRING>
                          <KEYWORD>def</KEYWORD> fullUrl <OPERATOR>=</OPERATOR> <STRING>"</STRING><DELIMITER>${</DELIMITER><INTERPOLATION>apidocRoot</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>/</STRING><DELIMITER>${</DELIMITER><INTERPOLATION>packBaseURL</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>/</STRING><DELIMITER>${</DELIMITER><INTERPOLATION>url</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>"</STRING>
                          <KEYWORD>def</KEYWORD> fqn <OPERATOR>=</OPERATOR> <OBJ>url</OBJ>.<OO>replace</OO>(<STRING>'/'</STRING>, <STRING>'.'</STRING>)<OPERATOR>-</OPERATOR> <STRING>".html"</STRING>
                          <KEYWORD>def</KEYWORD> parts <OPERATOR>=</OPERATOR> <OBJ>fqn</OBJ>.<OO>tokenize</OO>(<STRING>'.'</STRING>)

                          <KEYWORD>def</KEYWORD> classPage <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Page( title<OPERATOR>:</OPERATOR> fqn ,
                                                                                type<OPERATOR>:</OPERATOR> <STRING>'class'</STRING>,
                                                                                url<OPERATOR>:</OPERATOR> fullUrl
                                                                                );

                          <OBJ>packPage</OBJ>.<OO>children</OO> <OPERATOR>&lt;&lt;</OPERATOR> classPage

                          <KEYWORD>println</KEYWORD> <STRING>"Class PAGE: </STRING><DELIMITER>${</DELIMITER><INTERPOLATION>classPage</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>"</STRING>

                          parseAndGet( <OBJ>classPage</OBJ>.<OO>url</OO>, methodNameFilter ).each {
                                  <KEYWORD>def</KEYWORD> methodeName <OPERATOR>=</OPERATOR> <OBJ>it</OBJ>.<STRING>'@name'</STRING>
                                  <KEYWORD>def</KEYWORD> methodPage <OPERATOR>=</OPERATOR>  <KEYWORD>new</KEYWORD> Page(   title<OPERATOR>:</OPERATOR> methodeName ,
                                                                                                type<OPERATOR>:</OPERATOR> <STRING>'method'</STRING>,
                                                                                                url<OPERATOR>:</OPERATOR> <OBJ>classPage</OBJ>.<OO>url</OO><OPERATOR>+</OPERATOR><STRING>'#'</STRING><OPERATOR>+</OPERATOR>methodeName);
                                  <OBJ>classPage</OBJ>.<OO>children</OO> <OPERATOR>&lt;&lt;</OPERATOR> methodPage
                                  <KEYWORD>println</KEYWORD> <STRING>"Method PAGE: </STRING><DELIMITER>${</DELIMITER><INTERPOLATION>methodPage</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>"</STRING>
                          }
                  }
          }
        <OBJ>xml</OBJ>.<OO>pages</OO>() {
                <OBJ>pages</OBJ>.<OO>each</OO>{
                        packIt <OPERATOR>-&gt;</OPERATOR>
                        <OBJ>xml</OBJ>.<OO>page</OO>(title<OPERATOR>:</OPERATOR> <OBJ>packIt</OBJ>.<OO>title</OO> , type<OPERATOR>:</OPERATOR> <OBJ>packIt</OBJ>.<OO>type</OO>, url<OPERATOR>:</OPERATOR> <OBJ>packIt</OBJ>.<OO>url</OO>) {
                                <OBJ>packIt</OBJ>.<OO>children</OO>.<OO>each</OO> {
                                        classIt <OPERATOR>-&gt;</OPERATOR>
                                        <OBJ>xml</OBJ>.<OO>page</OO>(title<OPERATOR>:</OPERATOR> <OBJ>classIt</OBJ>.<OO>title</OO> , type<OPERATOR>:</OPERATOR> <OBJ>classIt</OBJ>.<OO>type</OO>, url<OPERATOR>:</OPERATOR> <OBJ>classIt</OBJ>.<OO>url</OO>) {
                                                <OBJ>classIt</OBJ>.<OO>children</OO>.<OO>each</OO> {
                                                        methodIt <OPERATOR>-&gt;</OPERATOR>
                                                        <OBJ>xml</OBJ>.<OO>page</OO>(title<OPERATOR>:</OPERATOR> <OBJ>methodIt</OBJ>.<OO>title</OO> , type<OPERATOR>:</OPERATOR> <OBJ>methodIt</OBJ>.<OO>type</OO>, url<OPERATOR>:</OPERATOR> <OBJ>methodIt</OBJ>.<OO>url</OO>)
                                                }
                                        }
                                }
                        }
                }
        }
        <KEYWORD>println</KEYWORD> <STRING>'END'</STRING>
        }

}

<KEYWORD>class</KEYWORD> Page {
        <KEYWORD>def</KEYWORD> title
        <KEYWORD>def</KEYWORD> type
        <KEYWORD>def</KEYWORD> url
        <KEYWORD>def</KEYWORD> children <OPERATOR>=</OPERATOR> []
        <KEYWORD>public</KEYWORD> <TYPE>String</TYPE> toString() {
                <STRING>"Titre: </STRING><DELIMITER>${</DELIMITER><INTERPOLATION>title</INTERPOLATION><DELIMITER>}</DELIMITER><STRING> Type: </STRING><DELIMITER>${</DELIMITER><INTERPOLATION>type</INTERPOLATION><DELIMITER>}</DELIMITER><STRING> URL:</STRING><DELIMITER>${</DELIMITER><INTERPOLATION>url</INTERPOLATION><DELIMITER>}</DELIMITER><STRING> <ESC>\\</ESC>n<ESC>\\</ESC>t </STRING><DELIMITER>${</DELIMITER><INTERPOLATION><OBJ>children</OBJ>.<OO>collect</OO>{<OBJ>it</OBJ>.<OO>toString</OO>()<OPERATOR>+</OPERATOR><STRING>'<ESC>\\</ESC>n<ESC>\\</ESC>t'</STRING> }</INTERPOLATION><DELIMITER>}</DELIMITER><STRING>"</STRING>
        }
}

<KEYWORD>class</KEYWORD> JavaDocParser {
        <KEYWORD>def</KEYWORD> parser
        <COMMENT>/* Constructor */</COMMENT>
        JavaDocParser() {
          <KEYWORD>def</KEYWORD> nekoparser <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>org</OBJ>.<OO>cyberneko</OO>.<OO>html</OO>.<OO>parsers</OO>.<OO>SAXParser</OO>()
          <OBJ>nekoparser</OBJ>.<OO>setFeature</OO>(<STRING>'http://xml.org/sax/features/namespaces'</STRING>, <KEYWORD>false</KEYWORD>)
          parser <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> XmlParser(nekoparser);
        }

        <KEYWORD>def</KEYWORD> parse(url) {
                <KEYWORD>return</KEYWORD> <OBJ>parser</OBJ>.<OO>parse</OO>(url)
        }
} 
