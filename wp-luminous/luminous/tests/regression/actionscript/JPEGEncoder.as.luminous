<KEYWORD>package</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO>
{
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>.</OPERATOR><OO>BitmapData</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>.</OPERATOR><OO>ColorMatrixFilter</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>geom</OO><OPERATOR>.</OPERATOR><OO>Point</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>flash</OBJ><OPERATOR>.</OPERATOR><OO>utils</OO><OPERATOR>.</OPERATOR><OO>ByteArray</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>BitString</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>IntBlock</OO><OPERATOR>;</OPERATOR>
	<KEYWORD>import</KEYWORD> <OBJ>org</OBJ><OPERATOR>.</OPERATOR><OO>alivepdf</OO><OPERATOR>.</OPERATOR><OO>encoding</OO><OPERATOR>.</OPERATOR><OO>IntList</OO><OPERATOR>;</OPERATOR>
	<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>	 * Class that converts BitmapData into a valid JPEG</DOCCOMMENT>
<DOCCOMMENT>	 */</DOCCOMMENT>
	<KEYWORD>public</KEYWORD> final <KEYWORD>class</KEYWORD> JPEGEncoder {

		<COMMENT>// Static table initialization</COMMENT>

		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> ZigZagList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([
			 <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR>
			 <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>42</NUMERIC><OPERATOR>,</OPERATOR>
			 <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>30</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>41</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>43</NUMERIC><OPERATOR>,</OPERATOR>
			 <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>31</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>40</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>44</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>53</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>32</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>39</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>45</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>52</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>54</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>33</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>38</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>46</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>51</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>55</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>60</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>34</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>37</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>47</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>50</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>56</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>59</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>61</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>35</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>36</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>48</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>49</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>57</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>58</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>62</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>63</NUMERIC>
		])<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> YQTList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([
			<NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>40</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>51</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>61</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>58</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>60</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>55</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>40</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>57</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>69</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>56</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>51</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>87</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>80</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>62</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>37</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>56</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>68</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>109</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>103</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>77</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>35</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>55</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>81</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>104</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>113</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>92</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>49</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>78</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>87</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>103</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>121</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>120</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>101</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>72</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>92</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>95</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>98</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>112</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>100</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>103</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC>
		])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> UVQTList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([
			<NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>47</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>66</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>56</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>47</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>66</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>99</NUMERIC>
		])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> aasf<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> [
			<NUMERIC>1.0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1.387039845</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1.306562965</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1.175875602</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>1.0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0.785694958</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0.541196100</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0.275899379</NUMERIC>
		]<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> aanscalesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([
			<COMMENT>/* precomputed values scaled up by 14 bits */</COMMENT>
			<NUMERIC>16384</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22725</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21407</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19266</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16384</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12873</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>8867</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>4520</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>22725</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>31521</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29692</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26722</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22725</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17855</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12299</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>6270</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>21407</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29692</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27969</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25172</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21407</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16819</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11585</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>5906</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>19266</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26722</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25172</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22654</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19266</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15137</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10426</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>5315</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>16384</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22725</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21407</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19266</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16384</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12873</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>8867</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>4520</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>12873</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17855</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16819</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15137</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12873</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10114</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>6967</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>3552</NUMERIC><OPERATOR>,</OPERATOR>
			 <NUMERIC>8867</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12299</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11585</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10426</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>8867</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>6967</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>4799</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>2446</NUMERIC><OPERATOR>,</OPERATOR>
			 <NUMERIC>4520</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>6270</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>5906</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>5315</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>4520</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>3552</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>2446</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>1247</NUMERIC>
		])<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> YTable<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>)<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> UVTable<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>)<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> fdtbl_YList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>(<KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>))<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> fdtbl_UVList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>(<KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>))<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> initQuantTables(sf<OPERATOR>:</OPERATOR><TYPE>int</TYPE>)<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> t<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> ZigZag<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> ZigZagList<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> YQT<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> YQTList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				t <OPERATOR>=</OPERATOR> ((<OBJ>YQTList</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>*</OPERATOR>sf<OPERATOR>+</OPERATOR><NUMERIC>50</NUMERIC>)<OPERATOR>/</OPERATOR><NUMERIC>100</NUMERIC>)<OPERATOR>;</OPERATOR>
				YQT <OPERATOR>=</OPERATOR> <OBJ>YQT</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (t <OPERATOR>&lt;</OPERATOR> <NUMERIC>1</NUMERIC>) {
					t <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (t <OPERATOR>&gt;</OPERATOR> <NUMERIC>255</NUMERIC>) {
					t <OPERATOR>=</OPERATOR> <NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				}
				YTable[<OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>] <OPERATOR>=</OPERATOR> t<OPERATOR>;</OPERATOR>
				ZigZag <OPERATOR>=</OPERATOR> <OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			ZigZag <OPERATOR>=</OPERATOR> ZigZagList<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> <CONSTANT>UVQT</CONSTANT><OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> UVQTList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				t <OPERATOR>=</OPERATOR> ((<OBJ>UVQT</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>*</OPERATOR>sf<OPERATOR>+</OPERATOR><NUMERIC>50</NUMERIC>)<OPERATOR>/</OPERATOR><NUMERIC>100</NUMERIC>)<OPERATOR>;</OPERATOR>
				<CONSTANT>UVQT</CONSTANT> <OPERATOR>=</OPERATOR> <OBJ>UVQT</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (t <OPERATOR>&lt;</OPERATOR> <NUMERIC>1</NUMERIC>) {
					t <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> (t <OPERATOR>&gt;</OPERATOR> <NUMERIC>255</NUMERIC>) {
					t <OPERATOR>=</OPERATOR> <NUMERIC>255</NUMERIC><OPERATOR>;</OPERATOR>
				}
				UVTable[<OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>] <OPERATOR>=</OPERATOR> t<OPERATOR>;</OPERATOR>
				ZigZag <OPERATOR>=</OPERATOR> <OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			ZigZag <OPERATOR>=</OPERATOR> ZigZagList<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> fdtbl_Y<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> fdtbl_YList<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> fdtbl_UV<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> fdtbl_UVList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				<OBJ>fdtbl_Y</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>  <OPERATOR>=</OPERATOR>  YTable[<OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>] <OPERATOR>&lt;&lt;</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR>
				<OBJ>fdtbl_UV</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> UVTable[<OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>] <OPERATOR>&lt;&lt;</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR>
				ZigZag <OPERATOR>=</OPERATOR> <OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				fdtbl_Y <OPERATOR>=</OPERATOR> <OBJ>fdtbl_Y</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				fdtbl_UV <OPERATOR>=</OPERATOR> <OBJ>fdtbl_UV</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_dc_luminance_nrcodesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_dc_luminance_valuesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>11</NUMERIC>])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_ac_luminance_nrcodesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x7d</NUMERIC>])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_ac_luminance_valuesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([
			<NUMERIC>0x01</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x02</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x03</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x00</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x04</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x11</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x05</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x12</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x21</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x31</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x41</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x06</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x13</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x51</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x61</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x07</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x22</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x71</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x14</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x32</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x81</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x91</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x08</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x23</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x42</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x15</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x52</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf0</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x24</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x33</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x62</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x72</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x82</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x09</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x0a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x16</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x17</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x18</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x19</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x1a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x25</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x26</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x27</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x28</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x29</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x2a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x34</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x35</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x36</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x37</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x38</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x39</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x3a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x43</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x44</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x45</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x46</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x47</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x48</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x49</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x4a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x53</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x54</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x55</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x56</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x57</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x58</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x59</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x5a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x63</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x64</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x65</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x66</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x67</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x68</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x69</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x6a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x73</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x74</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x75</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x76</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x77</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x78</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x79</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x7a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x83</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x84</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x85</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x86</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x87</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x88</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x89</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x8a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x92</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x93</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x94</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x95</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x96</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x97</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x98</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x99</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x9a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa7</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xa8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xaa</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb6</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xb7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xba</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc5</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xc6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xca</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd4</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xd5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xda</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe2</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xe3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xea</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xf1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf8</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xf9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xfa</NUMERIC>
		])<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_dc_chrominance_nrcodesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_dc_chrominance_valuesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>11</NUMERIC>])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_ac_chrominance_nrcodesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x77</NUMERIC>])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> std_ac_chrominance_valuesList<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>IntList</OBJ><OPERATOR>.</OPERATOR><OO>create</OO>([
			<NUMERIC>0x00</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x01</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x02</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x03</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x11</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x04</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x05</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x21</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x31</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x06</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x12</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x41</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x51</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x07</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x61</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x71</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x13</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x22</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x32</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x81</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x08</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x14</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x42</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x91</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xa1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x09</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x23</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x33</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x52</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf0</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x15</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x62</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x72</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x0a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x16</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x24</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x34</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xe1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x25</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x17</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x18</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x19</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x1a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x26</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x27</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x28</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x29</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x2a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x35</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x36</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x37</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x38</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x39</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x3a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x43</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x44</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x45</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x46</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x47</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x48</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x49</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x4a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x53</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x54</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x55</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x56</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x57</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x58</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x59</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x5a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x63</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x64</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x65</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x66</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x67</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x68</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x69</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x6a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x73</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x74</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x75</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x76</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x77</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x78</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x79</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x7a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x82</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x83</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x84</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x85</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x86</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x87</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x88</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x89</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x8a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x92</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x93</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x94</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x95</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x96</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0x97</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x98</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x99</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0x9a</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa5</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xa6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xa9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xaa</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb4</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xb5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xb9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xba</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc3</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xc4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xc9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xca</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd2</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xd3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xd9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xda</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xe2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe8</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xe9</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xea</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf2</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf3</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf4</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf5</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf6</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf7</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xf8</NUMERIC><OPERATOR>,</OPERATOR>
			<NUMERIC>0xf9</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>0xfa</NUMERIC>
		])<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> computeHuffmanTbl(nrcodesList<OPERATOR>:</OPERATOR>IntList<OPERATOR>,</OPERATOR> std_tableList<OPERATOR>:</OPERATOR>IntList)<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> {
			<KEYWORD>var</KEYWORD> codevalue<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nrcodes<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>nrcodesList</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> std_table<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> std_tableList<OPERATOR>;</OPERATOR>
		<COMMENT>//	var pos_in_table:int = 0;</COMMENT>
			<KEYWORD>var</KEYWORD> HT<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>251</NUMERIC>)<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> k<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> k <OPERATOR>&lt;=</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>k) {
				<KEYWORD>var</KEYWORD> nr<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> j<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> j<OPERATOR>&lt;=</OPERATOR>nr<OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>j) {
					HT[<OBJ>std_table</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>] <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> BitString(codevalue<OPERATOR>,</OPERATOR> k)<OPERATOR>;</OPERATOR>
					std_table <OPERATOR>=</OPERATOR> <OBJ>std_table</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
		<COMMENT>//			++pos_in_table;</COMMENT>
					<OPERATOR>++</OPERATOR>codevalue<OPERATOR>;</OPERATOR>
				}
				nrcodes <OPERATOR>=</OPERATOR> <OBJ>nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				codevalue<OPERATOR>&lt;&lt;=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>return</KEYWORD> HT<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> <CONSTANT>YDC_HT</CONSTANT><OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> <CONSTANT>UVDC_HT</CONSTANT><OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> <CONSTANT>YAC_HT</CONSTANT><OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> <CONSTANT>UVAC_HT</CONSTANT><OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> initHuffmanTbl()<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			<CONSTANT>YDC_HT</CONSTANT> <OPERATOR>=</OPERATOR> computeHuffmanTbl(std_dc_luminance_nrcodesList<OPERATOR>,</OPERATOR>std_dc_luminance_valuesList)<OPERATOR>;</OPERATOR>
			<CONSTANT>UVDC_HT</CONSTANT> <OPERATOR>=</OPERATOR> computeHuffmanTbl(std_dc_chrominance_nrcodesList<OPERATOR>,</OPERATOR>std_dc_chrominance_valuesList)<OPERATOR>;</OPERATOR>
			<CONSTANT>YAC_HT</CONSTANT> <OPERATOR>=</OPERATOR> computeHuffmanTbl(std_ac_luminance_nrcodesList<OPERATOR>,</OPERATOR>std_ac_luminance_valuesList)<OPERATOR>;</OPERATOR>
			<CONSTANT>UVAC_HT</CONSTANT> <OPERATOR>=</OPERATOR> computeHuffmanTbl(std_ac_chrominance_nrcodesList<OPERATOR>,</OPERATOR>std_ac_chrominance_valuesList)<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> bitcode<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>65535</NUMERIC>)<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> category<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>65535</NUMERIC>)<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> initCategoryNumber()<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			<KEYWORD>var</KEYWORD> nrlower<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nrupper<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> nr<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> n<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> cat<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> cat<OPERATOR>&lt;=</OPERATOR><NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>cat) {
				<COMMENT>//Positive numbers</COMMENT>
				<KEYWORD>for</KEYWORD> (nr<OPERATOR>=</OPERATOR>nrlower<OPERATOR>;</OPERATOR> nr<OPERATOR>&lt;</OPERATOR>nrupper<OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>nr) {
					n <OPERATOR>=</OPERATOR> <NUMERIC>32767</NUMERIC><OPERATOR>+</OPERATOR>nr<OPERATOR>;</OPERATOR>
					category[n] <OPERATOR>=</OPERATOR> cat<OPERATOR>;</OPERATOR>
					bitcode[n] <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> BitString(nr<OPERATOR>,</OPERATOR> cat)<OPERATOR>;</OPERATOR>
				}
				<COMMENT>//Negative numbers</COMMENT>
				<KEYWORD>for</KEYWORD> (nr<OPERATOR>=-</OPERATOR>(nrupper<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> nr<OPERATOR>&lt;=-</OPERATOR>nrlower<OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>nr) {
					n <OPERATOR>=</OPERATOR> <NUMERIC>32767</NUMERIC><OPERATOR>+</OPERATOR>nr<OPERATOR>;</OPERATOR>
					category[n] <OPERATOR>=</OPERATOR> cat<OPERATOR>;</OPERATOR>
					bitcode[n] <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> BitString(nrupper<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>+</OPERATOR>nr<OPERATOR>,</OPERATOR> cat)<OPERATOR>;</OPERATOR>
				}
				nrlower <OPERATOR>&lt;&lt;=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				nrupper <OPERATOR>&lt;&lt;=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			}
		}

		<COMMENT>// IO functions</COMMENT>

		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> byteout<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE><OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> bytenew<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>var</KEYWORD> bytepos<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeBits(bs<OPERATOR>:</OPERATOR>BitString)<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			<KEYWORD>var</KEYWORD> value<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>bs</OBJ><OPERATOR>.</OPERATOR><OO>val</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> posval<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>bs</OBJ><OPERATOR>.</OPERATOR><OO>len</OO><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>while</KEYWORD> ( posval <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				<KEYWORD>if</KEYWORD> (value <OPERATOR>&amp;</OPERATOR> (<NUMERIC>1</NUMERIC> <OPERATOR>&lt;&lt;</OPERATOR> posval) ) {
					bytenew <OPERATOR>|=</OPERATOR> (<NUMERIC>1</NUMERIC> <OPERATOR>&lt;&lt;</OPERATOR> bytepos)<OPERATOR>;</OPERATOR>
				}
				posval<OPERATOR>--;</OPERATOR>
				bytepos<OPERATOR>--;</OPERATOR>
				<KEYWORD>if</KEYWORD> (bytepos <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC>) {
					<KEYWORD>if</KEYWORD> (bytenew <OPERATOR>==</OPERATOR> <NUMERIC>0xFF</NUMERIC>) {
						writeByte(<NUMERIC>0xFF</NUMERIC>)<OPERATOR>;</OPERATOR>
						writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
					}
					<KEYWORD>else</KEYWORD> {
						writeByte(bytenew)<OPERATOR>;</OPERATOR>
					}
					bytepos<OPERATOR>=</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>;</OPERATOR>
					bytenew<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				}
			}
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeByte(value<OPERATOR>:</OPERATOR><TYPE>int</TYPE>)<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			<OBJ>byteout</OBJ><OPERATOR>.</OPERATOR><OO>writeByte</OO>(value)<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeWord(value<OPERATOR>:</OPERATOR><TYPE>int</TYPE>)<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			writeByte((value<OPERATOR>&gt;&gt;</OPERATOR><NUMERIC>8</NUMERIC>))<OPERATOR>;</OPERATOR>
			writeByte((value   ))<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// DCT &amp; quantization core</COMMENT>

<COMMENT>//#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */</COMMENT>
<COMMENT>//#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */</COMMENT>
<COMMENT>//#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */</COMMENT>
<COMMENT>//#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */</COMMENT>
<COMMENT>//#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */</COMMENT>
<COMMENT>//#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */</COMMENT>
<COMMENT>//#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */</COMMENT>
<COMMENT>//#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */</COMMENT>
<COMMENT>//#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */</COMMENT>
<COMMENT>//#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */</COMMENT>
<COMMENT>//#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */</COMMENT>
<COMMENT>//#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */</COMMENT>
		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> fDCTQuant(data<OPERATOR>:</OPERATOR>IntBlock<OPERATOR>,</OPERATOR> fdtbl<OPERATOR>:</OPERATOR>IntList)<OPERATOR>:</OPERATOR>IntBlock {
			<KEYWORD>var</KEYWORD> tmp0<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp1<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp2<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp3<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp4<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp5<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp6<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp7<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> tmp10<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp11<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp12<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> tmp13<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> d0<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d1<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d2<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d3<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d4<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d5<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d6<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> d7<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> z1<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> z2<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> z3<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> z4<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> z5<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> row<OPERATOR>:</OPERATOR>IntBlock<OPERATOR>,</OPERATOR> col<OPERATOR>:</OPERATOR>IntBlock<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> dataOff<OPERATOR>:</OPERATOR>IntBlock<OPERATOR>;</OPERATOR>
			<COMMENT>/* Pass 1: process rows. */</COMMENT>
			<COMMENT>/* Note results are scaled up by sqrt(8) compared to a true DCT; */</COMMENT>
			<COMMENT>/* furthermore, we scale the results by 2**2. */</COMMENT>
			row <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				dataOff <OPERATOR>=</OPERATOR> row<OPERATOR>;</OPERATOR>
				d0 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d1 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d2 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d3 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d4 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d5 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d6 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				d7 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>

				tmp0 <OPERATOR>=</OPERATOR> d0<OPERATOR>+</OPERATOR>d7<OPERATOR>;</OPERATOR>
				tmp7 <OPERATOR>=</OPERATOR> d0<OPERATOR>-</OPERATOR>d7<OPERATOR>;</OPERATOR>
				tmp1 <OPERATOR>=</OPERATOR> d1<OPERATOR>+</OPERATOR>d6<OPERATOR>;</OPERATOR>
				tmp6 <OPERATOR>=</OPERATOR> d1<OPERATOR>-</OPERATOR>d6<OPERATOR>;</OPERATOR>
				tmp2 <OPERATOR>=</OPERATOR> d2<OPERATOR>+</OPERATOR>d5<OPERATOR>;</OPERATOR>
				tmp5 <OPERATOR>=</OPERATOR> d2<OPERATOR>-</OPERATOR>d5<OPERATOR>;</OPERATOR>
				tmp3 <OPERATOR>=</OPERATOR> d3<OPERATOR>+</OPERATOR>d4<OPERATOR>;</OPERATOR>
				tmp4 <OPERATOR>=</OPERATOR> d3<OPERATOR>-</OPERATOR>d4<OPERATOR>;</OPERATOR>

				<COMMENT>/* Even part per LL&amp;M figure 1 --- note that published figure is faulty;</COMMENT>
<COMMENT>				 * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".</COMMENT>
<COMMENT>				 */</COMMENT>
				tmp10 <OPERATOR>=</OPERATOR> tmp0 <OPERATOR>+</OPERATOR> tmp3<OPERATOR>;</OPERATOR>
				tmp13 <OPERATOR>=</OPERATOR> tmp0 <OPERATOR>-</OPERATOR> tmp3<OPERATOR>;</OPERATOR>
				tmp11 <OPERATOR>=</OPERATOR> tmp1 <OPERATOR>+</OPERATOR> tmp2<OPERATOR>;</OPERATOR>
				tmp12 <OPERATOR>=</OPERATOR> tmp1 <OPERATOR>-</OPERATOR> tmp2<OPERATOR>;</OPERATOR>

				z1 <OPERATOR>=</OPERATOR> ((tmp12 <OPERATOR>+</OPERATOR> tmp13) <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_541196100*/</COMMENT><NUMERIC>4433</NUMERIC>)<OPERATOR>;</OPERATOR>

				dataOff <OPERATOR>=</OPERATOR> row<OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp10 <OPERATOR>+</OPERATOR> tmp11) <OPERATOR>&lt;&lt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (z1 <OPERATOR>+</OPERATOR> tmp13 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_765366865*/</COMMENT><NUMERIC>6270</NUMERIC> <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 10*/</COMMENT><NUMERIC>0x400</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp10 <OPERATOR>-</OPERATOR> tmp11) <OPERATOR>&lt;&lt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (z1 <OPERATOR>-</OPERATOR> tmp12 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_847759065*/</COMMENT><NUMERIC>15137</NUMERIC> <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 10*/</COMMENT><NUMERIC>0x400</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>

				<COMMENT>/* Odd part per figure 8 --- note paper omits factor of sqrt(2).</COMMENT>
<COMMENT>				 * cK represents cos(K*pi/16).</COMMENT>
<COMMENT>				 * i0..i3 in the paper are tmp4..tmp7 here.</COMMENT>
<COMMENT>				 */</COMMENT>
				z1 <OPERATOR>=</OPERATOR> tmp4 <OPERATOR>+</OPERATOR> tmp7<OPERATOR>;</OPERATOR>
				z2 <OPERATOR>=</OPERATOR> tmp5 <OPERATOR>+</OPERATOR> tmp6<OPERATOR>;</OPERATOR>
				z3 <OPERATOR>=</OPERATOR> tmp4 <OPERATOR>+</OPERATOR> tmp6<OPERATOR>;</OPERATOR>
				z4 <OPERATOR>=</OPERATOR> tmp5 <OPERATOR>+</OPERATOR> tmp7<OPERATOR>;</OPERATOR>
				z5 <OPERATOR>=</OPERATOR> (z3 <OPERATOR>+</OPERATOR> z4) <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_175875602*/</COMMENT><NUMERIC>9633</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * c3 */</COMMENT>

				tmp4 <OPERATOR>=</OPERATOR> tmp4 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_298631336*/</COMMENT><NUMERIC>2446</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (-c1+c3+c5-c7) */</COMMENT>
				tmp5 <OPERATOR>=</OPERATOR> tmp5 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_2_053119869*/</COMMENT><NUMERIC>16819</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * ( c1+c3-c5+c7) */</COMMENT>
				tmp6 <OPERATOR>=</OPERATOR> tmp6 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_3_072711026*/</COMMENT><NUMERIC>25172</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * ( c1+c3+c5-c7) */</COMMENT>
				tmp7 <OPERATOR>=</OPERATOR> tmp7 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_501321110*/</COMMENT><NUMERIC>12299</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * ( c1+c3-c5-c7) */</COMMENT>
				z1 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z1 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_899976223*/</COMMENT><NUMERIC>7373</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (c7-c3) */</COMMENT>
				z2 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z2 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_2_562915447*/</COMMENT><NUMERIC>20995</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (-c1-c3) */</COMMENT>
				z3 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z3 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_961570560*/</COMMENT><NUMERIC>16069</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (-c3-c5) */</COMMENT>
				z4 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z4 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_390180644*/</COMMENT><NUMERIC>3196</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (c5-c3) */</COMMENT>

				z3 <OPERATOR>+=</OPERATOR> z5<OPERATOR>;</OPERATOR>
				z4 <OPERATOR>+=</OPERATOR> z5<OPERATOR>;</OPERATOR>

				dataOff <OPERATOR>=</OPERATOR> <OBJ>row</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp7 <OPERATOR>+</OPERATOR> z1 <OPERATOR>+</OPERATOR> z4 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 10*/</COMMENT><NUMERIC>0x400</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp6 <OPERATOR>+</OPERATOR> z2 <OPERATOR>+</OPERATOR> z3 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 10*/</COMMENT><NUMERIC>0x400</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp5 <OPERATOR>+</OPERATOR> z2 <OPERATOR>+</OPERATOR> z4 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 10*/</COMMENT><NUMERIC>0x400</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp4 <OPERATOR>+</OPERATOR> z1 <OPERATOR>+</OPERATOR> z3 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 10*/</COMMENT><NUMERIC>0x400</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>

				row <OPERATOR>=</OPERATOR> <OBJ>row</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR> <COMMENT>/* advance pointer to next row */</COMMENT>
			}

			<COMMENT>/* Pass 2: process columns.</COMMENT>
<COMMENT>			 * We remove the PASS1_BITS scaling, but leave the results scaled up</COMMENT>
<COMMENT>			 * by an overall factor of 8.</COMMENT>
<COMMENT>			 */</COMMENT>
			col <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				dataOff <OPERATOR>=</OPERATOR> col<OPERATOR>;</OPERATOR>
				d0 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d1 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d2 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d3 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d4 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d5 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d6 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				d7 <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>

				tmp0 <OPERATOR>=</OPERATOR> d0<OPERATOR>+</OPERATOR>d7<OPERATOR>;</OPERATOR>
				tmp7 <OPERATOR>=</OPERATOR> d0<OPERATOR>-</OPERATOR>d7<OPERATOR>;</OPERATOR>
				tmp1 <OPERATOR>=</OPERATOR> d1<OPERATOR>+</OPERATOR>d6<OPERATOR>;</OPERATOR>
				tmp6 <OPERATOR>=</OPERATOR> d1<OPERATOR>-</OPERATOR>d6<OPERATOR>;</OPERATOR>
				tmp2 <OPERATOR>=</OPERATOR> d2<OPERATOR>+</OPERATOR>d5<OPERATOR>;</OPERATOR>
				tmp5 <OPERATOR>=</OPERATOR> d2<OPERATOR>-</OPERATOR>d5<OPERATOR>;</OPERATOR>
				tmp3 <OPERATOR>=</OPERATOR> d3<OPERATOR>+</OPERATOR>d4<OPERATOR>;</OPERATOR>
				tmp4 <OPERATOR>=</OPERATOR> d3<OPERATOR>-</OPERATOR>d4<OPERATOR>;</OPERATOR>

				<COMMENT>/* Even part per LL&amp;M figure 1 --- note that published figure is faulty;</COMMENT>
<COMMENT>				 * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".</COMMENT>
<COMMENT>				 */</COMMENT>
				tmp10 <OPERATOR>=</OPERATOR> tmp0 <OPERATOR>+</OPERATOR> tmp3<OPERATOR>;</OPERATOR>
				tmp13 <OPERATOR>=</OPERATOR> tmp0 <OPERATOR>-</OPERATOR> tmp3<OPERATOR>;</OPERATOR>
				tmp11 <OPERATOR>=</OPERATOR> tmp1 <OPERATOR>+</OPERATOR> tmp2<OPERATOR>;</OPERATOR>
				tmp12 <OPERATOR>=</OPERATOR> tmp1 <OPERATOR>-</OPERATOR> tmp2<OPERATOR>;</OPERATOR>

				z1 <OPERATOR>=</OPERATOR> ((tmp12 <OPERATOR>+</OPERATOR> tmp13) <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_541196100*/</COMMENT><NUMERIC>4433</NUMERIC>)<OPERATOR>;</OPERATOR>

				dataOff <OPERATOR>=</OPERATOR> col<OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp10 <OPERATOR>+</OPERATOR> tmp11 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 1*/</COMMENT><NUMERIC>0x2</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (z1 <OPERATOR>+</OPERATOR> tmp13 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_765366865*/</COMMENT><NUMERIC>6270</NUMERIC> <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 14*/</COMMENT><NUMERIC>0x4000</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp10 <OPERATOR>-</OPERATOR> tmp11 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 1*/</COMMENT><NUMERIC>0x2</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (z1 <OPERATOR>-</OPERATOR> tmp12 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_847759065*/</COMMENT><NUMERIC>15137</NUMERIC> <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 14*/</COMMENT><NUMERIC>0x4000</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>

				<COMMENT>/* Odd part per figure 8 --- note paper omits factor of sqrt(2).</COMMENT>
<COMMENT>				 * cK represents cos(K*pi/16).</COMMENT>
<COMMENT>				 * i0..i3 in the paper are tmp4..tmp7 here.</COMMENT>
<COMMENT>				 */</COMMENT>
				z1 <OPERATOR>=</OPERATOR> tmp4 <OPERATOR>+</OPERATOR> tmp7<OPERATOR>;</OPERATOR>
				z2 <OPERATOR>=</OPERATOR> tmp5 <OPERATOR>+</OPERATOR> tmp6<OPERATOR>;</OPERATOR>
				z3 <OPERATOR>=</OPERATOR> tmp4 <OPERATOR>+</OPERATOR> tmp6<OPERATOR>;</OPERATOR>
				z4 <OPERATOR>=</OPERATOR> tmp5 <OPERATOR>+</OPERATOR> tmp7<OPERATOR>;</OPERATOR>
				z5 <OPERATOR>=</OPERATOR> (z3 <OPERATOR>+</OPERATOR> z4) <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_175875602*/</COMMENT><NUMERIC>9633</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * c3 */</COMMENT>

				tmp4 <OPERATOR>=</OPERATOR> tmp4 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_298631336*/</COMMENT><NUMERIC>2446</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (-c1+c3+c5-c7) */</COMMENT>
				tmp5 <OPERATOR>=</OPERATOR> tmp5 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_2_053119869*/</COMMENT><NUMERIC>16819</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * ( c1+c3-c5+c7) */</COMMENT>
				tmp6 <OPERATOR>=</OPERATOR> tmp6 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_3_072711026*/</COMMENT><NUMERIC>25172</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * ( c1+c3+c5-c7) */</COMMENT>
				tmp7 <OPERATOR>=</OPERATOR> tmp7 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_501321110*/</COMMENT><NUMERIC>12299</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * ( c1+c3-c5-c7) */</COMMENT>
				z1 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z1 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_899976223*/</COMMENT><NUMERIC>7373</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (c7-c3) */</COMMENT>
				z2 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z2 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_2_562915447*/</COMMENT><NUMERIC>20995</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (-c1-c3) */</COMMENT>
				z3 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z3 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_1_961570560*/</COMMENT><NUMERIC>16069</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (-c3-c5) */</COMMENT>
				z4 <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> z4 <OPERATOR>*</OPERATOR> <COMMENT>/*FIX_0_390180644*/</COMMENT><NUMERIC>3196</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>/* sqrt(2) * (c5-c3) */</COMMENT>

				z3 <OPERATOR>+=</OPERATOR> z5<OPERATOR>;</OPERATOR>
				z4 <OPERATOR>+=</OPERATOR> z5<OPERATOR>;</OPERATOR>

				dataOff <OPERATOR>=</OPERATOR> <OBJ>col</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp7 <OPERATOR>+</OPERATOR> z1 <OPERATOR>+</OPERATOR> z4 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 14*/</COMMENT><NUMERIC>0x4000</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp6 <OPERATOR>+</OPERATOR> z2 <OPERATOR>+</OPERATOR> z3 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 14*/</COMMENT><NUMERIC>0x4000</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp5 <OPERATOR>+</OPERATOR> z2 <OPERATOR>+</OPERATOR> z4 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 14*/</COMMENT><NUMERIC>0x4000</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>.</OPERATOR><OO>down</OO><OPERATOR>;</OPERATOR>
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (tmp4 <OPERATOR>+</OPERATOR> z1 <OPERATOR>+</OPERATOR> z3 <OPERATOR>+</OPERATOR> (<COMMENT>/*1 &lt;&lt; 14*/</COMMENT><NUMERIC>0x4000</NUMERIC>)) <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>

				col <OPERATOR>=</OPERATOR> <OBJ>col</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR> <COMMENT>/* advance pointer to next column */</COMMENT>
			}

			<COMMENT>// Quantize/descale the coefficients</COMMENT>
			dataOff <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR><NUMERIC>64</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				<COMMENT>// Apply the quantization and scaling factor &amp; Round to nearest integer</COMMENT>
				<KEYWORD>var</KEYWORD> qval<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>fdtbl</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				fdtbl <OPERATOR>=</OPERATOR> <OBJ>fdtbl</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> temp<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> (temp <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC>) {
					temp <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR>temp<OPERATOR>;</OPERATOR>
					temp <OPERATOR>+=</OPERATOR> qval <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>	<COMMENT>/* for rounding */</COMMENT>
					<KEYWORD>if</KEYWORD> (temp <OPERATOR>&gt;=</OPERATOR> qval) temp <OPERATOR>/</OPERATOR><OPERATOR>=</OPERATOR> qval<OPERATOR>;</OPERATOR>
					<KEYWORD>else</KEYWORD> temp <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					temp <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR>temp<OPERATOR>;</OPERATOR>
				} <KEYWORD>else</KEYWORD> {
					temp <OPERATOR>+=</OPERATOR> qval <OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>	<COMMENT>/* for rounding */</COMMENT>
					<KEYWORD>if</KEYWORD> (temp <OPERATOR>&gt;=</OPERATOR> qval) temp <OPERATOR>/</OPERATOR><OPERATOR>=</OPERATOR> qval<OPERATOR>;</OPERATOR>
					<KEYWORD>else</KEYWORD> temp <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				}
				<OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> temp<OPERATOR>;</OPERATOR>
				dataOff <OPERATOR>=</OPERATOR> <OBJ>dataOff</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>return</KEYWORD> data<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Chunk writing</COMMENT>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeAPP0()<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			writeWord(<NUMERIC>0xFFE0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// marker</COMMENT>
			writeWord(<NUMERIC>16</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// length</COMMENT>
			writeByte(<NUMERIC>0x4A</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// J</COMMENT>
			writeByte(<NUMERIC>0x46</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// F</COMMENT>
			writeByte(<NUMERIC>0x49</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// I</COMMENT>
			writeByte(<NUMERIC>0x46</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// F</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// = "JFIF",'\0'</COMMENT>
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// versionhi</COMMENT>
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// versionlo</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// xyunits</COMMENT>
			writeWord(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// xdensity</COMMENT>
			writeWord(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// ydensity</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// thumbnwidth</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// thumbnheight</COMMENT>
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeSOF0(width<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR><TYPE>int</TYPE>)<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			writeWord(<NUMERIC>0xFFC0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// marker</COMMENT>
			writeWord(<NUMERIC>17</NUMERIC>)<OPERATOR>;</OPERATOR>   <COMMENT>// length, truecolor YUV JPG</COMMENT>
			writeByte(<NUMERIC>8</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// precision</COMMENT>
			writeWord(height)<OPERATOR>;</OPERATOR>
			writeWord(width)<OPERATOR>;</OPERATOR>
			writeByte(<NUMERIC>3</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// nrofcomponents</COMMENT>
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// IdY</COMMENT>
			writeByte(<NUMERIC>0x11</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HVY</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// QTY</COMMENT>
			writeByte(<NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// IdU</COMMENT>
			writeByte(<NUMERIC>0x11</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HVU</COMMENT>
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// QTU</COMMENT>
			writeByte(<NUMERIC>3</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// IdV</COMMENT>
			writeByte(<NUMERIC>0x11</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HVV</COMMENT>
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>    <COMMENT>// QTV</COMMENT>
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeDQT()<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			writeWord(<NUMERIC>0xFFDB</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// marker</COMMENT>
			writeWord(<NUMERIC>132</NUMERIC>)<OPERATOR>;</OPERATOR>	   <COMMENT>// length</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR><NUMERIC>64</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(YTable[i])<OPERATOR>;</OPERATOR>
			}
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;</OPERATOR><NUMERIC>64</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(UVTable[i])<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeDHT()<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			writeWord(<NUMERIC>0xFFC4</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// marker</COMMENT>
			writeWord(<NUMERIC>0x01A2</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// length</COMMENT>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>

			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTYDCinfo</COMMENT>
			<KEYWORD>var</KEYWORD> std_dc_luminance_nrcodes<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>std_dc_luminance_nrcodesList</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_dc_luminance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_dc_luminance_nrcodes <OPERATOR>=</OPERATOR> <OBJ>std_dc_luminance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>var</KEYWORD> std_dc_luminance_values<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> std_dc_luminance_valuesList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_dc_luminance_values</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_dc_luminance_values <OPERATOR>=</OPERATOR> <OBJ>std_dc_luminance_values</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}

			writeByte(<NUMERIC>0x10</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTYACinfo</COMMENT>
			<KEYWORD>var</KEYWORD> std_ac_luminance_nrcodes<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>std_ac_luminance_nrcodesList</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_ac_luminance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_ac_luminance_nrcodes <OPERATOR>=</OPERATOR> <OBJ>std_ac_luminance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>var</KEYWORD> std_ac_luminance_values<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> std_ac_luminance_valuesList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>161</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_ac_luminance_values</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_ac_luminance_values <OPERATOR>=</OPERATOR> <OBJ>std_ac_luminance_values</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}

			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTUDCinfo</COMMENT>
			<KEYWORD>var</KEYWORD> std_dc_chrominance_nrcodes<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>std_dc_chrominance_nrcodesList</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_dc_chrominance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_dc_chrominance_nrcodes <OPERATOR>=</OPERATOR> <OBJ>std_dc_chrominance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>var</KEYWORD> std_dc_chrominance_values<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> std_dc_chrominance_valuesList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_dc_chrominance_values</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_dc_chrominance_values <OPERATOR>=</OPERATOR> <OBJ>std_dc_chrominance_values</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}

			writeByte(<NUMERIC>0x11</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTUACinfo</COMMENT>
			<KEYWORD>var</KEYWORD> std_ac_chrominance_nrcodes<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> <OBJ>std_ac_chrominance_nrcodesList</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_ac_chrominance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_ac_chrominance_nrcodes <OPERATOR>=</OPERATOR> <OBJ>std_ac_chrominance_nrcodes</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>var</KEYWORD> std_ac_chrominance_values<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> std_ac_chrominance_valuesList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>&lt;=</OPERATOR><NUMERIC>161</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>i) {
				writeByte(<OBJ>std_ac_chrominance_values</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>)<OPERATOR>;</OPERATOR>
				std_ac_chrominance_values <OPERATOR>=</OPERATOR> <OBJ>std_ac_chrominance_values</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> writeSOS()<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			writeWord(<NUMERIC>0xFFDA</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// marker</COMMENT>
			writeWord(<NUMERIC>12</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// length</COMMENT>
			writeByte(<NUMERIC>3</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// nrofcomponents</COMMENT>
			writeByte(<NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// IdY</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTY</COMMENT>
			writeByte(<NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// IdU</COMMENT>
			writeByte(<NUMERIC>0x11</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTU</COMMENT>
			writeByte(<NUMERIC>3</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// IdV</COMMENT>
			writeByte(<NUMERIC>0x11</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// HTV</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// Ss</COMMENT>
			writeByte(<NUMERIC>0x3f</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// Se</COMMENT>
			writeByte(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// Bf</COMMENT>
		}

		<COMMENT>// Core processing</COMMENT>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> DU<OPERATOR>:</OPERATOR><TYPE>Array</TYPE> <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>)<OPERATOR>;</OPERATOR>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> processDU(CDU<OPERATOR>:</OPERATOR>IntBlock<OPERATOR>,</OPERATOR> fdtbl<OPERATOR>:</OPERATOR>IntList<OPERATOR>,</OPERATOR> DC<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> <CONSTANT>HTDC</CONSTANT><OPERATOR>:</OPERATOR><TYPE>Array</TYPE><OPERATOR>,</OPERATOR> <CONSTANT>HTAC</CONSTANT><OPERATOR>:</OPERATOR><TYPE>Array</TYPE>)<OPERATOR>:</OPERATOR><TYPE>int</TYPE> {
			<KEYWORD>var</KEYWORD> EOB<OPERATOR>:</OPERATOR>BitString <OPERATOR>=</OPERATOR> <CONSTANT>HTAC</CONSTANT>[<NUMERIC>0x00</NUMERIC>]<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> M16zeroes<OPERATOR>:</OPERATOR>BitString <OPERATOR>=</OPERATOR> <CONSTANT>HTAC</CONSTANT>[<NUMERIC>0xF0</NUMERIC>]<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> i<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>

			<KEYWORD>var</KEYWORD> <CONSTANT>DU_DCT</CONSTANT><OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> fDCTQuant(CDU<OPERATOR>,</OPERATOR> fdtbl)<OPERATOR>;</OPERATOR>
			<COMMENT>//ZigZag reorder</COMMENT>
			<KEYWORD>var</KEYWORD> ZigZag<OPERATOR>:</OPERATOR>IntList <OPERATOR>=</OPERATOR> ZigZagList<OPERATOR>;</OPERATOR>
			<KEYWORD>for</KEYWORD> (i<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>i<OPERATOR>&lt;</OPERATOR><NUMERIC>64</NUMERIC><OPERATOR>;++</OPERATOR>i) {
				DU[<OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>] <OPERATOR>=</OPERATOR> <OBJ>DU_DCT</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
				ZigZag <OPERATOR>=</OPERATOR> <OBJ>ZigZag</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
				<CONSTANT>DU_DCT</CONSTANT> <OPERATOR>=</OPERATOR> <OBJ>DU_DCT</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>var</KEYWORD> Diff<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> DU[<NUMERIC>0</NUMERIC>] <OPERATOR>-</OPERATOR> DC<OPERATOR>;</OPERATOR> DC <OPERATOR>=</OPERATOR> DU[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
			<COMMENT>//Encode DC</COMMENT>
			<KEYWORD>if</KEYWORD> (Diff<OPERATOR>==</OPERATOR><NUMERIC>0</NUMERIC>) {
				writeBits(<CONSTANT>HTDC</CONSTANT>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR> <COMMENT>// Diff might be 0</COMMENT>
			} <KEYWORD>else</KEYWORD> {
				i <OPERATOR>=</OPERATOR> <NUMERIC>32767</NUMERIC><OPERATOR>+</OPERATOR>Diff<OPERATOR>;</OPERATOR>
				writeBits(<CONSTANT>HTDC</CONSTANT>[category[i]<OPERATOR>&gt;&gt;</OPERATOR><NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
				writeBits(bitcode[i])<OPERATOR>;</OPERATOR>
			}
			<COMMENT>//Encode ACs</COMMENT>
			<KEYWORD>var</KEYWORD> end0pos<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>63</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>while</KEYWORD>((end0pos<OPERATOR>&gt;</OPERATOR><NUMERIC>0</NUMERIC>)<OPERATOR>&amp;&amp;</OPERATOR>(DU[end0pos]<OPERATOR>==</OPERATOR><NUMERIC>0</NUMERIC>)) <OPERATOR>--</OPERATOR>end0pos<OPERATOR>;</OPERATOR>
			<COMMENT>//end0pos = first element in reverse order !=0</COMMENT>
			<KEYWORD>if</KEYWORD> ( end0pos <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
				writeBits(EOB)<OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> DC<OPERATOR>;</OPERATOR>
			}
			i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>while</KEYWORD> ( i <OPERATOR>&lt;=</OPERATOR> end0pos ) {
				<KEYWORD>var</KEYWORD> startpos<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> i<OPERATOR>;</OPERATOR>
				<KEYWORD>while</KEYWORD>((DU[i]<OPERATOR>==</OPERATOR><NUMERIC>0</NUMERIC>) <OPERATOR>&amp;&amp;</OPERATOR> (i<OPERATOR>&lt;=</OPERATOR>end0pos)) <OPERATOR>++</OPERATOR>i<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> nrzeroes<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> i<OPERATOR>-</OPERATOR>startpos<OPERATOR>;</OPERATOR>
				<KEYWORD>var</KEYWORD> n<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( nrzeroes <OPERATOR>&gt;=</OPERATOR> <NUMERIC>16</NUMERIC> ) {
					n <OPERATOR>=</OPERATOR> nrzeroes<OPERATOR>/</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR>
					<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> nrmarker<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> nrmarker <OPERATOR>&lt;=</OPERATOR> n<OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>nrmarker) {
						writeBits(M16zeroes)<OPERATOR>;</OPERATOR>
					}
					nrzeroes <OPERATOR>=</OPERATOR> (nrzeroes<OPERATOR>&amp;</OPERATOR><NUMERIC>0xF</NUMERIC>)<OPERATOR>;</OPERATOR>
				}
				n <OPERATOR>=</OPERATOR> <NUMERIC>32767</NUMERIC><OPERATOR>+</OPERATOR>DU[i]<OPERATOR>;</OPERATOR>
				writeBits(<CONSTANT>HTAC</CONSTANT>[((nrzeroes<OPERATOR>&lt;&lt;</OPERATOR><NUMERIC>4</NUMERIC>)<OPERATOR>+</OPERATOR>category[n])<OPERATOR>&gt;&gt;</OPERATOR><NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
				writeBits(bitcode[n])<OPERATOR>;</OPERATOR>
				<OPERATOR>++</OPERATOR>i<OPERATOR>;</OPERATOR>
			}
			<KEYWORD>if</KEYWORD> ( end0pos <OPERATOR>!=</OPERATOR> <NUMERIC>63</NUMERIC> ) {
				writeBits(EOB)<OPERATOR>;</OPERATOR>
			}
			<KEYWORD>return</KEYWORD> DC<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> YDUBlock<OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> <OBJ>IntBlock</OBJ><OPERATOR>.</OPERATOR><OO>create8_8</OO>(<KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>))<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> UDUBlock<OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> <OBJ>IntBlock</OBJ><OPERATOR>.</OPERATOR><OO>create8_8</OO>(<KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>))<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>const</KEYWORD> VDUBlock<OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> <OBJ>IntBlock</OBJ><OPERATOR>.</OPERATOR><OO>create8_8</OO>(<KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>(<NUMERIC>64</NUMERIC>))<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> fltrRGB2YUV<OPERATOR>:</OPERATOR>ColorMatrixFilter <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> ColorMatrixFilter([
			 <NUMERIC>0.29900</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>0.58700</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>0.11400</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>   <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			<OPERATOR>-</OPERATOR><NUMERIC>0.16874</NUMERIC><OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>0.33126</NUMERIC><OPERATOR>,</OPERATOR>  <NUMERIC>0.50000</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>128</NUMERIC><OPERATOR>,</OPERATOR>
			 <NUMERIC>0.50000</NUMERIC><OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>0.41869</NUMERIC><OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>0.08131</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>128</NUMERIC><OPERATOR>,</OPERATOR>
			       <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>        <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>        <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>   <NUMERIC>0</NUMERIC>
		])<OPERATOR>;</OPERATOR>
		<KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>const</KEYWORD> orgn<OPERATOR>:</OPERATOR>Point <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> Point()<OPERATOR>;</OPERATOR>

		<COMMENT>//private static const rgb_ycc_tab:Array = new Array(2048);</COMMENT>
		<COMMENT>//private function init_rgb_ycc_tab():void {</COMMENT>
		<COMMENT>//	for (var i:int = 0; i &lt;= 255; i++) {</COMMENT>
		<COMMENT>//		rgb_ycc_tab[i]      =  19595 * i;</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+ 256)&gt;&gt;0] =  38470 * i;</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+ 512)&gt;&gt;0] =   7471 * i + 0x8000;</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+ 768)&gt;&gt;0] = -11059 * i;</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+1024)&gt;&gt;0] = -21709 * i;</COMMENT>
				<COMMENT>/* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.</COMMENT>
<COMMENT>				 * This ensures that the maximum output will round to MAXJSAMPLE</COMMENT>
<COMMENT>				 * not MAXJSAMPLE+1, and thus that we don't have to range-limit.</COMMENT>
<COMMENT>				 */</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+1280)&gt;&gt;0] =  32768 * i + 0x807FFF;</COMMENT>
				<COMMENT>/*  B=&gt;Cb and R=&gt;Cr tables are the same</COMMENT>
<COMMENT>				    rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;</COMMENT>
<COMMENT>				*/</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+1536)&gt;&gt;0] = -27439 * i;</COMMENT>
		<COMMENT>//		rgb_ycc_tab[(i+1792)&gt;&gt;0] = - 5329 * i;</COMMENT>
		<COMMENT>//	}</COMMENT>
		<COMMENT>//}</COMMENT>

		<KEYWORD>private</KEYWORD> <KEYWORD>function</KEYWORD> <CONSTANT>RGB2YUV</CONSTANT>(img<OPERATOR>:</OPERATOR>BitmapData<OPERATOR>,</OPERATOR> xpos<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>,</OPERATOR> ypos<OPERATOR>:</OPERATOR><TYPE>int</TYPE>)<OPERATOR>:</OPERATOR><KEYWORD>void</KEYWORD> {
			<KEYWORD>var</KEYWORD> YDU<OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> YDUBlock<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> UDU<OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> UDUBlock<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> VDU<OPERATOR>:</OPERATOR>IntBlock <OPERATOR>=</OPERATOR> VDUBlock<OPERATOR>;</OPERATOR>
		<COMMENT>//	var pos:int=0;</COMMENT>
			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> y<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> y<OPERATOR>&lt;</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>y) {
				<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> x<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> x<OPERATOR>&lt;</OPERATOR><NUMERIC>8</NUMERIC><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR>x) {
					<KEYWORD>var</KEYWORD> P<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>img</OBJ><OPERATOR>.</OPERATOR><OO>getPixel</OO>(xpos<OPERATOR>+</OPERATOR>x<OPERATOR>,</OPERATOR>ypos<OPERATOR>+</OPERATOR>y)<OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> R<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> ((P<OPERATOR>&gt;&gt;</OPERATOR><NUMERIC>16</NUMERIC>)<OPERATOR>&amp;</OPERATOR><NUMERIC>0xFF</NUMERIC>)<OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> G<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> ((P<OPERATOR>&gt;&gt;</OPERATOR> <NUMERIC>8</NUMERIC>)<OPERATOR>&amp;</OPERATOR><NUMERIC>0xFF</NUMERIC>)<OPERATOR>;</OPERATOR>
					<KEYWORD>var</KEYWORD> B<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> ((P    )<OPERATOR>&amp;</OPERATOR><NUMERIC>0xFF</NUMERIC>)<OPERATOR>;</OPERATOR>
					<COMMENT>/* RGB2YUV with ColorMatrixFilter */</COMMENT>
					<OBJ>YDU</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> R<OPERATOR>-</OPERATOR><NUMERIC>128</NUMERIC><OPERATOR>;</OPERATOR>
					<OBJ>UDU</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> G<OPERATOR>-</OPERATOR><NUMERIC>128</NUMERIC><OPERATOR>;</OPERATOR>
					<OBJ>VDU</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> B<OPERATOR>-</OPERATOR><NUMERIC>128</NUMERIC><OPERATOR>;</OPERATOR>
					<COMMENT>/* float RGB2YUV without ColorMatrixFilter</COMMENT>
<COMMENT>					YDU[pos] = ((( 0.29900) * R + ( 0.58700) * G + ( 0.11400) * B)) - 128;</COMMENT>
<COMMENT>					UDU[pos] = ((( -0.16874) * R + ( -0.33126) * G + ( 0.50000) * B));</COMMENT>
<COMMENT>					VDU[pos] = ((( 0.50000) * R + ( -0.41869) * G + ( -0.08131) * B));</COMMENT>
<COMMENT>					*/</COMMENT>
					<COMMENT>/* precalculated RGB2YUV without ColorMatrixFilter</COMMENT>
<COMMENT>					YDU[pos] = ((rgb_ycc_tab[R]             + rgb_ycc_tab[(G +  256)&gt;&gt;0] + rgb_ycc_tab[(B +  512)&gt;&gt;0]) &gt;&gt; 16)-128;</COMMENT>
<COMMENT>					UDU[pos] = ((rgb_ycc_tab[(R +  768)&gt;&gt;0] + rgb_ycc_tab[(G + 1024)&gt;&gt;0] + rgb_ycc_tab[(B + 1280)&gt;&gt;0]) &gt;&gt; 16)-128;</COMMENT>
<COMMENT>					VDU[pos] = ((rgb_ycc_tab[(R + 1280)&gt;&gt;0] + rgb_ycc_tab[(G + 1536)&gt;&gt;0] + rgb_ycc_tab[(B + 1792)&gt;&gt;0]) &gt;&gt; 16)-128;</COMMENT>
<COMMENT>					*/</COMMENT>
					YDU <OPERATOR>=</OPERATOR> <OBJ>YDU</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
					UDU <OPERATOR>=</OPERATOR> <OBJ>UDU</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
					VDU <OPERATOR>=</OPERATOR> <OBJ>VDU</OBJ><OPERATOR>.</OPERATOR><OO>next</OO><OPERATOR>;</OPERATOR>
		<COMMENT>//			++pos;</COMMENT>
				}
			}
		}

		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Constructor for JPEGEncoder class</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> quality</DOCPROPERTY> The quality level between 1 and 100 that detrmines the</DOCCOMMENT>
<DOCCOMMENT>		 * level of compression used in the generated JPEG</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> dct</DOCPROPERTY> The forward DCT method to use,</DOCCOMMENT>
<DOCCOMMENT>		 * supported methods: JDCT_ISLOW, JDCT_IFAST, JDCT_FLOAT</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@langversion</DOCTAG> ActionScript 3.0</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@playerversion</DOCTAG> Flash 9.0</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@tiptext</DOCTAG></DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> JPEGEncoder(quality<OPERATOR>:</OPERATOR><TYPE>Number</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>50</NUMERIC>) {
			<KEYWORD>if</KEYWORD> (quality <OPERATOR>&lt;=</OPERATOR> <NUMERIC>0</NUMERIC>) {
				quality <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>if</KEYWORD> (quality <OPERATOR>&gt;</OPERATOR> <NUMERIC>100</NUMERIC>) {
				quality <OPERATOR>=</OPERATOR> <NUMERIC>100</NUMERIC><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>var</KEYWORD> sf<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> (quality <OPERATOR>&lt;</OPERATOR> <NUMERIC>50</NUMERIC>) {
				sf <OPERATOR>=</OPERATOR> (<NUMERIC>5000</NUMERIC> <OPERATOR>/</OPERATOR> quality)<OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				sf <OPERATOR>=</OPERATOR> (<NUMERIC>200</NUMERIC> <OPERATOR>-</OPERATOR> quality<OPERATOR>*</OPERATOR><NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR>
			}
			<COMMENT>// Create tables</COMMENT>
			initHuffmanTbl()<OPERATOR>;</OPERATOR>
			initCategoryNumber()<OPERATOR>;</OPERATOR>
			initQuantTables(sf)<OPERATOR>;</OPERATOR>
			<COMMENT>//init_rgb_ycc_tab();</COMMENT>
		}

		<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT>		 * Created a JPEG image from the specified BitmapData</DOCCOMMENT>
<DOCCOMMENT>		 *</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@param</DOCTAG><DOCPROPERTY> image</DOCPROPERTY> The BitmapData that will be converted into the JPEG format.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@return</DOCTAG> a ByteArray representing the JPEG encoded image data.</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@langversion</DOCTAG> ActionScript 3.0</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@playerversion</DOCTAG> Flash 9.0</DOCCOMMENT>
<DOCCOMMENT>		 * <DOCTAG>@tiptext</DOCTAG></DOCCOMMENT>
<DOCCOMMENT>		 */</DOCCOMMENT>
		<KEYWORD>public</KEYWORD> <KEYWORD>function</KEYWORD> encode(image<OPERATOR>:</OPERATOR>BitmapData)<OPERATOR>:</OPERATOR><TYPE>ByteArray</TYPE> {
			<COMMENT>//var img:BitmapData = image;</COMMENT>
			<KEYWORD>var</KEYWORD> img<OPERATOR>:</OPERATOR>BitmapData <OPERATOR>=</OPERATOR> <OBJ>image</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>()<OPERATOR>;</OPERATOR>
			<OBJ>img</OBJ><OPERATOR>.</OPERATOR><OO>applyFilter</OO>(img<OPERATOR>,</OPERATOR> <OBJ>img</OBJ><OPERATOR>.</OPERATOR><OO>rect</OO><OPERATOR>,</OPERATOR> orgn<OPERATOR>,</OPERATOR> fltrRGB2YUV)<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> height<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>img</OBJ><OPERATOR>.</OPERATOR><OO>height</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> width<OPERATOR>:</OPERATOR><TYPE>int</TYPE> <OPERATOR>=</OPERATOR> <OBJ>img</OBJ><OPERATOR>.</OPERATOR><OO>width</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// Initialize bit writer</COMMENT>
			byteout <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>ByteArray</TYPE>()<OPERATOR>;</OPERATOR>
			bytenew<OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			bytepos<OPERATOR>=</OPERATOR><NUMERIC>7</NUMERIC><OPERATOR>;</OPERATOR>

			<COMMENT>// Add JPEG headers</COMMENT>
			writeWord(<NUMERIC>0xFFD8</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// SOI</COMMENT>
			writeAPP0()<OPERATOR>;</OPERATOR>
			writeDQT()<OPERATOR>;</OPERATOR>
			writeSOF0(width<OPERATOR>,</OPERATOR>height)<OPERATOR>;</OPERATOR>
			writeDHT()<OPERATOR>;</OPERATOR>
			writeSOS()<OPERATOR>;</OPERATOR>

			<COMMENT>// Encode 8x8 macroblocks</COMMENT>
			<KEYWORD>var</KEYWORD> DCY<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> DCU<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> DCV<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> ypos<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> ypos<OPERATOR>&lt;</OPERATOR>height<OPERATOR>;</OPERATOR> ypos<OPERATOR>+=</OPERATOR><NUMERIC>8</NUMERIC>) {
				<KEYWORD>for</KEYWORD> (<KEYWORD>var</KEYWORD> xpos<OPERATOR>:</OPERATOR><TYPE>int</TYPE><OPERATOR>=</OPERATOR><NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> xpos<OPERATOR>&lt;</OPERATOR>width<OPERATOR>;</OPERATOR> xpos<OPERATOR>+=</OPERATOR><NUMERIC>8</NUMERIC>) {
					<CONSTANT>RGB2YUV</CONSTANT>(img<OPERATOR>,</OPERATOR> xpos<OPERATOR>,</OPERATOR> ypos)<OPERATOR>;</OPERATOR>
					DCY <OPERATOR>=</OPERATOR> processDU(YDUBlock<OPERATOR>,</OPERATOR> fdtbl_YList<OPERATOR>,</OPERATOR>  DCY<OPERATOR>,</OPERATOR>  <CONSTANT>YDC_HT</CONSTANT><OPERATOR>,</OPERATOR>  <CONSTANT>YAC_HT</CONSTANT>)<OPERATOR>;</OPERATOR>
					DCU <OPERATOR>=</OPERATOR> processDU(UDUBlock<OPERATOR>,</OPERATOR> fdtbl_UVList<OPERATOR>,</OPERATOR> DCU<OPERATOR>,</OPERATOR> <CONSTANT>UVDC_HT</CONSTANT><OPERATOR>,</OPERATOR> <CONSTANT>UVAC_HT</CONSTANT>)<OPERATOR>;</OPERATOR>
					DCV <OPERATOR>=</OPERATOR> processDU(VDUBlock<OPERATOR>,</OPERATOR> fdtbl_UVList<OPERATOR>,</OPERATOR> DCV<OPERATOR>,</OPERATOR> <CONSTANT>UVDC_HT</CONSTANT><OPERATOR>,</OPERATOR> <CONSTANT>UVAC_HT</CONSTANT>)<OPERATOR>;</OPERATOR>
				}
			}

			<OBJ>img</OBJ><OPERATOR>.</OPERATOR><OO>dispose</OO>()<OPERATOR>;</OPERATOR>

			<COMMENT>// Do the bit alignment of the EOI marker</COMMENT>
			<KEYWORD>if</KEYWORD> ( bytepos <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				writeBits(<KEYWORD>new</KEYWORD> BitString((<NUMERIC>1</NUMERIC><OPERATOR>&lt;&lt;</OPERATOR>(bytepos<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC>))<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> bytepos<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC>))<OPERATOR>;</OPERATOR>
			}

			writeWord(<NUMERIC>0xFFD9</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>//EOI</COMMENT>
			<KEYWORD>return</KEYWORD> byteout<OPERATOR>;</OPERATOR>
		}
	}
}
