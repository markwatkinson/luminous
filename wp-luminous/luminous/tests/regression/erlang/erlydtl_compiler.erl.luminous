<COMMENT>%%%-------------------------------------------------------------------</COMMENT>
<COMMENT>%%% File:      erlydtl_compiler.erl</COMMENT>
<COMMENT>%%% @author    Roberto Saccon &lt;rsaccon@gmail.com&gt; [http://rsaccon.com]</COMMENT>
<COMMENT>%%% @author    Evan Miller &lt;emmiller@gmail.com&gt;</COMMENT>
<COMMENT>%%% @copyright 2008 Roberto Saccon, Evan Miller</COMMENT>
<COMMENT>%%% @doc  </COMMENT>
<COMMENT>%%% ErlyDTL template compiler</COMMENT>
<COMMENT>%%% @end  </COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%% The MIT License</COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%% Copyright (c) 2007 Roberto Saccon, Evan Miller</COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%% Permission is hereby granted, free of charge, to any person obtaining a copy</COMMENT>
<COMMENT>%%% of this software and associated documentation files (the "Software"), to deal</COMMENT>
<COMMENT>%%% in the Software without restriction, including without limitation the rights</COMMENT>
<COMMENT>%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</COMMENT>
<COMMENT>%%% copies of the Software, and to permit persons to whom the Software is</COMMENT>
<COMMENT>%%% furnished to do so, subject to the following conditions:</COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%% The above copyright notice and this permission notice shall be included in</COMMENT>
<COMMENT>%%% all copies or substantial portions of the Software.</COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</COMMENT>
<COMMENT>%%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</COMMENT>
<COMMENT>%%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</COMMENT>
<COMMENT>%%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</COMMENT>
<COMMENT>%%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</COMMENT>
<COMMENT>%%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</COMMENT>
<COMMENT>%%% THE SOFTWARE.</COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%% @since 2007-12-16 by Roberto Saccon, Evan Miller</COMMENT>
<COMMENT>%%%</COMMENT>
<COMMENT>%%%-------------------------------------------------------------------</COMMENT>
<COMMENT>%%% Adapted and expanded for Zotonic by Marc Worrell &lt;marc@worrell.nl&gt;</COMMENT>
<COMMENT>%%%-------------------------------------------------------------------</COMMENT>

<KEYWORD>-module</KEYWORD>(erlydtl_compiler)<KEYWORD>.</KEYWORD>
<KEYWORD>-author</KEYWORD>(<VALUE>'rsaccon@gmail.com'</VALUE>)<KEYWORD>.</KEYWORD>
<KEYWORD>-author</KEYWORD>(<VALUE>'emmiller@gmail.com'</VALUE>)<KEYWORD>.</KEYWORD>
<KEYWORD>-author</KEYWORD>(<VALUE>'marc@worrell.nl'</VALUE>)<KEYWORD>.</KEYWORD>

<KEYWORD>-include_lib</KEYWORD>(<STRING>"zotonic.hrl"</STRING>)<KEYWORD>.</KEYWORD>

<COMMENT>%% --------------------------------------------------------------------</COMMENT>
<COMMENT>%% Definitions</COMMENT>
<COMMENT>%% --------------------------------------------------------------------</COMMENT>
<KEYWORD>-export</KEYWORD>([compile<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD> compile<OPERATOR>/</OPERATOR><NUMERIC>4</NUMERIC><KEYWORD>,</KEYWORD> compile<OPERATOR>/</OPERATOR><NUMERIC>5</NUMERIC><KEYWORD>,</KEYWORD> parse<OPERATOR>/</OPERATOR><NUMERIC>1</NUMERIC>])<KEYWORD>.</KEYWORD>

<KEYWORD>-record</KEYWORD>(dtl_context<KEYWORD>,</KEYWORD> {
    local_scopes <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD> 
    block_dict <OPERATOR>=</OPERATOR> <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>new</OO>()<KEYWORD>,</KEYWORD> 
    auto_escape <OPERATOR>=</OPERATOR> off<KEYWORD>,</KEYWORD> 
    parse_trail <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    extends_trail <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    block_trail <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    vars <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    custom_tags_dir <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    reader <OPERATOR>=</OPERATOR> {file<KEYWORD>,</KEYWORD> read_file}<KEYWORD>,</KEYWORD>
    finder <OPERATOR>=</OPERATOR> undefined<KEYWORD>,</KEYWORD>
    module <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    compiler_options <OPERATOR>=</OPERATOR> [verbose<KEYWORD>,</KEYWORD> report_errors]<KEYWORD>,</KEYWORD>
    force_recompile <OPERATOR>=</OPERATOR> <VALUE>false</VALUE><KEYWORD>,</KEYWORD>
    z_context <OPERATOR>=</OPERATOR> undefined})<KEYWORD>.</KEYWORD>

<KEYWORD>-record</KEYWORD>(ast_info<KEYWORD>,</KEYWORD> {
    dependencies <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    var_names <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
    pre_render_asts <OPERATOR>=</OPERATOR> []})<KEYWORD>.</KEYWORD>
    
<KEYWORD>-record</KEYWORD>(treewalker<KEYWORD>,</KEYWORD> {
    counter <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><KEYWORD>,</KEYWORD>
    has_auto_id <OPERATOR>=</OPERATOR> <VALUE>false</VALUE><KEYWORD>,</KEYWORD>
    custom_tags <OPERATOR>=</OPERATOR> []})<KEYWORD>.</KEYWORD>    

compile(<VARIABLE>Binary</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>when</KEYWORD> is_binary(<VARIABLE>Binary</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    compile(<VARIABLE>Binary</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>;</KEYWORD>

compile(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    compile(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>.</KEYWORD>

compile(<VARIABLE>Binary</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>when</KEYWORD> is_binary(<VARIABLE>Binary</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    compile(<VARIABLE>Binary</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>;</KEYWORD>
    
compile(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>  
    compile(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>filename</OBJ><KEYWORD>:</KEYWORD><OO>basename</OO>(<VARIABLE>File</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>.</KEYWORD>

compile(<VARIABLE>Binary</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>when</KEYWORD> is_binary(<VARIABLE>Binary</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>TemplateResetCounter</VARIABLE> <OPERATOR>=</OPERATOR>  <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(template_reset_counter<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <NUMERIC>0</NUMERIC>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> parse(<VARIABLE>Binary</VARIABLE>) <KEYWORD>of</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>DjangoParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> compile_to_binary( <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD>
                                    <VARIABLE>DjangoParseTree</VARIABLE><KEYWORD>,</KEYWORD> 
                                    init_dtl_context(<VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>,</KEYWORD>
                                    <VARIABLE>TemplateResetCounter</VARIABLE>) <KEYWORD>of</KEYWORD>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>Bin</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE>}<KEYWORD>;</KEYWORD>
                <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>Err</VARIABLE>
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Err</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>

compile(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>  
    <VARIABLE>Context</VARIABLE> <OPERATOR>=</OPERATOR> init_dtl_context(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>TemplateResetCounter</VARIABLE> <OPERATOR>=</OPERATOR>  <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(template_reset_counter<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <NUMERIC>0</NUMERIC>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> parse(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>  
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>DjangoParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> compile_to_binary(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>DjangoParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TemplateResetCounter</VARIABLE>) <KEYWORD>of</KEYWORD>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>Bin</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE>}<KEYWORD>;</KEYWORD>
                <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>Err</VARIABLE>
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        {error<KEYWORD>,</KEYWORD> {<VARIABLE>ErrLineCol</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrModule</VARIABLE><KEYWORD>,</KEYWORD> [<STRING>"syntax error before: "</STRING> <OPERATOR>=</OPERATOR> <VARIABLE>ErrMsg</VARIABLE><KEYWORD>,</KEYWORD> [<CHARACTER>$[</CHARACTER><KEYWORD>,</KEYWORD><VARIABLE>Text</VARIABLE><KEYWORD>,</KEYWORD><CHARACTER>$]</CHARACTER>]]}} <KEYWORD>when</KEYWORD> is_list(<VARIABLE>Text</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Text1</VARIABLE> <OPERATOR>=</OPERATOR> [ <FUNCTION>list_to_integer</FUNCTION>(<VARIABLE>C</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>C</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Text</VARIABLE><KEYWORD>,</KEYWORD> is_list(<VARIABLE>C</VARIABLE>) ]<KEYWORD>,</KEYWORD>
            {error<KEYWORD>,</KEYWORD> {<VARIABLE>ErrLineCol</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrModule</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrMsg</VARIABLE> <OPERATOR>++</OPERATOR> <VARIABLE>Text1</VARIABLE>}}<KEYWORD>;</KEYWORD>
        {error<KEYWORD>,</KEYWORD> {<VARIABLE>ErrLineCol</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrModule</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrMsg</VARIABLE>}} <KEYWORD>-&gt;</KEYWORD>
            {error<KEYWORD>,</KEYWORD> {<VARIABLE>ErrLineCol</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrModule</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>(<VARIABLE>ErrMsg</VARIABLE>)}}<KEYWORD>;</KEYWORD>
        <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Err</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
    

<COMMENT>%%====================================================================</COMMENT>
<COMMENT>%% Internal functions</COMMENT>
<COMMENT>%%====================================================================</COMMENT>

compile_to_binary(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>DjangoParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TemplateResetCounter</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    try body_ast(<VARIABLE>DjangoParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>treewalker{}) <KEYWORD>of</KEYWORD>
        {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> <OBJ>compile</OBJ><KEYWORD>:</KEYWORD><OO>forms</OO>(forms(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>module<KEYWORD>,</KEYWORD> <VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TemplateResetCounter</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>compiler_options) <KEYWORD>of</KEYWORD>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Bin</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> 
                    <OBJ>code</OBJ><KEYWORD>:</KEYWORD><OO>purge</OO>(<VARIABLE>Module1</VARIABLE>)<KEYWORD>,</KEYWORD>
                    <KEYWORD>case</KEYWORD> <OBJ>code</OBJ><KEYWORD>:</KEYWORD><OO>load_binary</OO>(<VARIABLE>Module1</VARIABLE><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Module1</VARIABLE>) <OPERATOR>++</OPERATOR> <STRING>".erl"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Bin</VARIABLE>) <KEYWORD>of</KEYWORD>
                        {module<KEYWORD>,</KEYWORD> _} <KEYWORD>-&gt;</KEYWORD> {ok<KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Bin</VARIABLE>}<KEYWORD>;</KEYWORD>
                        _ <KEYWORD>-&gt;</KEYWORD> {error<KEYWORD>,</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>concat</OO>([<STRING>"code reload failed: "</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Module1</VARIABLE>])}
                    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
                error <KEYWORD>-&gt;</KEYWORD>
                    {error<KEYWORD>,</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>concat</OO>([<STRING>"compilation failed: "</STRING><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>])}<KEYWORD>;</KEYWORD>
                <VARIABLE>OtherError</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>OtherError</VARIABLE>
            <KEYWORD>end</KEYWORD>
    <KEYWORD>catch</KEYWORD> 
        <OBJ>throw</OBJ><KEYWORD>:</KEYWORD><VARIABLE>Error</VARIABLE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Error</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


init_dtl_context(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>when</KEYWORD> is_list(<VARIABLE>Module</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    init_dtl_context(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>Module</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)<KEYWORD>;</KEYWORD>
init_dtl_context(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ctx</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>#</KEYWORD>dtl_context{}<KEYWORD>,</KEYWORD>
    <KEYWORD>#</KEYWORD>dtl_context{
        local_scopes <OPERATOR>=</OPERATOR> [ [{<VALUE>'$autoid'</VALUE><KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"AutoId_"</STRING><OPERATOR>++</OPERATOR><OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>())}] ]<KEYWORD>,</KEYWORD>
        parse_trail <OPERATOR>=</OPERATOR> [<VARIABLE>File</VARIABLE>]<KEYWORD>,</KEYWORD> 
        extends_trail <OPERATOR>=</OPERATOR> [<VARIABLE>BaseFile</VARIABLE>]<KEYWORD>,</KEYWORD>
        module <OPERATOR>=</OPERATOR> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD>
        custom_tags_dir <OPERATOR>=</OPERATOR> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(custom_tags_dir<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>custom_tags_dir)<KEYWORD>,</KEYWORD>
        vars <OPERATOR>=</OPERATOR> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(vars<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>vars)<KEYWORD>,</KEYWORD> 
        reader <OPERATOR>=</OPERATOR> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(reader<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>reader)<KEYWORD>,</KEYWORD>
        finder <OPERATOR>=</OPERATOR> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(finder<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>finder)<KEYWORD>,</KEYWORD>
        compiler_options <OPERATOR>=</OPERATOR> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(compiler_options<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>compiler_options)<KEYWORD>,</KEYWORD>
        force_recompile <OPERATOR>=</OPERATOR> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(force_recompile<KEYWORD>,</KEYWORD> <VARIABLE>Options</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>force_recompile)<KEYWORD>,</KEYWORD>
        z_context <OPERATOR>=</OPERATOR> <VARIABLE>ZContext</VARIABLE>}<KEYWORD>.</KEYWORD>   
    
parse(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>  
    {<VARIABLE>M</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>F</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>reader<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> <KEYWORD>catch</KEYWORD> <VARIABLE>M</VARIABLE><KEYWORD>:</KEYWORD><VARIABLE>F</VARIABLE>(<VARIABLE>File</VARIABLE>) <KEYWORD>of</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>Data</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> parse(<VARIABLE>Data</VARIABLE>) <KEYWORD>of</KEYWORD>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>Val</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Val</VARIABLE>}<KEYWORD>;</KEYWORD>
                <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>Err</VARIABLE>
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        <VARIABLE>Error</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            {error<KEYWORD>,</KEYWORD> <OBJ>io_lib</OBJ><KEYWORD>:</KEYWORD><OO>format</OO>(<STRING>"reading <INTERPOLATION>~p</INTERPOLATION> failed (<INTERPOLATION>~p</INTERPOLATION>)"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Error</VARIABLE>])}  
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
        
parse(<VARIABLE>Data</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <OBJ>erlydtl_scanner</OBJ><KEYWORD>:</KEYWORD><OO>scan</OO>(<FUNCTION>binary_to_list</FUNCTION>(<VARIABLE>Data</VARIABLE>)) <KEYWORD>of</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>Tokens</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erlydtl_parser</OBJ><KEYWORD>:</KEYWORD><OO>parse</OO>(<VARIABLE>Tokens</VARIABLE>)<KEYWORD>;</KEYWORD>
        <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Err</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>        
  
forms(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TemplateResetCounter</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>TemplateResetCounterFunctionAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(template_reset_counter)<KEYWORD>,</KEYWORD>
            [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                    []<KEYWORD>,</KEYWORD>
                    none<KEYWORD>,</KEYWORD>
                    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>TemplateResetCounter</VARIABLE>)]
                    )
            ])<KEYWORD>,</KEYWORD>

    <VARIABLE>TransTableFunctionAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(trans_table)<KEYWORD>,</KEYWORD>
            [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                    []<KEYWORD>,</KEYWORD>
                    none<KEYWORD>,</KEYWORD>
                    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>abstract</OO>(<OBJ>z_trans_server</OBJ><KEYWORD>:</KEYWORD><OO>table</OO>(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>z_context))]
                    )
            ])<KEYWORD>,</KEYWORD>

    <VARIABLE>Function2</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(none<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render2)<KEYWORD>,</KEYWORD> 
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"ZpContext"</STRING>)])<KEYWORD>,</KEYWORD>
    <VARIABLE>ClauseOk</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Val"</STRING>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(ok)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Val"</STRING>)])])<KEYWORD>,</KEYWORD>     
    <VARIABLE>ClauseCatch</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Err"</STRING>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(error)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Err"</STRING>)])])<KEYWORD>,</KEYWORD>            
    <VARIABLE>Render2FunctionAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render)<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"ZpContext"</STRING>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>try_expr</OO>([<VARIABLE>Function2</VARIABLE>]<KEYWORD>,</KEYWORD> [<VARIABLE>ClauseOk</VARIABLE>]<KEYWORD>,</KEYWORD> [<VARIABLE>ClauseCatch</VARIABLE>])])])<KEYWORD>,</KEYWORD>  
     
    <VARIABLE>SourceFunctionAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(source)<KEYWORD>,</KEYWORD>
            [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>File</VARIABLE>) ]) ])<KEYWORD>,</KEYWORD>

    <VARIABLE>Dependencies</VARIABLE>  <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>usort</OO>([{<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>filelib</OBJ><KEYWORD>:</KEYWORD><OO>last_modified</OO>(<VARIABLE>File</VARIABLE>)} <KEYWORD>|</KEYWORD> <VARIABLE>BodyInfo</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>dependencies])<KEYWORD>,</KEYWORD>
    <VARIABLE>Dependencies1</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>filter</OO>(<KEYWORD>fun</KEYWORD>({[]<KEYWORD>,</KEYWORD><NUMERIC>0</NUMERIC>}) <KEYWORD>-&gt;</KEYWORD> <VALUE>false</VALUE><KEYWORD>;</KEYWORD> (_) <KEYWORD>-&gt;</KEYWORD> <VALUE>true</VALUE> <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>Dependencies</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>DependenciesFunctionAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(dependencies)<KEYWORD>,</KEYWORD> [
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
                    [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>( <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>(
                            <KEYWORD>fun</KEYWORD> ({<VARIABLE>XFile</VARIABLE><KEYWORD>,</KEYWORD> {{<VARIABLE>Year</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Month</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Day</VARIABLE>}<KEYWORD>,</KEYWORD>{<VARIABLE>Hour</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Min</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Sec</VARIABLE>}}}) <KEYWORD>-&gt;</KEYWORD>
                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([
                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>XFile</VARIABLE>)<KEYWORD>,</KEYWORD>
                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([
                                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Year</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Month</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Day</VARIABLE>)])<KEYWORD>,</KEYWORD>
                                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Hour</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Min</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Sec</VARIABLE>)])
                                    ])
                                ])
                            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> 
                            <VARIABLE>Dependencies1</VARIABLE>)) ])
            ])<KEYWORD>,</KEYWORD>     

	<VARIABLE>BodyLanguageAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(
							<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Language"</STRING>)<KEYWORD>,</KEYWORD>
							<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
						        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_context)<KEYWORD>,</KEYWORD> 
						        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(language)<KEYWORD>,</KEYWORD>
						        [ z_context_ast(<VARIABLE>Context</VARIABLE>) ]
							)
					)<KEYWORD>,</KEYWORD>

    <VARIABLE>BodyRenderAsts</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>#</KEYWORD>treewalker<KEYWORD>.</KEYWORD>has_auto_id <KEYWORD>of</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
            [<VARIABLE>BodyLanguageAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyAst</VARIABLE>]<KEYWORD>;</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> 
            <VARIABLE>AutoIdVar</VARIABLE> <OPERATOR>=</OPERATOR> resolve_scoped_variable_ast(<STRING>"$autoid"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>BodyAutoIdAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(
                                    <VARIABLE>AutoIdVar</VARIABLE><KEYWORD>,</KEYWORD>
                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_ids)<KEYWORD>,</KEYWORD>
                                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(identifier)<KEYWORD>,</KEYWORD>
                                                [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>8</NUMERIC>)]
                                    )
                             )<KEYWORD>,</KEYWORD>
            [<VARIABLE>BodyAutoIdAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyLanguageAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyAst</VARIABLE>]
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

    <VARIABLE>RenderInternalFunctionAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render2)<KEYWORD>,</KEYWORD> 
            [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
					[<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"ZpContext"</STRING>)]<KEYWORD>,</KEYWORD> 
					none<KEYWORD>,</KEYWORD> 
                	<VARIABLE>BodyRenderAsts</VARIABLE>)
			])<KEYWORD>,</KEYWORD>   
    
    <VARIABLE>ModuleAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>attribute</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(module)<KEYWORD>,</KEYWORD> [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Module</VARIABLE>)])<KEYWORD>,</KEYWORD>
    
    <VARIABLE>ExportAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>attribute</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(export)<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([
		            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>arity_qualifier</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(template_reset_counter)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>0</NUMERIC>))<KEYWORD>,</KEYWORD>
		            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>arity_qualifier</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(trans_table)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>0</NUMERIC>))<KEYWORD>,</KEYWORD>
					<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>arity_qualifier</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>2</NUMERIC>))<KEYWORD>,</KEYWORD>
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>arity_qualifier</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(source)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>0</NUMERIC>))<KEYWORD>,</KEYWORD>
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>arity_qualifier</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(dependencies)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>0</NUMERIC>))])])<KEYWORD>,</KEYWORD>

    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>revert</OO>(<VARIABLE>X</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>X</VARIABLE> <OPERATOR>&lt;-</OPERATOR> [<VARIABLE>ModuleAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ExportAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TemplateResetCounterFunctionAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TransTableFunctionAst</VARIABLE><KEYWORD>,</KEYWORD>
            <VARIABLE>Render2FunctionAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>SourceFunctionAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>DependenciesFunctionAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>RenderInternalFunctionAst</VARIABLE>
            <KEYWORD>|</KEYWORD> <VARIABLE>BodyInfo</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>pre_render_asts]]<KEYWORD>.</KEYWORD>    


find_next([]<KEYWORD>,</KEYWORD> _<VARIABLE>Find</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> error<KEYWORD>;</KEYWORD>
find_next([<VARIABLE>Find</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Next</VARIABLE><KEYWORD>|</KEYWORD>_]<KEYWORD>,</KEYWORD> <VARIABLE>Find</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> {ok<KEYWORD>,</KEYWORD> <VARIABLE>Next</VARIABLE>}<KEYWORD>;</KEYWORD>
find_next([_<KEYWORD>|</KEYWORD><VARIABLE>Rest</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Find</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> find_next(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Find</VARIABLE>)<KEYWORD>.</KEYWORD>


<COMMENT>% child templates should only consist of blocks at the top level</COMMENT>
body_extends(<VARIABLE>Extends</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ThisParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>member</OO>(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail) <KEYWORD>of</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
            <FUNCTION>throw</FUNCTION>({error<KEYWORD>,</KEYWORD> <STRING>"Circular file inclusion: "</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>File</VARIABLE>})<KEYWORD>;</KEYWORD>
        _ <KEYWORD>-&gt;</KEYWORD>
            <OBJ>z_notifier</OBJ><KEYWORD>:</KEYWORD><OO>notify</OO>({debug<KEYWORD>,</KEYWORD> template<KEYWORD>,</KEYWORD> {extends<KEYWORD>,</KEYWORD> <VARIABLE>Extends</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>z_context)<KEYWORD>,</KEYWORD>
            <KEYWORD>case</KEYWORD> parse(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>ParentParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>ThisFile</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>hd</FUNCTION>(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail)<KEYWORD>,</KEYWORD>
                    <VARIABLE>BlockDict</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(
                        <KEYWORD>fun</KEYWORD>
                            ({block<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Dict</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                                <VARIABLE>Dict1</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>store</OO>(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>ThisFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Dict</VARIABLE>)<KEYWORD>,</KEYWORD>
                                <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>store</OO>({<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ThisFile</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Dict1</VARIABLE>)<KEYWORD>;</KEYWORD>
                            (_<KEYWORD>,</KEYWORD> <VARIABLE>Dict</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                                <VARIABLE>Dict</VARIABLE>
                        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>new</OO>()<KEYWORD>,</KEYWORD> <VARIABLE>ThisParseTree</VARIABLE>)<KEYWORD>,</KEYWORD>
                    with_dependency(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> body_ast(<VARIABLE>ParentParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{
                        block_dict <OPERATOR>=</OPERATOR> <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>merge</OO>(<KEYWORD>fun</KEYWORD>(_<VARIABLE>Key</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>ParentVal</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ChildVal</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <VARIABLE>ChildVal</VARIABLE> <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                                                <VARIABLE>BlockDict</VARIABLE><KEYWORD>,</KEYWORD>
                                                <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_dict)<KEYWORD>,</KEYWORD>
                        block_trail <OPERATOR>=</OPERATOR> []<KEYWORD>,</KEYWORD>
                        parse_trail <OPERATOR>=</OPERATOR> [<VARIABLE>File</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail]<KEYWORD>,</KEYWORD>
                        extends_trail <OPERATOR>=</OPERATOR> [<VARIABLE>Extends</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>extends_trail]}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>))<KEYWORD>;</KEYWORD>
                <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                    <FUNCTION>throw</FUNCTION>(<VARIABLE>Err</VARIABLE>)
            <KEYWORD>end</KEYWORD>        
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

body_ast([overrules <KEYWORD>|</KEYWORD> <VARIABLE>ThisParseTree</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>CurrentExtend</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>hd</FUNCTION>(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>extends_trail)<KEYWORD>,</KEYWORD>
    <VARIABLE>CurrentFile</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>hd</FUNCTION>(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail)<KEYWORD>,</KEYWORD>
    <VARIABLE>Files</VARIABLE> <OPERATOR>=</OPERATOR> full_path(<VARIABLE>CurrentExtend</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    <COMMENT>% Find the first file after the current file</COMMENT>
    <KEYWORD>case</KEYWORD> find_next(<VARIABLE>Files</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>CurrentFile</VARIABLE>) <KEYWORD>of</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <OBJ>z_notifier</OBJ><KEYWORD>:</KEYWORD><OO>notify</OO>({debug<KEYWORD>,</KEYWORD> template<KEYWORD>,</KEYWORD> {overrules<KEYWORD>,</KEYWORD> <VARIABLE>CurrentExtend</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>z_context)<KEYWORD>,</KEYWORD>
            body_extends(<VARIABLE>CurrentExtend</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ThisParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
        error <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>?</KEYWORD><VARIABLE>ERROR</VARIABLE>(<STRING>"body_ast: could not find overruled template for <ESC>\"</ESC><INTERPOLATION>~p</INTERPOLATION><ESC>\"</ESC> (<INTERPOLATION>~p</INTERPOLATION>)"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>CurrentExtend</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>CurrentFile</VARIABLE>])<KEYWORD>,</KEYWORD>
            <FUNCTION>throw</FUNCTION>({error<KEYWORD>,</KEYWORD> <STRING>"Could not find the template for overrules: '"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>CurrentExtend</VARIABLE> <OPERATOR>++</OPERATOR> <STRING>"'"</STRING>})<KEYWORD>,</KEYWORD>
            {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>""</STRING>)<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}
    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
    
body_ast([{extends<KEYWORD>,</KEYWORD> {string_literal<KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>String</VARIABLE>}} <KEYWORD>|</KEYWORD> <VARIABLE>ThisParseTree</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Extends</VARIABLE> <OPERATOR>=</OPERATOR> unescape_string_literal(<VARIABLE>String</VARIABLE>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> full_path(<VARIABLE>Extends</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            body_extends(<VARIABLE>Extends</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ThisParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
       {error<KEYWORD>,</KEYWORD> <VARIABLE>Reason</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>?</KEYWORD><VARIABLE>ERROR</VARIABLE>(<STRING>"body_ast: could not find template <INTERPOLATION>~p</INTERPOLATION> (<INTERPOLATION>~p</INTERPOLATION>)"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>Extends</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Reason</VARIABLE>])<KEYWORD>,</KEYWORD>
            <FUNCTION>throw</FUNCTION>({error<KEYWORD>,</KEYWORD> <STRING>"Could not find the template for extends: '"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Extends</VARIABLE> <OPERATOR>++</OPERATOR> <STRING>"'"</STRING>})<KEYWORD>,</KEYWORD>
            {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>""</STRING>)<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}
    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>

body_ast(<VARIABLE>DjangoParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>AstInfoList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>mapfoldl</OO>(
        <KEYWORD>fun</KEYWORD>
            ({<VALUE>'block'</VALUE><KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                <VARIABLE>CurrentFile</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_trail <KEYWORD>of</KEYWORD>
                                    [] <KEYWORD>-&gt;</KEYWORD> <FUNCTION>hd</FUNCTION>(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail)<KEYWORD>;</KEYWORD>
                                    [{_<KEYWORD>,</KEYWORD> <VARIABLE>F</VARIABLE>}<KEYWORD>|</KEYWORD>_] <KEYWORD>-&gt;</KEYWORD> <VARIABLE>F</VARIABLE>
                              <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                <COMMENT>% remember this block for an 'inherit' tag</COMMENT>
                <VARIABLE>Context1</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{
                    block_dict<OPERATOR>=</OPERATOR><OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>store</OO>({<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>CurrentFile</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_dict)
                }<KEYWORD>,</KEYWORD>
                <COMMENT>% See if this block has been overruled</COMMENT>
                {<VARIABLE>BlockFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Block</VARIABLE>} <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>find</OO>(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_dict) <KEYWORD>of</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> {_<VARIABLE>ChildFile</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>ChildBlock</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>B</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                        <VARIABLE>B</VARIABLE><KEYWORD>;</KEYWORD>
                    error <KEYWORD>-&gt;</KEYWORD>
                        {<VARIABLE>CurrentFile</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}
                <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                <COMMENT>% Check if we have a recursive definition</COMMENT>
                <KEYWORD>case</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>member</OO>({<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>BlockFile</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_trail) <KEYWORD>of</KEYWORD>
                    <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
                        <KEYWORD>?</KEYWORD><VARIABLE>ERROR</VARIABLE>(<STRING>"body_ast: recursive block <INTERPOLATION>~p</INTERPOLATION> (<INTERPOLATION>~p</INTERPOLATION>)"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BlockFile</VARIABLE>])<KEYWORD>,</KEYWORD>
                        <FUNCTION>throw</FUNCTION>({error<KEYWORD>,</KEYWORD> <STRING>"Recursive block definition of '"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Name</VARIABLE> <OPERATOR>++</OPERATOR> <STRING>"' ("</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>BlockFile</VARIABLE> <OPERATOR>++</OPERATOR> <STRING>")"</STRING>})<KEYWORD>;</KEYWORD>
                    <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
                        body_ast(<VARIABLE>Block</VARIABLE><KEYWORD>,</KEYWORD>
                            <VARIABLE>Context1</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{block_trail<OPERATOR>=</OPERATOR>[{<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>BlockFile</VARIABLE>}<KEYWORD>|</KEYWORD><VARIABLE>Context1</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_trail]}<KEYWORD>,</KEYWORD> 
                            <VARIABLE>TreeWalkerAcc</VARIABLE>)
                <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
            (<VALUE>'inherit'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                inherit_ast(<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'comment'</VALUE><KEYWORD>,</KEYWORD> _<VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                empty_ast(<VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
			({<VALUE>'trans'</VALUE><KEYWORD>,</KEYWORD> {trans_text<KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TransLiteral</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
				trans_ast(<VARIABLE>TransLiteral</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
			({<VALUE>'trans_ext'</VALUE><KEYWORD>,</KEYWORD> {string_literal<KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>String</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
				trans_ext_ast(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'date'</VALUE><KEYWORD>,</KEYWORD> <VALUE>'now'</VALUE><KEYWORD>,</KEYWORD> {string_literal<KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FormatString</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                now_ast(<VARIABLE>FormatString</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'autoescape'</VALUE><KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>OnOrOff</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                body_ast(<VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{auto_escape <OPERATOR>=</OPERATOR> <FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>OnOrOff</VARIABLE>)}<KEYWORD>,</KEYWORD> 
                    <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'text'</VALUE><KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>String</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
                string_ast(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'include'</VALUE><KEYWORD>,</KEYWORD> {string_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                include_ast(unescape_string_literal(<VARIABLE>File</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'catinclude'</VALUE><KEYWORD>,</KEYWORD> {string_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>RscId</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                catinclude_ast(unescape_string_literal(<VARIABLE>File</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>RscId</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'if'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'expr'</VALUE><KEYWORD>,</KEYWORD> <STRING>"b_not"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>E</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> empty_ast(<VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifexpr_ast(<VARIABLE>E</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'if'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>E</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> empty_ast(<VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifexpr_ast(<VARIABLE>E</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'ifelse'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'expr'</VALUE><KEYWORD>,</KEYWORD> <STRING>"b_not"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>E</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>ElseContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifexpr_ast(<VARIABLE>E</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>                  
            ({<VALUE>'ifelse'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>E</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>ElseContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifexpr_ast(<VARIABLE>E</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'ifequal'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> empty_ast(<VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifequalelse_ast(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'ifequalelse'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD> 
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>ElseContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifequalelse_ast(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>                
            ({<VALUE>'ifnotequal'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> empty_ast(<VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifequalelse_ast(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'ifnotequalelse'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                {<VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>ElseContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {<VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>IfContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
                ifequalelse_ast(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseAstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>;</KEYWORD>                    
            ({<VALUE>'with'</VALUE><KEYWORD>,</KEYWORD> [<VARIABLE>ExprList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Identifiers</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>WithContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                with_ast(<VARIABLE>ExprList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Identifiers</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>WithContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'for'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'in'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>IteratorList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                for_loop_ast(<VARIABLE>IteratorList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'for'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'in'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>IteratorList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>EmptyPartContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                for_loop_ast(<VARIABLE>IteratorList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>EmptyPartContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'load'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Names</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                load_ast(<VARIABLE>Names</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'tag'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'identifier'</VALUE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                tag_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'call_args'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'identifier'</VALUE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
            	call_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'call_with'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'identifier'</VALUE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>With</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
            	call_with_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>With</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'cycle'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Names</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                cycle_ast(<VARIABLE>Names</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'cycle_compat'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Names</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                cycle_compat_ast(<VARIABLE>Names</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'media'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                media_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'image'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                image_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'image_url'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                image_url_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'url'</VALUE><KEYWORD>,</KEYWORD> {<VALUE>'identifier'</VALUE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                url_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'print'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                print_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'lib'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>LibList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                lib_ast(<VARIABLE>LibList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            ({<VALUE>'cache'</VALUE><KEYWORD>,</KEYWORD> [<VARIABLE>MaxAge</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>CacheContents</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                cache_ast(<VARIABLE>MaxAge</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>CacheContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>;</KEYWORD>
            (<VARIABLE>ValueToken</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
                {{<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>ValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>ValueTreeWalker</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>ValueToken</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>)<KEYWORD>,</KEYWORD>
                {{format(<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD><VARIABLE>ValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>ValueTreeWalker</VARIABLE>}
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>DjangoParseTree</VARIABLE>)<KEYWORD>,</KEYWORD>
    
    {<VARIABLE>AstList</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>}} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>mapfoldl</OO>(
        <KEYWORD>fun</KEYWORD>({<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>InfoAcc</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> 
                <VARIABLE>PresetVars</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(<KEYWORD>fun</KEYWORD>
                        (<VARIABLE>X</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                            <KEYWORD>case</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>lookup</OO>(<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>X</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>vars) <KEYWORD>of</KEYWORD>
                                none <KEYWORD>-&gt;</KEYWORD>
                                    <VARIABLE>Acc</VARIABLE><KEYWORD>;</KEYWORD>
                                <VARIABLE>Val</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                                    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>abstract</OO>(<VARIABLE>Val</VARIABLE>) <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]
                            <KEYWORD>end</KEYWORD>
                    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>var_names)<KEYWORD>,</KEYWORD>
                <KEYWORD>case</KEYWORD> <VARIABLE>PresetVars</VARIABLE> <KEYWORD>of</KEYWORD>
                    [] <KEYWORD>-&gt;</KEYWORD>
                        {<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> {merge_info(<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InfoAcc</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE>}}<KEYWORD>;</KEYWORD>
                    _ <KEYWORD>-&gt;</KEYWORD>
                        <VARIABLE>Counter</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>TreeWalkerAcc</VARIABLE><KEYWORD>#</KEYWORD>treewalker<KEYWORD>.</KEYWORD>counter<KEYWORD>,</KEYWORD>
                        <VARIABLE>Name</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>concat</OO>([pre_render<KEYWORD>,</KEYWORD> <VARIABLE>Counter</VARIABLE>])<KEYWORD>,</KEYWORD>
                        <VARIABLE>Ast1</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(none<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD>
                            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<VARIABLE>PresetVars</VARIABLE>)])<KEYWORD>,</KEYWORD>
                        <VARIABLE>PreRenderAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>function</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD>
                            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> [<VARIABLE>Ast</VARIABLE>])])<KEYWORD>,</KEYWORD>
                        <VARIABLE>PreRenderAsts</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>pre_render_asts<KEYWORD>,</KEYWORD>
                        <VARIABLE>Info1</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info{pre_render_asts <OPERATOR>=</OPERATOR> [<VARIABLE>PreRenderAst</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>PreRenderAsts</VARIABLE>]}<KEYWORD>,</KEYWORD>     
                        {<VARIABLE>Ast1</VARIABLE><KEYWORD>,</KEYWORD> {merge_info(<VARIABLE>Info1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InfoAcc</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerAcc</VARIABLE><KEYWORD>#</KEYWORD>treewalker{counter <OPERATOR>=</OPERATOR> <VARIABLE>Counter</VARIABLE> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>}}}
                <KEYWORD>end</KEYWORD>
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> {<KEYWORD>#</KEYWORD>ast_info{}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>AstInfoList</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<VARIABLE>AstList</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>}<KEYWORD>.</KEYWORD>


merge_info(<VARIABLE>Info1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>#</KEYWORD>ast_info{dependencies <OPERATOR>=</OPERATOR> 
        <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>merge</OO>(
            <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(<VARIABLE>Info1</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>dependencies)<KEYWORD>,</KEYWORD> 
            <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(<VARIABLE>Info2</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>dependencies))<KEYWORD>,</KEYWORD>
        var_names <OPERATOR>=</OPERATOR> 
            <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>merge</OO>(
                <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(<VARIABLE>Info1</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>var_names)<KEYWORD>,</KEYWORD> 
                <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(<VARIABLE>Info2</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>var_names))<KEYWORD>,</KEYWORD>
        pre_render_asts <OPERATOR>=</OPERATOR> 
            <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>merge</OO>(
                <VARIABLE>Info1</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>pre_render_asts<KEYWORD>,</KEYWORD>
                <VARIABLE>Info2</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>pre_render_asts)}<KEYWORD>.</KEYWORD>


<COMMENT>%with_dependencies([], Args) -&gt;</COMMENT>
<COMMENT>%    Args;</COMMENT>
<COMMENT>%with_dependencies([H, T], Args) -&gt;</COMMENT>
<COMMENT>%     with_dependencies(T, with_dependency(H, Args)).</COMMENT>
<COMMENT>%        </COMMENT>
with_dependency(<VARIABLE>FilePath</VARIABLE><KEYWORD>,</KEYWORD> {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info{dependencies <OPERATOR>=</OPERATOR> [{<VARIABLE>FilePath</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>filelib</OBJ><KEYWORD>:</KEYWORD><OO>last_modified</OO>(<VARIABLE>FilePath</VARIABLE>)} <KEYWORD>|</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>dependencies]}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>



inherit_ast(<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>BlockName</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>BlockFile</VARIABLE>} <OPERATOR>=</OPERATOR> <FUNCTION>hd</FUNCTION>(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_trail)<KEYWORD>,</KEYWORD>
    <VARIABLE>Inherited</VARIABLE> <OPERATOR>=</OPERATOR> [ {<VARIABLE>F</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>dict</OBJ><KEYWORD>:</KEYWORD><OO>find</OO>({<VARIABLE>BlockName</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>F</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_dict)} 
                <KEYWORD>||</KEYWORD> <VARIABLE>F</VARIABLE> <OPERATOR>&lt;-</OPERATOR> find_prev_all(<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail<KEYWORD>,</KEYWORD> <VARIABLE>BlockFile</VARIABLE><KEYWORD>,</KEYWORD> []) ]<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> [ {<VARIABLE>F</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>C</VARIABLE>} <KEYWORD>||</KEYWORD> {<VARIABLE>F</VARIABLE><KEYWORD>,</KEYWORD>{ok<KEYWORD>,</KEYWORD> <VARIABLE>C</VARIABLE>}} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Inherited</VARIABLE> ] <KEYWORD>of</KEYWORD>
        [{<VARIABLE>InheritedFile</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Content</VARIABLE>}<KEYWORD>|</KEYWORD>_] <KEYWORD>-&gt;</KEYWORD>
            body_ast(<VARIABLE>Content</VARIABLE><KEYWORD>,</KEYWORD>
                     <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{block_trail<OPERATOR>=</OPERATOR>[{<VARIABLE>BlockName</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InheritedFile</VARIABLE>}<KEYWORD>|</KEYWORD><VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>block_trail]}<KEYWORD>,</KEYWORD> 
                     <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD>
            {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>""</STRING>)<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

    find_prev_all([]<KEYWORD>,</KEYWORD> _<VARIABLE>Find</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>;</KEYWORD>
    find_prev_all([<VARIABLE>Find</VARIABLE><KEYWORD>|</KEYWORD>_]<KEYWORD>,</KEYWORD> <VARIABLE>Find</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>;</KEYWORD>
    find_prev_all([<VARIABLE>F</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Rest</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Find</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> find_prev_all(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Find</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>F</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>.</KEYWORD>


empty_ast(<VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([])<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>


value_ast(<VARIABLE>ValueToken</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AsString</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <VARIABLE>ValueToken</VARIABLE> <KEYWORD>of</KEYWORD>
        {<VALUE>'expr'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Operator</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            {{<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InfoValue</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_operators)<KEYWORD>,</KEYWORD> 
                                         <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Operator</VARIABLE>)<KEYWORD>,</KEYWORD> 
                                         [<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InfoValue</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
        {<VALUE>'expr'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Operator</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value2</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            {{<VARIABLE>Value1Ast</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InfoValue1</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Value1</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            {{<VARIABLE>Value2Ast</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InfoValue2</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Value2</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_operators)<KEYWORD>,</KEYWORD> 
                                         <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Operator</VARIABLE>)<KEYWORD>,</KEYWORD> 
                                         [<VARIABLE>Value1Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value2Ast</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>InfoValue1</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InfoValue2</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>;</KEYWORD>
        {<VALUE>'string_literal'</VALUE><KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>String</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            {{auto_escape(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(unescape_string_literal(<VARIABLE>String</VARIABLE>))<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
		{<VALUE>'trans_literal'</VALUE><KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>String</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            {{auto_escape(trans_literal_ast(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
        {<VALUE>'number_literal'</VALUE><KEYWORD>,</KEYWORD> _<VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Number</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> <VARIABLE>AsString</VARIABLE> <KEYWORD>of</KEYWORD>
                <VALUE>true</VALUE>  <KEYWORD>-&gt;</KEYWORD> string_ast(<VARIABLE>Number</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
                <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<FUNCTION>list_to_integer</FUNCTION>(<VARIABLE>Number</VARIABLE>))<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        {<VALUE>'auto_id'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            auto_id_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
        {<VALUE>'apply_filter'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            filter_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
        {<VALUE>'attribute'</VALUE><KEYWORD>,</KEYWORD> _} <OPERATOR>=</OPERATOR> <VARIABLE>Variable</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>VarInfo</VARIABLE><KEYWORD>,</KEYWORD><KEYWORD>#</KEYWORD>ast_info{var_names <OPERATOR>=</OPERATOR> [<VARIABLE>VarName</VARIABLE>]})}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
        {<VALUE>'variable'</VALUE><KEYWORD>,</KEYWORD> _} <OPERATOR>=</OPERATOR> <VARIABLE>Variable</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>VarInfo</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{var_names <OPERATOR>=</OPERATOR> [<VARIABLE>VarName</VARIABLE>]})}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
        {<VALUE>'index_value'</VALUE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> _} <OPERATOR>=</OPERATOR> <VARIABLE>Variable</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_indexvariable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>VarInfo</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{var_names <OPERATOR>=</OPERATOR> [<VARIABLE>VarName</VARIABLE>]})}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
        {tuple_value<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>TupleName</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TupleArgs</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>TupleNameAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>TupleName</VARIABLE>)<KEYWORD>,</KEYWORD>
            {<VARIABLE>TupleArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>TupleArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<VARIABLE>TupleNameAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TupleArgsAst</VARIABLE>])<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
        {value_list<KEYWORD>,</KEYWORD> <VARIABLE>Values</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
            {<VARIABLE>ValueAstList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ValueInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(
                        <KEYWORD>fun</KEYWORD>(<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TreeW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InfoV</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeW1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeW</VARIABLE>)<KEYWORD>,</KEYWORD>
                            {[<VARIABLE>Ast</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InfoV</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeW1</VARIABLE>}
                        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                        {[]<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD> 
                        <VARIABLE>Values</VARIABLE>)<KEYWORD>,</KEYWORD>
            {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>reverse</OO>(<VARIABLE>ValueAstList</VARIABLE>))<KEYWORD>,</KEYWORD> <VARIABLE>ValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker1</VARIABLE>}
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

string_ast(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <COMMENT>% {{erl_syntax:string(String), #ast_info{}}, TreeWalker}. %% less verbose AST, better for development and debugging</COMMENT>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>binary</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>binary_field</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>X</VARIABLE>)) <KEYWORD>||</KEYWORD> <VARIABLE>X</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>String</VARIABLE>])<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>       

catinclude_ast(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Args1</VARIABLE> <OPERATOR>=</OPERATOR> [ {{identifier<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> <STRING>"$file"</STRING>}<KEYWORD>,</KEYWORD>{string_literal<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>}}<KEYWORD>,</KEYWORD>
			  {{identifier<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> <STRING>"id"</STRING>}<KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE>} <KEYWORD>|</KEYWORD> <VARIABLE>Args</VARIABLE>]<KEYWORD>,</KEYWORD>
    scomp_ast(<STRING>"catinclude"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Args1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>.</KEYWORD>


include_ast(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>UseScomp</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IsSudo</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>( <KEYWORD>fun</KEYWORD>({{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Key</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Val</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>IsC</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>IsSu</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> 
                                <KEYWORD>case</KEYWORD> <VARIABLE>Key</VARIABLE> <KEYWORD>of</KEYWORD>
                                    <STRING>"maxage"</STRING> <KEYWORD>-&gt;</KEYWORD> {<VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>IsSu</VARIABLE>}<KEYWORD>;</KEYWORD>
                                    <STRING>"vary"</STRING>   <KEYWORD>-&gt;</KEYWORD> {<VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>IsSu</VARIABLE>}<KEYWORD>;</KEYWORD>
                                    <STRING>"scomp"</STRING>  <KEYWORD>-&gt;</KEYWORD> {<VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>IsSu</VARIABLE>}<KEYWORD>;</KEYWORD>
                                    <STRING>"visible_for"</STRING> <KEYWORD>-&gt;</KEYWORD> {<VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>IsSu</VARIABLE>}<KEYWORD>;</KEYWORD>
                                    <STRING>"sudo"</STRING> <KEYWORD>-&gt;</KEYWORD>
                                        <KEYWORD>case</KEYWORD> <VARIABLE>Val</VARIABLE> <KEYWORD>of</KEYWORD>
                                            <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> {<VARIABLE>IsC</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>true</VALUE>}<KEYWORD>;</KEYWORD>
                                            _ <KEYWORD>-&gt;</KEYWORD> {<VARIABLE>IsC</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IsSu</VARIABLE>}
                                        <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
                                    _ <KEYWORD>-&gt;</KEYWORD> {<VARIABLE>IsC</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IsSu</VARIABLE>}
                                <KEYWORD>end</KEYWORD>
                            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                            {<VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE>}<KEYWORD>,</KEYWORD>
                            <VARIABLE>Args</VARIABLE>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> <VARIABLE>UseScomp</VARIABLE> <KEYWORD>of</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
            {<VARIABLE>InterpretedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> interpreted_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            {<VARIABLE>ScopedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ArgAsts</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldr</OO>(
                <KEYWORD>fun</KEYWORD>({<VARIABLE>AKey</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AAst</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>ScopeAcc</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AstAcc</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>Var</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"Arg_"</STRING> <OPERATOR>++</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>(<NUMERIC>10</NUMERIC>)<KEYWORD>,</KEYWORD>
                    <VARIABLE>AssignAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<VARIABLE>Var</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>AAst</VARIABLE>)<KEYWORD>,</KEYWORD>
                    { [{<VARIABLE>AKey</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<VARIABLE>Var</VARIABLE>)}<KEYWORD>|</KEYWORD><VARIABLE>ScopeAcc</VARIABLE>]<KEYWORD>,</KEYWORD> [<VARIABLE>AssignAst</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>AstAcc</VARIABLE>] }
                <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                {[]<KEYWORD>,</KEYWORD> []}<KEYWORD>,</KEYWORD>
                <VARIABLE>InterpretedArgs</VARIABLE>)<KEYWORD>,</KEYWORD>

            {<VARIABLE>ContextInclude</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>ArgAsts1</VARIABLE>} <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>IsSudo</VARIABLE> <KEYWORD>of</KEYWORD>
                                <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> 
                                    <VARIABLE>V</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"ZpContext_"</STRING> <OPERATOR>++</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>id</OO>(<NUMERIC>10</NUMERIC>)<KEYWORD>,</KEYWORD> 
                                    <VARIABLE>ZpContextAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(
                                                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<VARIABLE>V</VARIABLE>)<KEYWORD>,</KEYWORD>
                                                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                                                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_acl)<KEYWORD>,</KEYWORD>
                                                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(sudo)<KEYWORD>,</KEYWORD>
                                                                    [z_context_ast(<VARIABLE>Context</VARIABLE>)]))<KEYWORD>,</KEYWORD>
                                    <VARIABLE>LocalScope</VARIABLE> <OPERATOR>=</OPERATOR> [{<VALUE>'ZpContext'</VALUE><KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<VARIABLE>V</VARIABLE>)}]<KEYWORD>,</KEYWORD>
                                    { <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{local_scopes<OPERATOR>=</OPERATOR>[<VARIABLE>LocalScope</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes]}<KEYWORD>,</KEYWORD>
                                      [<VARIABLE>ZpContextAst</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>ArgAsts</VARIABLE>] 
                                    }<KEYWORD>;</KEYWORD>
                                <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> 
                                    {<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ArgAsts</VARIABLE>}
                             <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

            <COMMENT>% {AstList, Info, TreeWalker}</COMMENT>
            <VARIABLE>IncludeFun</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>fun</KEYWORD>(<VARIABLE>FilePath</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>AstList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InclInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                    <OBJ>z_notifier</OBJ><KEYWORD>:</KEYWORD><OO>notify</OO>({debug<KEYWORD>,</KEYWORD> template<KEYWORD>,</KEYWORD> {include<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FilePath</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>ContextInclude</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>z_context)<KEYWORD>,</KEYWORD>
                    <KEYWORD>case</KEYWORD> parse(<VARIABLE>FilePath</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ContextInclude</VARIABLE>) <KEYWORD>of</KEYWORD>
                        {ok<KEYWORD>,</KEYWORD> <VARIABLE>InclusionParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                            <VARIABLE>AutoIdVar</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"AutoId_"</STRING><OPERATOR>++</OPERATOR><OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>()<KEYWORD>,</KEYWORD>
                            <VARIABLE>IncludeScope</VARIABLE> <OPERATOR>=</OPERATOR> [ {<VALUE>'$autoid'</VALUE><KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<VARIABLE>AutoIdVar</VARIABLE>)} <KEYWORD>|</KEYWORD> <VARIABLE>ScopedArgs</VARIABLE> ]<KEYWORD>,</KEYWORD>

                            {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>InclTW2</VARIABLE>} <OPERATOR>=</OPERATOR> 
                                            with_dependency(<VARIABLE>FilePath</VARIABLE><KEYWORD>,</KEYWORD> 
                                                    body_ast(
                                                        <VARIABLE>InclusionParseTree</VARIABLE><KEYWORD>,</KEYWORD>
                                                        <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{
                                                                local_scopes <OPERATOR>=</OPERATOR> [ <VARIABLE>IncludeScope</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>ContextInclude</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes ]<KEYWORD>,</KEYWORD>
                                                                parse_trail <OPERATOR>=</OPERATOR> [<VARIABLE>FilePath</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>ContextInclude</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail]}<KEYWORD>,</KEYWORD> 
                                                        <VARIABLE>TreeW</VARIABLE><KEYWORD>#</KEYWORD>treewalker{has_auto_id<OPERATOR>=</OPERATOR><VALUE>false</VALUE>}))<KEYWORD>,</KEYWORD>
                            <VARIABLE>Ast1</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>InclTW2</VARIABLE><KEYWORD>#</KEYWORD>treewalker<KEYWORD>.</KEYWORD>has_auto_id <KEYWORD>of</KEYWORD>
                                <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Ast</VARIABLE><KEYWORD>;</KEYWORD>
                                <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>block_expr</OO>(
                                            [
                                            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(
                                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<VARIABLE>AutoIdVar</VARIABLE>)<KEYWORD>,</KEYWORD> 
                                                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                                                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_ids)<KEYWORD>,</KEYWORD>
                                                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(identifier)<KEYWORD>,</KEYWORD>
                                                        []))<KEYWORD>,</KEYWORD>
                                            <VARIABLE>Ast</VARIABLE>])
                            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                            {[<VARIABLE>Ast1</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>AstList</VARIABLE>]<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>InclInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>InclTW2</VARIABLE><KEYWORD>#</KEYWORD>treewalker{has_auto_id<OPERATOR>=</OPERATOR><VARIABLE>TreeW</VARIABLE><KEYWORD>#</KEYWORD>treewalker<KEYWORD>.</KEYWORD>has_auto_id}}<KEYWORD>;</KEYWORD>
                        <VARIABLE>Err</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                            <FUNCTION>throw</FUNCTION>(<VARIABLE>Err</VARIABLE>)
                    <KEYWORD>end</KEYWORD>
            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

            <COMMENT>% Compile all included files, put them in a block expr with a single assignment of the argument vars at the start.</COMMENT>
            <KEYWORD>case</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(<VARIABLE>IncludeFun</VARIABLE><KEYWORD>,</KEYWORD> {[]<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>,</KEYWORD> full_path(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)) <KEYWORD>of</KEYWORD>
                {[]<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerN</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                    <KEYWORD>case</KEYWORD> <VARIABLE>All</VARIABLE> <KEYWORD>of</KEYWORD>
                        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> <KEYWORD>?</KEYWORD><VARIABLE>LOG</VARIABLE>(<STRING>"include_ast: could not find template <INTERPOLATION>~p</INTERPOLATION>"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>File</VARIABLE>])<KEYWORD>;</KEYWORD>
                        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> ok
                    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>""</STRING>)<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerN</VARIABLE>}<KEYWORD>;</KEYWORD>
                {<VARIABLE>AstList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerN</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>AstN</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>block_expr</OO>(<VARIABLE>ArgAsts1</VARIABLE> <OPERATOR>++</OPERATOR> [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>reverse</OO>(<VARIABLE>AstList</VARIABLE>))])<KEYWORD>,</KEYWORD>
                    {{<VARIABLE>AstN</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AstInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalkerN</VARIABLE>}
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Args1</VARIABLE> <OPERATOR>=</OPERATOR> [{{identifier<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> <STRING>"$file"</STRING>}<KEYWORD>,</KEYWORD>{string_literal<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> <VARIABLE>File</VARIABLE>}} <KEYWORD>|</KEYWORD> <VARIABLE>Args</VARIABLE>]<KEYWORD>,</KEYWORD>
            scomp_ast(<STRING>"include"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Args1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


filter_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <COMMENT>% the escape filter is special; it is always applied last, so we have to go digging for it</COMMENT>

    <COMMENT>% AutoEscape = 'did' means we (will have) decided whether to escape the current variable,</COMMENT>
    <COMMENT>% so don't do any more escaping</COMMENT>
    {{<VARIABLE>UnescapedAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> filter_ast_noescape(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{auto_escape <OPERATOR>=</OPERATOR> did}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> search_for_escape_filter(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        on <KEYWORD>-&gt;</KEYWORD>
            {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(filter_force_escape)<KEYWORD>,</KEYWORD> 
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(force_escape)<KEYWORD>,</KEYWORD> 
                    [<VARIABLE>UnescapedAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD> 
                <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>;</KEYWORD>
        _ <KEYWORD>-&gt;</KEYWORD>
            {{<VARIABLE>UnescapedAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

filter_ast_noescape(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> {filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"escape"</STRING>}<KEYWORD>,</KEYWORD> []}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    value_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
filter_ast_noescape(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>FilterAst</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Info2</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker3</VARIABLE>} <OPERATOR>=</OPERATOR> filter_ast1(<VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>FilterAst</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>}<KEYWORD>.</KEYWORD>

filter_ast1({filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> []}<KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>FilterAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<FUNCTION>list_to_atom</FUNCTION>(<STRING>"filter_"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Name</VARIABLE>))<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD> [<VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>FilterAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
filter_ast1({filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"default"</STRING>}<KEYWORD>,</KEYWORD> [<VARIABLE>Arg</VARIABLE>]}<KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>ArgAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Arg</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>VarAst</VARIABLE>  <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Default_"</STRING> <OPERATOR>++</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>())<KEYWORD>,</KEYWORD>
    <VARIABLE>CaseAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(is_false)<KEYWORD>,</KEYWORD> [<VARIABLE>VarAst</VARIABLE>])<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>true</VALUE>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
                [<VARIABLE>ArgAst</VARIABLE>])<KEYWORD>,</KEYWORD>
         <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>underscore</OO>()]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD>
                [<VARIABLE>VarAst</VARIABLE>])
        ])<KEYWORD>,</KEYWORD>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>block_expr</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>CaseAst</VARIABLE>])<KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
filter_ast1({filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"default_if_none"</STRING>}<KEYWORD>,</KEYWORD> [<VARIABLE>Arg</VARIABLE>]}<KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>ArgAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Arg</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>VarAst</VARIABLE>  <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Default_"</STRING> <OPERATOR>++</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>())<KEYWORD>,</KEYWORD>
    <VARIABLE>CaseAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(undefined)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
                [<VARIABLE>ArgAst</VARIABLE>])<KEYWORD>,</KEYWORD>
         <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<VARIABLE>VarAst</VARIABLE>]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD>
                [<VARIABLE>VarAst</VARIABLE>])
        ])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>CaseAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
filter_ast1({filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> <VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"default_if_undefined"</STRING>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    filter_ast1({filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> <VARIABLE>Pos</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"default_if_none"</STRING>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>;</KEYWORD>
filter_ast1({filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>VariableAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>ArgAsts</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldr</OO>(
                        <KEYWORD>fun</KEYWORD>(<VARIABLE>Arg</VARIABLE><KEYWORD>,</KEYWORD> {{<VARIABLE>As</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>In</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>Tw</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {{<VARIABLE>ArgAst</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>ArgIn</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Tw1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Arg</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Tw</VARIABLE>)<KEYWORD>,</KEYWORD>
                            {{[<VARIABLE>ArgAst</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>As</VARIABLE>]<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>In</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>ArgIn</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>Tw1</VARIABLE>}
                        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                        {{[]<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD>
                        <VARIABLE>Args</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>FilterAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<FUNCTION>list_to_atom</FUNCTION>(<STRING>"filter_"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Name</VARIABLE>))<KEYWORD>,</KEYWORD> 
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    [<VARIABLE>VariableAst</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>ArgAsts</VARIABLE>] <OPERATOR>++</OPERATOR> [z_context_ast(<VARIABLE>Context</VARIABLE>)]
                )<KEYWORD>,</KEYWORD>
    {{<VARIABLE>FilterAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>.</KEYWORD>
    
 
search_for_escape_filter(_<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>dtl_context{auto_escape <OPERATOR>=</OPERATOR> on}) <KEYWORD>-&gt;</KEYWORD>
    on<KEYWORD>;</KEYWORD>
search_for_escape_filter(_<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>dtl_context{auto_escape <OPERATOR>=</OPERATOR> did}) <KEYWORD>-&gt;</KEYWORD>
    off<KEYWORD>;</KEYWORD>
search_for_escape_filter(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> _) <KEYWORD>-&gt;</KEYWORD>
    search_for_escape_filter(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE>)<KEYWORD>.</KEYWORD>

search_for_escape_filter(_<KEYWORD>,</KEYWORD> {filter<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"escape"</STRING>}<KEYWORD>,</KEYWORD> []}) <KEYWORD>-&gt;</KEYWORD>
    on<KEYWORD>;</KEYWORD>
search_for_escape_filter({apply_filter<KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE>}<KEYWORD>,</KEYWORD> _) <KEYWORD>-&gt;</KEYWORD>
    search_for_escape_filter(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE>)<KEYWORD>;</KEYWORD>
search_for_escape_filter(_<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>Filter</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    off<KEYWORD>.</KEYWORD>



resolve_variable_ast(<VARIABLE>VarTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    opttrans_variable_ast(resolve_variable_ast(<VARIABLE>VarTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>'fetch_value'</VALUE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

resolve_ifvariable_ast(<VARIABLE>VarTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    opttrans_variable_ast(resolve_variable_ast(<VARIABLE>VarTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>'find_value'</VALUE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

resolve_indexvariable_ast(<VARIABLE>VarTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    opttrans_variable_ast(resolve_variable_ast(<VARIABLE>VarTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>'fetch_value'</VALUE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>


opttrans_variable_ast({{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast1</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_trans)<KEYWORD>,</KEYWORD> 
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(lookup_fallback)<KEYWORD>,</KEYWORD>
			[
				<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD>
				z_context_ast(<VARIABLE>Context</VARIABLE>)
			])<KEYWORD>,</KEYWORD>
	{{<VARIABLE>Ast1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>

resolve_variable_ast({index_value<KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Index</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>IndexAst</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Index</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> 
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>FinderFunction</VARIABLE>)<KEYWORD>,</KEYWORD>
            [<VARIABLE>IndexAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({attribute<KEYWORD>,</KEYWORD> {{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Arg</VARIABLE>}<KEYWORD>,</KEYWORD> {variable<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"q"</STRING>}}}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_context)<KEYWORD>,</KEYWORD> 
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(get_q)<KEYWORD>,</KEYWORD>
            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>Arg</VARIABLE>)<KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"q"</STRING><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({attribute<KEYWORD>,</KEYWORD> {{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Arg</VARIABLE>}<KEYWORD>,</KEYWORD> {variable<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"q_validated"</STRING>}}}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_context)<KEYWORD>,</KEYWORD> 
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(get_q_validated)<KEYWORD>,</KEYWORD>
            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>Arg</VARIABLE>)<KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"q"</STRING><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({attribute<KEYWORD>,</KEYWORD> {{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Model</VARIABLE>}<KEYWORD>,</KEYWORD> {variable<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"m"</STRING>}}}}<KEYWORD>,</KEYWORD> _<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(m)<KEYWORD>,</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<STRING>"m_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Model</VARIABLE>)<KEYWORD>,</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(undefined)
        ])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"m"</STRING><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({attribute<KEYWORD>,</KEYWORD> {{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>AttrName</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>FinderFunction</VARIABLE>)<KEYWORD>,</KEYWORD>
            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>AttrName</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({variable<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"now"</STRING>}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> resolve_scoped_variable_ast(<STRING>"now"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlang)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(localtime)<KEYWORD>,</KEYWORD>
                [])<KEYWORD>;</KEYWORD>
        <VARIABLE>Val</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Val</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"now"</STRING><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({variable<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"z_language"</STRING>}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> resolve_scoped_variable_ast(<STRING>"z_language"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_context)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(language)<KEYWORD>,</KEYWORD>
                [z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>;</KEYWORD>
        <VARIABLE>Val</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Val</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"z_language"</STRING><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>


resolve_variable_ast({variable<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE>}}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> resolve_scoped_variable_ast(<VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> 
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>FinderFunction</VARIABLE>)<KEYWORD>,</KEYWORD>
                [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>VarName</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>;</KEYWORD>
        <VARIABLE>Val</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Val</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast({apply_filter<KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Filter</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinderFunction</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ValueAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(to_value)<KEYWORD>,</KEYWORD>
            [<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)]
        )<KEYWORD>,</KEYWORD>
    {{<VARIABLE>VarValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>} <OPERATOR>=</OPERATOR> filter_ast1(<VARIABLE>Filter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>VarValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>}<KEYWORD>;</KEYWORD>

resolve_variable_ast(<VARIABLE>ValueToken</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>FinderFunction</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>ValueToken</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"$value"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>


resolve_scoped_variable_ast(<VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(<KEYWORD>fun</KEYWORD>(<VARIABLE>Scope</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
                <KEYWORD>case</KEYWORD> <VARIABLE>Value</VARIABLE> <KEYWORD>of</KEYWORD>
                    undefined <KEYWORD>-&gt;</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>VarName</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Scope</VARIABLE>)<KEYWORD>;</KEYWORD>
                    _ <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Value</VARIABLE>
                <KEYWORD>end</KEYWORD>
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> undefined<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Return the AST for the z_context var</COMMENT>
z_context_ast(<VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> resolve_scoped_variable_ast(<STRING>"ZpContext"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"ZpContext"</STRING>)<KEYWORD>;</KEYWORD> 
        <VARIABLE>Ast</VARIABLE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Ast</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


format(<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    auto_escape(stringify(<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

stringify(<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(filter_stringify)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(stringify)<KEYWORD>,</KEYWORD>
        [<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>.</KEYWORD>

auto_escape(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>auto_escape <KEYWORD>of</KEYWORD>
        on <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(filter_force_escape)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(force_escape)<KEYWORD>,</KEYWORD>
                [<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>;</KEYWORD>
        _ <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Value</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

ifexpr_ast(<VARIABLE>Expression</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>IfContentsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfContentsInfo</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>ElseContentsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContentsInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Info</VARIABLE> <OPERATOR>=</OPERATOR> merge_info(<VARIABLE>IfContentsInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContentsInfo</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ExpressionInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Expression</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(is_false)<KEYWORD>,</KEYWORD> [<VARIABLE>Ast</VARIABLE>])<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>true</VALUE>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
                [<VARIABLE>ElseContentsAst</VARIABLE>])<KEYWORD>,</KEYWORD>
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>underscore</OO>()]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD>
                [<VARIABLE>IfContentsAst</VARIABLE>])
        ])<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>ExpressionInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>
    

ifequalelse_ast(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>IfContentsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>IfContentsInfo</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>ElseContentsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContentsInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Info</VARIABLE> <OPERATOR>=</OPERATOR> merge_info(<VARIABLE>IfContentsInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ElseContentsInfo</VARIABLE>)<KEYWORD>,</KEYWORD>
    {[<VARIABLE>Arg1Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Arg2Ast</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>VarNames</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(<KEYWORD>fun</KEYWORD>
            (<VARIABLE>X</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>Asts</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AccVarNames</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Inf</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                <KEYWORD>case</KEYWORD> <VARIABLE>X</VARIABLE> <KEYWORD>of</KEYWORD>
					{string_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Literal</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
					    {[<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(unescape_string_literal(<VARIABLE>Literal</VARIABLE>)) <KEYWORD>|</KEYWORD> <VARIABLE>Asts</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>AccVarNames</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Inf</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}<KEYWORD>;</KEYWORD>
				    {trans_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Literal</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
				        {[trans_literal_ast(<VARIABLE>Literal</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>|</KEYWORD> <VARIABLE>Asts</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>AccVarNames</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Inf</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}<KEYWORD>;</KEYWORD>
                    {number_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Literal</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                        {[<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<FUNCTION>list_to_integer</FUNCTION>(<VARIABLE>Literal</VARIABLE>)) <KEYWORD>|</KEYWORD> <VARIABLE>Asts</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>AccVarNames</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Inf</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}<KEYWORD>;</KEYWORD>
                    <VARIABLE>Variable</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                        {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_ifvariable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>)<KEYWORD>,</KEYWORD>
                        {[<VARIABLE>Ast</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Asts</VARIABLE>]<KEYWORD>,</KEYWORD> [<VARIABLE>VarName</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>AccVarNames</VARIABLE>]<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Inf</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>}
                <KEYWORD>end</KEYWORD>                
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
        {[]<KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info<KEYWORD>.</KEYWORD>var_names<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD>
        <VARIABLE>Args</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(are_equal)<KEYWORD>,</KEYWORD>
            [<VARIABLE>Arg1Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Arg2Ast</VARIABLE>])<KEYWORD>,</KEYWORD>
        [
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>true</VALUE>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> [<VARIABLE>IfContentsAst</VARIABLE>])<KEYWORD>,</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>underscore</OO>()]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> [<VARIABLE>ElseContentsAst</VARIABLE>])
        ])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Info1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>#</KEYWORD>ast_info{var_names <OPERATOR>=</OPERATOR> <VARIABLE>VarNames</VARIABLE>})}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>         


<COMMENT>%% With statement with only a single variable, easy &amp; quick match.</COMMENT>
with_ast([<VARIABLE>Value</VARIABLE>]<KEYWORD>,</KEYWORD> [{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE>}]<KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Postfix</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>()<KEYWORD>,</KEYWORD>
    <VARIABLE>VarAst</VARIABLE>  <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"With_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>V</VARIABLE> <OPERATOR>++</OPERATOR> [<CHARACTER>$_</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Postfix</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>LocalScope</VARIABLE> <OPERATOR>=</OPERATOR> [ {<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>V</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>VarAst</VARIABLE>} ]<KEYWORD>,</KEYWORD>
    {{<VARIABLE>InnerAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InnerInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(
            <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD>
            <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{local_scopes<OPERATOR>=</OPERATOR>[<VARIABLE>LocalScope</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes]}<KEYWORD>,</KEYWORD> 
            <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>WithAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>block_expr</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ValueAst</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>InnerAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>WithAst</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>ValueInfo</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InnerInfo</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>;</KEYWORD>
    
<COMMENT>%% With statement with multiple vars, match against tuples and lists.</COMMENT>
with_ast([<VARIABLE>Value</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Variables</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Postfix</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>()<KEYWORD>,</KEYWORD>
    <VARIABLE>VarAsts</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>(<KEYWORD>fun</KEYWORD>({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> 
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"With_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>V</VARIABLE> <OPERATOR>++</OPERATOR> [<CHARACTER>$_</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Postfix</VARIABLE>]) 
            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>Variables</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>LocalScope</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>( <KEYWORD>fun</KEYWORD>({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                                    {<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>V</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"With_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>V</VARIABLE> <OPERATOR>++</OPERATOR> [<CHARACTER>$_</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Postfix</VARIABLE>]) } 
                            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>Variables</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>InnerAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InnerInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(
            <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD>
            <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{local_scopes<OPERATOR>=</OPERATOR>[<VARIABLE>LocalScope</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes]}<KEYWORD>,</KEYWORD> 
            <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
            
    <VARIABLE>ListClauseAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<VARIABLE>VarAsts</VARIABLE>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> [<VARIABLE>InnerAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>TupleClauseAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>(<VARIABLE>VarAsts</VARIABLE>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> [<VARIABLE>InnerAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>WithAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>ValueAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>ListClauseAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TupleClauseAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>WithAst</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>ValueInfo</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InnerInfo</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>;</KEYWORD>

<COMMENT>%% With statement with multiple expressions and multiple vars</COMMENT>
with_ast(<VARIABLE>ValueList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Variables</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Postfix</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>()<KEYWORD>,</KEYWORD>
    <VARIABLE>VarAsts</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>(<KEYWORD>fun</KEYWORD>({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> 
                            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"With_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>V</VARIABLE> <OPERATOR>++</OPERATOR> [<CHARACTER>$_</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Postfix</VARIABLE>]) 
                        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>Variables</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>ValueAsts</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldr</OO>(
                        <KEYWORD>fun</KEYWORD> (<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD>{{<VARIABLE>Vs</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Inf</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {{<VARIABLE>VAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>)<KEYWORD>,</KEYWORD>
                            {{[<VARIABLE>VAst</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Vs</VARIABLE>]<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>VInfo</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Inf</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>}
                        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                        {{[]<KEYWORD>,</KEYWORD><KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD>
                        <VARIABLE>ValueList</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>LocalScope</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>( <KEYWORD>fun</KEYWORD>({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                                {<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>V</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"With_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>V</VARIABLE> <OPERATOR>++</OPERATOR> [<CHARACTER>$_</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Postfix</VARIABLE>]) } 
                            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>Variables</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>InnerAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InnerInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(
            <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD>
            <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{local_scopes<OPERATOR>=</OPERATOR>[<VARIABLE>LocalScope</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes]}<KEYWORD>,</KEYWORD> 
            <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Assignments</VARIABLE> <OPERATOR>=</OPERATOR> [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(<VARIABLE>Var</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Val</VARIABLE>) <KEYWORD>||</KEYWORD> {<VARIABLE>Var</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Val</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>zip</OO>(<VARIABLE>VarAsts</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>ValueAsts</VARIABLE>) ]<KEYWORD>,</KEYWORD>
    <VARIABLE>WithAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>block_expr</OO>(<VARIABLE>Assignments</VARIABLE> <OPERATOR>++</OPERATOR> [<VARIABLE>InnerAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>WithAst</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>ValueInfo</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>InnerInfo</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>}<KEYWORD>.</KEYWORD>



for_loop_ast(<VARIABLE>IteratorList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>LoopValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>EmptyPartContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>PostFix</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>()<KEYWORD>,</KEYWORD>
    <VARIABLE>Vars</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>(<KEYWORD>fun</KEYWORD>({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Iterator</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> 
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Var_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Iterator</VARIABLE> <OPERATOR>++</OPERATOR> <VARIABLE>PostFix</VARIABLE>) 
            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>IteratorList</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{<VARIABLE>InnerAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>Contents</VARIABLE><KEYWORD>,</KEYWORD>
        <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{local_scopes <OPERATOR>=</OPERATOR> [
                [{<VALUE>'forloop'</VALUE><KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)} <KEYWORD>|</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>map</OO>(
                    <KEYWORD>fun</KEYWORD>({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Iterator</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>Iterator</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Var_"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Iterator</VARIABLE> <OPERATOR>++</OPERATOR> <VARIABLE>PostFix</VARIABLE>)} 
                    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>IteratorList</VARIABLE>)] <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes]}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>CounterAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> 
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(increment_counter_stats)<KEYWORD>,</KEYWORD> [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)])<KEYWORD>,</KEYWORD>

    {{<VARIABLE>LoopValueAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>LoopValueInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>LoopValue</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker2</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ListAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(to_list)<KEYWORD>,</KEYWORD> [<VARIABLE>LoopValueAst</VARIABLE><KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
    <VARIABLE>ListVarAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"LoopVar_"</STRING><OPERATOR>++</OPERATOR><OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>())<KEYWORD>,</KEYWORD>

    <VARIABLE>CounterVars0</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> resolve_scoped_variable_ast(<STRING>"forloop"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(init_counter_stats)<KEYWORD>,</KEYWORD> [<VARIABLE>ListVarAst</VARIABLE>])<KEYWORD>;</KEYWORD>
        <VARIABLE>ForLoopValue</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(init_counter_stats)<KEYWORD>,</KEYWORD> [<VARIABLE>ListVarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ForLoopValue</VARIABLE>])
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

    <VARIABLE>ForLoopF</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>fun</KEYWORD>(<VARIABLE>BaseListAst</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'erlang'</VALUE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'element'</VALUE>)<KEYWORD>,</KEYWORD>
            [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<NUMERIC>1</NUMERIC>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'lists'</VALUE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'mapfoldl'</VALUE>)<KEYWORD>,</KEYWORD>
                    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>fun_expr</OO>([
                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>(<VARIABLE>Vars</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)]<KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
                                    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<VARIABLE>InnerAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>CounterAst</VARIABLE>])])<KEYWORD>,</KEYWORD>
                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(<KEYWORD>case</KEYWORD> <VARIABLE>Vars</VARIABLE> <KEYWORD>of</KEYWORD> [<VARIABLE>H</VARIABLE>] <KEYWORD>-&gt;</KEYWORD> [<VARIABLE>H</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)]<KEYWORD>;</KEYWORD>
                                        _ <KEYWORD>-&gt;</KEYWORD> [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<VARIABLE>Vars</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)] <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> none<KEYWORD>,</KEYWORD> 
                                    [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<VARIABLE>InnerAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>CounterAst</VARIABLE>])])
                            ])<KEYWORD>,</KEYWORD>
                        <VARIABLE>CounterVars0</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BaseListAst</VARIABLE>])])
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

    {<VARIABLE>CompleteForLoopAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker4</VARIABLE>} <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>EmptyPartContents</VARIABLE> <KEYWORD>of</KEYWORD>
        none <KEYWORD>-&gt;</KEYWORD>
            {<VARIABLE>ForLoopF</VARIABLE>(<VARIABLE>ListVarAst</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>}<KEYWORD>;</KEYWORD>
        _ <KEYWORD>-&gt;</KEYWORD> 
            {{<VARIABLE>EmptyPartAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>EmptyPartInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>EmptyWalker</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(<VARIABLE>EmptyPartContents</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker3</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>LAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"L_"</STRING><OPERATOR>++</OPERATOR><OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>())<KEYWORD>,</KEYWORD>
            <VARIABLE>EmptyClauseAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
        		 [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([])]<KEYWORD>,</KEYWORD> 
        		 none<KEYWORD>,</KEYWORD>
        		 [<VARIABLE>EmptyPartAst</VARIABLE>])<KEYWORD>,</KEYWORD>
            <VARIABLE>LoopClauseAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                [<VARIABLE>LAst</VARIABLE>]<KEYWORD>,</KEYWORD>
                none<KEYWORD>,</KEYWORD>
                [<VARIABLE>ForLoopF</VARIABLE>(<VARIABLE>LAst</VARIABLE>)])<KEYWORD>,</KEYWORD>
            {<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>ListVarAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>EmptyClauseAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>LoopClauseAst</VARIABLE>])<KEYWORD>,</KEYWORD> merge_info(<VARIABLE>Info</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>EmptyPartInfo</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>EmptyWalker</VARIABLE>} 
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    <VARIABLE>ForBlockAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>block_expr</OO>([
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>match_expr</OO>(<VARIABLE>ListVarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ListAst</VARIABLE>)<KEYWORD>,</KEYWORD>
                        <VARIABLE>CompleteForLoopAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>ForBlockAst</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>LoopValueInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Info2</VARIABLE>)}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker4</VARIABLE>}<KEYWORD>.</KEYWORD>

load_ast(<VARIABLE>Names</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>CustomTags</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>merge</OO>([<VARIABLE>X</VARIABLE> <KEYWORD>||</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _ <KEYWORD>,</KEYWORD> <VARIABLE>X</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Names</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>#</KEYWORD>treewalker<KEYWORD>.</KEYWORD>custom_tags)<KEYWORD>,</KEYWORD>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([])<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>#</KEYWORD>treewalker{custom_tags <OPERATOR>=</OPERATOR> <VARIABLE>CustomTags</VARIABLE>}}<KEYWORD>.</KEYWORD>  

cycle_ast(<VARIABLE>Names</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>NamesTuple</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldr</OO>(
                        <KEYWORD>fun</KEYWORD>
                        ({string_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Str</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {[ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(unescape_string_literal(<VARIABLE>Str</VARIABLE>)) <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}<KEYWORD>;</KEYWORD>
						({trans_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Str</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
						  	{[ trans_literal_ast(<VARIABLE>Str</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}<KEYWORD>;</KEYWORD>
                        ({number_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Num</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            <VARIABLE>V</VARIABLE> <OPERATOR>=</OPERATOR> format(<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>Num</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
                            {[ <VARIABLE>V</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}<KEYWORD>;</KEYWORD>
                        ({variable<KEYWORD>,</KEYWORD> _}<OPERATOR>=</OPERATOR><VARIABLE>Var</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {{<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD><VARIABLE>TW2</VARIABLE>}  <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Var</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>)<KEYWORD>,</KEYWORD>
                            {[ <VARIABLE>V</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW2</VARIABLE>}<KEYWORD>;</KEYWORD>
                        ({auto_id<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                            {{<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> _}<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>} <OPERATOR>=</OPERATOR> auto_id_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>)<KEYWORD>,</KEYWORD>
                            {[ <VARIABLE>V</VARIABLE> <KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>}<KEYWORD>;</KEYWORD>
                        (_<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                           {[ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(undefined) <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}
                        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                        {[]<KEYWORD>,</KEYWORD><VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD>
                        <VARIABLE>Names</VARIABLE>)<KEYWORD>,</KEYWORD>

    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'erlydtl_runtime'</VALUE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'cycle'</VALUE>)<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>(<VARIABLE>NamesTuple</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)<KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>

<COMMENT>%% Older Django templates treat cycle with comma-delimited elements as strings</COMMENT>
cycle_compat_ast(<VARIABLE>Names</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>NamesTuple</VARIABLE> <OPERATOR>=</OPERATOR> [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>X</VARIABLE>) <KEYWORD>||</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>X</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Names</VARIABLE>]<KEYWORD>,</KEYWORD>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'erlydtl_runtime'</VALUE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>'cycle'</VALUE>)<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>(<VARIABLE>NamesTuple</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Counters"</STRING>)<KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%% @author Marc Worrell</COMMENT>
<COMMENT>%% @doc Output the trans record with the translation call to z_trans</COMMENT>
trans_ast(<VARIABLE>TransLiteral</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
	<COMMENT>% Remove the first and the last character, these were separating the string from the {_ and _} tokens</COMMENT>
	{{trans_ast1(<OBJ>z_string</OBJ><KEYWORD>:</KEYWORD><OO>trim</OO>(<VARIABLE>TransLiteral</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>

trans_ext_ast(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
	<VARIABLE>Lit</VARIABLE> <OPERATOR>=</OPERATOR> unescape_string_literal(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> noslash)<KEYWORD>,</KEYWORD>
	<VARIABLE>ArgsTrans</VARIABLE> <OPERATOR>=</OPERATOR> [ trans_arg(<VARIABLE>A</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>A</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Args</VARIABLE> ]<KEYWORD>,</KEYWORD>
	{{trans_ast1({trans<KEYWORD>,</KEYWORD> [{en<KEYWORD>,</KEYWORD><VARIABLE>Lit</VARIABLE>}<KEYWORD>|</KEYWORD><VARIABLE>ArgsTrans</VARIABLE>]}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>

    trans_arg({{identifier<KEYWORD>,</KEYWORD>_<KEYWORD>,</KEYWORD><VARIABLE>Lang</VARIABLE>}<KEYWORD>,</KEYWORD> {string_literal<KEYWORD>,</KEYWORD>_<KEYWORD>,</KEYWORD><VARIABLE>String</VARIABLE>}}) <KEYWORD>-&gt;</KEYWORD>
        {<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>Lang</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>String</VARIABLE>}<KEYWORD>.</KEYWORD>
        
trans_literal_ast(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
	<VARIABLE>Lit</VARIABLE> <OPERATOR>=</OPERATOR> unescape_string_literal(<VARIABLE>String</VARIABLE>)<KEYWORD>,</KEYWORD>
	trans_ast1(<VARIABLE>Lit</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Fetch the translations and put them into the compiled template.  We will need to</COMMENT>
<COMMENT>%% re-compile templates when translations are changed.</COMMENT>
trans_ast1(<VARIABLE>Arg</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <OBJ>z_trans</OBJ><KEYWORD>:</KEYWORD><OO>translations</OO>(<VARIABLE>Arg</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>z_context) <KEYWORD>of</KEYWORD>
        {trans<KEYWORD>,</KEYWORD> <VARIABLE>Tr</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
        	<VARIABLE>Tr1</VARIABLE> <OPERATOR>=</OPERATOR> [ {<OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_atom</OO>(<VARIABLE>Lang</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_binary</OO>(<VARIABLE>S</VARIABLE>)} <KEYWORD>||</KEYWORD> {<VARIABLE>Lang</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>S</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Tr</VARIABLE> ]<KEYWORD>,</KEYWORD>
        	<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
        		<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_trans)<KEYWORD>,</KEYWORD>
        		<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(trans)<KEYWORD>,</KEYWORD>
        		[
        			<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>abstract</OO>({trans<KEYWORD>,</KEYWORD> <VARIABLE>Tr1</VARIABLE>})<KEYWORD>,</KEYWORD>
        			z_context_ast(<VARIABLE>Context</VARIABLE>)
        		])<KEYWORD>;</KEYWORD>
        <VARIABLE>S</VARIABLE> <KEYWORD>when</KEYWORD> is_binary(<VARIABLE>S</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>abstract</OO>(<VARIABLE>S</VARIABLE>)<KEYWORD>;</KEYWORD>
        <VARIABLE>L</VARIABLE> <KEYWORD>when</KEYWORD> is_list(<VARIABLE>L</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>abstract</OO>(<FUNCTION>list_to_binary</FUNCTION>(<VARIABLE>L</VARIABLE>))
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
	


now_ast(<VARIABLE>FormatString</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <COMMENT>% Note: we can't use unescape_string_literal here</COMMENT>
    <COMMENT>% because we want to allow escaping in the format string.</COMMENT>
    {{<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_dateformat)<KEYWORD>,</KEYWORD>
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
        [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>FormatString</VARIABLE>)<KEYWORD>,</KEYWORD> z_context_ast(<VARIABLE>Context</VARIABLE>)])<KEYWORD>,</KEYWORD>
        <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>

unescape_string_literal(<VARIABLE>String</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>String</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> noslash)<KEYWORD>.</KEYWORD>

unescape_string_literal([]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> noslash) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>reverse</OO>(<VARIABLE>Acc</VARIABLE>)<KEYWORD>;</KEYWORD>
unescape_string_literal([<CHARACTER>$<ESC>\\</ESC></CHARACTER> <KEYWORD>|</KEYWORD> <VARIABLE>Rest</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> noslash) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> slash)<KEYWORD>;</KEYWORD>
unescape_string_literal([<VARIABLE>C</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Rest</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> noslash) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>C</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> noslash)<KEYWORD>;</KEYWORD>
unescape_string_literal(<STRING>"n"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> slash) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<CHARACTER>$<ESC>\n</ESC></CHARACTER> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> noslash)<KEYWORD>;</KEYWORD>
unescape_string_literal(<STRING>"r"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> slash) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<CHARACTER>$<ESC>\r</ESC></CHARACTER> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> noslash)<KEYWORD>;</KEYWORD>
unescape_string_literal(<STRING>"t"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> slash) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<CHARACTER>$<ESC>\t</ESC></CHARACTER> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> noslash)<KEYWORD>;</KEYWORD>
unescape_string_literal([<VARIABLE>C</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Rest</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> slash) <KEYWORD>-&gt;</KEYWORD>
    unescape_string_literal(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>C</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> noslash)<KEYWORD>.</KEYWORD>


full_path(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> full_path(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        [<VARIABLE>Filename</VARIABLE>] <KEYWORD>-&gt;</KEYWORD> {ok<KEYWORD>,</KEYWORD> <VARIABLE>Filename</VARIABLE>}<KEYWORD>;</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD> {error<KEYWORD>,</KEYWORD> enoent}
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

full_path(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>finder <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>z_context <KEYWORD>of</KEYWORD>
                undefined <KEYWORD>-&gt;</KEYWORD> []<KEYWORD>;</KEYWORD>
                <VARIABLE>ZContext</VARIABLE> <KEYWORD>-&gt;</KEYWORD> <OBJ>z_template</OBJ><KEYWORD>:</KEYWORD><OO>find_template</OO>(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ZContext</VARIABLE>)
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        <VARIABLE>FinderFun</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>FinderFun</VARIABLE>(<VARIABLE>File</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


<COMMENT>%%-------------------------------------------------------------------</COMMENT>
<COMMENT>%% Custom tags</COMMENT>
<COMMENT>%%-------------------------------------------------------------------</COMMENT>

tag_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>member</OO>(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>#</KEYWORD>treewalker<KEYWORD>.</KEYWORD>custom_tags) <KEYWORD>of</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
            {<VARIABLE>InterpretedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> interpreted_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>DefaultFilePath</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>filename</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>([<OBJ>erlydtl_deps</OBJ><KEYWORD>:</KEYWORD><OO>get_base_dir</OO>()<KEYWORD>,</KEYWORD> <STRING>"priv"</STRING><KEYWORD>,</KEYWORD> <STRING>"custom_tags"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>])<KEYWORD>,</KEYWORD>
            <KEYWORD>case</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>custom_tags_dir <KEYWORD>of</KEYWORD>
                [] <KEYWORD>-&gt;</KEYWORD>
                    <KEYWORD>case</KEYWORD> parse(<VARIABLE>DefaultFilePath</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
                        {ok<KEYWORD>,</KEYWORD> <VARIABLE>TagParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                            tag_ast2(<VARIABLE>DefaultFilePath</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TagParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InterpretedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>;</KEYWORD>
                        _ <KEYWORD>-&gt;</KEYWORD>
                            <VARIABLE>Reason</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>concat</OO>([<STRING>"Loading tag source for '"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"' failed: "</STRING><KEYWORD>,</KEYWORD> 
                                <VARIABLE>DefaultFilePath</VARIABLE>])<KEYWORD>,</KEYWORD>
                            <FUNCTION>throw</FUNCTION>({error<KEYWORD>,</KEYWORD> <VARIABLE>Reason</VARIABLE>})
                    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
                _ <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>CustomFilePath</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>filename</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>([<VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>custom_tags_dir<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>])<KEYWORD>,</KEYWORD>
                    <KEYWORD>case</KEYWORD> parse(<VARIABLE>CustomFilePath</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
                        {ok<KEYWORD>,</KEYWORD> <VARIABLE>TagParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                            tag_ast2(<VARIABLE>CustomFilePath</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>TagParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InterpretedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>;</KEYWORD>
                        _ <KEYWORD>-&gt;</KEYWORD>
                            <KEYWORD>case</KEYWORD> parse(<VARIABLE>DefaultFilePath</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
                                {ok<KEYWORD>,</KEYWORD> <VARIABLE>TagParseTree</VARIABLE>} <KEYWORD>-&gt;</KEYWORD>
                                    tag_ast2(<VARIABLE>DefaultFilePath</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TagParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InterpretedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>;</KEYWORD>
                                _ <KEYWORD>-&gt;</KEYWORD>
                                    <VARIABLE>Reason</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>concat</OO>([<STRING>"Loading tag source for '"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"' failed: "</STRING><KEYWORD>,</KEYWORD> 
                                        <VARIABLE>CustomFilePath</VARIABLE><KEYWORD>,</KEYWORD> <STRING>", "</STRING><KEYWORD>,</KEYWORD> <VARIABLE>DefaultFilePath</VARIABLE>])<KEYWORD>,</KEYWORD>
                                    <FUNCTION>throw</FUNCTION>({error<KEYWORD>,</KEYWORD> <VARIABLE>Reason</VARIABLE>})
                            <KEYWORD>end</KEYWORD>
                    <KEYWORD>end</KEYWORD>
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        _ <KEYWORD>-&gt;</KEYWORD>
            <COMMENT>% Dynamic scomp call</COMMENT>
            <COMMENT>% throw({error, lists:concat(["Custom tag '", Name, "' not loaded"])})</COMMENT>
            scomp_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
 
 tag_ast2(<VARIABLE>Source</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TagParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>InterpretedArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    with_dependency(<VARIABLE>Source</VARIABLE><KEYWORD>,</KEYWORD> body_ast(<VARIABLE>TagParseTree</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{
        local_scopes <OPERATOR>=</OPERATOR> [ <VARIABLE>InterpretedArgs</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes ]<KEYWORD>,</KEYWORD>
        parse_trail <OPERATOR>=</OPERATOR> [ <VARIABLE>Source</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>parse_trail ]}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>))<KEYWORD>.</KEYWORD>


call_ast(<VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    call_ast(<VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>.</KEYWORD>

call_with_ast(<VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Variable</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    call_ast(<VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>VarAst</VARIABLE><KEYWORD>,</KEYWORD> merge_info(<VARIABLE>VarInfo</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{var_names<OPERATOR>=</OPERATOR>[<VARIABLE>VarName</VARIABLE>]})<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>)<KEYWORD>.</KEYWORD>
        
call_ast(<VARIABLE>Module</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ArgAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AstInfo</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
     <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
		<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Module</VARIABLE>)<KEYWORD>,</KEYWORD>
		<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render)<KEYWORD>,</KEYWORD>
		[   <VARIABLE>ArgAst</VARIABLE><KEYWORD>,</KEYWORD>
		    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD>
		    z_context_ast(<VARIABLE>Context</VARIABLE>)
		])<KEYWORD>,</KEYWORD>
    <VARIABLE>RenderedAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Rendered"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>OkAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
	      [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(ok)<KEYWORD>,</KEYWORD> <VARIABLE>RenderedAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
	      none<KEYWORD>,</KEYWORD>
	      [<VARIABLE>RenderedAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>ReasonAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Reason"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrStrAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
		  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(io_lib)<KEYWORD>,</KEYWORD>
		  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
		  [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"error: <INTERPOLATION>~p</INTERPOLATION>"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([<VARIABLE>ReasonAst</VARIABLE>])])<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrorAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
		 [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(error)<KEYWORD>,</KEYWORD> <VARIABLE>ReasonAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
		 none<KEYWORD>,</KEYWORD>
		 [<VARIABLE>ErrStrAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>CallAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>OkAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrorAst</VARIABLE>])<KEYWORD>,</KEYWORD>   
    {{<VARIABLE>CallAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>AstInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%% @author Marc Worrell</COMMENT>
<COMMENT>%% @doc Generate html to show the media tag.  This is different in that the image tag can only</COMMENT>
<COMMENT>%% display images using the &lt;img /&gt; tag.  This can also generate complete media viewers.</COMMENT>
<COMMENT>%% @todo Optimization for the situation where all parameters are constants</COMMENT>
media_ast(<VARIABLE>FilenameValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>FilenameAst</VARIABLE> <OPERATOR>=</OPERATOR> resolve_value_ast(<VARIABLE>FilenameValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_media_tag)<KEYWORD>,</KEYWORD>
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(viewer)<KEYWORD>,</KEYWORD>
                        [   <VARIABLE>FilenameAst</VARIABLE><KEYWORD>,</KEYWORD>
                            <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                            z_context_ast(<VARIABLE>Context</VARIABLE>)
                        ]
                    )<KEYWORD>,</KEYWORD>
    <VARIABLE>RenderedAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Rendered"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>OkAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                      [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(ok)<KEYWORD>,</KEYWORD> <VARIABLE>RenderedAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                      none<KEYWORD>,</KEYWORD>
                      [<VARIABLE>RenderedAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>ReasonAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Reason"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrStrAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(io_lib)<KEYWORD>,</KEYWORD>
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
                	  [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"error: <INTERPOLATION>~p</INTERPOLATION>"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([<VARIABLE>ReasonAst</VARIABLE>])])<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrorAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                	 [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(error)<KEYWORD>,</KEYWORD> <VARIABLE>ReasonAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                	 none<KEYWORD>,</KEYWORD>
                	 [<VARIABLE>ErrStrAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>CallAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>OkAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrorAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>CallAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%% @author Marc Worrell</COMMENT>
<COMMENT>%% @doc Generate an image tag based on the image name and the arguments</COMMENT>
<COMMENT>%% @todo Optimization for the situation where all parameters are constants</COMMENT>
image_ast(<VARIABLE>FilenameValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>FilenameAst</VARIABLE> <OPERATOR>=</OPERATOR> resolve_value_ast(<VARIABLE>FilenameValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_media_tag)<KEYWORD>,</KEYWORD>
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(tag)<KEYWORD>,</KEYWORD>
                        [   <VARIABLE>FilenameAst</VARIABLE><KEYWORD>,</KEYWORD>
                            <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                            z_context_ast(<VARIABLE>Context</VARIABLE>)
                        ]
                    )<KEYWORD>,</KEYWORD>
    <VARIABLE>RenderedAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Rendered"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>OkAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                      [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(ok)<KEYWORD>,</KEYWORD> <VARIABLE>RenderedAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                      none<KEYWORD>,</KEYWORD>
                      [<VARIABLE>RenderedAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>ReasonAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Reason"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrStrAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(io_lib)<KEYWORD>,</KEYWORD>
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
                	  [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"error: <INTERPOLATION>~p</INTERPOLATION>"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([<VARIABLE>ReasonAst</VARIABLE>])])<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrorAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                	 [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(error)<KEYWORD>,</KEYWORD> <VARIABLE>ReasonAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                	 none<KEYWORD>,</KEYWORD>
                	 [<VARIABLE>ErrStrAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>CallAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>OkAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrorAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>CallAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%% @author Marc Worrell</COMMENT>
<COMMENT>%% @doc Generate an image url based on the image name and the arguments</COMMENT>
<COMMENT>%% @todo Optimization for the situation where all parameters are constants</COMMENT>
image_url_ast(<VARIABLE>FilenameValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>FilenameAst</VARIABLE> <OPERATOR>=</OPERATOR> resolve_value_ast(<VARIABLE>FilenameValue</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_media_tag)<KEYWORD>,</KEYWORD>
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(url)<KEYWORD>,</KEYWORD>
                        [   <VARIABLE>FilenameAst</VARIABLE><KEYWORD>,</KEYWORD>
                            <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                            z_context_ast(<VARIABLE>Context</VARIABLE>)
                        ]
                    )<KEYWORD>,</KEYWORD>
    <VARIABLE>RenderedAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Rendered"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>OkAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                      [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(ok)<KEYWORD>,</KEYWORD> <VARIABLE>RenderedAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                      none<KEYWORD>,</KEYWORD>
                      [<VARIABLE>RenderedAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>ReasonAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Reason"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrStrAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(io_lib)<KEYWORD>,</KEYWORD>
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
                	  [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"error: <INTERPOLATION>~p</INTERPOLATION>"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([<VARIABLE>ReasonAst</VARIABLE>])])<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrorAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                	 [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(error)<KEYWORD>,</KEYWORD> <VARIABLE>ReasonAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                	 none<KEYWORD>,</KEYWORD>
                	 [<VARIABLE>ErrStrAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>CallAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>OkAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrorAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>CallAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>
    

<COMMENT>%% Added by Marc Worrell - handle url generation using the url patterns</COMMENT>
url_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <COMMENT>% Check if the 'escape' argument is there</COMMENT>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_dispatcher)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(url_for)<KEYWORD>,</KEYWORD>
                [   <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                    z_context_ast(<VARIABLE>Context</VARIABLE>)
                ]
            )<KEYWORD>,</KEYWORD>
    {{<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>  


print_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>ValueAst</VARIABLE> <OPERATOR>=</OPERATOR> resolve_value_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>PrintAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(io_lib)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
                [   <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"<INTERPOLATION>~p</INTERPOLATION>"</STRING>)<KEYWORD>,</KEYWORD> 
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([<VARIABLE>ValueAst</VARIABLE>])
                ]
            )<KEYWORD>,</KEYWORD>
    <VARIABLE>FlattenAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(lists)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(flatten)<KEYWORD>,</KEYWORD>
                [<VARIABLE>PrintAst</VARIABLE>]
            )<KEYWORD>,</KEYWORD>
    <VARIABLE>EscapeAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(mochiweb_html)<KEYWORD>,</KEYWORD>
                  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(escape)<KEYWORD>,</KEYWORD>
                  [<VARIABLE>FlattenAst</VARIABLE>]
            )<KEYWORD>,</KEYWORD>
    <VARIABLE>PreAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"&lt;pre&gt;"</STRING>)<KEYWORD>,</KEYWORD>
                <VARIABLE>EscapeAst</VARIABLE><KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"&lt;/pre&gt;"</STRING>)
            ])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>PreAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD> 


lib_ast(<VARIABLE>LibList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Libs</VARIABLE> <OPERATOR>=</OPERATOR> [ unescape_string_literal(<VARIABLE>V</VARIABLE>) <KEYWORD>||</KEYWORD> {string_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>LibList</VARIABLE> ]<KEYWORD>,</KEYWORD>
    <VARIABLE>LibsAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<VARIABLE>L</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>L</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Libs</VARIABLE> ])<KEYWORD>,</KEYWORD>
    {<VARIABLE>ArgList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Ast</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_lib_include)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(tag)<KEYWORD>,</KEYWORD>
                [   <VARIABLE>LibsAst</VARIABLE><KEYWORD>,</KEYWORD>
		    <VARIABLE>ArgList</VARIABLE><KEYWORD>,</KEYWORD>
                    z_context_ast(<VARIABLE>Context</VARIABLE>)
                ])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>


cache_ast(<VARIABLE>MaxAge</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Body</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
	{<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args1</VARIABLE>} <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>Args</VARIABLE> <KEYWORD>of</KEYWORD>
		[{{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Ident</VARIABLE>}<KEYWORD>,</KEYWORD> <VALUE>true</VALUE>}<KEYWORD>|</KEYWORD><VARIABLE>RestArgs</VARIABLE>] <KEYWORD>when</KEYWORD> <VARIABLE>Ident</VARIABLE> <OPERATOR>=</OPERATOR><OPERATOR>/=</OPERATOR> <STRING>"if_anonymous"</STRING> <KEYWORD>-&gt;</KEYWORD> {<VARIABLE>Ident</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>RestArgs</VARIABLE>}<KEYWORD>;</KEYWORD>
		_ <KEYWORD>-&gt;</KEYWORD> {<OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>id</OO>()<KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE>}
	<KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
	<VARIABLE>MaxAge1</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>MaxAge</VARIABLE> <KEYWORD>of</KEYWORD>
		{number_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> <FUNCTION>list_to_integer</FUNCTION>(<VARIABLE>Value</VARIABLE>)<KEYWORD>;</KEYWORD>
		undefined <KEYWORD>-&gt;</KEYWORD> <NUMERIC>0</NUMERIC>
	<KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ArgsTreeWalker</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args1</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ContextVarAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Ctx_"</STRING> <OPERATOR>++</OPERATOR> <OBJ>z_ids</OBJ><KEYWORD>:</KEYWORD><OO>identifier</OO>(<NUMERIC>10</NUMERIC>))<KEYWORD>,</KEYWORD>
    {{<VARIABLE>BodyAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>BodyTreeWalker</VARIABLE>} <OPERATOR>=</OPERATOR> body_ast(
                                                <VARIABLE>Body</VARIABLE><KEYWORD>,</KEYWORD> 
                                                <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context{local_scopes <OPERATOR>=</OPERATOR> [ [{<VALUE>'ZpContext'</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>ContextVarAst</VARIABLE>}] <KEYWORD>|</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>dtl_context<KEYWORD>.</KEYWORD>local_scopes ]}<KEYWORD>,</KEYWORD>
                                                <VARIABLE>ArgsTreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>FuncAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>fun_expr</OO>([
        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
            [ <VARIABLE>ContextVarAst</VARIABLE> ]<KEYWORD>,</KEYWORD> 
            none<KEYWORD>,</KEYWORD> 
            [ <VARIABLE>BodyAst</VARIABLE> ]
        )
    ])<KEYWORD>,</KEYWORD>
    <VARIABLE>CacheAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(erlydtl_runtime)<KEYWORD>,</KEYWORD>
                  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(cache)<KEYWORD>,</KEYWORD>
                  [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<VARIABLE>MaxAge1</VARIABLE>)<KEYWORD>,</KEYWORD>
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<FUNCTION>list_to_atom</FUNCTION>(<STRING>"$tpl$"</STRING> <OPERATOR>++</OPERATOR> <VARIABLE>Name</VARIABLE>))<KEYWORD>,</KEYWORD>
                    <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                    <VARIABLE>FuncAst</VARIABLE><KEYWORD>,</KEYWORD>
                    z_context_ast(<VARIABLE>Context</VARIABLE>)]
            )<KEYWORD>,</KEYWORD>
    {{<VARIABLE>CacheAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>BodyInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>BodyTreeWalker</VARIABLE>}<KEYWORD>.</KEYWORD>


resolve_value_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD>_<VARIABLE>Info</VARIABLE>}<KEYWORD>,</KEYWORD>_<VARIABLE>TreeWalker</VARIABLE>} <OPERATOR>=</OPERATOR> value_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Ast</VARIABLE><KEYWORD>.</KEYWORD>


<COMMENT>%% Added by Marc Worrell - handle evaluation of scomps by z_scomp</COMMENT>
scomp_ast(<VARIABLE>ScompName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>false</VALUE> <OPERATOR>=</OPERATOR> _<VARIABLE>All</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_scomp)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render)<KEYWORD>,</KEYWORD>
                [   <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>ScompName</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD>
                    z_context_ast(<VARIABLE>Context</VARIABLE>)
                ]
            )<KEYWORD>,</KEYWORD>
    <VARIABLE>RenderedAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Rendered"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>CleanedAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_context)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(prune_for_template)<KEYWORD>,</KEYWORD>
                [<VARIABLE>RenderedAst</VARIABLE>]
            )<KEYWORD>,</KEYWORD>
    <VARIABLE>OkAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                      [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(ok)<KEYWORD>,</KEYWORD> <VARIABLE>RenderedAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                      none<KEYWORD>,</KEYWORD>
                      [<VARIABLE>CleanedAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>ReasonAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Reason"</STRING>)<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrStrAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(io_lib)<KEYWORD>,</KEYWORD>
                	  <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(format)<KEYWORD>,</KEYWORD>
                	  [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(<STRING>"error: <INTERPOLATION>~p</INTERPOLATION>"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([<VARIABLE>ReasonAst</VARIABLE>])])<KEYWORD>,</KEYWORD>
    <VARIABLE>ErrorAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>clause</OO>(
                	 [<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(error)<KEYWORD>,</KEYWORD> <VARIABLE>ReasonAst</VARIABLE>])]<KEYWORD>,</KEYWORD> 
                	 none<KEYWORD>,</KEYWORD>
                	 [<VARIABLE>ErrStrAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    <VARIABLE>CallAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>case_expr</OO>(<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>OkAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ErrorAst</VARIABLE>])<KEYWORD>,</KEYWORD>
    {{<VARIABLE>CallAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
scomp_ast(<VARIABLE>ScompName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VALUE>true</VALUE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>AppAst</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_scomp)<KEYWORD>,</KEYWORD>
                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(render_all)<KEYWORD>,</KEYWORD>
                [   <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>ScompName</VARIABLE>)<KEYWORD>,</KEYWORD> 
                    <VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD>
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>variable</OO>(<STRING>"Variables"</STRING>)<KEYWORD>,</KEYWORD>
                    z_context_ast(<VARIABLE>Context</VARIABLE>)
                ]
            )<KEYWORD>,</KEYWORD>
    {{<VARIABLE>AppAst</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>ast_info{}}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>


scomp_ast_list_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>ArgsAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<OPERATOR>=</OPERATOR> interpreted_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>PropListAst</VARIABLE> <OPERATOR>=</OPERATOR> [ <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>A</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>B</VARIABLE>]) <KEYWORD>||</KEYWORD> {<VARIABLE>A</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>B</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>ArgsAst</VARIABLE> ]<KEYWORD>,</KEYWORD>
    { <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<VARIABLE>PropListAst</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%%  lists:append(AutoId,"-Name")</COMMENT>
auto_id_ast({identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{   <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(lists)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(append)<KEYWORD>,</KEYWORD>
                    [resolve_scoped_variable_ast(<STRING>"$autoid"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>([<CHARACTER>$-</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Name</VARIABLE>])])<KEYWORD>,</KEYWORD>
        <KEYWORD>#</KEYWORD>ast_info{}
    }<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE><KEYWORD>#</KEYWORD>treewalker{has_auto_id<OPERATOR>=</OPERATOR><VALUE>true</VALUE>}}<KEYWORD>;</KEYWORD>

auto_id_ast({{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> _} <OPERATOR>=</OPERATOR> <VARIABLE>Var</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast({variable<KEYWORD>,</KEYWORD> <VARIABLE>Var</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {{   <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                    <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(lists)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(append)<KEYWORD>,</KEYWORD>
                    [   
                        <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>([
                            resolve_scoped_variable_ast(<STRING>"$autoid"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> 
                            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>([<CHARACTER>$-</CHARACTER><KEYWORD>|</KEYWORD><VARIABLE>Name</VARIABLE>]<OPERATOR>++</OPERATOR><STRING>"-"</STRING>)<KEYWORD>,</KEYWORD>
                            <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>application</OO>(
                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(z_convert)<KEYWORD>,</KEYWORD>
                                <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(to_list)<KEYWORD>,</KEYWORD>
                                [<VARIABLE>V</VARIABLE>])
                        ])
                    ])<KEYWORD>,</KEYWORD>
       <VARIABLE>VarInfo</VARIABLE>
    }<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE><KEYWORD>#</KEYWORD>treewalker{has_auto_id<OPERATOR>=</OPERATOR><VALUE>true</VALUE>}}<KEYWORD>.</KEYWORD>


interpreted_args(<VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldr</OO>(
        <KEYWORD>fun</KEYWORD>
            ({{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <STRING>"postback"</STRING>}<KEYWORD>,</KEYWORD> {<VARIABLE>Literal</VARIABLE><KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}}<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}) <KEYWORD>when</KEYWORD> <VARIABLE>Literal</VARIABLE> <OPERATOR>==</OPERATOR> string_literal<KEYWORD>;</KEYWORD> <VARIABLE>Literal</VARIABLE> <OPERATOR>==</OPERATOR> trans_literal <KEYWORD>-&gt;</KEYWORD>
                <COMMENT>% string postbacks are always translated to atoms</COMMENT>
                { [ {<FUNCTION>list_to_atom</FUNCTION>(<STRING>"postback"</STRING>)<KEYWORD>,</KEYWORD> <OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(unescape_string_literal(<VARIABLE>Value</VARIABLE>))} <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE> }<KEYWORD>;</KEYWORD>
            ({{identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Key</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
                <COMMENT>% a normal key=value argument</COMMENT>
                {<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>} <OPERATOR>=</OPERATOR> interpreted_argval(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>)<KEYWORD>,</KEYWORD>
                { [ {<FUNCTION>list_to_atom</FUNCTION>(<VARIABLE>Key</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Ast</VARIABLE>} <KEYWORD>|</KEYWORD> <VARIABLE>Acc</VARIABLE> ]<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE> }
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
        {[]<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD>
        <VARIABLE>Args</VARIABLE>)<KEYWORD>.</KEYWORD>

interpreted_argval({number_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> _<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
    {<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>integer</OO>(<FUNCTION>list_to_integer</FUNCTION>(<VARIABLE>Value</VARIABLE>))<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval({string_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> _<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
    {<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>string</OO>(unescape_string_literal(<VARIABLE>Value</VARIABLE>))<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval({trans_literal<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {trans_literal_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval({auto_id<KEYWORD>,</KEYWORD> <VARIABLE>Name</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> _}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> auto_id_ast(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD> 
    {<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval({tuple_value<KEYWORD>,</KEYWORD> {identifier<KEYWORD>,</KEYWORD> _<KEYWORD>,</KEYWORD> <VARIABLE>TupleName</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TupleArgs</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>ArgList</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> scomp_ast_list_args(<VARIABLE>TupleArgs</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>tuple</OO>([<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VARIABLE>TupleName</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>ArgList</VARIABLE>])<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval({value_list<KEYWORD>,</KEYWORD> <VARIABLE>Values</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>List</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldr</OO>(
        <KEYWORD>fun</KEYWORD>(<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>Acc</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> 
            {<VARIABLE>VAst</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>} <OPERATOR>=</OPERATOR> interpreted_argval(<VARIABLE>V</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TW</VARIABLE>)<KEYWORD>,</KEYWORD>
            {[<VARIABLE>VAst</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>TW1</VARIABLE>}
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
        {[]<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>,</KEYWORD>
        <VARIABLE>Values</VARIABLE>
    )<KEYWORD>,</KEYWORD>
    {<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>list</OO>(<VARIABLE>List</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval(<VALUE>true</VALUE><KEYWORD>,</KEYWORD> _<VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<OBJ>erl_syntax</OBJ><KEYWORD>:</KEYWORD><OO>atom</OO>(<VALUE>true</VALUE>)<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>}<KEYWORD>;</KEYWORD>
interpreted_argval(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {{<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>VarName</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>VarInfo</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>} <OPERATOR>=</OPERATOR> resolve_variable_ast(<VARIABLE>Value</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker</VARIABLE>)<KEYWORD>,</KEYWORD>
    {<VARIABLE>Ast</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>TreeWalker1</VARIABLE>}<KEYWORD>.</KEYWORD>