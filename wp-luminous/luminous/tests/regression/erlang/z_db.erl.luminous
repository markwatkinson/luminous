<COMMENT>%% @author Marc Worrell &lt;marc@worrell.nl&gt;</COMMENT>
<COMMENT>%% @copyright 2009 Marc Worrell</COMMENT>
<COMMENT>%% @date 2009-04-07</COMMENT>
<COMMENT>%%</COMMENT>
<COMMENT>%% @doc Interface to database, uses database definition from Context</COMMENT>

<COMMENT>%% Copyright 2009 Marc Worrell</COMMENT>
<COMMENT>%%</COMMENT>
<COMMENT>%% Licensed under the Apache License, Version 2.0 (the "License");</COMMENT>
<COMMENT>%% you may not use this file except in compliance with the License.</COMMENT>
<COMMENT>%% You may obtain a copy of the License at</COMMENT>
<COMMENT>%% </COMMENT>
<COMMENT>%%     http://www.apache.org/licenses/LICENSE-2.0</COMMENT>
<COMMENT>%% </COMMENT>
<COMMENT>%% Unless required by applicable law or agreed to in writing, software</COMMENT>
<COMMENT>%% distributed under the License is distributed on an "AS IS" BASIS,</COMMENT>
<COMMENT>%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</COMMENT>
<COMMENT>%% See the License for the specific language governing permissions and</COMMENT>
<COMMENT>%% limitations under the License.</COMMENT>

<KEYWORD>-module</KEYWORD>(z_db)<KEYWORD>.</KEYWORD>
<KEYWORD>-author</KEYWORD>(<STRING>"Marc Worrell &lt;marc@worrell.nl"</STRING>)<KEYWORD>.</KEYWORD>

<COMMENT>%% interface functions</COMMENT>
<KEYWORD>-export</KEYWORD>([
    has_connection<OPERATOR>/</OPERATOR><NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD>
    transaction<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    transaction_clear<OPERATOR>/</OPERATOR><NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD>
    set<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    <FUNCTION>get</FUNCTION><OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    get_parameter<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    assoc_row<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    assoc_row<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    assoc_props_row<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    assoc_props_row<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    assoc<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    assoc<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    assoc_props<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    assoc_props<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    q<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    q<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    q1<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    q1<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    q_row<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    q_row<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    equery<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    equery<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    insert<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    insert<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    update<OPERATOR>/</OPERATOR><NUMERIC>4</NUMERIC><KEYWORD>,</KEYWORD>
    delete<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    select<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    columns<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    column_names<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    update_sequence<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    table_exists<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    ensure_table<OPERATOR>/</OPERATOR><NUMERIC>3</NUMERIC><KEYWORD>,</KEYWORD>
    drop_table<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD>
    flush<OPERATOR>/</OPERATOR><NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD>
    
    assert_table_name<OPERATOR>/</OPERATOR><NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD>
    prepare_cols<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC>
])<KEYWORD>.</KEYWORD>


<KEYWORD>-include_lib</KEYWORD>(<STRING>"pgsql.hrl"</STRING>)<KEYWORD>.</KEYWORD>
<KEYWORD>-include_lib</KEYWORD>(<STRING>"zotonic.hrl"</STRING>)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Perform a function inside a transaction, do a rollback on exceptions</COMMENT>
<COMMENT>%% @spec transaction(Function, Context) -&gt; FunctionResult | {error, Reason}</COMMENT>
transaction(<VARIABLE>Function</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>context{dbc<OPERATOR>=</OPERATOR>undefined} <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> has_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Host</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>context<KEYWORD>.</KEYWORD>host<KEYWORD>,</KEYWORD>
            {ok<KEYWORD>,</KEYWORD> <VARIABLE>C</VARIABLE>}  <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_connection</OO>(<VARIABLE>Host</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>Context1</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>context{dbc<OPERATOR>=</OPERATOR><VARIABLE>C</VARIABLE>}<KEYWORD>,</KEYWORD>
            <VARIABLE>Result</VARIABLE> <OPERATOR>=</OPERATOR> try
                        {ok<KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> []} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>squery</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"BEGIN"</STRING>)<KEYWORD>,</KEYWORD>
                        <VARIABLE>R</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>Function</VARIABLE>(<VARIABLE>Context1</VARIABLE>)<KEYWORD>,</KEYWORD>
                        {ok<KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> []} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>squery</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"COMMIT"</STRING>)<KEYWORD>,</KEYWORD>
                        <VARIABLE>R</VARIABLE>
                     <KEYWORD>catch</KEYWORD>
                        _<KEYWORD>:</KEYWORD><VARIABLE>Why</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                            <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>squery</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"ROLLBACK"</STRING>)<KEYWORD>,</KEYWORD>
                            {rollback<KEYWORD>,</KEYWORD> {<VARIABLE>Why</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>erlang</OBJ><KEYWORD>:</KEYWORD><OO>get_stacktrace</OO>()}}
                     <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
            <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>return_connection</OO>(<VARIABLE>Host</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>C</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>Result</VARIABLE><KEYWORD>;</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
            {rollback<KEYWORD>,</KEYWORD> {no_database_connection<KEYWORD>,</KEYWORD> <OBJ>erlang</OBJ><KEYWORD>:</KEYWORD><OO>get_stacktrace</OO>()}}
    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
transaction(<VARIABLE>Function</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <COMMENT>% Nested transaction, only keep the outermost transaction</COMMENT>
    <VARIABLE>Function</VARIABLE>(<VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

<COMMENT>%% @doc Clear any transaction in the context, useful when starting a thread with this context.</COMMENT>
transaction_clear(<KEYWORD>#</KEYWORD>context{dbc<OPERATOR>=</OPERATOR>undefined} <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Context</VARIABLE><KEYWORD>;</KEYWORD>
transaction_clear(<VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>context{dbc<OPERATOR>=</OPERATOR>undefined}<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Simple get/set functions for db property lists</COMMENT>
set(<VARIABLE>Key</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keystore</OO>(<VARIABLE>Key</VARIABLE><KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> {<VARIABLE>Key</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>})<KEYWORD>.</KEYWORD>
<FUNCTION>get</FUNCTION>(<VARIABLE>Key</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(<VARIABLE>Key</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE>)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Check if we have database connection</COMMENT>
has_connection(<KEYWORD>#</KEYWORD>context{host<OPERATOR>=</OPERATOR><VARIABLE>Host</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
    is_pid(<OBJ>erlang</OBJ><KEYWORD>:</KEYWORD><OO>whereis</OO>(<VARIABLE>Host</VARIABLE>))<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Transaction handler safe function for fetching a db connection</COMMENT>
get_connection(<KEYWORD>#</KEYWORD>context{dbc<OPERATOR>=</OPERATOR>undefined<KEYWORD>,</KEYWORD> host<OPERATOR>=</OPERATOR><VARIABLE>Host</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> has_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
            {ok<KEYWORD>,</KEYWORD> <VARIABLE>C</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_connection</OO>(<VARIABLE>Host</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>C</VARIABLE><KEYWORD>;</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
            none
    <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
get_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Context</VARIABLE><KEYWORD>#</KEYWORD>context<KEYWORD>.</KEYWORD>dbc<KEYWORD>.</KEYWORD>

<COMMENT>%% @doc Transaction handler safe function for releasing a db connection</COMMENT>
return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>#</KEYWORD>context{dbc<OPERATOR>=</OPERATOR>undefined<KEYWORD>,</KEYWORD> host<OPERATOR>=</OPERATOR><VARIABLE>Host</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>return_connection</OO>(<VARIABLE>Host</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>C</VARIABLE>)<KEYWORD>;</KEYWORD>
return_connection(_<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> _<VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
    ok<KEYWORD>.</KEYWORD>


assoc_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assoc_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

assoc_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> assoc(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        [<VARIABLE>Row</VARIABLE><KEYWORD>|</KEYWORD>_] <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Row</VARIABLE><KEYWORD>;</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD> undefined
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

assoc_props_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assoc_props_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

assoc_props_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> assoc_props(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        [<VARIABLE>Row</VARIABLE><KEYWORD>|</KEYWORD>_] <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Row</VARIABLE><KEYWORD>;</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD> undefined
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
    

get_parameter(<VARIABLE>Parameter</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>C</VARIABLE> <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    try
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>Result</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>get_parameter</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_binary</OO>(<VARIABLE>Parameter</VARIABLE>))<KEYWORD>,</KEYWORD>
        <VARIABLE>Result</VARIABLE>
    <KEYWORD>after</KEYWORD>
        return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
    

<COMMENT>%% @doc Return property lists of the results of a query on the database in the Context</COMMENT>
<COMMENT>%% @spec assoc(SqlQuery, Context) -&gt; Rows</COMMENT>
assoc(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assoc(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

assoc(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> get_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        none <KEYWORD>-&gt;</KEYWORD> []<KEYWORD>;</KEYWORD>
        <VARIABLE>C</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            try
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>Result</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>assoc</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>)<KEYWORD>,</KEYWORD>
                <VARIABLE>Result</VARIABLE>
            <KEYWORD>after</KEYWORD>
                return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
            <KEYWORD>end</KEYWORD>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


assoc_props(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assoc_props(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

assoc_props(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> get_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        none <KEYWORD>-&gt;</KEYWORD> []<KEYWORD>;</KEYWORD>
        <VARIABLE>C</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            try
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>Result</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>assoc</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>)<KEYWORD>,</KEYWORD>
                merge_props(<VARIABLE>Result</VARIABLE>)
            <KEYWORD>after</KEYWORD>
                return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
            <KEYWORD>end</KEYWORD>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


q(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    q(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

q(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> get_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        none <KEYWORD>-&gt;</KEYWORD> []<KEYWORD>;</KEYWORD>
        <VARIABLE>C</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            try
                <KEYWORD>case</KEYWORD> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>) <KEYWORD>of</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> _<VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Rows</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Rows</VARIABLE><KEYWORD>;</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Rows</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Rows</VARIABLE>
                <KEYWORD>end</KEYWORD>
            <KEYWORD>after</KEYWORD>
                return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
            <KEYWORD>end</KEYWORD>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

q1(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    q1(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

q1(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> get_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        none <KEYWORD>-&gt;</KEYWORD> undefined<KEYWORD>;</KEYWORD>
        <VARIABLE>C</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            try
                <KEYWORD>case</KEYWORD> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>) <KEYWORD>of</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Value</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Value</VARIABLE><KEYWORD>;</KEYWORD>
                    {error<KEYWORD>,</KEYWORD> noresult} <KEYWORD>-&gt;</KEYWORD> undefined
                <KEYWORD>end</KEYWORD>
            <KEYWORD>after</KEYWORD>
                return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
            <KEYWORD>end</KEYWORD>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

q_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    q_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>

q_row(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> q(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Args</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        [<VARIABLE>Row</VARIABLE><KEYWORD>|</KEYWORD>_] <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Row</VARIABLE><KEYWORD>;</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD> undefined
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


equery(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    equery(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>
    
equery(<VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> get_connection(<VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        none <KEYWORD>-&gt;</KEYWORD> 
            {error<KEYWORD>,</KEYWORD> noresult}<KEYWORD>;</KEYWORD>
        <VARIABLE>C</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            try
                <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>)
            <KEYWORD>after</KEYWORD>
                return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
            <KEYWORD>end</KEYWORD>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

<COMMENT>%% @doc Insert a new row in a table, use only default values.</COMMENT>
<COMMENT>%% @spec insert(Table, Context) -&gt; {ok, Id}</COMMENT>
insert(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    insert(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
insert(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assert_table_name(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>C</VARIABLE> <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    try
        <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"insert into <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> default values returning id"</STRING>)
    <KEYWORD>after</KEYWORD>
        return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Insert a row, setting the fields to the props.  Unknown columns are serialized in the props column.</COMMENT>
<COMMENT>%% When the table has an 'id' column then the new id is returned.</COMMENT>
<COMMENT>%% @spec insert(Database, Context) -&gt; {ok, Id} | Error</COMMENT>
insert(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>  
    insert(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
insert(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    insert(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
insert(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>  
    assert_table_name(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Cols</VARIABLE> <OPERATOR>=</OPERATOR> column_names(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>InsertProps</VARIABLE> <OPERATOR>=</OPERATOR> prepare_cols(<VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE>)<KEYWORD>,</KEYWORD>

    <VARIABLE>InsertProps1</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>InsertProps</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>InsertProps</VARIABLE><KEYWORD>;</KEYWORD>
        <VARIABLE>PropsCol</VARIABLE> <KEYWORD>-&gt;</KEYWORD> 
            <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keystore</OO>(props<KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>InsertProps</VARIABLE><KEYWORD>,</KEYWORD> {props<KEYWORD>,</KEYWORD> cleanup_props(<VARIABLE>PropsCol</VARIABLE>)})
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    
    <COMMENT>%% Build the SQL insert statement</COMMENT>
    {<VARIABLE>ColNames</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Parameters</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>unzip</OO>(<VARIABLE>InsertProps1</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Sql</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"insert into <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> (<ESC>\"</ESC>"</STRING> 
             <OPERATOR>++</OPERATOR> <OBJ>string</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>([ <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>ColName</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>ColName</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>ColNames</VARIABLE> ]<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC>, <ESC>\"</ESC>"</STRING>)
             <OPERATOR>++</OPERATOR> <STRING>"<ESC>\"</ESC>) values ("</STRING>
             <OPERATOR>++</OPERATOR> <OBJ>string</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>([ [<CHARACTER>$$</CHARACTER> <KEYWORD>|</KEYWORD> <FUNCTION>integer_to_list</FUNCTION>(<VARIABLE>N</VARIABLE>)] <KEYWORD>||</KEYWORD> <VARIABLE>N</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>seq</OO>(<NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <FUNCTION>length</FUNCTION>(<VARIABLE>Parameters</VARIABLE>)) ]<KEYWORD>,</KEYWORD> <STRING>", "</STRING>)
             <OPERATOR>++</OPERATOR> <STRING>")"</STRING><KEYWORD>,</KEYWORD>

    <VARIABLE>FinalSql</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>member</OO>(id<KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE>) <KEYWORD>of</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Sql</VARIABLE> <OPERATOR>++</OPERATOR> <STRING>" returning id"</STRING><KEYWORD>;</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>Sql</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

    <VARIABLE>C</VARIABLE> <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    try
        <VARIABLE>Id</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>FinalSql</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>) <KEYWORD>of</KEYWORD>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>IdVal</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> <VARIABLE>IdVal</VARIABLE><KEYWORD>;</KEYWORD>
                {error<KEYWORD>,</KEYWORD> noresult} <KEYWORD>-&gt;</KEYWORD> undefined
             <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
         {ok<KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE>}
    <KEYWORD>after</KEYWORD>
        return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

<COMMENT>%% @doc Update a row in a table, merging the props list with any new props values</COMMENT>
<COMMENT>%% @spec update(Table, Id, Parameters, Context) -&gt; {ok, RowsUpdated}</COMMENT>
update(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    update(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
update(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assert_table_name(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Cols</VARIABLE>         <OPERATOR>=</OPERATOR> column_names(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>UpdateProps</VARIABLE>  <OPERATOR>=</OPERATOR> prepare_cols(<VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Parameters</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>C</VARIABLE>            <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    try
        <VARIABLE>UpdateProps1</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>is_defined</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>UpdateProps</VARIABLE>) <KEYWORD>of</KEYWORD>
            <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
                <COMMENT>% Merge the new props with the props in the database</COMMENT>
                {ok<KEYWORD>,</KEYWORD> <VARIABLE>OldProps</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"select props from <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> where id = $1"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>Id</VARIABLE>])<KEYWORD>,</KEYWORD>
                <KEYWORD>case</KEYWORD> is_list(<VARIABLE>OldProps</VARIABLE>) <KEYWORD>of</KEYWORD>
                    <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
                        <VARIABLE>FReplace</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>fun</KEYWORD> ({<VARIABLE>P</VARIABLE><KEYWORD>,</KEYWORD>_} <OPERATOR>=</OPERATOR> <VARIABLE>T</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>L</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keystore</OO>(<VARIABLE>P</VARIABLE><KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>L</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>T</VARIABLE>) <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                        <VARIABLE>NewProps</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(<VARIABLE>FReplace</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>OldProps</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>UpdateProps</VARIABLE>))<KEYWORD>,</KEYWORD>
                        <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keystore</OO>(props<KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>UpdateProps</VARIABLE><KEYWORD>,</KEYWORD> {props<KEYWORD>,</KEYWORD> cleanup_props(<VARIABLE>NewProps</VARIABLE>)})<KEYWORD>;</KEYWORD>
                    <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
                        <VARIABLE>UpdateProps</VARIABLE>
                <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
            <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
                <VARIABLE>UpdateProps</VARIABLE>
        <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>

        {<VARIABLE>ColNames</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Params</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>unzip</OO>(<VARIABLE>UpdateProps1</VARIABLE>)<KEYWORD>,</KEYWORD>
        <VARIABLE>ColNamesNr</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>zip</OO>(<VARIABLE>ColNames</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>seq</OO>(<NUMERIC>2</NUMERIC><KEYWORD>,</KEYWORD> <FUNCTION>length</FUNCTION>(<VARIABLE>ColNames</VARIABLE>)<NUMERIC>+1</NUMERIC>))<KEYWORD>,</KEYWORD>

        <VARIABLE>Sql</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"update <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> set "</STRING> 
                 <OPERATOR>++</OPERATOR> <OBJ>string</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>([ <STRING>"<ESC>\"</ESC>"</STRING> <OPERATOR>++</OPERATOR> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>ColName</VARIABLE>) <OPERATOR>++</OPERATOR> <STRING>"<ESC>\"</ESC> = $"</STRING> <OPERATOR>++</OPERATOR> <FUNCTION>integer_to_list</FUNCTION>(<VARIABLE>Nr</VARIABLE>) <KEYWORD>||</KEYWORD> {<VARIABLE>ColName</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Nr</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>ColNamesNr</VARIABLE> ]<KEYWORD>,</KEYWORD> <STRING>", "</STRING>)
                 <OPERATOR>++</OPERATOR> <STRING>" where id = $1"</STRING><KEYWORD>,</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>RowsUpdated</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>Id</VARIABLE> <KEYWORD>|</KEYWORD> <VARIABLE>Params</VARIABLE>])<KEYWORD>,</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>RowsUpdated</VARIABLE>}
    <KEYWORD>after</KEYWORD>
        return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Delete a row from a table, the row must have a column with the name 'id'</COMMENT>
<COMMENT>%% @spec delete(Table, Id, Context) -&gt; {ok, RowsDeleted}</COMMENT>
delete(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    delete(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
delete(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assert_table_name(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>C</VARIABLE> <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    try
        <VARIABLE>Sql</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"delete from <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> where id = $1"</STRING><KEYWORD>,</KEYWORD> 
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>RowsDeleted</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>Id</VARIABLE>])<KEYWORD>,</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>RowsDeleted</VARIABLE>}
    <KEYWORD>after</KEYWORD>
        return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>



<COMMENT>%% @doc Read a row from a table, the row must have a column with the name 'id'.  </COMMENT>
<COMMENT>%% The props column contents is merged with the other properties returned.</COMMENT>
<COMMENT>%% @spec select(Table, Id, Context) -&gt; {ok, Row}</COMMENT>
select(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    select(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
select(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Id</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assert_table_name(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>C</VARIABLE> <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Row</VARIABLE>} <OPERATOR>=</OPERATOR> try
        <VARIABLE>Sql</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"select * from <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> where id = $1 limit 1"</STRING><KEYWORD>,</KEYWORD> 
        <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>assoc</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Sql</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>Id</VARIABLE>])
    <KEYWORD>after</KEYWORD>
        return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    
    <VARIABLE>Props</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>Row</VARIABLE> <KEYWORD>of</KEYWORD>
        [<VARIABLE>R</VARIABLE>] <KEYWORD>-&gt;</KEYWORD>
            <KEYWORD>case</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>R</VARIABLE>) <KEYWORD>of</KEYWORD>
                <VARIABLE>PropsCol</VARIABLE> <KEYWORD>when</KEYWORD> is_list(<VARIABLE>PropsCol</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
                    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keydelete</OO>(props<KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>R</VARIABLE>) <OPERATOR>++</OPERATOR> <VARIABLE>PropsCol</VARIABLE><KEYWORD>;</KEYWORD>
                _ <KEYWORD>-&gt;</KEYWORD>
                    <VARIABLE>R</VARIABLE>
            <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD>
            []
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Remove all undefined props, translate texts to binaries.</COMMENT>
cleanup_props(<VARIABLE>Ps</VARIABLE>) <KEYWORD>when</KEYWORD> is_list(<VARIABLE>Ps</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    [ {<VARIABLE>K</VARIABLE><KEYWORD>,</KEYWORD>to_binary_string(<VARIABLE>V</VARIABLE>)} <KEYWORD>||</KEYWORD> {<VARIABLE>K</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>V</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Ps</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>V</VARIABLE> <OPERATOR>/=</OPERATOR> undefined ]<KEYWORD>;</KEYWORD>
cleanup_props(<VARIABLE>P</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
    <VARIABLE>P</VARIABLE><KEYWORD>.</KEYWORD>

    to_binary_string([]) <KEYWORD>-&gt;</KEYWORD> []<KEYWORD>;</KEYWORD>
    to_binary_string(<VARIABLE>L</VARIABLE>) <KEYWORD>when</KEYWORD> is_list(<VARIABLE>L</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <KEYWORD>case</KEYWORD> <OBJ>z_string</OBJ><KEYWORD>:</KEYWORD><OO>is_string</OO>(<VARIABLE>L</VARIABLE>) <KEYWORD>of</KEYWORD>
            <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> <FUNCTION>list_to_binary</FUNCTION>(<VARIABLE>L</VARIABLE>)<KEYWORD>;</KEYWORD>
            <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>L</VARIABLE>
        <KEYWORD>end</KEYWORD><KEYWORD>;</KEYWORD>
    to_binary_string({trans<KEYWORD>,</KEYWORD> <VARIABLE>Tr</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
        {trans<KEYWORD>,</KEYWORD> [ {<VARIABLE>Lang</VARIABLE><KEYWORD>,</KEYWORD>to_binary(<VARIABLE>V</VARIABLE>)} <KEYWORD>||</KEYWORD> {<VARIABLE>Lang</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>V</VARIABLE>} <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Tr</VARIABLE> ]}<KEYWORD>;</KEYWORD>
    to_binary_string(<VARIABLE>V</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
        <VARIABLE>V</VARIABLE><KEYWORD>.</KEYWORD>

    to_binary(<VARIABLE>L</VARIABLE>) <KEYWORD>when</KEYWORD> is_list(<VARIABLE>L</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <FUNCTION>list_to_binary</FUNCTION>(<VARIABLE>L</VARIABLE>)<KEYWORD>;</KEYWORD>
    to_binary(<VARIABLE>V</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <VARIABLE>V</VARIABLE><KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Check if all cols are valid columns in the target table, move unknown properties to the props column (if exists)</COMMENT>
prepare_cols(<VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>CProps</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>PProps</VARIABLE>} <OPERATOR>=</OPERATOR> split_props(<VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> <VARIABLE>PProps</VARIABLE> <KEYWORD>of</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>CProps</VARIABLE><KEYWORD>;</KEYWORD>
        _  <KEYWORD>-&gt;</KEYWORD> 
            <VARIABLE>PPropsMerged</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>is_defined</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>CProps</VARIABLE>) <KEYWORD>of</KEYWORD>
                            <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
                                <VARIABLE>FReplace</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>fun</KEYWORD> ({<VARIABLE>P</VARIABLE><KEYWORD>,</KEYWORD>_} <OPERATOR>=</OPERATOR> <VARIABLE>T</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>L</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keystore</OO>(<VARIABLE>P</VARIABLE><KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>L</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>T</VARIABLE>) <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
                                <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>foldl</OO>(<VARIABLE>FReplace</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>CProps</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>PProps</VARIABLE>)<KEYWORD>;</KEYWORD>
                            <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> 
                                <VARIABLE>PProps</VARIABLE>
                           <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
            [{props<KEYWORD>,</KEYWORD> <VARIABLE>PPropsMerged</VARIABLE>} <KEYWORD>|</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>delete</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>CProps</VARIABLE>)]
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

split_props(<VARIABLE>Props</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {<VARIABLE>CProps</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>PProps</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>partition</OO>(<KEYWORD>fun</KEYWORD> ({<VARIABLE>P</VARIABLE><KEYWORD>,</KEYWORD>_<VARIABLE>V</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>member</OO>(<VARIABLE>P</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE>) <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD> <VARIABLE>Props</VARIABLE>)<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> <VARIABLE>PProps</VARIABLE> <KEYWORD>of</KEYWORD>
        [] <KEYWORD>-&gt;</KEYWORD> ok<KEYWORD>;</KEYWORD>
        _  <KEYWORD>-&gt;</KEYWORD> <OBJ>z_utils</OBJ><KEYWORD>:</KEYWORD><OO>assert</OO>(<OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>member</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE>)<KEYWORD>,</KEYWORD> {unknown_column<KEYWORD>,</KEYWORD> <VARIABLE>PProps</VARIABLE>})
    <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    {<VARIABLE>CProps</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>PProps</VARIABLE>}<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Return a property list with all columns of the table. (example: [{id,int4,modifier},...])</COMMENT>
<COMMENT>%% @spec columns(Table, Context) -&gt; [ #column ]</COMMENT>
columns(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    columns(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
columns(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database</OO>(<KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database_opt</OO>(schema<KEYWORD>,</KEYWORD> <KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> <OBJ>z_depcache</OBJ><KEYWORD>:</KEYWORD><OO>get</OO>({columns<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Table</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        {ok<KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE>} <KEYWORD>-&gt;</KEYWORD> 
            <VARIABLE>Cols</VARIABLE><KEYWORD>;</KEYWORD>
        _ <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>Cols</VARIABLE> <OPERATOR>=</OPERATOR> q(<STRING>"  select column_name, data_type, character_maximum_length, is_nullable, column_default</STRING>
<STRING>                        from information_schema.columns</STRING>
<STRING>                        where table_catalog = $1</STRING>
<STRING>                          and table_schema = $2</STRING>
<STRING>                          and table_name = $3</STRING>
<STRING>                        order by ordinal_position"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>Db</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Table</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>Cols1</VARIABLE> <OPERATOR>=</OPERATOR> [ columns1(<VARIABLE>Col</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>Col</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Cols</VARIABLE> ]<KEYWORD>,</KEYWORD>
            <OBJ>z_depcache</OBJ><KEYWORD>:</KEYWORD><OO>set</OO>({columns<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Table</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Cols1</VARIABLE><KEYWORD>,</KEYWORD> <KEYWORD>?</KEYWORD><VARIABLE>YEAR</VARIABLE><KEYWORD>,</KEYWORD> [{database<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE>}]<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
            <VARIABLE>Cols1</VARIABLE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>
    

    columns1({<OPERATOR>&lt;</OPERATOR><OPERATOR>&lt;</OPERATOR><STRING>"id"</STRING><OPERATOR>&gt;</OPERATOR><OPERATOR>&gt;</OPERATOR><KEYWORD>,</KEYWORD> <OPERATOR>&lt;</OPERATOR><OPERATOR>&lt;</OPERATOR><STRING>"integer"</STRING><OPERATOR>&gt;</OPERATOR><OPERATOR>&gt;</OPERATOR><KEYWORD>,</KEYWORD> undefined<KEYWORD>,</KEYWORD> <VARIABLE>Nullable</VARIABLE><KEYWORD>,</KEYWORD> <OPERATOR>&lt;</OPERATOR><OPERATOR>&lt;</OPERATOR><STRING>"nextval("</STRING><KEYWORD>,</KEYWORD> _<OPERATOR>/</OPERATOR><FUNCTION>binary</FUNCTION><OPERATOR>&gt;</OPERATOR><OPERATOR>&gt;</OPERATOR>}) <KEYWORD>-&gt;</KEYWORD>
        <KEYWORD>#</KEYWORD>column_def{
            name <OPERATOR>=</OPERATOR> id<KEYWORD>,</KEYWORD>
            type <OPERATOR>=</OPERATOR> <STRING>"serial"</STRING><KEYWORD>,</KEYWORD>
            <FUNCTION>length</FUNCTION> <OPERATOR>=</OPERATOR> undefined<KEYWORD>,</KEYWORD>
            is_nullable <OPERATOR>=</OPERATOR> <OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_bool</OO>(<VARIABLE>Nullable</VARIABLE>)<KEYWORD>,</KEYWORD>
            default <OPERATOR>=</OPERATOR> undefined
        }<KEYWORD>;</KEYWORD>
    columns1({<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Type</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>MaxLength</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Nullable</VARIABLE><KEYWORD>,</KEYWORD><VARIABLE>Default</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
        <KEYWORD>#</KEYWORD>column_def{
            name <OPERATOR>=</OPERATOR> <OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_atom</OO>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD>
            type <OPERATOR>=</OPERATOR> <OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_list</OO>(<VARIABLE>Type</VARIABLE>)<KEYWORD>,</KEYWORD>
            <FUNCTION>length</FUNCTION> <OPERATOR>=</OPERATOR> <VARIABLE>MaxLength</VARIABLE><KEYWORD>,</KEYWORD>
            is_nullable <OPERATOR>=</OPERATOR> <OBJ>z_convert</OBJ><KEYWORD>:</KEYWORD><OO>to_bool</OO>(<VARIABLE>Nullable</VARIABLE>)<KEYWORD>,</KEYWORD>
            default <OPERATOR>=</OPERATOR> column_default(<VARIABLE>Default</VARIABLE>)
        }<KEYWORD>.</KEYWORD>
    
    column_default(undefined) <KEYWORD>-&gt;</KEYWORD> undefined<KEYWORD>;</KEYWORD>
    column_default(<OPERATOR>&lt;</OPERATOR><OPERATOR>&lt;</OPERATOR><STRING>"nextval("</STRING><KEYWORD>,</KEYWORD> _<OPERATOR>/</OPERATOR><FUNCTION>binary</FUNCTION><OPERATOR>&gt;</OPERATOR><OPERATOR>&gt;</OPERATOR>) <KEYWORD>-&gt;</KEYWORD> undefined<KEYWORD>;</KEYWORD>
    column_default(<VARIABLE>Default</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> <FUNCTION>binary_to_list</FUNCTION>(<VARIABLE>Default</VARIABLE>)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Return a list with the column names of a table.  The names are sorted.</COMMENT>
<COMMENT>%% @spec column_names(Table, Context) -&gt; [ atom, ... ]</COMMENT>
column_names(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <VARIABLE>Names</VARIABLE> <OPERATOR>=</OPERATOR> [ <VARIABLE>C</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name <KEYWORD>||</KEYWORD> <VARIABLE>C</VARIABLE> <OPERATOR>&lt;-</OPERATOR> columns(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)]<KEYWORD>,</KEYWORD>
    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(<VARIABLE>Names</VARIABLE>)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Flush all cached information about the database.</COMMENT>
flush(<VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database</OO>(<KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
    <OBJ>z_depcache</OBJ><KEYWORD>:</KEYWORD><OO>flush</OO>({database<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>
    

<COMMENT>%% @doc Update the sequence of the ids in the table. They will be renumbered according to their position in the id list.</COMMENT>
<COMMENT>%% @spec update_sequence(Table, IdList, Context) -&gt; void()</COMMENT>
update_sequence(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ids</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    update_sequence(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Ids</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
update_sequence(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ids</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    assert_table_name(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD>
    <VARIABLE>Args</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>zip</OO>(<VARIABLE>Ids</VARIABLE><KEYWORD>,</KEYWORD> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>seq</OO>(<NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <FUNCTION>length</FUNCTION>(<VARIABLE>Ids</VARIABLE>)))<KEYWORD>,</KEYWORD>
    <VARIABLE>Updater</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>fun</KEYWORD>(<VARIABLE>Ctx</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> 
                <VARIABLE>C</VARIABLE> <OPERATOR>=</OPERATOR> get_connection(<VARIABLE>Ctx</VARIABLE>)<KEYWORD>,</KEYWORD>
                try
                    [ {ok<KEYWORD>,</KEYWORD> _} <OPERATOR>=</OPERATOR> <OBJ>pgsql</OBJ><KEYWORD>:</KEYWORD><OO>equery1</OO>(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <STRING>"update <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> set seq = $2 where id = $1"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Arg</VARIABLE>) <KEYWORD>||</KEYWORD> <VARIABLE>Arg</VARIABLE> <OPERATOR>&lt;-</OPERATOR> <VARIABLE>Args</VARIABLE> ]
                <KEYWORD>after</KEYWORD>
                    return_connection(<VARIABLE>C</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Ctx</VARIABLE>)
                <KEYWORD>end</KEYWORD>
            <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
    ok <OPERATOR>=</OPERATOR> transaction(<VARIABLE>Updater</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Check the information schema if a certain table exists in the context database.</COMMENT>
<COMMENT>%% @spec table_exists(TableName, Context) -&gt; bool()</COMMENT>
table_exists(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database</OO>(<KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database_opt</OO>(schema<KEYWORD>,</KEYWORD> <KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
    <KEYWORD>case</KEYWORD> q1(<STRING>"   select count(*) </STRING>
<STRING>                from information_schema.tables </STRING>
<STRING>                where table_catalog = $1 </STRING>
<STRING>                  and table_name = $2 </STRING>
<STRING>                  and table_schema = $3</STRING>
<STRING>                  and table_type = 'BASE TABLE'"</STRING><KEYWORD>,</KEYWORD> [<VARIABLE>Db</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        <NUMERIC>1</NUMERIC> <KEYWORD>-&gt;</KEYWORD> <VALUE>true</VALUE><KEYWORD>;</KEYWORD>
        <NUMERIC>0</NUMERIC> <KEYWORD>-&gt;</KEYWORD> <VALUE>false</VALUE>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Make sure that a table is dropped, only when the table exists</COMMENT>
drop_table(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Name</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    drop_table(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Name</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
drop_table(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> table_exists(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD> q(<STRING>"drop table <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Name</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> ok
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Ensure that a table with the given columns exists, alter any existing table</COMMENT>
<COMMENT>%% to add, modify or drop columns.  The 'id' (with type serial) column _must_ be defined</COMMENT>
<COMMENT>%% when creating the table.</COMMENT>
ensure_table(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>when</KEYWORD> is_atom(<VARIABLE>Table</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    ensure_table(<FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>Table</VARIABLE>)<KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
ensure_table(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> table_exists(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>of</KEYWORD>
        <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD>
            ensure_table_create(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>;</KEYWORD>
        <VALUE>true</VALUE> <KEYWORD>-&gt;</KEYWORD>
            <VARIABLE>ExistingCols</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(columns(<VARIABLE>Table</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
            <VARIABLE>WantedCols</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>sort</OO>(<VARIABLE>Cols</VARIABLE>)<KEYWORD>,</KEYWORD>
            <KEYWORD>case</KEYWORD> ensure_table_alter_cols(<VARIABLE>WantedCols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>ExistingCols</VARIABLE><KEYWORD>,</KEYWORD> []) <KEYWORD>of</KEYWORD>
                [] <KEYWORD>-&gt;</KEYWORD> ok<KEYWORD>;</KEYWORD>
                <VARIABLE>Diff</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database</OO>(<KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
                    {ok<KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE>} <OPERATOR>=</OPERATOR> <OBJ>pgsql_pool</OBJ><KEYWORD>:</KEYWORD><OO>get_database_opt</OO>(schema<KEYWORD>,</KEYWORD> <KEYWORD>?</KEYWORD><VARIABLE>HOST</VARIABLE>(<VARIABLE>Context</VARIABLE>))<KEYWORD>,</KEYWORD>
                    <OBJ>z_db</OBJ><KEYWORD>:</KEYWORD><OO>q</OO>(<STRING>"ALTER TABLE <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Table</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> "</STRING> <OPERATOR>++</OPERATOR> <OBJ>string</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>(<VARIABLE>Diff</VARIABLE><KEYWORD>,</KEYWORD> <STRING>","</STRING>)<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
                    <OBJ>z_depcache</OBJ><KEYWORD>:</KEYWORD><OO>flush</OO>({columns<KEYWORD>,</KEYWORD> <VARIABLE>Db</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Schema</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Table</VARIABLE>}<KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
                    ok
            <KEYWORD>end</KEYWORD>
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>

    ensure_table_create(<VARIABLE>Name</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <VARIABLE>ColsSQL</VARIABLE> <OPERATOR>=</OPERATOR> ensure_table_create_cols(<VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> [])<KEYWORD>,</KEYWORD>
        <OBJ>z_db</OBJ><KEYWORD>:</KEYWORD><OO>q</OO>(<STRING>"CREATE TABLE <ESC>\"</ESC>"</STRING><OPERATOR>++</OPERATOR><VARIABLE>Name</VARIABLE><OPERATOR>++</OPERATOR><STRING>"<ESC>\"</ESC> ("</STRING><OPERATOR>++</OPERATOR><OBJ>string</OBJ><KEYWORD>:</KEYWORD><OO>join</OO>(<VARIABLE>ColsSQL</VARIABLE><KEYWORD>,</KEYWORD> <STRING>","</STRING>) <OPERATOR>++</OPERATOR> table_create_primary_key(<VARIABLE>Cols</VARIABLE>) <OPERATOR>++</OPERATOR> <STRING>")"</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Context</VARIABLE>)<KEYWORD>,</KEYWORD>
        ok<KEYWORD>.</KEYWORD>

    table_create_primary_key([]) <KEYWORD>-&gt;</KEYWORD> []<KEYWORD>;</KEYWORD>
    table_create_primary_key([<KEYWORD>#</KEYWORD>column_def{name<OPERATOR>=</OPERATOR>id<KEYWORD>,</KEYWORD> type<OPERATOR>=</OPERATOR><STRING>"serial"</STRING>}<KEYWORD>|</KEYWORD>_]) <KEYWORD>-&gt;</KEYWORD> <STRING>", primary key(id)"</STRING><KEYWORD>;</KEYWORD>
    table_create_primary_key([_<KEYWORD>|</KEYWORD><VARIABLE>Cols</VARIABLE>]) <KEYWORD>-&gt;</KEYWORD> table_create_primary_key(<VARIABLE>Cols</VARIABLE>)<KEYWORD>.</KEYWORD>

    ensure_table_create_cols([]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>reverse</OO>(<VARIABLE>Acc</VARIABLE>)<KEYWORD>;</KEYWORD>
    ensure_table_create_cols([<VARIABLE>C</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Cols</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <VARIABLE>M</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<CHARACTER>$"</CHARACTER><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>C</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <CHARACTER>$"</CHARACTER><KEYWORD>,</KEYWORD> <NUMERIC>32</NUMERIC><KEYWORD>,</KEYWORD> column_spec(<VARIABLE>C</VARIABLE>)])<KEYWORD>,</KEYWORD>
        ensure_table_create_cols(<VARIABLE>Cols</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>M</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>.</KEYWORD>


    ensure_table_alter_cols([]<KEYWORD>,</KEYWORD> []<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>reverse</OO>(<VARIABLE>Acc</VARIABLE>)<KEYWORD>;</KEYWORD>
    ensure_table_alter_cols([<VARIABLE>N</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Ns</VARIABLE>]<KEYWORD>,</KEYWORD> [<VARIABLE>N</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Es</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        ensure_table_alter_cols(<VARIABLE>Ns</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Es</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>)<KEYWORD>;</KEYWORD>
    ensure_table_alter_cols([<VARIABLE>N</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Ns</VARIABLE>]<KEYWORD>,</KEYWORD> [<VARIABLE>E</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Es</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>when</KEYWORD> <VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name <OPERATOR>==</OPERATOR> <VARIABLE>E</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name <KEYWORD>-&gt;</KEYWORD>
        <VARIABLE>M</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>"ALTER COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC> TYPE "</STRING><KEYWORD>,</KEYWORD> column_spec(<VARIABLE>N</VARIABLE>)])<KEYWORD>,</KEYWORD>
        <VARIABLE>M1</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>is_nullable <KEYWORD>of</KEYWORD> 
                <VALUE>true</VALUE>  <KEYWORD>-&gt;</KEYWORD> <VARIABLE>M</VARIABLE> <OPERATOR>++</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>", ALTER COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC> DROP NOT NULL"</STRING>])<KEYWORD>;</KEYWORD>
                <VALUE>false</VALUE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>M</VARIABLE> <OPERATOR>++</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>", ALTER COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC> SET NOT NULL"</STRING>])
             <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
        <VARIABLE>M2</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> <VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>default <KEYWORD>of</KEYWORD>
                undefined <KEYWORD>-&gt;</KEYWORD> <VARIABLE>M1</VARIABLE> <OPERATOR>++</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>", ALTER COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC> DROP DEFAULT"</STRING>])<KEYWORD>;</KEYWORD>
                <VARIABLE>Default</VARIABLE> <KEYWORD>-&gt;</KEYWORD> <VARIABLE>M1</VARIABLE> <OPERATOR>++</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>", ALTER COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC> SET DEFAULT "</STRING><KEYWORD>,</KEYWORD> <VARIABLE>Default</VARIABLE>])
             <KEYWORD>end</KEYWORD><KEYWORD>,</KEYWORD>
        ensure_table_alter_cols(<VARIABLE>Ns</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Es</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>M2</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>;</KEYWORD>
    ensure_table_alter_cols([<VARIABLE>N</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Ns</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Es</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>when</KEYWORD> <VARIABLE>Es</VARIABLE> <OPERATOR>==</OPERATOR> [] orelse <VARIABLE>N</VARIABLE> <OPERATOR>&lt;</OPERATOR> <FUNCTION>hd</FUNCTION>(<VARIABLE>Es</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <VARIABLE>M</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>"ADD COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC> "</STRING><KEYWORD>,</KEYWORD> 
                            column_spec(<VARIABLE>N</VARIABLE>)<KEYWORD>,</KEYWORD> 
                            column_spec_nullable(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>is_nullable)<KEYWORD>,</KEYWORD> 
                            column_spec_default(<VARIABLE>N</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>default)])<KEYWORD>,</KEYWORD>
        ensure_table_alter_cols(<VARIABLE>Ns</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Es</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>M</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>;</KEYWORD>
    ensure_table_alter_cols(<VARIABLE>Ns</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>E</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Es</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>when</KEYWORD> <VARIABLE>Ns</VARIABLE> <OPERATOR>==</OPERATOR> [] orelse <VARIABLE>E</VARIABLE> <OPERATOR>&lt;</OPERATOR> <FUNCTION>hd</FUNCTION>(<VARIABLE>Ns</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
        <VARIABLE>M</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<STRING>"DROP COLUMN <ESC>\"</ESC>"</STRING><KEYWORD>,</KEYWORD> <FUNCTION>atom_to_list</FUNCTION>(<VARIABLE>E</VARIABLE><KEYWORD>#</KEYWORD>column_def<KEYWORD>.</KEYWORD>name)<KEYWORD>,</KEYWORD> <STRING>"<ESC>\"</ESC>"</STRING>])<KEYWORD>,</KEYWORD>
        ensure_table_alter_cols(<VARIABLE>Ns</VARIABLE><KEYWORD>,</KEYWORD> <VARIABLE>Es</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>M</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>.</KEYWORD>

    column_spec(<KEYWORD>#</KEYWORD>column_def{type<OPERATOR>=</OPERATOR><VARIABLE>Type</VARIABLE><KEYWORD>,</KEYWORD> <FUNCTION>length</FUNCTION><OPERATOR>=</OPERATOR>undefined}) <KEYWORD>-&gt;</KEYWORD>
        <VARIABLE>Type</VARIABLE><KEYWORD>;</KEYWORD>
    column_spec(<KEYWORD>#</KEYWORD>column_def{type<OPERATOR>=</OPERATOR><VARIABLE>Type</VARIABLE><KEYWORD>,</KEYWORD> <FUNCTION>length</FUNCTION><OPERATOR>=</OPERATOR><VARIABLE>Length</VARIABLE>}) <KEYWORD>-&gt;</KEYWORD>
        <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>flatten</OO>([<VARIABLE>Type</VARIABLE><KEYWORD>,</KEYWORD> <CHARACTER>$(</CHARACTER><KEYWORD>,</KEYWORD> <FUNCTION>integer_to_list</FUNCTION>(<VARIABLE>Length</VARIABLE>)<KEYWORD>,</KEYWORD> <CHARACTER>$)</CHARACTER>])<KEYWORD>.</KEYWORD>
    
    column_spec_nullable(<VALUE>true</VALUE>) <KEYWORD>-&gt;</KEYWORD> <STRING>""</STRING><KEYWORD>;</KEYWORD>
    column_spec_nullable(<VALUE>false</VALUE>) <KEYWORD>-&gt;</KEYWORD> <STRING>" not null"</STRING><KEYWORD>.</KEYWORD>
    
    column_spec_default(undefined) <KEYWORD>-&gt;</KEYWORD> <STRING>""</STRING><KEYWORD>;</KEYWORD>
    column_spec_default(<VARIABLE>Default</VARIABLE>) <KEYWORD>-&gt;</KEYWORD> [<NUMERIC>32</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>Default</VARIABLE>]<KEYWORD>.</KEYWORD>


<COMMENT>%% @doc Check if a name is a valid SQL table name. Crashes when invalid</COMMENT>
<COMMENT>%% @spec check_table_name(String) -&gt; true</COMMENT>
assert_table_name([<VARIABLE>H</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>T</VARIABLE>]) <KEYWORD>when</KEYWORD> (<VARIABLE>H</VARIABLE> <OPERATOR>&gt;=</OPERATOR> <CHARACTER>$a</CHARACTER> andalso <VARIABLE>H</VARIABLE> <OPERATOR>=&lt;</OPERATOR> <CHARACTER>$z</CHARACTER>) orelse <VARIABLE>H</VARIABLE> <OPERATOR>==</OPERATOR> <CHARACTER>$_</CHARACTER> <KEYWORD>-&gt;</KEYWORD>
    assert_table_name1(<VARIABLE>T</VARIABLE>)<KEYWORD>.</KEYWORD>
assert_table_name1([]) <KEYWORD>-&gt;</KEYWORD>
    <VALUE>true</VALUE><KEYWORD>;</KEYWORD>
assert_table_name1([<VARIABLE>H</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>T</VARIABLE>]) <KEYWORD>when</KEYWORD> (<VARIABLE>H</VARIABLE> <OPERATOR>&gt;=</OPERATOR> <CHARACTER>$a</CHARACTER> andalso <VARIABLE>H</VARIABLE> <OPERATOR>=&lt;</OPERATOR> <CHARACTER>$z</CHARACTER>) orelse (<VARIABLE>H</VARIABLE> <OPERATOR>&gt;=</OPERATOR> <CHARACTER>$0</CHARACTER> andalso <VARIABLE>H</VARIABLE> <OPERATOR>=&lt;</OPERATOR> <CHARACTER>$9</CHARACTER>) orelse <VARIABLE>H</VARIABLE> <OPERATOR>==</OPERATOR> <CHARACTER>$_</CHARACTER> <KEYWORD>-&gt;</KEYWORD>
    assert_table_name1(<VARIABLE>T</VARIABLE>)<KEYWORD>.</KEYWORD>



<COMMENT>%% @doc Merge the contents of the props column into the result rows</COMMENT>
<COMMENT>%% @spec merge_props(list()) -&gt; list()</COMMENT>
merge_props(undefined) <KEYWORD>-&gt;</KEYWORD>
    undefined<KEYWORD>;</KEYWORD>
merge_props(<VARIABLE>List</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    merge_props(<VARIABLE>List</VARIABLE><KEYWORD>,</KEYWORD> [])<KEYWORD>.</KEYWORD>
    
merge_props([]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>reverse</OO>(<VARIABLE>Acc</VARIABLE>)<KEYWORD>;</KEYWORD>
merge_props([<VARIABLE>R</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Rest</VARIABLE>]<KEYWORD>,</KEYWORD> <VARIABLE>Acc</VARIABLE>) <KEYWORD>-&gt;</KEYWORD>
    <KEYWORD>case</KEYWORD> <OBJ>proplists</OBJ><KEYWORD>:</KEYWORD><OO>get_value</OO>(props<KEYWORD>,</KEYWORD> <VARIABLE>R</VARIABLE>) <KEYWORD>of</KEYWORD>
        undefined <KEYWORD>-&gt;</KEYWORD>
            merge_props(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>R</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>;</KEYWORD>
        <OPERATOR>&lt;</OPERATOR><OPERATOR>&lt;</OPERATOR><OPERATOR>&gt;</OPERATOR><OPERATOR>&gt;</OPERATOR> <KEYWORD>-&gt;</KEYWORD>
            merge_props(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<VARIABLE>R</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])<KEYWORD>;</KEYWORD>
        <VARIABLE>List</VARIABLE> <KEYWORD>-&gt;</KEYWORD>
            merge_props(<VARIABLE>Rest</VARIABLE><KEYWORD>,</KEYWORD> [<OBJ>lists</OBJ><KEYWORD>:</KEYWORD><OO>keydelete</OO>(props<KEYWORD>,</KEYWORD> <NUMERIC>1</NUMERIC><KEYWORD>,</KEYWORD> <VARIABLE>R</VARIABLE>)<OPERATOR>++</OPERATOR><VARIABLE>List</VARIABLE><KEYWORD>|</KEYWORD><VARIABLE>Acc</VARIABLE>])
    <KEYWORD>end</KEYWORD><KEYWORD>.</KEYWORD>