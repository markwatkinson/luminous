<COMMENT>(* Stolen from http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf </COMMENT>
<COMMENT>assumed to be public domain</COMMENT>
<COMMENT>%token int_const char_const float_const id string enumeration_const</COMMENT>
<COMMENT>%%</COMMENT>
<COMMENT>*)</COMMENT>
assumed to be public domain --&gt;
<USER_FUNCTION>translation_unit</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>external_decl</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>translation_unit</VALUE> <VALUE>external_decl</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>external_decl</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>function_definition</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>decl</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>function_definition</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>decl_specs</VALUE> <VALUE>declarator</VALUE> <VALUE>decl_list</VALUE> <VALUE>compound_stat</VALUE>
			<OPERATOR>|</OPERATOR>		<VALUE>declarator</VALUE> <VALUE>decl_list</VALUE> <VALUE>compound_stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>decl_specs</VALUE> <VALUE>declarator</VALUE>		<VALUE>compound_stat</VALUE>
			<OPERATOR>|</OPERATOR>		<VALUE>declarator</VALUE> 	<VALUE>compound_stat</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>decl</USER_FUNCTION>			<OPERATOR>:</OPERATOR> <VALUE>decl_specs</VALUE> <VALUE>init_declarator_list</VALUE> <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>decl_specs</VALUE>			<STRING>';'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>decl_list</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>decl</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>decl_list</VALUE> <VALUE>decl</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>decl_specs</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>storage_class_spec</VALUE> <VALUE>decl_specs</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>storage_class_spec</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_spec</VALUE> <VALUE>decl_specs</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_spec</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_qualifier</VALUE> <VALUE>decl_specs</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_qualifier</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>storage_class_spec</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <STRING>'auto'</STRING> <OPERATOR>|</OPERATOR> <STRING>'register'</STRING> <OPERATOR>|</OPERATOR> <STRING>'static'</STRING> <OPERATOR>|</OPERATOR> <STRING>'extern'</STRING> <OPERATOR>|</OPERATOR> <STRING>'typedef'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>type_spec</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'void'</STRING> <OPERATOR>|</OPERATOR> <STRING>'char'</STRING> <OPERATOR>|</OPERATOR> <STRING>'short'</STRING> <OPERATOR>|</OPERATOR> <STRING>'int'</STRING> <OPERATOR>|</OPERATOR> <STRING>'long'</STRING> <OPERATOR>|</OPERATOR> <STRING>'float'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'double'</STRING> <OPERATOR>|</OPERATOR> <STRING>'signed'</STRING> <OPERATOR>|</OPERATOR> <STRING>'unsigned'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>struct_or_union_spec</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>enum_spec</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>typedef_name</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>type_qualifier</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'const'</STRING> <OPERATOR>|</OPERATOR> <STRING>'volatile'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>struct_or_union_spec</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>struct_or_union</VALUE> id <STRING>'{'</STRING> <VALUE>struct_decl_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>struct_or_union</VALUE>	<STRING>'{'</STRING> <VALUE>struct_decl_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>struct_or_union</VALUE> id
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>struct_or_union</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'struct'</STRING> <OPERATOR>|</OPERATOR> <STRING>'union'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>struct_decl_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>struct_decl</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>struct_decl_list</VALUE> <VALUE>struct_decl</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>init_declarator_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>init_declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>init_declarator_list</VALUE> <STRING>','</STRING> <VALUE>init_declarator</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>init_declarator</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>declarator</VALUE> <STRING>'='</STRING> <VALUE>initializer</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>struct_decl</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>spec_qualifier_list</VALUE> <VALUE>struct_declarator_list</VALUE> <STRING>';'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>spec_qualifier_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>type_spec</VALUE> <VALUE>spec_qualifier_list</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_spec</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_qualifier</VALUE> <VALUE>spec_qualifier_list</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_qualifier</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>struct_declarator_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>struct_declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>struct_declarator_list</VALUE> <STRING>','</STRING> <VALUE>struct_declarator</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>struct_declarator</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>declarator</VALUE> <STRING>':'</STRING> <VALUE>const_exp</VALUE>
			<OPERATOR>|</OPERATOR>		<STRING>':'</STRING> <VALUE>const_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>enum_spec</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'enum'</STRING> id <STRING>'{'</STRING> <VALUE>enumerator_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'enum'</STRING>	<STRING>'{'</STRING> <VALUE>enumerator_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'enum'</STRING> id
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>enumerator_list</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>enumerator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>enumerator_list</VALUE> <STRING>','</STRING> <VALUE>enumerator</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>enumerator</USER_FUNCTION>		<OPERATOR>:</OPERATOR> id
			<OPERATOR>|</OPERATOR> id <STRING>'='</STRING> <VALUE>const_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>declarator</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>pointer</VALUE> <VALUE>direct_declarator</VALUE>
			<OPERATOR>|</OPERATOR>	<VALUE>direct_declarator</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>direct_declarator</USER_FUNCTION>	<OPERATOR>:</OPERATOR> id
			<OPERATOR>|</OPERATOR> <STRING>'('</STRING> <VALUE>declarator</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_declarator</VALUE> <STRING>'['</STRING> <VALUE>const_exp</VALUE> <STRING>']'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_declarator</VALUE> <STRING>'['</STRING>		<STRING>']'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_declarator</VALUE> <STRING>'('</STRING> <VALUE>param_type_list</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_declarator</VALUE> <STRING>'('</STRING> <VALUE>id_list</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_declarator</VALUE> <STRING>'('</STRING>		<STRING>')'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>pointer</USER_FUNCTION>			<OPERATOR>:</OPERATOR> <STRING>'*'</STRING> <VALUE>type_qualifier_list</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'*'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'*'</STRING> <VALUE>type_qualifier_list</VALUE> <VALUE>pointer</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'*'</STRING>			<VALUE>pointer</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>type_qualifier_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>type_qualifier</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>type_qualifier_list</VALUE> <VALUE>type_qualifier</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>param_type_list</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>param_list</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>param_list</VALUE> <STRING>','</STRING> <STRING>'...'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>param_list</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>param_decl</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>param_list</VALUE> <STRING>','</STRING> <VALUE>param_decl</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>param_decl</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>decl_specs</VALUE> <VALUE>declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>decl_specs</VALUE> <VALUE>abstract_declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>decl_specs</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>id_list</USER_FUNCTION>			<OPERATOR>:</OPERATOR> id
			<OPERATOR>|</OPERATOR> <VALUE>id_list</VALUE> <STRING>','</STRING> id
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>initializer</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>assignment_exp</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'{'</STRING> <VALUE>initializer_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'{'</STRING> <VALUE>initializer_list</VALUE> <STRING>','</STRING> <STRING>'}'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>initializer_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>initializer</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>initializer_list</VALUE> <STRING>','</STRING> <VALUE>initializer</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>type_name</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>spec_qualifier_list</VALUE> <VALUE>abstract_declarator</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>spec_qualifier_list</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>abstract_declarator</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>pointer</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>pointer</VALUE> <VALUE>direct_abstract_declarator</VALUE>
			<OPERATOR>|</OPERATOR>	<VALUE>direct_abstract_declarator</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>direct_abstract_declarator</USER_FUNCTION><OPERATOR>:</OPERATOR> <STRING>'('</STRING> <VALUE>abstract_declarator</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_abstract_declarator</VALUE> <STRING>'['</STRING> <VALUE>const_exp</VALUE> <STRING>']'</STRING>
			<OPERATOR>|</OPERATOR>				<STRING>'['</STRING> <VALUE>const_exp</VALUE> <STRING>']'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_abstract_declarator</VALUE> <STRING>'['</STRING>	<STRING>']'</STRING>
			<OPERATOR>|</OPERATOR>				<STRING>'['</STRING>	<STRING>']'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_abstract_declarator</VALUE> <STRING>'('</STRING> <VALUE>param_type_list</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR>				<STRING>'('</STRING> <VALUE>param_type_list</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>direct_abstract_declarator</VALUE> <STRING>'('</STRING>		<STRING>')'</STRING>
			<OPERATOR>|</OPERATOR>				<STRING>'('</STRING>		<STRING>')'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>typedef_name</USER_FUNCTION>		<OPERATOR>:</OPERATOR> id
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>stat</USER_FUNCTION>			<OPERATOR>:</OPERATOR> <VALUE>labeled_stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>exp_stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>compound_stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>selection_stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>iteration_stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>jump_stat</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>labeled_stat</USER_FUNCTION>		<OPERATOR>:</OPERATOR> id <STRING>':'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'case'</STRING> <VALUE>const_exp</VALUE> <STRING>':'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'default'</STRING> <STRING>':'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>exp_stat</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>exp</VALUE> <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR>	<STRING>';'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>compound_stat</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'{'</STRING> <VALUE>decl_list</VALUE> <VALUE>stat_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'{'</STRING>		<VALUE>stat_list</VALUE> <STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'{'</STRING> <VALUE>decl_list</VALUE>		<STRING>'}'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'{'</STRING>			<STRING>'}'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>stat_list</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>stat_list</VALUE> <VALUE>stat</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>selection_stat</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'if'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'if'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE> <STRING>'else'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'switch'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>iteration_stat</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'while'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'do'</STRING> <VALUE>stat</VALUE> <STRING>'while'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING>	<STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING>	<STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING>	<STRING>';'</STRING>	<STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING>	<STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING>	<STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING>	<STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING>	<STRING>';'</STRING>	<STRING>';'</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'for'</STRING> <STRING>'('</STRING>	<STRING>';'</STRING>	<STRING>';'</STRING>	<STRING>')'</STRING> <VALUE>stat</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>jump_stat</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'goto'</STRING> id <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'continue'</STRING> <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'break'</STRING> <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'return'</STRING> <VALUE>exp</VALUE> <STRING>';'</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'return'</STRING>	<STRING>';'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>exp</USER_FUNCTION>			<OPERATOR>:</OPERATOR> <VALUE>assignment_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>exp</VALUE> <STRING>','</STRING> <VALUE>assignment_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>assignment_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>conditional_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>unary_exp</VALUE> <VALUE>assignment_operator</VALUE> <VALUE>assignment_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>assignment_operator</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <STRING>'='</STRING> <OPERATOR>|</OPERATOR> <STRING>'*='</STRING> <OPERATOR>|</OPERATOR> <STRING>'/='</STRING> <OPERATOR>|</OPERATOR> <STRING>'%='</STRING> <OPERATOR>|</OPERATOR> <STRING>'+='</STRING> <OPERATOR>|</OPERATOR> <STRING>'-='</STRING> <OPERATOR>|</OPERATOR> <STRING>'&lt;&lt;='</STRING>
			<OPERATOR>|</OPERATOR> <STRING>'&gt;&gt;='</STRING> <OPERATOR>|</OPERATOR> <STRING>'&amp;='</STRING> <OPERATOR>|</OPERATOR> <STRING>'^='</STRING> <OPERATOR>|</OPERATOR> <STRING>'|='</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>conditional_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>logical_or_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>logical_or_exp</VALUE> <STRING>'?'</STRING> <VALUE>exp</VALUE> <STRING>':'</STRING> <VALUE>conditional_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>const_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>conditional_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>logical_or_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>logical_and_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>logical_or_exp</VALUE> <STRING>'||'</STRING> <VALUE>logical_and_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>logical_and_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>inclusive_or_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>logical_and_exp</VALUE> <STRING>'&amp;&amp;'</STRING> <VALUE>inclusive_or_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>inclusive_or_exp</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>exclusive_or_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>inclusive_or_exp</VALUE> <STRING>'|'</STRING> <VALUE>exclusive_or_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>exclusive_or_exp</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>and_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>exclusive_or_exp</VALUE> <STRING>'^'</STRING> <VALUE>and_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>and_exp</USER_FUNCTION>			<OPERATOR>:</OPERATOR> <VALUE>equality_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>and_exp</VALUE> <STRING>'&amp;'</STRING> <VALUE>equality_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>equality_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>relational_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>equality_exp</VALUE> <STRING>'=='</STRING> <VALUE>relational_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>equality_exp</VALUE> <STRING>'!='</STRING> <VALUE>relational_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>relational_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>shift_expression</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>relational_exp</VALUE> <STRING>'&lt;'</STRING> <VALUE>shift_expression</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>relational_exp</VALUE> <STRING>'&gt;'</STRING> <VALUE>shift_expression</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>relational_exp</VALUE> <STRING>'&lt;='</STRING> <VALUE>shift_expression</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>relational_exp</VALUE> <STRING>'&gt;='</STRING> <VALUE>shift_expression</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>shift_expression</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>additive_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>shift_expression</VALUE> <STRING>'&lt;&lt;'</STRING> <VALUE>additive_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>shift_expression</VALUE> <STRING>'&gt;&gt;'</STRING> <VALUE>additive_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>additive_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>mult_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>additive_exp</VALUE> <STRING>'+'</STRING> <VALUE>mult_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>additive_exp</VALUE> <STRING>'-'</STRING> <VALUE>mult_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>mult_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>cast_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>mult_exp</VALUE> <STRING>'*'</STRING> <VALUE>cast_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>mult_exp</VALUE> <STRING>'/'</STRING> <VALUE>cast_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>mult_exp</VALUE> <STRING>'%'</STRING> <VALUE>cast_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>cast_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>unary_exp</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'('</STRING> <VALUE>type_name</VALUE> <STRING>')'</STRING> <VALUE>cast_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>unary_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>postfix_exp</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'++'</STRING> <VALUE>unary_exp</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'--'</STRING> <VALUE>unary_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>unary_operator</VALUE> <VALUE>cast_exp</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'sizeof'</STRING> <VALUE>unary_exp</VALUE>
			<OPERATOR>|</OPERATOR> <STRING>'sizeof'</STRING> <STRING>'('</STRING> <VALUE>type_name</VALUE> <STRING>')'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>unary_operator</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <STRING>'&amp;'</STRING> <OPERATOR>|</OPERATOR> <STRING>'*'</STRING> <OPERATOR>|</OPERATOR> <STRING>'+'</STRING> <OPERATOR>|</OPERATOR> <STRING>'-'</STRING> <OPERATOR>|</OPERATOR> <STRING>'~'</STRING> <OPERATOR>|</OPERATOR> <STRING>'!'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>postfix_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> <VALUE>primary_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'['</STRING> <VALUE>exp</VALUE> <STRING>']'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'('</STRING> <VALUE>argument_exp_list</VALUE> <STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'('</STRING>			<STRING>')'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'.'</STRING> id
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'-&gt;'</STRING> id
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'++'</STRING>
			<OPERATOR>|</OPERATOR> <VALUE>postfix_exp</VALUE> <STRING>'--'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>primary_exp</USER_FUNCTION>		<OPERATOR>:</OPERATOR> id
			<OPERATOR>|</OPERATOR> <VALUE>const</VALUE>
			<OPERATOR>|</OPERATOR> string
			<OPERATOR>|</OPERATOR> <STRING>'('</STRING> <VALUE>exp</VALUE> <STRING>')'</STRING>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>argument_exp_list</USER_FUNCTION>	<OPERATOR>:</OPERATOR> <VALUE>assignment_exp</VALUE>
			<OPERATOR>|</OPERATOR> <VALUE>argument_exp_list</VALUE> <STRING>','</STRING> <VALUE>assignment_exp</VALUE>
			<OPERATOR>;</OPERATOR>
<USER_FUNCTION>const</USER_FUNCTION>			<OPERATOR>:</OPERATOR> int_const
			<OPERATOR>|</OPERATOR> char_const
			<OPERATOR>|</OPERATOR> float_const
			<OPERATOR>|</OPERATOR> enumeration_const
			<OPERATOR>;</OPERATOR>
