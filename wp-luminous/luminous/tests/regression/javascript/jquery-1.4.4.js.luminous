<DOCCOMMENT>/*!</DOCCOMMENT>
<DOCCOMMENT> * jQuery JavaScript Library v1.4.4</DOCCOMMENT>
<DOCCOMMENT> * http://jquery.com/</DOCCOMMENT>
<DOCCOMMENT> *</DOCCOMMENT>
<DOCCOMMENT> * Copyright 2010, John Resig</DOCCOMMENT>
<DOCCOMMENT> * Dual licensed under the MIT or GPL Version 2 licenses.</DOCCOMMENT>
<DOCCOMMENT> * http://jquery.org/license</DOCCOMMENT>
<DOCCOMMENT> *</DOCCOMMENT>
<DOCCOMMENT> * Includes Sizzle.js</DOCCOMMENT>
<DOCCOMMENT> * http://sizzlejs.com/</DOCCOMMENT>
<DOCCOMMENT> * Copyright 2010, The Dojo Foundation</DOCCOMMENT>
<DOCCOMMENT> * Released under the MIT, BSD, and GPL Licenses.</DOCCOMMENT>
<DOCCOMMENT> *</DOCCOMMENT>
<DOCCOMMENT> * Date: Thu Nov 11 19:04:53 2010 -0500</DOCCOMMENT>
<DOCCOMMENT> */</DOCCOMMENT>
(<KEYWORD>function</KEYWORD>( <TYPE>window</TYPE><OPERATOR>,</OPERATOR> <TYPE>undefined</TYPE> ) {

<COMMENT>// Use the correct document accordingly with window argument (sandbox)</COMMENT>
<KEYWORD>var</KEYWORD> <TYPE>document</TYPE> <OPERATOR>=</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> <FUNCTION>jQuery</FUNCTION> <OPERATOR>=</OPERATOR> (<KEYWORD>function</KEYWORD>() {

<COMMENT>// Define a local copy of jQuery</COMMENT>
<KEYWORD>var</KEYWORD> <FUNCTION>jQuery</FUNCTION> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> context ) {
		<COMMENT>// The jQuery object is actually just the init constructor 'enhanced'</COMMENT>
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>init</OO>( selector<OPERATOR>,</OPERATOR> context )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Map over jQuery in case of overwrite</COMMENT>
	_jQuery <OPERATOR>=</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>jQuery</OO><OPERATOR>,</OPERATOR>

	<COMMENT>// Map over the $ in case of overwrite</COMMENT>
	_$ <OPERATOR>=</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>$</OO><OPERATOR>,</OPERATOR>

	<COMMENT>// A central reference to the root jQuery(document)</COMMENT>
	rootjQuery<OPERATOR>,</OPERATOR>

	<COMMENT>// A simple way to check for HTML strings or ID strings</COMMENT>
	<COMMENT>// (both of which we optimize for)</COMMENT>
	quickExpr <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&lt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>&lt;<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\W</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>&gt;<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&gt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$<REGEX_OPERATOR>|</REGEX_OPERATOR>#<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Is it a simple selector</COMMENT>
	isSimple <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^:#<ESC>\[</ESC><ESC>\.</ESC>,<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Check if a string has a non-whitespace character in it</COMMENT>
	rnotwhite <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\S</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rwhite <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\s</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Used for trimming whitespace</COMMENT>
	trimLeft <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	trimRight <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Check for non-word characters</COMMENT>
	rnonword <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\W</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Check for digits</COMMENT>
	rdigit <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\d</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Match a standalone tag</COMMENT>
	rsingleTag <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^&lt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\w</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\/</ESC><REGEX_OPERATOR>?</REGEX_OPERATOR>&gt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>&lt;<ESC>\/</ESC><ESC>\1</ESC>&gt;<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// JSON RegExp</COMMENT>
	rvalidchars <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\]</ESC>,:{}<ESC>\s</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rvalidescape <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\\</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>"<ESC>\\</ESC><ESC>\/</ESC>bfnrt<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR>u<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>0-9a-fA-F<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_REPEAT_MARKER>{4}</REGEX_REPEAT_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rvalidtokens <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>"<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^"<ESC>\\</ESC><ESC>\n</ESC><ESC>\r</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>"<REGEX_OPERATOR>|</REGEX_OPERATOR>true<REGEX_OPERATOR>|</REGEX_OPERATOR>false<REGEX_OPERATOR>|</REGEX_OPERATOR>null<REGEX_OPERATOR>|</REGEX_OPERATOR>-<REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\.</ESC><ESC>\d</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>eE<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rvalidbraces <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>^<REGEX_OPERATOR>|</REGEX_OPERATOR>:<REGEX_OPERATOR>|</REGEX_OPERATOR>,<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\[</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Useragent RegExp</COMMENT>
	rwebkit <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>webkit<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER> <ESC>\/</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	ropera <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>opera<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR>version<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER> <ESC>\/</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rmsie <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>msie<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER> <REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rmozilla <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>mozilla<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR> rv:<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Keep a UserAgent string for use with jQuery.browser</COMMENT>
	userAgent <OPERATOR>=</OPERATOR> <OBJ>navigator</OBJ><OPERATOR>.</OPERATOR><OO>userAgent</OO><OPERATOR>,</OPERATOR>

	<COMMENT>// For matching the engine and version of the browser</COMMENT>
	browserMatch<OPERATOR>,</OPERATOR>
	
	<COMMENT>// Has the ready events already been bound?</COMMENT>
	readyBound <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
	
	<COMMENT>// The functions to execute on DOM ready</COMMENT>
	readyList <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>

	<COMMENT>// The ready event handler</COMMENT>
	DOMContentLoaded<OPERATOR>,</OPERATOR>

	<COMMENT>// Save a reference to some core methods</COMMENT>
	toString <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>toString</OO><OPERATOR>,</OPERATOR>
	hasOwn <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>hasOwnProperty</OO><OPERATOR>,</OPERATOR>
	push <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>,</OPERATOR>
	slice <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>slice</OO><OPERATOR>,</OPERATOR>
	trim <OPERATOR>=</OPERATOR> <OBJ>String</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>trim</OO><OPERATOR>,</OPERATOR>
	indexOf <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>indexOf</OO><OPERATOR>,</OPERATOR>
	
	<COMMENT>// [[Class]] -&gt; type pairs</COMMENT>
	class2type <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> {
	init<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> context ) {
		<KEYWORD>var</KEYWORD> match<OPERATOR>,</OPERATOR> elem<OPERATOR>,</OPERATOR> ret<OPERATOR>,</OPERATOR> doc<OPERATOR>;</OPERATOR>

		<COMMENT>// Handle $(""), $(null), or $(undefined)</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>selector ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Handle $(DOMElement)</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>selector</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> selector<OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<COMMENT>// The body element only exists once, optimize finding it</COMMENT>
		<KEYWORD>if</KEYWORD> ( selector <OPERATOR>===</OPERATOR> <STRING>"body"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>context <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO> ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>=</OPERATOR> <STRING>"body"</STRING><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Handle HTML strings</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> selector <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
			<COMMENT>// Are we dealing with HTML string or an ID?</COMMENT>
			match <OPERATOR>=</OPERATOR> <OBJ>quickExpr</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( selector )<OPERATOR>;</OPERATOR>

			<COMMENT>// Verify a match, and that no context was specified for #id</COMMENT>
			<KEYWORD>if</KEYWORD> ( match <OPERATOR>&amp;&amp;</OPERATOR> (match[<NUMERIC>1</NUMERIC>] <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>context) ) {

				<COMMENT>// HANDLE: $(html) -&gt; $(array)</COMMENT>
				<KEYWORD>if</KEYWORD> ( match[<NUMERIC>1</NUMERIC>] ) {
					doc <OPERATOR>=</OPERATOR> (context <OPERATOR>?</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> context <OPERATOR>:</OPERATOR> <TYPE>document</TYPE>)<OPERATOR>;</OPERATOR>

					<COMMENT>// If a single string is passed in and it's a single tag</COMMENT>
					<COMMENT>// just do a createElement and skip the rest</COMMENT>
					ret <OPERATOR>=</OPERATOR> <OBJ>rsingleTag</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( selector )<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( ret ) {
						<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isPlainObject</OO>( context ) ) {
							selector <OPERATOR>=</OPERATOR> [ <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>( ret[<NUMERIC>1</NUMERIC>] ) ]<OPERATOR>;</OPERATOR>
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>attr</OO><OPERATOR>.</OPERATOR><OO>call</OO>( selector<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>

						} <KEYWORD>else</KEYWORD> {
							selector <OPERATOR>=</OPERATOR> [ <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>( ret[<NUMERIC>1</NUMERIC>] ) ]<OPERATOR>;</OPERATOR>
						}

					} <KEYWORD>else</KEYWORD> {
						ret <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>buildFragment</OO>( [ match[<NUMERIC>1</NUMERIC>] ]<OPERATOR>,</OPERATOR> [ doc ] )<OPERATOR>;</OPERATOR>
						selector <OPERATOR>=</OPERATOR> (<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>cacheable</OO> <OPERATOR>?</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>fragment</OO><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>) <OPERATOR>:</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>fragment</OO>)<OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>;</OPERATOR>
					}
					
					<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> selector )<OPERATOR>;</OPERATOR>
					
				<COMMENT>// HANDLE: $("#id")</COMMENT>
				} <KEYWORD>else</KEYWORD> {
					elem <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>( match[<NUMERIC>2</NUMERIC>] )<OPERATOR>;</OPERATOR>

					<COMMENT>// Check parentNode to catch when Blackberry 4.6 returns</COMMENT>
					<COMMENT>// nodes that are no longer in the document #6963</COMMENT>
					<KEYWORD>if</KEYWORD> ( elem <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
						<COMMENT>// Handle the case where IE and Opera return items</COMMENT>
						<COMMENT>// by name instead of ID</COMMENT>
						<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>!==</OPERATOR> match[<NUMERIC>2</NUMERIC>] ) {
							<KEYWORD>return</KEYWORD> <OBJ>rootjQuery</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>( selector )<OPERATOR>;</OPERATOR>
						}

						<COMMENT>// Otherwise, we inject the element directly into the jQuery object</COMMENT>
						<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
						<KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>
					}

					<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>
					<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>=</OPERATOR> selector<OPERATOR>;</OPERATOR>
					<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
				}

			<COMMENT>// HANDLE: $("TAG")</COMMENT>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>context <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>rnonword</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( selector ) ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>=</OPERATOR> selector<OPERATOR>;</OPERATOR>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>
				selector <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>( selector )<OPERATOR>;</OPERATOR>
				<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> selector )<OPERATOR>;</OPERATOR>

			<COMMENT>// HANDLE: $(expr, $(...))</COMMENT>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>context <OPERATOR>||</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>jquery</OO> ) {
				<KEYWORD>return</KEYWORD> (context <OPERATOR>||</OPERATOR> rootjQuery)<OPERATOR>.</OPERATOR><OO>find</OO>( selector )<OPERATOR>;</OPERATOR>

			<COMMENT>// HANDLE: $(expr, context)</COMMENT>
			<COMMENT>// (which is just equivalent to: $(context).find(expr)</COMMENT>
			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>return</KEYWORD> <FUNCTION>jQuery</FUNCTION>( context )<OPERATOR>.</OPERATOR><OO>find</OO>( selector )<OPERATOR>;</OPERATOR>
			}

		<COMMENT>// HANDLE: $(function)</COMMENT>
		<COMMENT>// Shortcut for document ready</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( selector ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>rootjQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO>( selector )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> (<OBJ>selector</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE>) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>=</OPERATOR> <OBJ>selector</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> <OBJ>selector</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>( selector<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Start with an empty selector</COMMENT>
	selector<OPERATOR>:</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR>

	<COMMENT>// The current version of jQuery being used</COMMENT>
	jquery<OPERATOR>:</OPERATOR> <STRING>"1.4.4"</STRING><OPERATOR>,</OPERATOR>

	<COMMENT>// The default length of a jQuery object is 0</COMMENT>
	length<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>

	<COMMENT>// The number of elements contained in the matched element set</COMMENT>
	size<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	toArray<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Get the Nth element in the matched element set OR</COMMENT>
	<COMMENT>// Get the whole matched element set as a clean array</COMMENT>
	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( num ) {
		<KEYWORD>return</KEYWORD> num <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>

			<COMMENT>// Return a 'clean' array</COMMENT>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>toArray</OO>() <OPERATOR>:</OPERATOR>

			<COMMENT>// Return just the object</COMMENT>
			( num <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(num)[ <NUMERIC>0</NUMERIC> ] <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD>[ num ] )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Take an array of elements and push it onto the stack</COMMENT>
	<COMMENT>// (returning the new matched element set)</COMMENT>
	pushStack<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elems<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> selector ) {
		<COMMENT>// Build a new jQuery matched element set</COMMENT>
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>()<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>( elems ) ) {
			<OBJ>push</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( ret<OPERATOR>,</OPERATOR> elems )<OPERATOR>;</OPERATOR>
		
		} <KEYWORD>else</KEYWORD> {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>( ret<OPERATOR>,</OPERATOR> elems )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Add the old object onto the stack (as a reference)</COMMENT>
		<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>prevObject</OO> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

		<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"find"</STRING> ) {
			<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>+</OPERATOR> (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>?</OPERATOR> <STRING>" "</STRING> <OPERATOR>:</OPERATOR> <STRING>""</STRING>) <OPERATOR>+</OPERATOR> selector<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( name ) {
			<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>+</OPERATOR> <STRING>"."</STRING> <OPERATOR>+</OPERATOR> name <OPERATOR>+</OPERATOR> <STRING>"("</STRING> <OPERATOR>+</OPERATOR> selector <OPERATOR>+</OPERATOR> <STRING>")"</STRING><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Return the newly-formed element set</COMMENT>
		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Execute a callback for every element in the matched set.</COMMENT>
	<COMMENT>// (You can seed the arguments with an array of args, but this is</COMMENT>
	<COMMENT>// only used internally.)</COMMENT>
	each<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( callback<OPERATOR>,</OPERATOR> args ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> args )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	ready<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fn ) {
		<COMMENT>// Attach the listeners</COMMENT>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>bindReady</OO>()<OPERATOR>;</OPERATOR>

		<COMMENT>// If the DOM is already ready</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isReady</OO> ) {
			<COMMENT>// Execute the function immediately</COMMENT>
			<OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <TYPE>document</TYPE><OPERATOR>,</OPERATOR> <FUNCTION>jQuery</FUNCTION> )<OPERATOR>;</OPERATOR>

		<COMMENT>// Otherwise, remember the function for later</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( readyList ) {
			<COMMENT>// Add the function to the wait list</COMMENT>
			<OBJ>readyList</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( fn )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	eq<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( i ) {
		<KEYWORD>return</KEYWORD> i <OPERATOR>===</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>( i ) <OPERATOR>:</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>( i<OPERATOR>,</OPERATOR> <OPERATOR>+</OPERATOR>i <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	first<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>eq</OO>( <NUMERIC>0</NUMERIC> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	last<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>eq</OO>( <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	slice<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>,</OPERATOR>
			<STRING>"slice"</STRING><OPERATOR>,</OPERATOR> <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(arguments)<OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>","</STRING>) )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	map<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( callback ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
			<KEYWORD>return</KEYWORD> <OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> elem )<OPERATOR>;</OPERATOR>
		}))<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	end<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prevObject</OO> <OPERATOR>||</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>null</KEYWORD>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// For internal use only.</COMMENT>
	<COMMENT>// Behaves like an Array's method, not like a jQuery method.</COMMENT>
	push<OPERATOR>:</OPERATOR> push<OPERATOR>,</OPERATOR>
	sort<OPERATOR>:</OPERATOR> []<OPERATOR>.</OPERATOR><OO>sort</OO><OPERATOR>,</OPERATOR>
	splice<OPERATOR>:</OPERATOR> []<OPERATOR>.</OPERATOR><OO>splice</OO>
}<OPERATOR>;</OPERATOR>

<COMMENT>// Give the init function the jQuery prototype for later instantiation</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>init</OO><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
	 <KEYWORD>var</KEYWORD> options<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> src<OPERATOR>,</OPERATOR> copy<OPERATOR>,</OPERATOR> copyIsArray<OPERATOR>,</OPERATOR> clone<OPERATOR>,</OPERATOR>
		target <OPERATOR>=</OPERATOR> arguments[<NUMERIC>0</NUMERIC>] <OPERATOR>||</OPERATOR> {}<OPERATOR>,</OPERATOR>
		i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
		length <OPERATOR>=</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR>
		deep <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<COMMENT>// Handle a deep copy situation</COMMENT>
	<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> target <OPERATOR>===</OPERATOR> <STRING>"boolean"</STRING> ) {
		deep <OPERATOR>=</OPERATOR> target<OPERATOR>;</OPERATOR>
		target <OPERATOR>=</OPERATOR> arguments[<NUMERIC>1</NUMERIC>] <OPERATOR>||</OPERATOR> {}<OPERATOR>;</OPERATOR>
		<COMMENT>// skip the boolean and the target</COMMENT>
		i <OPERATOR>=</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
	}

	<COMMENT>// Handle case when target is a string or something (possible in deep copy)</COMMENT>
	<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> target <OPERATOR>!==</OPERATOR> <STRING>"object"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(target) ) {
		target <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>
	}

	<COMMENT>// extend jQuery itself if only one argument is passed</COMMENT>
	<KEYWORD>if</KEYWORD> ( length <OPERATOR>===</OPERATOR> i ) {
		target <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		<OPERATOR>--</OPERATOR>i<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		<COMMENT>// Only deal with non-null/undefined values</COMMENT>
		<KEYWORD>if</KEYWORD> ( (options <OPERATOR>=</OPERATOR> arguments[ i ]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
			<COMMENT>// Extend the base object</COMMENT>
			<KEYWORD>for</KEYWORD> ( name <KEYWORD>in</KEYWORD> options ) {
				src <OPERATOR>=</OPERATOR> target[ name ]<OPERATOR>;</OPERATOR>
				copy <OPERATOR>=</OPERATOR> options[ name ]<OPERATOR>;</OPERATOR>

				<COMMENT>// Prevent never-ending loop</COMMENT>
				<KEYWORD>if</KEYWORD> ( target <OPERATOR>===</OPERATOR> copy ) {
					<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Recurse if we're merging plain objects or arrays</COMMENT>
				<KEYWORD>if</KEYWORD> ( deep <OPERATOR>&amp;&amp;</OPERATOR> copy <OPERATOR>&amp;&amp;</OPERATOR> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isPlainObject</OO>(copy) <OPERATOR>||</OPERATOR> (copyIsArray <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(copy)) ) ) {
					<KEYWORD>if</KEYWORD> ( copyIsArray ) {
						copyIsArray <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
						clone <OPERATOR>=</OPERATOR> src <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(src) <OPERATOR>?</OPERATOR> src <OPERATOR>:</OPERATOR> []<OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> {
						clone <OPERATOR>=</OPERATOR> src <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isPlainObject</OO>(src) <OPERATOR>?</OPERATOR> src <OPERATOR>:</OPERATOR> {}<OPERATOR>;</OPERATOR>
					}

					<COMMENT>// Never move original objects, clone them</COMMENT>
					target[ name ] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>( deep<OPERATOR>,</OPERATOR> clone<OPERATOR>,</OPERATOR> copy )<OPERATOR>;</OPERATOR>

				<COMMENT>// Don't bring in undefined values</COMMENT>
				} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( copy <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
					target[ name ] <OPERATOR>=</OPERATOR> copy<OPERATOR>;</OPERATOR>
				}
			}
		}
	}

	<COMMENT>// Return the modified object</COMMENT>
	<KEYWORD>return</KEYWORD> target<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	noConflict<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( deep ) {
		<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>$</OO> <OPERATOR>=</OPERATOR> _$<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( deep ) {
			<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>jQuery</OO> <OPERATOR>=</OPERATOR> _jQuery<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <FUNCTION>jQuery</FUNCTION><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	<COMMENT>// Is the DOM ready to be used? Set to true once it occurs.</COMMENT>
	isReady<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>

	<COMMENT>// A counter to track how many items to wait for before</COMMENT>
	<COMMENT>// the ready event fires. See #6781</COMMENT>
	readyWait<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
	
	<COMMENT>// Handle when the DOM is ready</COMMENT>
	ready<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( wait ) {
		<COMMENT>// A third-party is pushing the ready event forwards</COMMENT>
		<KEYWORD>if</KEYWORD> ( wait <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>readyWait</OO><OPERATOR>--;</OPERATOR>
		}

		<COMMENT>// Make sure that the DOM is not already loaded</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>readyWait</OO> <OPERATOR>||</OPERATOR> (wait <OPERATOR>!==</OPERATOR> <KEYWORD>true</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isReady</OO>) ) {
			<COMMENT>// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO> ) {
				<KEYWORD>return</KEYWORD> <FUNCTION>setTimeout</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Remember that the DOM is ready</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isReady</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

			<COMMENT>// If a normal DOM Ready event fired, decrement, and wait if need be</COMMENT>
			<KEYWORD>if</KEYWORD> ( wait <OPERATOR>!==</OPERATOR> <KEYWORD>true</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>--</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>readyWait</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// If there are functions bound, to execute</COMMENT>
			<KEYWORD>if</KEYWORD> ( readyList ) {
				<COMMENT>// Execute all of them</COMMENT>
				<KEYWORD>var</KEYWORD> fn<OPERATOR>,</OPERATOR>
					i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
					ready <OPERATOR>=</OPERATOR> readyList<OPERATOR>;</OPERATOR>

				<COMMENT>// Reset the list of functions</COMMENT>
				readyList <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

				<KEYWORD>while</KEYWORD> ( (fn <OPERATOR>=</OPERATOR> ready[ i<OPERATOR>++</OPERATOR> ]) ) {
					<OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <TYPE>document</TYPE><OPERATOR>,</OPERATOR> <FUNCTION>jQuery</FUNCTION> )<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Trigger any bound ready events</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>trigger</OO> ) {
					<FUNCTION>jQuery</FUNCTION>( <TYPE>document</TYPE> )<OPERATOR>.</OPERATOR><OO>trigger</OO>( <STRING>"ready"</STRING> )<OPERATOR>.</OPERATOR><OO>unbind</OO>( <STRING>"ready"</STRING> )<OPERATOR>;</OPERATOR>
				}
			}
		}
	}<OPERATOR>,</OPERATOR>
	
	bindReady<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( readyBound ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		readyBound <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// Catch cases where $(document).ready() is called after the</COMMENT>
		<COMMENT>// browser event has already occurred.</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>===</OPERATOR> <STRING>"complete"</STRING> ) {
			<COMMENT>// Handle it asynchronously to allow scripts the opportunity to delay ready</COMMENT>
			<KEYWORD>return</KEYWORD> <FUNCTION>setTimeout</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Mozilla, Opera and webkit nightlies currently support this event</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO> ) {
			<COMMENT>// Use the handy event callback</COMMENT>
			<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO>( <STRING>"DOMContentLoaded"</STRING><OPERATOR>,</OPERATOR> DOMContentLoaded<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> )<OPERATOR>;</OPERATOR>
			
			<COMMENT>// A fallback to window.onload, that will always work</COMMENT>
			<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO>( <STRING>"load"</STRING><OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO><OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> )<OPERATOR>;</OPERATOR>

		<COMMENT>// If IE event model is used</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> ) {
			<COMMENT>// ensure firing before onload,</COMMENT>
			<COMMENT>// maybe late but safe also for iframes</COMMENT>
			<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO>(<STRING>"onreadystatechange"</STRING><OPERATOR>,</OPERATOR> DOMContentLoaded)<OPERATOR>;</OPERATOR>
			
			<COMMENT>// A fallback to window.onload, that will always work</COMMENT>
			<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO>( <STRING>"onload"</STRING><OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO> )<OPERATOR>;</OPERATOR>

			<COMMENT>// If IE and not a frame</COMMENT>
			<COMMENT>// continually check to see if the document is ready</COMMENT>
			<KEYWORD>var</KEYWORD> toplevel <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

			<KEYWORD>try</KEYWORD> {
				toplevel <OPERATOR>=</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>frameElement</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			} <KEYWORD>catch</KEYWORD>(e) {}

			<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>doScroll</OO> <OPERATOR>&amp;&amp;</OPERATOR> toplevel ) {
				doScrollCheck()<OPERATOR>;</OPERATOR>
			}
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// See test/unit/core.js for details concerning isFunction.</COMMENT>
	<COMMENT>// Since version 1.3, DOM methods and functions like alert</COMMENT>
	<COMMENT>// aren't supported. They return false on IE (#2968).</COMMENT>
	isFunction<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>type</OO>(obj) <OPERATOR>===</OPERATOR> <STRING>"function"</STRING><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	isArray<OPERATOR>:</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO> <OPERATOR>||</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>type</OO>(obj) <OPERATOR>===</OPERATOR> <STRING>"array"</STRING><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// A crude way of determining if an object is a window</COMMENT>
	isWindow<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<KEYWORD>return</KEYWORD> obj <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> obj <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <STRING>"setInterval"</STRING> <KEYWORD>in</KEYWORD> obj<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<FUNCTION>isNaN</FUNCTION><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<KEYWORD>return</KEYWORD> obj <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>rdigit</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( obj ) <OPERATOR>||</OPERATOR> <FUNCTION>isNaN</FUNCTION>( obj )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	type<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<KEYWORD>return</KEYWORD> obj <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>
			<TYPE>String</TYPE>( obj ) <OPERATOR>:</OPERATOR>
			class2type[ <OBJ>toString</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(obj) ] <OPERATOR>||</OPERATOR> <STRING>"object"</STRING><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	isPlainObject<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<COMMENT>// Must be an Object.</COMMENT>
		<COMMENT>// Because of IE, we also have to check the presence of the constructor property.</COMMENT>
		<COMMENT>// Make sure that DOM nodes and window objects don't pass through, as well</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>obj <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>type</OO>(obj) <OPERATOR>!==</OPERATOR> <STRING>"object"</STRING> <OPERATOR>||</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isWindow</OO>( obj ) ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<COMMENT>// Not own constructor property must be Object</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>constructor</OO> <OPERATOR>&amp;&amp;</OPERATOR>
			<OPERATOR>!</OPERATOR><OBJ>hasOwn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(obj<OPERATOR>,</OPERATOR> <STRING>"constructor"</STRING>) <OPERATOR>&amp;&amp;</OPERATOR>
			<OPERATOR>!</OPERATOR><OBJ>hasOwn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>constructor</OO><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>,</OPERATOR> <STRING>"isPrototypeOf"</STRING>) ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<COMMENT>// Own properties are enumerated firstly, so to speed up,</COMMENT>
		<COMMENT>// if last one is own, then all properties are own.</COMMENT>
	
		<KEYWORD>var</KEYWORD> key<OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> ( key <KEYWORD>in</KEYWORD> obj ) {}
		
		<KEYWORD>return</KEYWORD> key <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>||</OPERATOR> <OBJ>hasOwn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( obj<OPERATOR>,</OPERATOR> key )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	isEmptyObject<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( obj ) {
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> name <KEYWORD>in</KEYWORD> obj ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}
		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	error<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( msg ) {
		<KEYWORD>throw</KEYWORD> msg<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	parseJSON<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data ) {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> data <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>data ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Make sure leading/trailing whitespace is removed (IE can't handle it)</COMMENT>
		data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>trim</OO>( data )<OPERATOR>;</OPERATOR>
		
		<COMMENT>// Make sure the incoming data is actual JSON</COMMENT>
		<COMMENT>// Logic borrowed from http://json.org/json2.js</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>rvalidchars</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(rvalidescape<OPERATOR>,</OPERATOR> <STRING>"@"</STRING>)
			<OPERATOR>.</OPERATOR><OO>replace</OO>(rvalidtokens<OPERATOR>,</OPERATOR> <STRING>"]"</STRING>)
			<OPERATOR>.</OPERATOR><OO>replace</OO>(rvalidbraces<OPERATOR>,</OPERATOR> <STRING>""</STRING>)) ) {

			<COMMENT>// Try to use the native JSON parser first</COMMENT>
			<KEYWORD>return</KEYWORD> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO><OPERATOR>.</OPERATOR><OO>parse</OO> <OPERATOR>?</OPERATOR>
				<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>JSON</OO><OPERATOR>.</OPERATOR><OO>parse</OO>( data ) <OPERATOR>:</OPERATOR>
				(<KEYWORD>new</KEYWORD> Function(<STRING>"return "</STRING> <OPERATOR>+</OPERATOR> data))()<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>error</OO>( <STRING>"Invalid JSON: "</STRING> <OPERATOR>+</OPERATOR> data )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	noop<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {}<OPERATOR>,</OPERATOR>

	<COMMENT>// Evalulates a script in a global context</COMMENT>
	globalEval<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data ) {
		<KEYWORD>if</KEYWORD> ( data <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rnotwhite</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(data) ) {
			<COMMENT>// Inspired by code by Andrea Giammarchi</COMMENT>
			<COMMENT>// http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html</COMMENT>
			<KEYWORD>var</KEYWORD> head <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"head"</STRING>)[<NUMERIC>0</NUMERIC>] <OPERATOR>||</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR>
				script <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"script"</STRING>)<OPERATOR>;</OPERATOR>

			<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <STRING>"text/javascript"</STRING><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>scriptEval</OO> ) {
				<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createTextNode</OO>( data ) )<OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>text</OO> <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Use insertBefore instead of appendChild to circumvent an IE6 bug.</COMMENT>
			<COMMENT>// This arises when a base node is used (#2709).</COMMENT>
			<OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( script<OPERATOR>,</OPERATOR> <OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>
			<OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( script )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	nodeName<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name ) {
		<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>() <OPERATOR>===</OPERATOR> <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// args is for internal usage only</COMMENT>
	each<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( object<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> args ) {
		<KEYWORD>var</KEYWORD> name<OPERATOR>,</OPERATOR> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			length <OPERATOR>=</OPERATOR> <OBJ>object</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR>
			isObj <OPERATOR>=</OPERATOR> length <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(object)<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( args ) {
			<KEYWORD>if</KEYWORD> ( isObj ) {
				<KEYWORD>for</KEYWORD> ( name <KEYWORD>in</KEYWORD> object ) {
					<KEYWORD>if</KEYWORD> ( <OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( object[ name ]<OPERATOR>,</OPERATOR> args ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> ) {
					<KEYWORD>if</KEYWORD> ( <OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( object[ i<OPERATOR>++</OPERATOR> ]<OPERATOR>,</OPERATOR> args ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			}

		<COMMENT>// A special, fast, case for the most common use of each</COMMENT>
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>if</KEYWORD> ( isObj ) {
				<KEYWORD>for</KEYWORD> ( name <KEYWORD>in</KEYWORD> object ) {
					<KEYWORD>if</KEYWORD> ( <OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( object[ name ]<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> object[ name ] ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> value <OPERATOR>=</OPERATOR> object[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
					i <OPERATOR>&lt;</OPERATOR> length <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( value<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> value ) <OPERATOR>!==</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR> value <OPERATOR>=</OPERATOR> object[<OPERATOR>++</OPERATOR>i] ) {}
			}
		}

		<KEYWORD>return</KEYWORD> object<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Use native String.trim function wherever possible</COMMENT>
	trim<OPERATOR>:</OPERATOR> trim <OPERATOR>?</OPERATOR>
		<KEYWORD>function</KEYWORD>( text ) {
			<KEYWORD>return</KEYWORD> text <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>
				<STRING>""</STRING> <OPERATOR>:</OPERATOR>
				<OBJ>trim</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( text )<OPERATOR>;</OPERATOR>
		} <OPERATOR>:</OPERATOR>

		<COMMENT>// Otherwise use our own trimming functionality</COMMENT>
		<KEYWORD>function</KEYWORD>( text ) {
			<KEYWORD>return</KEYWORD> text <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>
				<STRING>""</STRING> <OPERATOR>:</OPERATOR>
				<OBJ>text</OBJ><OPERATOR>.</OPERATOR><OO>toString</OO>()<OPERATOR>.</OPERATOR><OO>replace</OO>( trimLeft<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>.</OPERATOR><OO>replace</OO>( trimRight<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

	<COMMENT>// results is for internal usage only</COMMENT>
	makeArray<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( array<OPERATOR>,</OPERATOR> results ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> results <OPERATOR>||</OPERATOR> []<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( array <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
			<COMMENT>// The window, strings (and functions) also have 'length'</COMMENT>
			<COMMENT>// The extra typeof function check is to prevent crashes</COMMENT>
			<COMMENT>// in Safari 2 (See: #3039)</COMMENT>
			<COMMENT>// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930</COMMENT>
			<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>type</OO>(array)<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"function"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"regexp"</STRING> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isWindow</OO>( array ) ) {
				<OBJ>push</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( ret<OPERATOR>,</OPERATOR> array )<OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>( ret<OPERATOR>,</OPERATOR> array )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	inArray<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> array ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO> ) {
			<KEYWORD>return</KEYWORD> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>( elem )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> length <OPERATOR>=</OPERATOR> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( array[ i ] <OPERATOR>===</OPERATOR> elem ) {
				<KEYWORD>return</KEYWORD> i<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	merge<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( first<OPERATOR>,</OPERATOR> second ) {
		<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>first</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR>
			j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>second</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> ) {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> l <OPERATOR>=</OPERATOR> <OBJ>second</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
				first[ i<OPERATOR>++</OPERATOR> ] <OPERATOR>=</OPERATOR> second[ j ]<OPERATOR>;</OPERATOR>
			}
		
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>while</KEYWORD> ( second[j] <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
				first[ i<OPERATOR>++</OPERATOR> ] <OPERATOR>=</OPERATOR> second[ j<OPERATOR>++</OPERATOR> ]<OPERATOR>;</OPERATOR>
			}
		}

		<OBJ>first</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>=</OPERATOR> i<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> first<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	grep<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elems<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> inv ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR> retVal<OPERATOR>;</OPERATOR>
		inv <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>inv<OPERATOR>;</OPERATOR>

		<COMMENT>// Go through the array, only saving the items</COMMENT>
		<COMMENT>// that pass the validator function</COMMENT>
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> length <OPERATOR>=</OPERATOR> <OBJ>elems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			retVal <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR>callback( elems[ i ]<OPERATOR>,</OPERATOR> i )<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( inv <OPERATOR>!==</OPERATOR> retVal ) {
				<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( elems[ i ] )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// arg is for internal usage only</COMMENT>
	map<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elems<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> arg ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR> value<OPERATOR>;</OPERATOR>

		<COMMENT>// Go through the array, translating each of the items to their</COMMENT>
		<COMMENT>// new value (or values).</COMMENT>
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> length <OPERATOR>=</OPERATOR> <OBJ>elems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			value <OPERATOR>=</OPERATOR> callback( elems[ i ]<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> arg )<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( value <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
				ret[ <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ] <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>concat</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( []<OPERATOR>,</OPERATOR> ret )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// A global GUID counter for objects</COMMENT>
	guid<OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>

	proxy<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fn<OPERATOR>,</OPERATOR> proxy<OPERATOR>,</OPERATOR> thisObject ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>2</NUMERIC> ) {
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> proxy <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
				thisObject <OPERATOR>=</OPERATOR> fn<OPERATOR>;</OPERATOR>
				fn <OPERATOR>=</OPERATOR> thisObject[ proxy ]<OPERATOR>;</OPERATOR>
				proxy <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( proxy <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( proxy ) ) {
				thisObject <OPERATOR>=</OPERATOR> proxy<OPERATOR>;</OPERATOR>
				proxy <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>proxy <OPERATOR>&amp;&amp;</OPERATOR> fn ) {
			proxy <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
				<KEYWORD>return</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( thisObject <OPERATOR>||</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
			}<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Set the guid of unique handler to the same of original handler, so it can be removed</COMMENT>
		<KEYWORD>if</KEYWORD> ( fn ) {
			<OBJ>proxy</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>=</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>=</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>||</OPERATOR> <OBJ>proxy</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO><OPERATOR>++;</OPERATOR>
		}

		<COMMENT>// So proxy can be declared as an argument</COMMENT>
		<KEYWORD>return</KEYWORD> proxy<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Mutifunctional method to get and set values to a collection</COMMENT>
	<COMMENT>// The value/s can be optionally by executed if its a function</COMMENT>
	access<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elems<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> exec<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> pass ) {
		<KEYWORD>var</KEYWORD> length <OPERATOR>=</OPERATOR> <OBJ>elems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	
		<COMMENT>// Setting many attributes</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> key <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> ) {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> k <KEYWORD>in</KEYWORD> key ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>access</OO>( elems<OPERATOR>,</OPERATOR> k<OPERATOR>,</OPERATOR> key[k]<OPERATOR>,</OPERATOR> exec<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> value )<OPERATOR>;</OPERATOR>
			}
			<KEYWORD>return</KEYWORD> elems<OPERATOR>;</OPERATOR>
		}
	
		<COMMENT>// Setting one attribute</COMMENT>
		<KEYWORD>if</KEYWORD> ( value <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			<COMMENT>// Optionally, function values get executed if exec is true</COMMENT>
			exec <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR>pass <OPERATOR>&amp;&amp;</OPERATOR> exec <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value)<OPERATOR>;</OPERATOR>
		
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				fn( elems[i]<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> exec <OPERATOR>?</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( elems[i]<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> fn( elems[i]<OPERATOR>,</OPERATOR> key ) ) <OPERATOR>:</OPERATOR> value<OPERATOR>,</OPERATOR> pass )<OPERATOR>;</OPERATOR>
			}
		
			<KEYWORD>return</KEYWORD> elems<OPERATOR>;</OPERATOR>
		}
	
		<COMMENT>// Getting an attribute</COMMENT>
		<KEYWORD>return</KEYWORD> length <OPERATOR>?</OPERATOR> fn( elems[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> key ) <OPERATOR>:</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	now<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> (<KEYWORD>new</KEYWORD> <TYPE>Date</TYPE>())<OPERATOR>.</OPERATOR><OO>getTime</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Use of jQuery.browser is frowned upon.</COMMENT>
	<COMMENT>// More details: http://docs.jquery.com/Utilities/jQuery.browser</COMMENT>
	uaMatch<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( ua ) {
		ua <OPERATOR>=</OPERATOR> <OBJ>ua</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> match <OPERATOR>=</OPERATOR> <OBJ>rwebkit</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( ua ) <OPERATOR>||</OPERATOR>
			<OBJ>ropera</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( ua ) <OPERATOR>||</OPERATOR>
			<OBJ>rmsie</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( ua ) <OPERATOR>||</OPERATOR>
			<OBJ>ua</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"compatible"</STRING>) <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rmozilla</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( ua ) <OPERATOR>||</OPERATOR>
			[]<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> { browser<OPERATOR>:</OPERATOR> match[<NUMERIC>1</NUMERIC>] <OPERATOR>||</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> version<OPERATOR>:</OPERATOR> match[<NUMERIC>2</NUMERIC>] <OPERATOR>||</OPERATOR> <STRING>"0"</STRING> }<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	browser<OPERATOR>:</OPERATOR> {}
})<OPERATOR>;</OPERATOR>

<COMMENT>// Populate the class2type map</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<STRING>"Boolean Number String Function Array Date RegExp Object"</STRING><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>(i<OPERATOR>,</OPERATOR> name) {
	class2type[ <STRING>"[object "</STRING> <OPERATOR>+</OPERATOR> name <OPERATOR>+</OPERATOR> <STRING>"]"</STRING> ] <OPERATOR>=</OPERATOR> <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

browserMatch <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>uaMatch</OO>( userAgent )<OPERATOR>;</OPERATOR>
<KEYWORD>if</KEYWORD> ( <OBJ>browserMatch</OBJ><OPERATOR>.</OPERATOR><OO>browser</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>browser</OO>[ <OBJ>browserMatch</OBJ><OPERATOR>.</OPERATOR><OO>browser</OO> ] <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>browser</OO><OPERATOR>.</OPERATOR><OO>version</OO> <OPERATOR>=</OPERATOR> <OBJ>browserMatch</OBJ><OPERATOR>.</OPERATOR><OO>version</OO><OPERATOR>;</OPERATOR>
}

<COMMENT>// Deprecated, use jQuery.browser.webkit instead</COMMENT>
<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>browser</OO><OPERATOR>.</OPERATOR><OO>webkit</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>browser</OO><OPERATOR>.</OPERATOR><OO>safari</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
}

<KEYWORD>if</KEYWORD> ( indexOf ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> array ) {
		<KEYWORD>return</KEYWORD> <OBJ>indexOf</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( array<OPERATOR>,</OPERATOR> elem )<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<COMMENT>// Verify that \s matches non-breaking spaces</COMMENT>
<COMMENT>// (IE fails on this test)</COMMENT>
<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>rwhite</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <STRING>"<ESC>\xA0</ESC>"</STRING> ) ) {
	trimLeft <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\s</ESC><ESC>\xA0</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>;</OPERATOR>
	trimRight <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\s</ESC><ESC>\xA0</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>;</OPERATOR>
}

<COMMENT>// All jQuery objects should point back to these</COMMENT>
rootjQuery <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<TYPE>document</TYPE>)<OPERATOR>;</OPERATOR>

<COMMENT>// Cleanup functions for the document ready method</COMMENT>
<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO> ) {
	DOMContentLoaded <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO>( <STRING>"DOMContentLoaded"</STRING><OPERATOR>,</OPERATOR> DOMContentLoaded<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> )<OPERATOR>;</OPERATOR>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> ) {
	DOMContentLoaded <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<COMMENT>// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>===</OPERATOR> <STRING>"complete"</STRING> ) {
			<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>detachEvent</OO>( <STRING>"onreadystatechange"</STRING><OPERATOR>,</OPERATOR> DOMContentLoaded )<OPERATOR>;</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO>()<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>
}

<COMMENT>// The DOM ready check for Internet Explorer</COMMENT>
<KEYWORD>function</KEYWORD> doScrollCheck() {
	<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isReady</OO> ) {
		<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<KEYWORD>try</KEYWORD> {
		<COMMENT>// If IE is used, use the trick by Diego Perini</COMMENT>
		<COMMENT>// http://javascript.nwbox.com/IEContentLoaded/</COMMENT>
		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>doScroll</OO>(<STRING>"left"</STRING>)<OPERATOR>;</OPERATOR>
	} <KEYWORD>catch</KEYWORD>(e) {
		<FUNCTION>setTimeout</FUNCTION>( doScrollCheck<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<COMMENT>// and execute any waiting functions</COMMENT>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ready</OO>()<OPERATOR>;</OPERATOR>
}

<COMMENT>// Expose jQuery to the global object</COMMENT>
<KEYWORD>return</KEYWORD> (<OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>jQuery</OO> <OPERATOR>=</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>$</OO> <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>)<OPERATOR>;</OPERATOR>

})()<OPERATOR>;</OPERATOR>


(<KEYWORD>function</KEYWORD>() {

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO> <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> root <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR>
		script <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"script"</STRING>)<OPERATOR>,</OPERATOR>
		div <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>,</OPERATOR>
		id <OPERATOR>=</OPERATOR> <STRING>"script"</STRING> <OPERATOR>+</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>;</OPERATOR>

	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"none"</STRING><OPERATOR>;</OPERATOR>
	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"   &lt;link/&gt;&lt;table&gt;&lt;/table&gt;&lt;a href='/a' style='color:red;float:left;opacity:.55;'&gt;a&lt;/a&gt;&lt;input type='checkbox'/&gt;"</STRING><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> all <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"*"</STRING>)<OPERATOR>,</OPERATOR>
		a <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"a"</STRING>)[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR>
		select <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"select"</STRING>)<OPERATOR>,</OPERATOR>
		opt <OPERATOR>=</OPERATOR> <OBJ>select</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"option"</STRING>) )<OPERATOR>;</OPERATOR>

	<COMMENT>// Can't get basic test support</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>all <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>all</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>a ) {
		<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO> <OPERATOR>=</OPERATOR> {
		<COMMENT>// IE strips leading whitespace when .innerHTML is used</COMMENT>
		leadingWhitespace<OPERATOR>:</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR>

		<COMMENT>// Make sure that tbody elements aren't automatically inserted</COMMENT>
		<COMMENT>// IE will insert them into empty tables</COMMENT>
		tbody<OPERATOR>:</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"tbody"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR>

		<COMMENT>// Make sure that link elements get serialized correctly by innerHTML</COMMENT>
		<COMMENT>// This requires a wrapper element in IE</COMMENT>
		htmlSerialize<OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR><OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"link"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR>

		<COMMENT>// Get the style information from getAttribute</COMMENT>
		<COMMENT>// (IE uses .cssText insted)</COMMENT>
		style<OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>red<DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"style"</STRING>) )<OPERATOR>,</OPERATOR>

		<COMMENT>// Make sure that URLs aren't manipulated</COMMENT>
		<COMMENT>// (IE normalizes it by default)</COMMENT>
		hrefNormalized<OPERATOR>:</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"href"</STRING>) <OPERATOR>===</OPERATOR> <STRING>"/a"</STRING><OPERATOR>,</OPERATOR>

		<COMMENT>// Make sure that element opacity exists</COMMENT>
		<COMMENT>// (IE uses filter instead)</COMMENT>
		<COMMENT>// Use a regex to work around a WebKit issue. See #5145</COMMENT>
		opacity<OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^0<REGEX_OPERATOR>.</REGEX_OPERATOR>55$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> )<OPERATOR>,</OPERATOR>

		<COMMENT>// Verify style float existence</COMMENT>
		<COMMENT>// (IE uses styleFloat instead of cssFloat)</COMMENT>
		cssFloat<OPERATOR>:</OPERATOR> <OPERATOR>!!</OPERATOR><OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssFloat</OO><OPERATOR>,</OPERATOR>

		<COMMENT>// Make sure that if no value is specified for a checkbox</COMMENT>
		<COMMENT>// that it defaults to "on".</COMMENT>
		<COMMENT>// (WebKit defaults to "" instead)</COMMENT>
		checkOn<OPERATOR>:</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"input"</STRING>)[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>value</OO> <OPERATOR>===</OPERATOR> <STRING>"on"</STRING><OPERATOR>,</OPERATOR>

		<COMMENT>// Make sure that a selected-by-default option has a working selected property.</COMMENT>
		<COMMENT>// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)</COMMENT>
		optSelected<OPERATOR>:</OPERATOR> <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO><OPERATOR>,</OPERATOR>

		<COMMENT>// Will be defined later</COMMENT>
		deleteExpando<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		optDisabled<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		checkClone<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		scriptEval<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		noCloneEvent<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		boxModel<OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR>
		inlineBlockNeedsLayout<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		shrinkWrapBlocks<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
		reliableHiddenOffsets<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
	}<OPERATOR>;</OPERATOR>

	<COMMENT>// Make sure that the options inside disabled selects aren't marked as disabled</COMMENT>
	<COMMENT>// (WebKit marks them as diabled)</COMMENT>
	<OBJ>select</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>optDisabled</OO> <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO><OPERATOR>;</OPERATOR>

	<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <STRING>"text/javascript"</STRING><OPERATOR>;</OPERATOR>
	<KEYWORD>try</KEYWORD> {
		<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createTextNode</OO>( <STRING>"window."</STRING> <OPERATOR>+</OPERATOR> id <OPERATOR>+</OPERATOR> <STRING>"=1;"</STRING> ) )<OPERATOR>;</OPERATOR>
	} <KEYWORD>catch</KEYWORD>(e) {}

	<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( script<OPERATOR>,</OPERATOR> <OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>

	<COMMENT>// Make sure that the execution of code works by injecting a script</COMMENT>
	<COMMENT>// tag with appendChild/createTextNode</COMMENT>
	<COMMENT>// (IE doesn't support this, fails, and uses .text instead)</COMMENT>
	<KEYWORD>if</KEYWORD> ( <TYPE>window</TYPE>[ id ] ) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>scriptEval</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		<KEYWORD>delete</KEYWORD> <TYPE>window</TYPE>[ id ]<OPERATOR>;</OPERATOR>
	}

	<COMMENT>// Test to see if it's possible to delete an expando from an element</COMMENT>
	<COMMENT>// Fails in Internet Explorer</COMMENT>
	<KEYWORD>try</KEYWORD> {
		<KEYWORD>delete</KEYWORD> <OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>test</OO><OPERATOR>;</OPERATOR>

	} <KEYWORD>catch</KEYWORD>(e) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>deleteExpando</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( script )<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>fireEvent</OO> ) {
		<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO>(<STRING>"onclick"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD> click() {
			<COMMENT>// Cloning a node shouldn't copy over any</COMMENT>
			<COMMENT>// bound event handlers (IE does this)</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>noCloneEvent</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>detachEvent</OO>(<STRING>"onclick"</STRING><OPERATOR>,</OPERATOR> click)<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
		<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>)<OPERATOR>.</OPERATOR><OO>fireEvent</OO>(<STRING>"onclick"</STRING>)<OPERATOR>;</OPERATOR>
	}

	div <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>
	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;input type='radio' name='radiotest' checked='checked'/&gt;"</STRING><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> fragment <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createDocumentFragment</OO>()<OPERATOR>;</OPERATOR>
	<OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>

	<COMMENT>// WebKit doesn't clone checked state correctly in fragments</COMMENT>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>checkClone</OO> <OPERATOR>=</OPERATOR> <OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>)<OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>)<OPERATOR>.</OPERATOR><OO>lastChild</OO><OPERATOR>.</OPERATOR><OO>checked</OO><OPERATOR>;</OPERATOR>

	<COMMENT>// Figure out if the W3C box model works as expected</COMMENT>
	<COMMENT>// document.body must exist before we can do this</COMMENT>
	<FUNCTION>jQuery</FUNCTION>(<KEYWORD>function</KEYWORD>() {
		<KEYWORD>var</KEYWORD> div <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>
		<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>width</OO> <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>paddingLeft</OO> <OPERATOR>=</OPERATOR> <STRING>"1px"</STRING><OPERATOR>;</OPERATOR>

		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>.</OPERATOR><OO>appendChild</OO>( div )<OPERATOR>;</OPERATOR>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>boxModel</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>boxModel</OO> <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO> <OPERATOR>===</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <STRING>"zoom"</STRING> <KEYWORD>in</KEYWORD> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO> ) {
			<COMMENT>// Check if natively block-level elements act like inline-block</COMMENT>
			<COMMENT>// elements when setting their display to 'inline' and giving</COMMENT>
			<COMMENT>// them layout</COMMENT>
			<COMMENT>// (IE &lt; 8 does this)</COMMENT>
			<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"inline"</STRING><OPERATOR>;</OPERATOR>
			<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>zoom</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>inlineBlockNeedsLayout</OO> <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO> <OPERATOR>===</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>

			<COMMENT>// Check if elements with layout shrink-wrap their children</COMMENT>
			<COMMENT>// (IE 6 does this)</COMMENT>
			<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
			<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;div style='width:4px;'&gt;&lt;/div&gt;"</STRING><OPERATOR>;</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>shrinkWrapBlocks</OO> <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
		}

		<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;table&gt;&lt;tr&gt;&lt;td style='padding:0;display:none'&gt;&lt;/td&gt;&lt;td&gt;t&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> tds <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"td"</STRING>)<OPERATOR>;</OPERATOR>

		<COMMENT>// Check if table cells still have offsetWidth/Height when they are set</COMMENT>
		<COMMENT>// to display:none and there are still other visible table cells in a</COMMENT>
		<COMMENT>// table row; if so, offsetWidth/Height are not reliable for use when</COMMENT>
		<COMMENT>// determining if an element has been hidden directly using</COMMENT>
		<COMMENT>// display:none (it is still safe to use offsets if a parent element is</COMMENT>
		<COMMENT>// hidden; don safety goggles and see bug #4512 for more information).</COMMENT>
		<COMMENT>// (only IE 8 fails this test)</COMMENT>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>reliableHiddenOffsets</OO> <OPERATOR>=</OPERATOR> tds[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>offsetHeight</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		tds[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
		tds[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"none"</STRING><OPERATOR>;</OPERATOR>

		<COMMENT>// Check if empty table cells still have offsetWidth/Height</COMMENT>
		<COMMENT>// (IE &lt; 8 fail this test)</COMMENT>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>reliableHiddenOffsets</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>reliableHiddenOffsets</OO> <OPERATOR>&amp;&amp;</OPERATOR> tds[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>offsetHeight</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>

		<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>( div )<OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"none"</STRING><OPERATOR>;</OPERATOR>
		div <OPERATOR>=</OPERATOR> tds <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	})<OPERATOR>;</OPERATOR>

	<COMMENT>// Technique from Juriy Zaytsev</COMMENT>
	<COMMENT>// http://thinkweb2.com/projects/prototype/detecting-event-support-without-browser-sniffing/</COMMENT>
	<KEYWORD>var</KEYWORD> eventSupported <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( eventName ) {
		<KEYWORD>var</KEYWORD> el <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>
		eventName <OPERATOR>=</OPERATOR> <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> eventName<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> isSupported <OPERATOR>=</OPERATOR> (eventName <KEYWORD>in</KEYWORD> el)<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>isSupported ) {
			<OBJ>el</OBJ><OPERATOR>.</OPERATOR><OO>setAttribute</OO>(eventName<OPERATOR>,</OPERATOR> <STRING>"return;"</STRING>)<OPERATOR>;</OPERATOR>
			isSupported <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> el[eventName] <OPERATOR>===</OPERATOR> <STRING>"function"</STRING><OPERATOR>;</OPERATOR>
		}
		el <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> isSupported<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>submitBubbles</OO> <OPERATOR>=</OPERATOR> eventSupported(<STRING>"submit"</STRING>)<OPERATOR>;</OPERATOR>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>changeBubbles</OO> <OPERATOR>=</OPERATOR> eventSupported(<STRING>"change"</STRING>)<OPERATOR>;</OPERATOR>

	<COMMENT>// release memory in IE</COMMENT>
	root <OPERATOR>=</OPERATOR> script <OPERATOR>=</OPERATOR> div <OPERATOR>=</OPERATOR> all <OPERATOR>=</OPERATOR> a <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
})()<OPERATOR>;</OPERATOR>



<KEYWORD>var</KEYWORD> windowData <OPERATOR>=</OPERATOR> {}<OPERATOR>,</OPERATOR>
	rbrace <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\{</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\}</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\[</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	cache<OPERATOR>:</OPERATOR> {}<OPERATOR>,</OPERATOR>

	<COMMENT>// Please use with caution</COMMENT>
	uuid<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>

	<COMMENT>// Unique for each copy of jQuery on the page	</COMMENT>
	expando<OPERATOR>:</OPERATOR> <STRING>"jQuery"</STRING> <OPERATOR>+</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>,</OPERATOR>

	<COMMENT>// The following elements throw uncatchable exceptions if you</COMMENT>
	<COMMENT>// attempt to add expando properties to them.</COMMENT>
	noData<OPERATOR>:</OPERATOR> {
		<STRING>"embed"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		<COMMENT>// Ban all objects except for Flash (which handle expandos)</COMMENT>
		<STRING>"object"</STRING><OPERATOR>:</OPERATOR> <STRING>"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"</STRING><OPERATOR>,</OPERATOR>
		<STRING>"applet"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
	}<OPERATOR>,</OPERATOR>

	data<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> data ) {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>acceptData</OO>( elem ) ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		elem <OPERATOR>=</OPERATOR> elem <OPERATOR>==</OPERATOR> <TYPE>window</TYPE> <OPERATOR>?</OPERATOR>
			windowData <OPERATOR>:</OPERATOR>
			elem<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> isNode <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO><OPERATOR>,</OPERATOR>
			id <OPERATOR>=</OPERATOR> isNode <OPERATOR>?</OPERATOR> elem[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ] <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR>
			cache <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO><OPERATOR>,</OPERATOR> thisCache<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( isNode <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>id <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> name <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> data <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Get the data from the object directly</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>isNode ) {
			cache <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>

		<COMMENT>// Compute a unique ID for the element</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>id ) {
			elem[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ] <OPERATOR>=</OPERATOR> id <OPERATOR>=</OPERATOR> <OPERATOR>++</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>uuid</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Avoid generating a new cache unless none exists and we</COMMENT>
		<COMMENT>// want to manipulate it.</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> name <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> ) {
			<KEYWORD>if</KEYWORD> ( isNode ) {
				cache[ id ] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(cache[ id ]<OPERATOR>,</OPERATOR> name)<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>( cache<OPERATOR>,</OPERATOR> name )<OPERATOR>;</OPERATOR>
			}

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( isNode <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>cache[ id ] ) {
			cache[ id ] <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>
		}

		thisCache <OPERATOR>=</OPERATOR> isNode <OPERATOR>?</OPERATOR> cache[ id ] <OPERATOR>:</OPERATOR> cache<OPERATOR>;</OPERATOR>

		<COMMENT>// Prevent overriding the named cache with undefined values</COMMENT>
		<KEYWORD>if</KEYWORD> ( data <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			thisCache[ name ] <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>typeof</KEYWORD> name <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>?</OPERATOR> thisCache[ name ] <OPERATOR>:</OPERATOR> thisCache<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	removeData<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name ) {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>acceptData</OO>( elem ) ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		elem <OPERATOR>=</OPERATOR> elem <OPERATOR>==</OPERATOR> <TYPE>window</TYPE> <OPERATOR>?</OPERATOR>
			windowData <OPERATOR>:</OPERATOR>
			elem<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> isNode <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO><OPERATOR>,</OPERATOR>
			id <OPERATOR>=</OPERATOR> isNode <OPERATOR>?</OPERATOR> elem[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ] <OPERATOR>:</OPERATOR> elem<OPERATOR>,</OPERATOR>
			cache <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO><OPERATOR>,</OPERATOR>
			thisCache <OPERATOR>=</OPERATOR> isNode <OPERATOR>?</OPERATOR> cache[ id ] <OPERATOR>:</OPERATOR> id<OPERATOR>;</OPERATOR>

		<COMMENT>// If we want to remove a specific section of the element's data</COMMENT>
		<KEYWORD>if</KEYWORD> ( name ) {
			<KEYWORD>if</KEYWORD> ( thisCache ) {
				<COMMENT>// Remove the section of cache data</COMMENT>
				<KEYWORD>delete</KEYWORD> thisCache[ name ]<OPERATOR>;</OPERATOR>

				<COMMENT>// If we've removed all the data, remove the element's cache</COMMENT>
				<KEYWORD>if</KEYWORD> ( isNode <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isEmptyObject</OO>(thisCache) ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeData</OO>( elem )<OPERATOR>;</OPERATOR>
				}
			}

		<COMMENT>// Otherwise, we want to remove all of the element's data</COMMENT>
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>if</KEYWORD> ( isNode <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>deleteExpando</OO> ) {
				<KEYWORD>delete</KEYWORD> elem[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ]<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO> ) {
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> )<OPERATOR>;</OPERATOR>

			<COMMENT>// Completely remove the data cache</COMMENT>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( isNode ) {
				<KEYWORD>delete</KEYWORD> cache[ id ]<OPERATOR>;</OPERATOR>

			<COMMENT>// Remove all fields from the object</COMMENT>
			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> n <KEYWORD>in</KEYWORD> elem ) {
					<KEYWORD>delete</KEYWORD> elem[ n ]<OPERATOR>;</OPERATOR>
				}
			}
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// A method for determining if a DOM node can handle the data expando</COMMENT>
	acceptData<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> ) {
			<KEYWORD>var</KEYWORD> match <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noData</OO>[ <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() ]<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( match ) {
				<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR>(match <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"classid"</STRING>) <OPERATOR>!==</OPERATOR> match)<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	data<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( key<OPERATOR>,</OPERATOR> value ) {
		<KEYWORD>var</KEYWORD> data <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> key <OPERATOR>===</OPERATOR> <STRING>"undefined"</STRING> ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				<KEYWORD>var</KEYWORD> attr <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>attributes</OO><OPERATOR>,</OPERATOR> name<OPERATOR>;</OPERATOR>
				data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] )<OPERATOR>;</OPERATOR>

				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>attr</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					name <OPERATOR>=</OPERATOR> attr[i]<OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>( <STRING>"data-"</STRING> ) <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
						name <OPERATOR>=</OPERATOR> <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>( <NUMERIC>5</NUMERIC> )<OPERATOR>;</OPERATOR>
						dataAttr( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> data[ name ] )<OPERATOR>;</OPERATOR>
					}
				}
			}

			<KEYWORD>return</KEYWORD> data<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> key <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> parts <OPERATOR>=</OPERATOR> <OBJ>key</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>"."</STRING>)<OPERATOR>;</OPERATOR>
		parts[<NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> parts[<NUMERIC>1</NUMERIC>] <OPERATOR>?</OPERATOR> <STRING>"."</STRING> <OPERATOR>+</OPERATOR> parts[<NUMERIC>1</NUMERIC>] <OPERATOR>:</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( value <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			data <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>triggerHandler</OO>(<STRING>"getData"</STRING> <OPERATOR>+</OPERATOR> parts[<NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> <STRING>"!"</STRING><OPERATOR>,</OPERATOR> [parts[<NUMERIC>0</NUMERIC>]])<OPERATOR>;</OPERATOR>

			<COMMENT>// Try to fetch any internally stored data first</COMMENT>
			<KEYWORD>if</KEYWORD> ( data <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> key )<OPERATOR>;</OPERATOR>
				data <OPERATOR>=</OPERATOR> dataAttr( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> data <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>&amp;&amp;</OPERATOR> parts[<NUMERIC>1</NUMERIC>] <OPERATOR>?</OPERATOR>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( parts[<NUMERIC>0</NUMERIC>] ) <OPERATOR>:</OPERATOR>
				data<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
				<KEYWORD>var</KEYWORD> $this <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>,</OPERATOR>
					args <OPERATOR>=</OPERATOR> [ parts[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> value ]<OPERATOR>;</OPERATOR>

				<OBJ>$this</OBJ><OPERATOR>.</OPERATOR><OO>triggerHandler</OO>( <STRING>"setData"</STRING> <OPERATOR>+</OPERATOR> parts[<NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> <STRING>"!"</STRING><OPERATOR>,</OPERATOR> args )<OPERATOR>;</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> value )<OPERATOR>;</OPERATOR>
				<OBJ>$this</OBJ><OPERATOR>.</OPERATOR><OO>triggerHandler</OO>( <STRING>"changeData"</STRING> <OPERATOR>+</OPERATOR> parts[<NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> <STRING>"!"</STRING><OPERATOR>,</OPERATOR> args )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	removeData<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( key ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeData</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> key )<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> dataAttr( elem<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> data ) {
	<COMMENT>// If nothing was found internally, try to fetch any</COMMENT>
	<COMMENT>// data from the HTML5 data-* attribute</COMMENT>
	<KEYWORD>if</KEYWORD> ( data <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
		data <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( <STRING>"data-"</STRING> <OPERATOR>+</OPERATOR> key )<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> data <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
			<KEYWORD>try</KEYWORD> {
				data <OPERATOR>=</OPERATOR> data <OPERATOR>===</OPERATOR> <STRING>"true"</STRING> <OPERATOR>?</OPERATOR> <KEYWORD>true</KEYWORD> <OPERATOR>:</OPERATOR>
				data <OPERATOR>===</OPERATOR> <STRING>"false"</STRING> <OPERATOR>?</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>:</OPERATOR>
				data <OPERATOR>===</OPERATOR> <STRING>"null"</STRING> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR>
				<OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isNaN</OO>( data ) <OPERATOR>?</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( data ) <OPERATOR>:</OPERATOR>
					<OBJ>rbrace</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( data ) <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>parseJSON</OO>( data ) <OPERATOR>:</OPERATOR>
					data<OPERATOR>;</OPERATOR>
			} <KEYWORD>catch</KEYWORD>( e ) {}

			<COMMENT>// Make sure we set the data so it isn't changed later</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> key<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			data <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}
	}

	<KEYWORD>return</KEYWORD> data<OPERATOR>;</OPERATOR>
}




<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	queue<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> data ) {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		type <OPERATOR>=</OPERATOR> (type <OPERATOR>||</OPERATOR> <STRING>"fx"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"queue"</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> q <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>

		<COMMENT>// Speed up dequeue by getting out quickly if this is just a lookup</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>data ) {
			<KEYWORD>return</KEYWORD> q <OPERATOR>||</OPERATOR> []<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>q <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(data) ) {
			q <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>(data) )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<OBJ>q</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( data )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> q<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	dequeue<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> type ) {
		type <OPERATOR>=</OPERATOR> type <OPERATOR>||</OPERATOR> <STRING>"fx"</STRING><OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> queue <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO>( elem<OPERATOR>,</OPERATOR> type )<OPERATOR>,</OPERATOR>
			fn <OPERATOR>=</OPERATOR> <OBJ>queue</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>

		<COMMENT>// If the fx queue is dequeued, always remove the progress sentinel</COMMENT>
		<KEYWORD>if</KEYWORD> ( fn <OPERATOR>===</OPERATOR> <STRING>"inprogress"</STRING> ) {
			fn <OPERATOR>=</OPERATOR> <OBJ>queue</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( fn ) {
			<COMMENT>// Add a progress sentinel to prevent the fx queue from being</COMMENT>
			<COMMENT>// automatically dequeued</COMMENT>
			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"fx"</STRING> ) {
				<OBJ>queue</OBJ><OPERATOR>.</OPERATOR><OO>unshift</OO>(<STRING>"inprogress"</STRING>)<OPERATOR>;</OPERATOR>
			}

			<OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(elem<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dequeue</OO>(elem<OPERATOR>,</OPERATOR> type)<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}
	}
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	queue<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( type<OPERATOR>,</OPERATOR> data ) {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> type <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> ) {
			data <OPERATOR>=</OPERATOR> type<OPERATOR>;</OPERATOR>
			type <OPERATOR>=</OPERATOR> <STRING>"fx"</STRING><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( data <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>
		}
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>( i ) {
			<KEYWORD>var</KEYWORD> queue <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"fx"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> queue[<NUMERIC>0</NUMERIC>] <OPERATOR>!==</OPERATOR> <STRING>"inprogress"</STRING> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dequeue</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	dequeue<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( type ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dequeue</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Based off of the plugin by Clint Helfers, with permission.</COMMENT>
	<COMMENT>// http://blindsignals.com/index.php/2009/07/jquery-delay/</COMMENT>
	delay<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( time<OPERATOR>,</OPERATOR> type ) {
		time <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>speeds</OO>[time] <OPERATOR>||</OPERATOR> time <OPERATOR>:</OPERATOR> time<OPERATOR>;</OPERATOR>
		type <OPERATOR>=</OPERATOR> type <OPERATOR>||</OPERATOR> <STRING>"fx"</STRING><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO>( type<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
			<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
			<FUNCTION>setTimeout</FUNCTION>(<KEYWORD>function</KEYWORD>() {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dequeue</OO>( elem<OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>
			}<OPERATOR>,</OPERATOR> time )<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	clearQueue<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( type ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO>( type <OPERATOR>||</OPERATOR> <STRING>"fx"</STRING><OPERATOR>,</OPERATOR> [] )<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>




<KEYWORD>var</KEYWORD> rclass <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\n</ESC><ESC>\t</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rspaces <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rreturn <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\r</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rspecialurl <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>href<REGEX_OPERATOR>|</REGEX_OPERATOR>src<REGEX_OPERATOR>|</REGEX_OPERATOR>style<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rtype <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>button<REGEX_OPERATOR>|</REGEX_OPERATOR>input<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rfocusable <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>button<REGEX_OPERATOR>|</REGEX_OPERATOR>input<REGEX_OPERATOR>|</REGEX_OPERATOR>object<REGEX_OPERATOR>|</REGEX_OPERATOR>select<REGEX_OPERATOR>|</REGEX_OPERATOR>textarea<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rclickable <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^a<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>rea<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rradiocheck <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>radio<REGEX_OPERATOR>|</REGEX_OPERATOR>checkbox<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>props</OO> <OPERATOR>=</OPERATOR> {
	<STRING>"for"</STRING><OPERATOR>:</OPERATOR> <STRING>"htmlFor"</STRING><OPERATOR>,</OPERATOR>
	<STRING>"class"</STRING><OPERATOR>:</OPERATOR> <STRING>"className"</STRING><OPERATOR>,</OPERATOR>
	readonly<OPERATOR>:</OPERATOR> <STRING>"readOnly"</STRING><OPERATOR>,</OPERATOR>
	maxlength<OPERATOR>:</OPERATOR> <STRING>"maxLength"</STRING><OPERATOR>,</OPERATOR>
	cellspacing<OPERATOR>:</OPERATOR> <STRING>"cellSpacing"</STRING><OPERATOR>,</OPERATOR>
	rowspan<OPERATOR>:</OPERATOR> <STRING>"rowSpan"</STRING><OPERATOR>,</OPERATOR>
	colspan<OPERATOR>:</OPERATOR> <STRING>"colSpan"</STRING><OPERATOR>,</OPERATOR>
	tabindex<OPERATOR>:</OPERATOR> <STRING>"tabIndex"</STRING><OPERATOR>,</OPERATOR>
	usemap<OPERATOR>:</OPERATOR> <STRING>"useMap"</STRING><OPERATOR>,</OPERATOR>
	frameborder<OPERATOR>:</OPERATOR> <STRING>"frameBorder"</STRING>
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	attr<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> value ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>access</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>attr</OO> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	removeAttr<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> fn ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(){
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>attr</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>( name )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	addClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( value ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>;</OPERATOR>
				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>addClass</OO>( <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>attr</OO>(<STRING>"class"</STRING>)) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( value <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> value <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
			<KEYWORD>var</KEYWORD> classNames <OPERATOR>=</OPERATOR> (value <OPERATOR>||</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>split</OO>( rspaces )<OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> ) {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> {
						<KEYWORD>var</KEYWORD> className <OPERATOR>=</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>+</OPERATOR> <STRING>" "</STRING><OPERATOR>,</OPERATOR>
							setClass <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO><OPERATOR>;</OPERATOR>

						<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> c <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> cl <OPERATOR>=</OPERATOR> <OBJ>classNames</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> c <OPERATOR>&lt;</OPERATOR> cl<OPERATOR>;</OPERATOR> c<OPERATOR>++</OPERATOR> ) {
							<KEYWORD>if</KEYWORD> ( <OBJ>className</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>( <STRING>" "</STRING> <OPERATOR>+</OPERATOR> classNames[c] <OPERATOR>+</OPERATOR> <STRING>" "</STRING> ) <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
								setClass <OPERATOR>+=</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> classNames[c]<OPERATOR>;</OPERATOR>
							}
						}
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>trim</OO>( setClass )<OPERATOR>;</OPERATOR>
					}
				}
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	removeClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( value ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>;</OPERATOR>
				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>removeClass</OO>( <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>attr</OO>(<STRING>"class"</STRING>)) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( (value <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> value <OPERATOR>===</OPERATOR> <STRING>"string"</STRING>) <OPERATOR>||</OPERATOR> value <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>var</KEYWORD> classNames <OPERATOR>=</OPERATOR> (value <OPERATOR>||</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>split</OO>( rspaces )<OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> ) {
					<KEYWORD>if</KEYWORD> ( value ) {
						<KEYWORD>var</KEYWORD> className <OPERATOR>=</OPERATOR> (<STRING>" "</STRING> <OPERATOR>+</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>+</OPERATOR> <STRING>" "</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(rclass<OPERATOR>,</OPERATOR> <STRING>" "</STRING>)<OPERATOR>;</OPERATOR>
						<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> c <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> cl <OPERATOR>=</OPERATOR> <OBJ>classNames</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> c <OPERATOR>&lt;</OPERATOR> cl<OPERATOR>;</OPERATOR> c<OPERATOR>++</OPERATOR> ) {
							className <OPERATOR>=</OPERATOR> <OBJ>className</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<STRING>" "</STRING> <OPERATOR>+</OPERATOR> classNames[c] <OPERATOR>+</OPERATOR> <STRING>" "</STRING><OPERATOR>,</OPERATOR> <STRING>" "</STRING>)<OPERATOR>;</OPERATOR>
						}
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>trim</OO>( className )<OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
					}
				}
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	toggleClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( value<OPERATOR>,</OPERATOR> stateVal ) {
		<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> value<OPERATOR>,</OPERATOR>
			isBool <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> stateVal <OPERATOR>===</OPERATOR> <STRING>"boolean"</STRING><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( value ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>;</OPERATOR>
				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>toggleClass</OO>( <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>attr</OO>(<STRING>"class"</STRING>)<OPERATOR>,</OPERATOR> stateVal)<OPERATOR>,</OPERATOR> stateVal )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
				<COMMENT>// toggle individual class names</COMMENT>
				<KEYWORD>var</KEYWORD> className<OPERATOR>,</OPERATOR>
					i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
					self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>,</OPERATOR>
					state <OPERATOR>=</OPERATOR> stateVal<OPERATOR>,</OPERATOR>
					classNames <OPERATOR>=</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>( rspaces )<OPERATOR>;</OPERATOR>

				<KEYWORD>while</KEYWORD> ( (className <OPERATOR>=</OPERATOR> classNames[ i<OPERATOR>++</OPERATOR> ]) ) {
					<COMMENT>// check each className given, space seperated list</COMMENT>
					state <OPERATOR>=</OPERATOR> isBool <OPERATOR>?</OPERATOR> state <OPERATOR>:</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>hasClass</OO>( className )<OPERATOR>;</OPERATOR>
					self[ state <OPERATOR>?</OPERATOR> <STRING>"addClass"</STRING> <OPERATOR>:</OPERATOR> <STRING>"removeClass"</STRING> ]( className )<OPERATOR>;</OPERATOR>
				}

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"boolean"</STRING> ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> ) {
					<COMMENT>// store className if set</COMMENT>
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"__className__"</STRING><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> )<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// toggle whole className</COMMENT>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>||</OPERATOR> value <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>?</OPERATOR> <STRING>""</STRING> <OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"__className__"</STRING> ) <OPERATOR>||</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	hasClass<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>var</KEYWORD> className <OPERATOR>=</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> selector <OPERATOR>+</OPERATOR> <STRING>" "</STRING><OPERATOR>;</OPERATOR>
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( (<STRING>" "</STRING> <OPERATOR>+</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>+</OPERATOR> <STRING>" "</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(rclass<OPERATOR>,</OPERATOR> <STRING>" "</STRING>)<OPERATOR>.</OPERATOR><OO>indexOf</OO>( className ) <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> ) {
				<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	val<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( value ) {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
			<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( elem ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"option"</STRING> ) ) {
					<COMMENT>// attributes.value is undefined in Blackberry 4.7 but</COMMENT>
					<COMMENT>// uses .value. See #6932</COMMENT>
					<KEYWORD>var</KEYWORD> val <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>;</OPERATOR>
					<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR>val <OPERATOR>||</OPERATOR> <OBJ>val</OBJ><OPERATOR>.</OPERATOR><OO>specified</OO> <OPERATOR>?</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>value</OO> <OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>text</OO><OPERATOR>;</OPERATOR>
				}

				<COMMENT>// We need to handle select boxes special</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"select"</STRING> ) ) {
					<KEYWORD>var</KEYWORD> index <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>selectedIndex</OO><OPERATOR>,</OPERATOR>
						values <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
						options <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>,</OPERATOR>
						one <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>===</OPERATOR> <STRING>"select-one"</STRING><OPERATOR>;</OPERATOR>

					<COMMENT>// Nothing was selected</COMMENT>
					<KEYWORD>if</KEYWORD> ( index <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
						<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
					}

					<COMMENT>// Loop through all the selected options</COMMENT>
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> one <OPERATOR>?</OPERATOR> index <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> max <OPERATOR>=</OPERATOR> one <OPERATOR>?</OPERATOR> index <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> max<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
						<KEYWORD>var</KEYWORD> option <OPERATOR>=</OPERATOR> options[ i ]<OPERATOR>;</OPERATOR>

						<COMMENT>// Don't return options that are disabled or in a disabled optgroup</COMMENT>
						<KEYWORD>if</KEYWORD> ( <OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO> <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>optDisabled</OO> <OPERATOR>?</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>:</OPERATOR> <OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"disabled"</STRING>) <OPERATOR>===</OPERATOR> <KEYWORD>null</KEYWORD>) <OPERATOR>&amp;&amp;</OPERATOR> 
								(<OPERATOR>!</OPERATOR><OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( <OBJ>option</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>,</OPERATOR> <STRING>"optgroup"</STRING> )) ) {

							<COMMENT>// Get the specific value for the option</COMMENT>
							value <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(option)<OPERATOR>.</OPERATOR><OO>val</OO>()<OPERATOR>;</OPERATOR>

							<COMMENT>// We don't need an array for one selects</COMMENT>
							<KEYWORD>if</KEYWORD> ( one ) {
								<KEYWORD>return</KEYWORD> value<OPERATOR>;</OPERATOR>
							}

							<COMMENT>// Multi-Selects return an array</COMMENT>
							<OBJ>values</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( value )<OPERATOR>;</OPERATOR>
						}
					}

					<KEYWORD>return</KEYWORD> values<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>rradiocheck</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> ) <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>checkOn</OO> ) {
					<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"value"</STRING>) <OPERATOR>===</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <STRING>"on"</STRING> <OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>;</OPERATOR>
				}
				

				<COMMENT>// Everything else, we just grab the value</COMMENT>
				<KEYWORD>return</KEYWORD> (<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>value</OO> <OPERATOR>||</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(rreturn<OPERATOR>,</OPERATOR> <STRING>""</STRING>)<OPERATOR>;</OPERATOR>

			}

			<KEYWORD>return</KEYWORD> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> isFunction <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value)<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
			<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>,</OPERATOR> val <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( isFunction ) {
				val <OPERATOR>=</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>val</OO>())<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Treat null/undefined as ""; convert numbers to string</COMMENT>
			<KEYWORD>if</KEYWORD> ( val <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
				val <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> val <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> ) {
				val <OPERATOR>+=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(val) ) {
				val <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(val<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD> (value) {
					<KEYWORD>return</KEYWORD> value <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <STRING>""</STRING> <OPERATOR>:</OPERATOR> value <OPERATOR>+</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
				})<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(val) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rradiocheck</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> ) ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO>( <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>val</OO>()<OPERATOR>,</OPERATOR> val ) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"select"</STRING> ) ) {
				<KEYWORD>var</KEYWORD> values <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>(val)<OPERATOR>;</OPERATOR>

				<FUNCTION>jQuery</FUNCTION>( <STRING>"option"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
					<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO>( <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>val</OO>()<OPERATOR>,</OPERATOR> values ) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				})<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>values</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
					<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selectedIndex</OO> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
				}

			} <KEYWORD>else</KEYWORD> {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>value</OO> <OPERATOR>=</OPERATOR> val<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	attrFn<OPERATOR>:</OPERATOR> {
		val<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		css<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		html<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		text<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		data<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		width<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		height<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		offset<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
	}<OPERATOR>,</OPERATOR>
		
	attr<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> pass ) {
		<COMMENT>// don't set attributes on text and comment nodes</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>8</NUMERIC> ) {
			<KEYWORD>return</KEYWORD> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( pass <OPERATOR>&amp;&amp;</OPERATOR> name <KEYWORD>in</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>attrFn</OO> ) {
			<KEYWORD>return</KEYWORD> <FUNCTION>jQuery</FUNCTION>(elem)[name](value)<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> notxml <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isXMLDoc</OO>( elem )<OPERATOR>,</OPERATOR>
			<COMMENT>// Whether we are setting (or getting)</COMMENT>
			set <OPERATOR>=</OPERATOR> value <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>

		<COMMENT>// Try to normalize/fix the name</COMMENT>
		name <OPERATOR>=</OPERATOR> notxml <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>props</OO>[ name ] <OPERATOR>||</OPERATOR> name<OPERATOR>;</OPERATOR>

		<COMMENT>// These attributes require special treatment</COMMENT>
		<KEYWORD>var</KEYWORD> special <OPERATOR>=</OPERATOR> <OBJ>rspecialurl</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( name )<OPERATOR>;</OPERATOR>

		<COMMENT>// Safari mis-reports the default selected property of an option</COMMENT>
		<COMMENT>// Accessing the parent's selectedIndex property fixes it</COMMENT>
		<KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"selected"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>optSelected</OO> ) {
			<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( parent ) {
				<OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>selectedIndex</OO><OPERATOR>;</OPERATOR>

				<COMMENT>// Make sure that it also works with optgroups, see #5701</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
					<OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>selectedIndex</OO><OPERATOR>;</OPERATOR>
				}
			}
		}

		<COMMENT>// If applicable, access the attribute via the DOM 0 way</COMMENT>
		<COMMENT>// 'in' checks fail in Blackberry 4.7 #6931</COMMENT>
		<KEYWORD>if</KEYWORD> ( (name <KEYWORD>in</KEYWORD> elem <OPERATOR>||</OPERATOR> elem[ name ] <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE>) <OPERATOR>&amp;&amp;</OPERATOR> notxml <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>special ) {
			<KEYWORD>if</KEYWORD> ( set ) {
				<COMMENT>// We can't allow the type property to be changed (since it causes problems in IE)</COMMENT>
				<KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"type"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rtype</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> ) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>error</OO>( <STRING>"type property can't be changed"</STRING> )<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( value <OPERATOR>===</OPERATOR> <KEYWORD>null</KEYWORD> ) {
					<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>( name )<OPERATOR>;</OPERATOR>
					}

				} <KEYWORD>else</KEYWORD> {
					elem[ name ] <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
				}
			}

			<COMMENT>// browsers index elements by id/name on forms, give priority to attributes.</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"form"</STRING> ) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(name) ) {
				<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>( name )<OPERATOR>.</OPERATOR><OO>nodeValue</OO><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set</COMMENT>
			<COMMENT>// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/</COMMENT>
			<KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"tabIndex"</STRING> ) {
				<KEYWORD>var</KEYWORD> attributeNode <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>( <STRING>"tabIndex"</STRING> )<OPERATOR>;</OPERATOR>

				<KEYWORD>return</KEYWORD> attributeNode <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>attributeNode</OBJ><OPERATOR>.</OPERATOR><OO>specified</OO> <OPERATOR>?</OPERATOR>
					<OBJ>attributeNode</OBJ><OPERATOR>.</OPERATOR><OO>value</OO> <OPERATOR>:</OPERATOR>
					<OBJ>rfocusable</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> ) <OPERATOR>||</OPERATOR> <OBJ>rclickable</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> ) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>href</OO> <OPERATOR>?</OPERATOR>
						<NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR>
						<TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> elem[ name ]<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>style</OO> <OPERATOR>&amp;&amp;</OPERATOR> notxml <OPERATOR>&amp;&amp;</OPERATOR> name <OPERATOR>===</OPERATOR> <STRING>"style"</STRING> ) {
			<KEYWORD>if</KEYWORD> ( set ) {
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssText</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING> <OPERATOR>+</OPERATOR> value<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>cssText</OO><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( set ) {
			<COMMENT>// convert the value to a string (all browsers do this but IE) see #1070</COMMENT>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>setAttribute</OO>( name<OPERATOR>,</OPERATOR> <STRING>""</STRING> <OPERATOR>+</OPERATOR> value )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Ensure that missing attributes return undefined</COMMENT>
		<COMMENT>// Blackberry 4.7 returns "" from getAttribute #6938</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>attributes</OO>[ name ] <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>hasAttribute</OO>( name )) ) {
			<KEYWORD>return</KEYWORD> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> attr <OPERATOR>=</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>hrefNormalized</OO> <OPERATOR>&amp;&amp;</OPERATOR> notxml <OPERATOR>&amp;&amp;</OPERATOR> special <OPERATOR>?</OPERATOR>
				<COMMENT>// Some attributes require a special call on IE</COMMENT>
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( name<OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC> ) <OPERATOR>:</OPERATOR>
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( name )<OPERATOR>;</OPERATOR>

		<COMMENT>// Non-existent attributes return null, we normalize to undefined</COMMENT>
		<KEYWORD>return</KEYWORD> attr <OPERATOR>===</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>:</OPERATOR> attr<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>




<KEYWORD>var</KEYWORD> rnamespaces <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\.</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rformElems <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>textarea<REGEX_OPERATOR>|</REGEX_OPERATOR>input<REGEX_OPERATOR>|</REGEX_OPERATOR>select<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rperiod <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\.</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rspace <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER> <DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rescape <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\w</ESC><ESC>\s</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR>`<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	fcleanup <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( nm ) {
		<KEYWORD>return</KEYWORD> <OBJ>nm</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(rescape<OPERATOR>,</OPERATOR> <STRING>"<ESC>\\</ESC>$&amp;"</STRING>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	focusCounts <OPERATOR>=</OPERATOR> { focusin<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> focusout<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC> }<OPERATOR>;</OPERATOR>

<COMMENT>/*</COMMENT>
<COMMENT> * A number of helper functions used for managing events.</COMMENT>
<COMMENT> * Many of the ideas behind this code originated from</COMMENT>
<COMMENT> * Dean Edwards' addEvent library.</COMMENT>
<COMMENT> */</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO> <OPERATOR>=</OPERATOR> {

	<COMMENT>// Bind an event to an element</COMMENT>
	<COMMENT>// Original by Dean Edwards</COMMENT>
	add<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> types<OPERATOR>,</OPERATOR> handler<OPERATOR>,</OPERATOR> data ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>8</NUMERIC> ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// For whatever reason, IE has trouble passing the window object</COMMENT>
		<COMMENT>// around, causing it to be cloned in the process</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isWindow</OO>( elem ) <OPERATOR>&amp;&amp;</OPERATOR> ( elem <OPERATOR>!==</OPERATOR> <TYPE>window</TYPE> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>frameElement</OO> ) ) {
			elem <OPERATOR>=</OPERATOR> <TYPE>window</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( handler <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
			handler <OPERATOR>=</OPERATOR> returnFalse<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>handler ) {
			<COMMENT>// Fixes bug #7229. Fix recommended by jdalton</COMMENT>
		  <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> handleObjIn<OPERATOR>,</OPERATOR> handleObj<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>handler</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO> ) {
			handleObjIn <OPERATOR>=</OPERATOR> handler<OPERATOR>;</OPERATOR>
			handler <OPERATOR>=</OPERATOR> <OBJ>handleObjIn</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Make sure that the function being executed has a unique ID</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>handler</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> ) {
			<OBJ>handler</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO><OPERATOR>++;</OPERATOR>
		}

		<COMMENT>// Init the element's event structure</COMMENT>
		<KEYWORD>var</KEYWORD> elemData <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem )<OPERATOR>;</OPERATOR>

		<COMMENT>// If no elemData is found then we must be trying to bind to one of the</COMMENT>
		<COMMENT>// banned noData elements</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elemData ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Use a key less likely to result in collisions for plain JS objects.</COMMENT>
		<COMMENT>// Fixes bug #7150.</COMMENT>
		<KEYWORD>var</KEYWORD> eventKey <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>?</OPERATOR> <STRING>"events"</STRING> <OPERATOR>:</OPERATOR> <STRING>"__events__"</STRING><OPERATOR>,</OPERATOR>
			events <OPERATOR>=</OPERATOR> elemData[ eventKey ]<OPERATOR>,</OPERATOR>
			eventHandle <OPERATOR>=</OPERATOR> <OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>;</OPERATOR>
			
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> events <OPERATOR>===</OPERATOR> <STRING>"function"</STRING> ) {
			<COMMENT>// On plain objects events is a fn that holds the the data</COMMENT>
			<COMMENT>// which prevents this data from being JSON serialized</COMMENT>
			<COMMENT>// the function does not need to be called, it just contains the data</COMMENT>
			eventHandle <OPERATOR>=</OPERATOR> <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>;</OPERATOR>
			events <OPERATOR>=</OPERATOR> <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>events ) {
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> ) {
				<COMMENT>// On plain objects, create a fn that acts as the holder</COMMENT>
				<COMMENT>// of the values to avoid JSON serialization of event data</COMMENT>
				elemData[ eventKey ] <OPERATOR>=</OPERATOR> elemData <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(){}<OPERATOR>;</OPERATOR>
			}

			<OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>events</OO> <OPERATOR>=</OPERATOR> events <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>eventHandle ) {
			<OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO> <OPERATOR>=</OPERATOR> eventHandle <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
				<COMMENT>// Handle the second event of a trigger and when</COMMENT>
				<COMMENT>// an event is called after a page has unloaded</COMMENT>
				<KEYWORD>return</KEYWORD> <KEYWORD>typeof</KEYWORD> <FUNCTION>jQuery</FUNCTION> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>triggered</OO> <OPERATOR>?</OPERATOR>
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( <OBJ>eventHandle</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> arguments ) <OPERATOR>:</OPERATOR>
					<TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
			}<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Add elem as a property of the handle function</COMMENT>
		<COMMENT>// This is to prevent a memory leak with non-native events in IE.</COMMENT>
		<OBJ>eventHandle</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO> <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>

		<COMMENT>// Handle multiple events separated by a space</COMMENT>
		<COMMENT>// jQuery(...).bind("mouseover mouseout", fn);</COMMENT>
		types <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> type<OPERATOR>,</OPERATOR> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> namespaces<OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( (type <OPERATOR>=</OPERATOR> types[ i<OPERATOR>++</OPERATOR> ]) ) {
			handleObj <OPERATOR>=</OPERATOR> handleObjIn <OPERATOR>?</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({}<OPERATOR>,</OPERATOR> handleObjIn) <OPERATOR>:</OPERATOR>
				{ handler<OPERATOR>:</OPERATOR> handler<OPERATOR>,</OPERATOR> data<OPERATOR>:</OPERATOR> data }<OPERATOR>;</OPERATOR>

			<COMMENT>// Namespaced event handlers</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"."</STRING>) <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> ) {
				namespaces <OPERATOR>=</OPERATOR> <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>"."</STRING>)<OPERATOR>;</OPERATOR>
				type <OPERATOR>=</OPERATOR> <OBJ>namespaces</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>
				<OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> <OPERATOR>=</OPERATOR> <OBJ>namespaces</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR><OO>sort</OO>()<OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"."</STRING>)<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				namespaces <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>
				<OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
			}

			<OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> type<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> ) {
				<OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>=</OPERATOR> <OBJ>handler</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Get the current list of functions bound to this event</COMMENT>
			<KEYWORD>var</KEYWORD> handlers <OPERATOR>=</OPERATOR> events[ type ]<OPERATOR>,</OPERATOR>
				special <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO>[ type ] <OPERATOR>||</OPERATOR> {}<OPERATOR>;</OPERATOR>

			<COMMENT>// Init the event handler queue</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>handlers ) {
				handlers <OPERATOR>=</OPERATOR> events[ type ] <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>

				<COMMENT>// Check for a special event handler</COMMENT>
				<COMMENT>// Only use addEventListener/attachEvent if the special</COMMENT>
				<COMMENT>// events handler returns false</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>setup</OO> <OPERATOR>||</OPERATOR> <OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>setup</OO><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> namespaces<OPERATOR>,</OPERATOR> eventHandle ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
					<COMMENT>// Bind the global event handler to the element</COMMENT>
					<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO> ) {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO>( type<OPERATOR>,</OPERATOR> eventHandle<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> )<OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> ) {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO>( <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> type<OPERATOR>,</OPERATOR> eventHandle )<OPERATOR>;</OPERATOR>
					}
				}
			}
			
			<KEYWORD>if</KEYWORD> ( <OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>add</OO> ) { 
				<OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>add</OO><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> handleObj )<OPERATOR>;</OPERATOR> 

				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>.</OPERATOR><OO>guid</OO> ) {
					<OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>=</OPERATOR> <OBJ>handler</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO><OPERATOR>;</OPERATOR>
				}
			}

			<COMMENT>// Add the function to the element's handler list</COMMENT>
			<OBJ>handlers</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( handleObj )<OPERATOR>;</OPERATOR>

			<COMMENT>// Keep track of which events have been used, for global triggering</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>global</OO>[ type ] <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Nullify elem to prevent memory leaks in IE</COMMENT>
		elem <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	global<OPERATOR>:</OPERATOR> {}<OPERATOR>,</OPERATOR>

	<COMMENT>// Detach an event or set of events from an element</COMMENT>
	remove<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> types<OPERATOR>,</OPERATOR> handler<OPERATOR>,</OPERATOR> pos ) {
		<COMMENT>// don't do events on text and comment nodes</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>8</NUMERIC> ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( handler <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
			handler <OPERATOR>=</OPERATOR> returnFalse<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> ret<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> j<OPERATOR>,</OPERATOR> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> all<OPERATOR>,</OPERATOR> namespaces<OPERATOR>,</OPERATOR> namespace<OPERATOR>,</OPERATOR> special<OPERATOR>,</OPERATOR> eventType<OPERATOR>,</OPERATOR> handleObj<OPERATOR>,</OPERATOR> origType<OPERATOR>,</OPERATOR>
			eventKey <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>?</OPERATOR> <STRING>"events"</STRING> <OPERATOR>:</OPERATOR> <STRING>"__events__"</STRING><OPERATOR>,</OPERATOR>
			elemData <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem )<OPERATOR>,</OPERATOR>
			events <OPERATOR>=</OPERATOR> elemData <OPERATOR>&amp;&amp;</OPERATOR> elemData[ eventKey ]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elemData <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>events ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> events <OPERATOR>===</OPERATOR> <STRING>"function"</STRING> ) {
			elemData <OPERATOR>=</OPERATOR> events<OPERATOR>;</OPERATOR>
			events <OPERATOR>=</OPERATOR> <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// types is actually an event object here</COMMENT>
		<KEYWORD>if</KEYWORD> ( types <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> ) {
			handler <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>;</OPERATOR>
			types <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Unbind all events for the element</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>types <OPERATOR>||</OPERATOR> <KEYWORD>typeof</KEYWORD> types <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>charAt</OO>(<NUMERIC>0</NUMERIC>) <OPERATOR>===</OPERATOR> <STRING>"."</STRING> ) {
			types <OPERATOR>=</OPERATOR> types <OPERATOR>||</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( type <KEYWORD>in</KEYWORD> events ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( elem<OPERATOR>,</OPERATOR> type <OPERATOR>+</OPERATOR> types )<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Handle multiple events separated by a space</COMMENT>
		<COMMENT>// jQuery(...).unbind("mouseover mouseout", fn);</COMMENT>
		types <OPERATOR>=</OPERATOR> <OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( (type <OPERATOR>=</OPERATOR> types[ i<OPERATOR>++</OPERATOR> ]) ) {
			origType <OPERATOR>=</OPERATOR> type<OPERATOR>;</OPERATOR>
			handleObj <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			all <OPERATOR>=</OPERATOR> <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"."</STRING>) <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			namespaces <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>all ) {
				<COMMENT>// Namespaced event handlers</COMMENT>
				namespaces <OPERATOR>=</OPERATOR> <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>"."</STRING>)<OPERATOR>;</OPERATOR>
				type <OPERATOR>=</OPERATOR> <OBJ>namespaces</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>

				namespace <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>"(^|<ESC>\\</ESC>.)"</STRING> <OPERATOR>+</OPERATOR> 
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>( <OBJ>namespaces</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR><OO>sort</OO>()<OPERATOR>,</OPERATOR> fcleanup )<OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"<ESC>\\</ESC>.(?:.*<ESC>\\</ESC>.)?"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"(<ESC>\\</ESC>.|$)"</STRING>)<OPERATOR>;</OPERATOR>
			}

			eventType <OPERATOR>=</OPERATOR> events[ type ]<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>eventType ) {
				<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>handler ) {
				<KEYWORD>for</KEYWORD> ( j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> <OBJ>eventType</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
					handleObj <OPERATOR>=</OPERATOR> eventType[ j ]<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( all <OPERATOR>||</OPERATOR> <OBJ>namespace</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> ) ) {
						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( elem<OPERATOR>,</OPERATOR> origType<OPERATOR>,</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>,</OPERATOR> j )<OPERATOR>;</OPERATOR>
						<OBJ>eventType</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>( j<OPERATOR>--,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			}

			special <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO>[ type ] <OPERATOR>||</OPERATOR> {}<OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( j <OPERATOR>=</OPERATOR> pos <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> <OBJ>eventType</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
				handleObj <OPERATOR>=</OPERATOR> eventType[ j ]<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>handler</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> <OPERATOR>===</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> ) {
					<COMMENT>// remove the given handler for the given type</COMMENT>
					<KEYWORD>if</KEYWORD> ( all <OPERATOR>||</OPERATOR> <OBJ>namespace</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> ) ) {
						<KEYWORD>if</KEYWORD> ( pos <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
							<OBJ>eventType</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>( j<OPERATOR>--,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
						}

						<KEYWORD>if</KEYWORD> ( <OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>remove</OO> ) {
							<OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>remove</OO><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> handleObj )<OPERATOR>;</OPERATOR>
						}
					}

					<KEYWORD>if</KEYWORD> ( pos <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			}

			<COMMENT>// remove generic event handler if no more handlers exist</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>eventType</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>||</OPERATOR> pos <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>eventType</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>teardown</OO> <OPERATOR>||</OPERATOR> <OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>teardown</OO><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> namespaces ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO>( elem<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> <OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO> )<OPERATOR>;</OPERATOR>
				}

				ret <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>delete</KEYWORD> events[ type ]<OPERATOR>;</OPERATOR>
			}
		}

		<COMMENT>// Remove the expando if it's no longer used</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isEmptyObject</OO>( events ) ) {
			<KEYWORD>var</KEYWORD> handle <OPERATOR>=</OPERATOR> <OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( handle ) {
				<OBJ>handle</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>delete</KEYWORD> <OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>delete</KEYWORD> <OBJ>elemData</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> elemData <OPERATOR>===</OPERATOR> <STRING>"function"</STRING> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeData</OO>( elem<OPERATOR>,</OPERATOR> eventKey )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isEmptyObject</OO>( elemData ) ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeData</OO>( elem )<OPERATOR>;</OPERATOR>
			}
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// bubbling is internal</COMMENT>
	trigger<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( event<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> elem <COMMENT>/*, bubbling */</COMMENT> ) {
		<COMMENT>// Event object or event type</COMMENT>
		<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>||</OPERATOR> event<OPERATOR>,</OPERATOR>
			bubbling <OPERATOR>=</OPERATOR> arguments[<NUMERIC>3</NUMERIC>]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bubbling ) {
			event <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> event <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> <OPERATOR>?</OPERATOR>
				<COMMENT>// jQuery.Event object</COMMENT>
				event[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ] <OPERATOR>?</OPERATOR> event <OPERATOR>:</OPERATOR>
				<COMMENT>// Object literal</COMMENT>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO>(type)<OPERATOR>,</OPERATOR> event ) <OPERATOR>:</OPERATOR>
				<COMMENT>// Just the event type (string)</COMMENT>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO>(type)<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"!"</STRING>) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> type <OPERATOR>=</OPERATOR> <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
				<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>exclusive</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Handle a global trigger</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem ) {
				<COMMENT>// Don't bubble custom events when global (to avoid too much overhead)</COMMENT>
				<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>()<OPERATOR>;</OPERATOR>

				<COMMENT>// Only trigger if we've ever bound an event for it</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>global</OO>[ type ] ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
						<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>events</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>events</OO>[type] ) {
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( event<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>.</OPERATOR><OO>elem</OO> )<OPERATOR>;</OPERATOR>
						}
					})<OPERATOR>;</OPERATOR>
				}
			}

			<COMMENT>// Handle triggering a single element</COMMENT>

			<COMMENT>// don't do events on text and comment nodes</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>8</NUMERIC> ) {
				<KEYWORD>return</KEYWORD> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Clean up in case it is reused</COMMENT>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>result</OO> <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>

			<COMMENT>// Clone the incoming data, if any</COMMENT>
			data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>( data )<OPERATOR>;</OPERATOR>
			<OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>unshift</OO>( event )<OPERATOR>;</OPERATOR>
		}

		<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>currentTarget</OO> <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>

		<COMMENT>// Trigger the event, it is assumed that "handle" is a function</COMMENT>
		<KEYWORD>var</KEYWORD> handle <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>?</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"handle"</STRING> ) <OPERATOR>:</OPERATOR>
			(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"__events__"</STRING> ) <OPERATOR>||</OPERATOR> {})<OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( handle ) {
			<OBJ>handle</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( elem<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>;</OPERATOR>

		<COMMENT>// Trigger an inline bound script</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>(elem <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noData</OO>[<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()]) ) {
				<KEYWORD>if</KEYWORD> ( elem[ <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> type ] <OPERATOR>&amp;&amp;</OPERATOR> elem[ <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> type ]<OPERATOR>.</OPERATOR><OO>apply</OO>( elem<OPERATOR>,</OPERATOR> data ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
					<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>result</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
					<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO>()<OPERATOR>;</OPERATOR>
				}
			}

		<COMMENT>// prevent IE from throwing an error for some elements with some event types, see #3533</COMMENT>
		} <KEYWORD>catch</KEYWORD> (inlineError) {}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>isPropagationStopped</OO>() <OPERATOR>&amp;&amp;</OPERATOR> parent ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( event<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> parent<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>isDefaultPrevented</OO>() ) {
			<KEYWORD>var</KEYWORD> old<OPERATOR>,</OPERATOR>
				target <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>,</OPERATOR>
				targetType <OPERATOR>=</OPERATOR> <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( rnamespaces<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>,</OPERATOR>
				isClick <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( target<OPERATOR>,</OPERATOR> <STRING>"a"</STRING> ) <OPERATOR>&amp;&amp;</OPERATOR> targetType <OPERATOR>===</OPERATOR> <STRING>"click"</STRING><OPERATOR>,</OPERATOR>
				special <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO>[ targetType ] <OPERATOR>||</OPERATOR> {}<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( (<OPERATOR>!</OPERATOR><OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>_default</OO> <OPERATOR>||</OPERATOR> <OBJ>special</OBJ><OPERATOR>.</OPERATOR><OO>_default</OO><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> event ) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD>) <OPERATOR>&amp;&amp;</OPERATOR> 
				<OPERATOR>!</OPERATOR>isClick <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>(target <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>target</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noData</OO>[<OBJ>target</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()]) ) {

				<KEYWORD>try</KEYWORD> {
					<KEYWORD>if</KEYWORD> ( target[ targetType ] ) {
						<COMMENT>// Make sure that we don't accidentally re-trigger the onFOO events</COMMENT>
						old <OPERATOR>=</OPERATOR> target[ <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> targetType ]<OPERATOR>;</OPERATOR>

						<KEYWORD>if</KEYWORD> ( old ) {
							target[ <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> targetType ] <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
						}

						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>triggered</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
						target[ targetType ]()<OPERATOR>;</OPERATOR>
					}

				<COMMENT>// prevent IE from throwing an error for some elements with some event types, see #3533</COMMENT>
				} <KEYWORD>catch</KEYWORD> (triggerError) {}

				<KEYWORD>if</KEYWORD> ( old ) {
					target[ <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> targetType ] <OPERATOR>=</OPERATOR> old<OPERATOR>;</OPERATOR>
				}

				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>triggered</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}
	}<OPERATOR>,</OPERATOR>

	handle<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( event ) {
		<KEYWORD>var</KEYWORD> all<OPERATOR>,</OPERATOR> handlers<OPERATOR>,</OPERATOR> namespaces<OPERATOR>,</OPERATOR> namespace_re<OPERATOR>,</OPERATOR> events<OPERATOR>,</OPERATOR>
			namespace_sort <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
			args <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>( arguments )<OPERATOR>;</OPERATOR>

		event <OPERATOR>=</OPERATOR> args[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>fix</OO>( event <OPERATOR>||</OPERATOR> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>event</OO> )<OPERATOR>;</OPERATOR>
		<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>currentTarget</OO> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// Namespaced event handlers</COMMENT>
		all <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"."</STRING>) <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>exclusive</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>all ) {
			namespaces <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>"."</STRING>)<OPERATOR>;</OPERATOR>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>namespaces</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>
			namespace_sort <OPERATOR>=</OPERATOR> <OBJ>namespaces</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR><OO>sort</OO>()<OPERATOR>;</OPERATOR>
			namespace_re <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>"(^|<ESC>\\</ESC>.)"</STRING> <OPERATOR>+</OPERATOR> <OBJ>namespace_sort</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"<ESC>\\</ESC>.(?:.*<ESC>\\</ESC>.)?"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"(<ESC>\\</ESC>.|$)"</STRING>)<OPERATOR>;</OPERATOR>
		}

		<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> <OPERATOR>||</OPERATOR> <OBJ>namespace_sort</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"."</STRING>)<OPERATOR>;</OPERATOR>

		events <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>?</OPERATOR> <STRING>"events"</STRING> <OPERATOR>:</OPERATOR> <STRING>"__events__"</STRING>)<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> events <OPERATOR>===</OPERATOR> <STRING>"function"</STRING> ) {
			events <OPERATOR>=</OPERATOR> <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>;</OPERATOR>
		}

		handlers <OPERATOR>=</OPERATOR> (events <OPERATOR>||</OPERATOR> {})[ <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> ]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( events <OPERATOR>&amp;&amp;</OPERATOR> handlers ) {
			<COMMENT>// Clone the handlers to prevent manipulation</COMMENT>
			handlers <OPERATOR>=</OPERATOR> <OBJ>handlers</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>handlers</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>var</KEYWORD> handleObj <OPERATOR>=</OPERATOR> handlers[ j ]<OPERATOR>;</OPERATOR>

				<COMMENT>// Filter the functions by class</COMMENT>
				<KEYWORD>if</KEYWORD> ( all <OPERATOR>||</OPERATOR> <OBJ>namespace_re</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> ) ) {
					<COMMENT>// Pass in a reference to the handler function itself</COMMENT>
					<COMMENT>// So that we can later remove it</COMMENT>
					<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO> <OPERATOR>=</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>;</OPERATOR>
					<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
					<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>handleObj</OO> <OPERATOR>=</OPERATOR> handleObj<OPERATOR>;</OPERATOR>
	
					<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> args )<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( ret <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
						<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>result</OO> <OPERATOR>=</OPERATOR> ret<OPERATOR>;</OPERATOR>
						<KEYWORD>if</KEYWORD> ( ret <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
							<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO>()<OPERATOR>;</OPERATOR>
							<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>()<OPERATOR>;</OPERATOR>
						}
					}

					<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>isImmediatePropagationStopped</OO>() ) {
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			}
		}

		<KEYWORD>return</KEYWORD> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>result</OO><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	props<OPERATOR>:</OPERATOR> <STRING>"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which"</STRING><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>,</OPERATOR>

	fix<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( event ) {
		<KEYWORD>if</KEYWORD> ( event[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ] ) {
			<KEYWORD>return</KEYWORD> event<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// store a copy of the original event object</COMMENT>
		<COMMENT>// and "clone" to set read-only properties</COMMENT>
		<KEYWORD>var</KEYWORD> originalEvent <OPERATOR>=</OPERATOR> event<OPERATOR>;</OPERATOR>
		event <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO>( originalEvent )<OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>props</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> prop<OPERATOR>;</OPERATOR> i<OPERATOR>;</OPERATOR> ) {
			prop <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>props</OO>[ <OPERATOR>--</OPERATOR>i ]<OPERATOR>;</OPERATOR>
			event[ prop ] <OPERATOR>=</OPERATOR> originalEvent[ prop ]<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Fix target property, if necessary</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> ) {
			<COMMENT>// Fixes #1925 where srcElement might not be defined either</COMMENT>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>srcElement</OO> <OPERATOR>||</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// check if target is a textnode (safari)</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> ) {
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Add relatedTarget, if necessary</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>relatedTarget</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>fromElement</OO> ) {
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>relatedTarget</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>fromElement</OO> <OPERATOR>===</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>toElement</OO> <OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>fromElement</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Calculate pageX/Y if missing and clientX/Y available</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientX</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
			<KEYWORD>var</KEYWORD> doc <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR>
				body <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>;</OPERATOR>

			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageX</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientX</OO> <OPERATOR>+</OPERATOR> (doc <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO> <OPERATOR>||</OPERATOR> body <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC>) <OPERATOR>-</OPERATOR> (doc <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>clientLeft</OO> <OPERATOR>||</OPERATOR> body <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>clientLeft</OO> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>pageY</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>clientY</OO> <OPERATOR>+</OPERATOR> (doc <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO>  <OPERATOR>||</OPERATOR> body <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO>  <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC>) <OPERATOR>-</OPERATOR> (doc <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>clientTop</OO>  <OPERATOR>||</OPERATOR> body <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>clientTop</OO>  <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Add which for key events</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>which</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>charCode</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>keyCode</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD>) ) {
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>which</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>charCode</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>charCode</OO> <OPERATOR>:</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>keyCode</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>metaKey</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>ctrlKey</OO> ) {
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>metaKey</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>ctrlKey</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Add which for click: 1 === left; 2 === middle; 3 === right</COMMENT>
		<COMMENT>// Note: button is not normalized, so don't use it</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>which</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>button</OO> <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>which</OO> <OPERATOR>=</OPERATOR> (<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>button</OO> <OPERATOR>&amp;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>button</OO> <OPERATOR>&amp;</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>?</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>:</OPERATOR> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>button</OO> <OPERATOR>&amp;</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>?</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC> ) ))<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> event<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Deprecated, use jQuery.guid instead</COMMENT>
	guid<OPERATOR>:</OPERATOR> <NUMERIC>1E8</NUMERIC><OPERATOR>,</OPERATOR>

	<COMMENT>// Deprecated, use jQuery.proxy instead</COMMENT>
	proxy<OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>proxy</OO><OPERATOR>,</OPERATOR>

	special<OPERATOR>:</OPERATOR> {
		ready<OPERATOR>:</OPERATOR> {
			<COMMENT>// Make sure the ready event is setup</COMMENT>
			setup<OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>bindReady</OO><OPERATOR>,</OPERATOR>
			teardown<OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noop</OO>
		}<OPERATOR>,</OPERATOR>

		live<OPERATOR>:</OPERATOR> {
			add<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( handleObj ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR>
					liveConvert( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>origType</OO><OPERATOR>,</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> )<OPERATOR>,</OPERATOR>
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({}<OPERATOR>,</OPERATOR> handleObj<OPERATOR>,</OPERATOR> {handler<OPERATOR>:</OPERATOR> liveHandler<OPERATOR>,</OPERATOR> guid<OPERATOR>:</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>handler</OO><OPERATOR>.</OPERATOR><OO>guid</OO>}) )<OPERATOR>;</OPERATOR> 
			}<OPERATOR>,</OPERATOR>

			remove<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( handleObj ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> liveConvert( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>origType</OO><OPERATOR>,</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> )<OPERATOR>,</OPERATOR> handleObj )<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		beforeunload<OPERATOR>:</OPERATOR> {
			setup<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data<OPERATOR>,</OPERATOR> namespaces<OPERATOR>,</OPERATOR> eventHandle ) {
				<COMMENT>// We only want to do this special case on windows</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isWindow</OO>( <KEYWORD>this</KEYWORD> ) ) {
					<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onbeforeunload</OO> <OPERATOR>=</OPERATOR> eventHandle<OPERATOR>;</OPERATOR>
				}
			}<OPERATOR>,</OPERATOR>

			teardown<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( namespaces<OPERATOR>,</OPERATOR> eventHandle ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onbeforeunload</OO> <OPERATOR>===</OPERATOR> eventHandle ) {
					<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>onbeforeunload</OO> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
				}
			}
		}
	}
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO> <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO> <OPERATOR>?</OPERATOR>
	<KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> handle ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO> ) {
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO>( type<OPERATOR>,</OPERATOR> handle<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD> )<OPERATOR>;</OPERATOR>
		}
	} <OPERATOR>:</OPERATOR> 
	<KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> handle ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>detachEvent</OO> ) {
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>detachEvent</OO>( <STRING>"on"</STRING> <OPERATOR>+</OPERATOR> type<OPERATOR>,</OPERATOR> handle )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( src ) {
	<COMMENT>// Allow instantiation without the 'new' keyword</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO> ) {
		<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO>( src )<OPERATOR>;</OPERATOR>
	}

	<COMMENT>// Event object</COMMENT>
	<KEYWORD>if</KEYWORD> ( src <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>src</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> ) {
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>originalEvent</OO> <OPERATOR>=</OPERATOR> src<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>src</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
	<COMMENT>// Event type</COMMENT>
	} <KEYWORD>else</KEYWORD> {
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> src<OPERATOR>;</OPERATOR>
	}

	<COMMENT>// timeStamp is buggy for some events on Firefox(#3843)</COMMENT>
	<COMMENT>// So we won't rely on the native value</COMMENT>
	<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>timeStamp</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>;</OPERATOR>

	<COMMENT>// Mark it as fixed</COMMENT>
	<KEYWORD>this</KEYWORD>[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ] <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> returnFalse() {
	<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
}
<KEYWORD>function</KEYWORD> returnTrue() {
	<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
}

<COMMENT>// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding</COMMENT>
<COMMENT>// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> {
	preventDefault<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isDefaultPrevented</OO> <OPERATOR>=</OPERATOR> returnTrue<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> e <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>originalEvent</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>e ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<COMMENT>// if preventDefault exists run it on the original event</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO> ) {
			<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO>()<OPERATOR>;</OPERATOR>

		<COMMENT>// otherwise set the returnValue property of the original event to false (IE)</COMMENT>
		} <KEYWORD>else</KEYWORD> {
			<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>returnValue</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	stopPropagation<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isPropagationStopped</OO> <OPERATOR>=</OPERATOR> returnTrue<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> e <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>originalEvent</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>e ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}
		<COMMENT>// if stopPropagation exists run it on the original event</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO> ) {
			<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>()<OPERATOR>;</OPERATOR>
		}
		<COMMENT>// otherwise set the cancelBubble property of the original event to true (IE)</COMMENT>
		<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>cancelBubble</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	stopImmediatePropagation<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>isImmediatePropagationStopped</OO> <OPERATOR>=</OPERATOR> returnTrue<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	isDefaultPrevented<OPERATOR>:</OPERATOR> returnFalse<OPERATOR>,</OPERATOR>
	isPropagationStopped<OPERATOR>:</OPERATOR> returnFalse<OPERATOR>,</OPERATOR>
	isImmediatePropagationStopped<OPERATOR>:</OPERATOR> returnFalse
}<OPERATOR>;</OPERATOR>

<COMMENT>// Checks if an event happened on an element within another element</COMMENT>
<COMMENT>// Used in jQuery.event.special.mouseenter and mouseleave handlers</COMMENT>
<KEYWORD>var</KEYWORD> withinElement <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( event ) {
	<COMMENT>// Check if mouse(over|out) are still within the same parent element</COMMENT>
	<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>relatedTarget</OO><OPERATOR>;</OPERATOR>

	<COMMENT>// Firefox sometimes assigns relatedTarget a XUL element</COMMENT>
	<COMMENT>// which we cannot access the parentNode property of</COMMENT>
	<KEYWORD>try</KEYWORD> {
		<COMMENT>// Traverse up the tree</COMMENT>
		<KEYWORD>while</KEYWORD> ( parent <OPERATOR>&amp;&amp;</OPERATOR> parent <OPERATOR>!==</OPERATOR> <KEYWORD>this</KEYWORD> ) {
			parent <OPERATOR>=</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( parent <OPERATOR>!==</OPERATOR> <KEYWORD>this</KEYWORD> ) {
			<COMMENT>// set the correct event type</COMMENT>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// handle event if we actually just moused on to a non sub-element</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
		}

	<COMMENT>// assuming we've left the element since we most likely mousedover a xul element</COMMENT>
	} <KEYWORD>catch</KEYWORD>(e) { }
}<OPERATOR>,</OPERATOR>

<COMMENT>// In case of event delegation, we only need to rename the event.type,</COMMENT>
<COMMENT>// liveHandler will take care of the rest.</COMMENT>
delegate <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( event ) {
	<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<COMMENT>// Create mouseenter and mouseleave events</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>({
	mouseenter<OPERATOR>:</OPERATOR> <STRING>"mouseover"</STRING><OPERATOR>,</OPERATOR>
	mouseleave<OPERATOR>:</OPERATOR> <STRING>"mouseout"</STRING>
}<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( orig<OPERATOR>,</OPERATOR> fix ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO>[ orig ] <OPERATOR>=</OPERATOR> {
		setup<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fix<OPERATOR>,</OPERATOR> data <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>?</OPERATOR> delegate <OPERATOR>:</OPERATOR> withinElement<OPERATOR>,</OPERATOR> orig )<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		teardown<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fix<OPERATOR>,</OPERATOR> data <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>?</OPERATOR> delegate <OPERATOR>:</OPERATOR> withinElement )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<COMMENT>// submit delegation</COMMENT>
<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>submitBubbles</OO> ) {

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO><OPERATOR>.</OPERATOR><OO>submit</OO> <OPERATOR>=</OPERATOR> {
		setup<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data<OPERATOR>,</OPERATOR> namespaces ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>!==</OPERATOR> <STRING>"form"</STRING> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"click.specialSubmit"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( e ) {
					<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>,</OPERATOR>
						type <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( (type <OPERATOR>===</OPERATOR> <STRING>"submit"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"image"</STRING>) <OPERATOR>&amp;&amp;</OPERATOR> <FUNCTION>jQuery</FUNCTION>( elem )<OPERATOR>.</OPERATOR><OO>closest</OO>(<STRING>"form"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO> ) {
						<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>liveFired</OO> <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
						<KEYWORD>return</KEYWORD> trigger( <STRING>"submit"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
					}
				})<OPERATOR>;</OPERATOR>
	 
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"keypress.specialSubmit"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( e ) {
					<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>,</OPERATOR>
						type <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( (type <OPERATOR>===</OPERATOR> <STRING>"text"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"password"</STRING>) <OPERATOR>&amp;&amp;</OPERATOR> <FUNCTION>jQuery</FUNCTION>( elem )<OPERATOR>.</OPERATOR><OO>closest</OO>(<STRING>"form"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>keyCode</OO> <OPERATOR>===</OPERATOR> <NUMERIC>13</NUMERIC> ) {
						<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>liveFired</OO> <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
						<KEYWORD>return</KEYWORD> trigger( <STRING>"submit"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
					}
				})<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		teardown<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( namespaces ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>".specialSubmit"</STRING> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>

}

<COMMENT>// change delegation, happens here so we have bind.</COMMENT>
<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>changeBubbles</OO> ) {

	<KEYWORD>var</KEYWORD> changeFilters<OPERATOR>,</OPERATOR>

	getVal <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>,</OPERATOR> val <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>value</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"radio"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"checkbox"</STRING> ) {
			val <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO><OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"select-multiple"</STRING> ) {
			val <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>selectedIndex</OO> <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
					<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO><OPERATOR>;</OPERATOR>
				})<OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"-"</STRING>) <OPERATOR>:</OPERATOR>
				<STRING>""</STRING><OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> <STRING>"select"</STRING> ) {
			val <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>selectedIndex</OO><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> val<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	testChange <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD> testChange( e ) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> val<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>rformElems</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> ) <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>readOnly</OO> ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"_change_data"</STRING> )<OPERATOR>;</OPERATOR>
		val <OPERATOR>=</OPERATOR> getVal(elem)<OPERATOR>;</OPERATOR>

		<COMMENT>// the current data will be also retrieved by beforeactivate</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>!==</OPERATOR> <STRING>"focusout"</STRING> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>!==</OPERATOR> <STRING>"radio"</STRING> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"_change_data"</STRING><OPERATOR>,</OPERATOR> val )<OPERATOR>;</OPERATOR>
		}
		
		<KEYWORD>if</KEYWORD> ( data <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>||</OPERATOR> val <OPERATOR>===</OPERATOR> data ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( data <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> val ) {
			<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <STRING>"change"</STRING><OPERATOR>;</OPERATOR>
			<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>liveFired</OO> <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( e<OPERATOR>,</OPERATOR> arguments[<NUMERIC>1</NUMERIC>]<OPERATOR>,</OPERATOR> elem )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO><OPERATOR>.</OPERATOR><OO>change</OO> <OPERATOR>=</OPERATOR> {
		filters<OPERATOR>:</OPERATOR> {
			focusout<OPERATOR>:</OPERATOR> testChange<OPERATOR>,</OPERATOR> 

			beforedeactivate<OPERATOR>:</OPERATOR> testChange<OPERATOR>,</OPERATOR>

			click<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( e ) {
				<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>,</OPERATOR> type <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"radio"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"checkbox"</STRING> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> <STRING>"select"</STRING> ) {
					<KEYWORD>return</KEYWORD> <OBJ>testChange</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> e )<OPERATOR>;</OPERATOR>
				}
			}<OPERATOR>,</OPERATOR>

			<COMMENT>// Change has to be called before submit</COMMENT>
			<COMMENT>// Keydown will be called before keypress, which is used in submit-event delegation</COMMENT>
			keydown<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( e ) {
				<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>,</OPERATOR> type <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( (<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>keyCode</OO> <OPERATOR>===</OPERATOR> <NUMERIC>13</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>!==</OPERATOR> <STRING>"textarea"</STRING>) <OPERATOR>||</OPERATOR>
					(<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>keyCode</OO> <OPERATOR>===</OPERATOR> <NUMERIC>32</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> (type <OPERATOR>===</OPERATOR> <STRING>"checkbox"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"radio"</STRING>)) <OPERATOR>||</OPERATOR>
					type <OPERATOR>===</OPERATOR> <STRING>"select-multiple"</STRING> ) {
					<KEYWORD>return</KEYWORD> <OBJ>testChange</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> e )<OPERATOR>;</OPERATOR>
				}
			}<OPERATOR>,</OPERATOR>

			<COMMENT>// Beforeactivate happens also before the previous element is blurred</COMMENT>
			<COMMENT>// with this event you can't trigger a change event, but you can store</COMMENT>
			<COMMENT>// information</COMMENT>
			beforeactivate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( e ) {
				<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO><OPERATOR>;</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"_change_data"</STRING><OPERATOR>,</OPERATOR> getVal(elem) )<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		setup<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( data<OPERATOR>,</OPERATOR> namespaces ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>===</OPERATOR> <STRING>"file"</STRING> ) {
				<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> type <KEYWORD>in</KEYWORD> changeFilters ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> type <OPERATOR>+</OPERATOR> <STRING>".specialChange"</STRING><OPERATOR>,</OPERATOR> changeFilters[type] )<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> <OBJ>rformElems</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> )<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		teardown<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( namespaces ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>".specialChange"</STRING> )<OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> <OBJ>rformElems</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>

	changeFilters <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO><OPERATOR>.</OPERATOR><OO>change</OO><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>;</OPERATOR>

	<COMMENT>// Handle when the input is .focus()'d</COMMENT>
	<OBJ>changeFilters</OBJ><OPERATOR>.</OPERATOR><OO>focus</OO> <OPERATOR>=</OPERATOR> <OBJ>changeFilters</OBJ><OPERATOR>.</OPERATOR><OO>beforeactivate</OO><OPERATOR>;</OPERATOR>
}

<KEYWORD>function</KEYWORD> trigger( type<OPERATOR>,</OPERATOR> elem<OPERATOR>,</OPERATOR> args ) {
	args[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> type<OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( elem<OPERATOR>,</OPERATOR> args )<OPERATOR>;</OPERATOR>
}

<COMMENT>// Create "bubbling" focus and blur events</COMMENT>
<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>({ focus<OPERATOR>:</OPERATOR> <STRING>"focusin"</STRING><OPERATOR>,</OPERATOR> blur<OPERATOR>:</OPERATOR> <STRING>"focusout"</STRING> }<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( orig<OPERATOR>,</OPERATOR> fix ) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO>[ fix ] <OPERATOR>=</OPERATOR> {
			setup<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
				<KEYWORD>if</KEYWORD> ( focusCounts[fix]<OPERATOR>++</OPERATOR> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
					<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO>( orig<OPERATOR>,</OPERATOR> handler<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>
				}
			}<OPERATOR>,</OPERATOR> 
			teardown<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() { 
				<KEYWORD>if</KEYWORD> ( <OPERATOR>--</OPERATOR>focusCounts[fix] <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
					<OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>removeEventListener</OO>( orig<OPERATOR>,</OPERATOR> handler<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>
				}
			}
		}<OPERATOR>;</OPERATOR>

		<KEYWORD>function</KEYWORD> handler( e ) { 
			e <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>fix</OO>( e )<OPERATOR>;</OPERATOR>
			<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> fix<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( e<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> )<OPERATOR>;</OPERATOR>
		}
	})<OPERATOR>;</OPERATOR>
}

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>([<STRING>"bind"</STRING><OPERATOR>,</OPERATOR> <STRING>"one"</STRING>]<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> name ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( type<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> fn ) {
		<COMMENT>// Handle object literals</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> type <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> ) {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> type ) {
				<KEYWORD>this</KEYWORD>[ name ](key<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> type[key]<OPERATOR>,</OPERATOR> fn)<OPERATOR>;</OPERATOR>
			}
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( data ) <OPERATOR>||</OPERATOR> data <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
			fn <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> handler <OPERATOR>=</OPERATOR> name <OPERATOR>===</OPERATOR> <STRING>"one"</STRING> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>proxy</OO>( fn<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( event ) {
			<FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>.</OPERATOR><OO>unbind</OO>( event<OPERATOR>,</OPERATOR> handler )<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
		}) <OPERATOR>:</OPERATOR> fn<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"unload"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> name <OPERATOR>!==</OPERATOR> <STRING>"one"</STRING> ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>one</OO>( type<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> fn )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>( <KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> handler<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	unbind<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( type<OPERATOR>,</OPERATOR> fn ) {
		<COMMENT>// Handle object literals</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> type <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO> ) {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> type ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>unbind</OO>(key<OPERATOR>,</OPERATOR> type[key])<OPERATOR>;</OPERATOR>
			}

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( <KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> fn )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	delegate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> types<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> fn ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>live</OO>( types<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> selector )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	undelegate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> types<OPERATOR>,</OPERATOR> fn ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>unbind</OO>( <STRING>"live"</STRING> )<OPERATOR>;</OPERATOR>
		
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>die</OO>( types<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> selector )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	
	trigger<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( type<OPERATOR>,</OPERATOR> data ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( type<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	triggerHandler<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( type<OPERATOR>,</OPERATOR> data ) {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] ) {
			<KEYWORD>var</KEYWORD> event <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>Event</OO>( type )<OPERATOR>;</OPERATOR>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO>()<OPERATOR>;</OPERATOR>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>stopPropagation</OO>()<OPERATOR>;</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( event<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] )<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>result</OO><OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	toggle<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fn ) {
		<COMMENT>// Save reference to arguments for access in closure</COMMENT>
		<KEYWORD>var</KEYWORD> args <OPERATOR>=</OPERATOR> arguments<OPERATOR>,</OPERATOR>
			i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

		<COMMENT>// link all the functions, so any of them can unbind this click handler</COMMENT>
		<KEYWORD>while</KEYWORD> ( i <OPERATOR>&lt;</OPERATOR> <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>proxy</OO>( fn<OPERATOR>,</OPERATOR> args[ i<OPERATOR>++</OPERATOR> ] )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>click</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>proxy</OO>( fn<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( event ) {
			<COMMENT>// Figure out which function to execute</COMMENT>
			<KEYWORD>var</KEYWORD> lastToggle <OPERATOR>=</OPERATOR> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"lastToggle"</STRING> <OPERATOR>+</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC> ) <OPERATOR>%</OPERATOR> i<OPERATOR>;</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"lastToggle"</STRING> <OPERATOR>+</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>guid</OO><OPERATOR>,</OPERATOR> lastToggle <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>

			<COMMENT>// Make sure that clicks stop</COMMENT>
			<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO>()<OPERATOR>;</OPERATOR>

			<COMMENT>// and execute the function</COMMENT>
			<KEYWORD>return</KEYWORD> args[ lastToggle ]<OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments ) <OPERATOR>||</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}))<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	hover<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fnOver<OPERATOR>,</OPERATOR> fnOut ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>mouseenter</OO>( fnOver )<OPERATOR>.</OPERATOR><OO>mouseleave</OO>( fnOut <OPERATOR>||</OPERATOR> fnOver )<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> liveMap <OPERATOR>=</OPERATOR> {
	focus<OPERATOR>:</OPERATOR> <STRING>"focusin"</STRING><OPERATOR>,</OPERATOR>
	blur<OPERATOR>:</OPERATOR> <STRING>"focusout"</STRING><OPERATOR>,</OPERATOR>
	mouseenter<OPERATOR>:</OPERATOR> <STRING>"mouseover"</STRING><OPERATOR>,</OPERATOR>
	mouseleave<OPERATOR>:</OPERATOR> <STRING>"mouseout"</STRING>
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>([<STRING>"live"</STRING><OPERATOR>,</OPERATOR> <STRING>"die"</STRING>]<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> name ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( types<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> origSelector <COMMENT>/* Internal Use Only */</COMMENT> ) {
		<KEYWORD>var</KEYWORD> type<OPERATOR>,</OPERATOR> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> namespaces<OPERATOR>,</OPERATOR> preType<OPERATOR>,</OPERATOR>
			selector <OPERATOR>=</OPERATOR> origSelector <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO><OPERATOR>,</OPERATOR>
			context <OPERATOR>=</OPERATOR> origSelector <OPERATOR>?</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>:</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> )<OPERATOR>;</OPERATOR>
		
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> types <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>preventDefault</OO> ) {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> key <KEYWORD>in</KEYWORD> types ) {
				context[ name ]( key<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> types[key]<OPERATOR>,</OPERATOR> selector )<OPERATOR>;</OPERATOR>
			}
			
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( data ) ) {
			fn <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		types <OPERATOR>=</OPERATOR> (types <OPERATOR>||</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( (type <OPERATOR>=</OPERATOR> types[ i<OPERATOR>++</OPERATOR> ]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
			match <OPERATOR>=</OPERATOR> <OBJ>rnamespaces</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( type )<OPERATOR>;</OPERATOR>
			namespaces <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( match )  {
				namespaces <OPERATOR>=</OPERATOR> match[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
				type <OPERATOR>=</OPERATOR> <OBJ>type</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( rnamespaces<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"hover"</STRING> ) {
				<OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( <STRING>"mouseenter"</STRING> <OPERATOR>+</OPERATOR> namespaces<OPERATOR>,</OPERATOR> <STRING>"mouseleave"</STRING> <OPERATOR>+</OPERATOR> namespaces )<OPERATOR>;</OPERATOR>
				<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			}

			preType <OPERATOR>=</OPERATOR> type<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"focus"</STRING> <OPERATOR>||</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"blur"</STRING> ) {
				<OBJ>types</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( liveMap[ type ] <OPERATOR>+</OPERATOR> namespaces )<OPERATOR>;</OPERATOR>
				type <OPERATOR>=</OPERATOR> type <OPERATOR>+</OPERATOR> namespaces<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				type <OPERATOR>=</OPERATOR> (liveMap[ type ] <OPERATOR>||</OPERATOR> type) <OPERATOR>+</OPERATOR> namespaces<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"live"</STRING> ) {
				<COMMENT>// bind live handler</COMMENT>
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>( context[j]<OPERATOR>,</OPERATOR> <STRING>"live."</STRING> <OPERATOR>+</OPERATOR> liveConvert( type<OPERATOR>,</OPERATOR> selector )<OPERATOR>,</OPERATOR>
						{ data<OPERATOR>:</OPERATOR> data<OPERATOR>,</OPERATOR> selector<OPERATOR>:</OPERATOR> selector<OPERATOR>,</OPERATOR> handler<OPERATOR>:</OPERATOR> fn<OPERATOR>,</OPERATOR> origType<OPERATOR>:</OPERATOR> type<OPERATOR>,</OPERATOR> origHandler<OPERATOR>:</OPERATOR> fn<OPERATOR>,</OPERATOR> preType<OPERATOR>:</OPERATOR> preType } )<OPERATOR>;</OPERATOR>
				}

			} <KEYWORD>else</KEYWORD> {
				<COMMENT>// unbind live handler</COMMENT>
				<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>unbind</OO>( <STRING>"live."</STRING> <OPERATOR>+</OPERATOR> liveConvert( type<OPERATOR>,</OPERATOR> selector )<OPERATOR>,</OPERATOR> fn )<OPERATOR>;</OPERATOR>
			}
		}
		
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> liveHandler( event ) {
	<KEYWORD>var</KEYWORD> stop<OPERATOR>,</OPERATOR> maxLevel<OPERATOR>,</OPERATOR> related<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> handleObj<OPERATOR>,</OPERATOR> elem<OPERATOR>,</OPERATOR> j<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> l<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> close<OPERATOR>,</OPERATOR> namespace<OPERATOR>,</OPERATOR> ret<OPERATOR>,</OPERATOR>
		elems <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
		selectors <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
		events <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>?</OPERATOR> <STRING>"events"</STRING> <OPERATOR>:</OPERATOR> <STRING>"__events__"</STRING> )<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> events <OPERATOR>===</OPERATOR> <STRING>"function"</STRING> ) {
		events <OPERATOR>=</OPERATOR> <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>;</OPERATOR>
	}

	<COMMENT>// Make sure we avoid non-left-click bubbling in Firefox (#3861)</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>liveFired</OO> <OPERATOR>===</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>events <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>live</OO> <OPERATOR>||</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>button</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>===</OPERATOR> <STRING>"click"</STRING> ) {
		<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	}
	
	<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> ) {
		namespace <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>(<STRING>"(^|<ESC>\\</ESC>.)"</STRING> <OPERATOR>+</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>"."</STRING>)<OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"<ESC>\\</ESC>.(?:.*<ESC>\\</ESC>.)?"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"(<ESC>\\</ESC>.|$)"</STRING>)<OPERATOR>;</OPERATOR>
	}

	<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>liveFired</OO> <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> live <OPERATOR>=</OPERATOR> <OBJ>events</OBJ><OPERATOR>.</OPERATOR><OO>live</OO><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> ( j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> <OBJ>live</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
		handleObj <OPERATOR>=</OPERATOR> live[j]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>origType</OO><OPERATOR>.</OPERATOR><OO>replace</OO>( rnamespaces<OPERATOR>,</OPERATOR> <STRING>""</STRING> ) <OPERATOR>===</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> ) {
			<OBJ>selectors</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<OBJ>live</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>( j<OPERATOR>--,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
		}
	}

	match <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>target</OO> )<OPERATOR>.</OPERATOR><OO>closest</OO>( selectors<OPERATOR>,</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>currentTarget</OO> )<OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		close <OPERATOR>=</OPERATOR> match[i]<OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> <OBJ>live</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
			handleObj <OPERATOR>=</OPERATOR> live[j]<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>close</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>===</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> <OPERATOR>&amp;&amp;</OPERATOR> (<OPERATOR>!</OPERATOR>namespace <OPERATOR>||</OPERATOR> <OBJ>namespace</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>namespace</OO> )) ) {
				elem <OPERATOR>=</OPERATOR> <OBJ>close</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>;</OPERATOR>
				related <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

				<COMMENT>// Those two events require additional checking</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>preType</OO> <OPERATOR>===</OPERATOR> <STRING>"mouseenter"</STRING> <OPERATOR>||</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>preType</OO> <OPERATOR>===</OPERATOR> <STRING>"mouseleave"</STRING> ) {
					<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>=</OPERATOR> <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>preType</OO><OPERATOR>;</OPERATOR>
					related <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>relatedTarget</OO> )<OPERATOR>.</OPERATOR><OO>closest</OO>( <OBJ>handleObj</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> )[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>related <OPERATOR>||</OPERATOR> related <OPERATOR>!==</OPERATOR> elem ) {
					<OBJ>elems</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>({ elem<OPERATOR>:</OPERATOR> elem<OPERATOR>,</OPERATOR> handleObj<OPERATOR>:</OPERATOR> handleObj<OPERATOR>,</OPERATOR> level<OPERATOR>:</OPERATOR> <OBJ>close</OBJ><OPERATOR>.</OPERATOR><OO>level</OO> })<OPERATOR>;</OPERATOR>
				}
			}
		}
	}

	<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>elems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		match <OPERATOR>=</OPERATOR> elems[i]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( maxLevel <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>level</OO> <OPERATOR>&gt;</OPERATOR> maxLevel ) {
			<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>currentTarget</OO> <OPERATOR>=</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>;</OPERATOR>
		<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>handleObj</OO><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
		<OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>handleObj</OO> <OPERATOR>=</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>handleObj</OO><OPERATOR>;</OPERATOR>

		ret <OPERATOR>=</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>handleObj</OO><OPERATOR>.</OPERATOR><OO>origHandler</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( ret <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>||</OPERATOR> <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>isPropagationStopped</OO>() ) {
			maxLevel <OPERATOR>=</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>level</OO><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( ret <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
				stop <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>if</KEYWORD> ( <OBJ>event</OBJ><OPERATOR>.</OPERATOR><OO>isImmediatePropagationStopped</OO>() ) {
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}
	}

	<KEYWORD>return</KEYWORD> stop<OPERATOR>;</OPERATOR>
}

<KEYWORD>function</KEYWORD> liveConvert( type<OPERATOR>,</OPERATOR> selector ) {
	<KEYWORD>return</KEYWORD> (type <OPERATOR>&amp;&amp;</OPERATOR> type <OPERATOR>!==</OPERATOR> <STRING>"*"</STRING> <OPERATOR>?</OPERATOR> type <OPERATOR>+</OPERATOR> <STRING>"."</STRING> <OPERATOR>:</OPERATOR> <STRING>""</STRING>) <OPERATOR>+</OPERATOR> <OBJ>selector</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(rperiod<OPERATOR>,</OPERATOR> <STRING>"`"</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(rspace<OPERATOR>,</OPERATOR> <STRING>"&amp;"</STRING>)<OPERATOR>;</OPERATOR>
}

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( (<STRING>"blur focus focusin focusout load resize scroll unload click dblclick "</STRING> <OPERATOR>+</OPERATOR>
	<STRING>"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "</STRING> <OPERATOR>+</OPERATOR>
	<STRING>"change select submit keydown keypress keyup error"</STRING>)<OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> name ) {

	<COMMENT>// Handle event binding</COMMENT>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( data<OPERATOR>,</OPERATOR> fn ) {
		<KEYWORD>if</KEYWORD> ( fn <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
			fn <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>?</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bind</OO>( name<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> fn ) <OPERATOR>:</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>trigger</OO>( name )<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>attrFn</OO> ) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>attrFn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<COMMENT>// Prevent memory leaks in IE</COMMENT>
<COMMENT>// Window isn't included so as not to unbind existing unload events</COMMENT>
<COMMENT>// More info:</COMMENT>
<COMMENT>//  - http://isaacschlueter.com/2006/10/msie-memory-leaks/</COMMENT>
<KEYWORD>if</KEYWORD> ( <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>attachEvent</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>addEventListener</OO> ) {
	<FUNCTION>jQuery</FUNCTION>(<TYPE>window</TYPE>)<OPERATOR>.</OPERATOR><OO>bind</OO>(<STRING>"unload"</STRING><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> id <KEYWORD>in</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO> ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO>[ id ]<OPERATOR>.</OPERATOR><OO>handle</OO> ) {
				<COMMENT>// Try/Catch is to handle iframes being unloaded, see #4280</COMMENT>
				<KEYWORD>try</KEYWORD> {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO>[ id ]<OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>.</OPERATOR><OO>elem</OO> )<OPERATOR>;</OPERATOR>
				} <KEYWORD>catch</KEYWORD>(e) {}
			}
		}
	})<OPERATOR>;</OPERATOR>
}


<DOCCOMMENT>/*!</DOCCOMMENT>
<DOCCOMMENT> * Sizzle CSS Selector Engine - v1.0</DOCCOMMENT>
<DOCCOMMENT> *  Copyright 2009, The Dojo Foundation</DOCCOMMENT>
<DOCCOMMENT> *  Released under the MIT, BSD, and GPL Licenses.</DOCCOMMENT>
<DOCCOMMENT> *  More information: http://sizzlejs.com/</DOCCOMMENT>
<DOCCOMMENT> */</DOCCOMMENT>
(<KEYWORD>function</KEYWORD>(){

<KEYWORD>var</KEYWORD> chunker <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\(</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\(</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\)</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\)</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\[</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\[</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\[</ESC><ESC>\]</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\[</ESC><ESC>\]</ESC>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\]</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^ &gt;<REGEX_OPERATOR>+</REGEX_OPERATOR>~,<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\[</ESC><ESC>\\</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>&gt;<REGEX_OPERATOR>+</REGEX_OPERATOR>~<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR>,<ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\r</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\n</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	done <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
	toString <OPERATOR>=</OPERATOR> <OBJ>Object</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>toString</OO><OPERATOR>,</OPERATOR>
	hasDuplicate <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
	baseHasDuplicate <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

<COMMENT>// Here we check if the JavaScript engine is using some sort of</COMMENT>
<COMMENT>// optimization where it does not always call our comparision</COMMENT>
<COMMENT>// function. If that is the case, discard the hasDuplicate value.</COMMENT>
<COMMENT>//   Thus far that includes Google Chrome.</COMMENT>
[<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>sort</OO>(<KEYWORD>function</KEYWORD>() {
	baseHasDuplicate <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	<KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Sizzle <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> results<OPERATOR>,</OPERATOR> seed ) {
	results <OPERATOR>=</OPERATOR> results <OPERATOR>||</OPERATOR> []<OPERATOR>;</OPERATOR>
	context <OPERATOR>=</OPERATOR> context <OPERATOR>||</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>

	<KEYWORD>var</KEYWORD> origContext <OPERATOR>=</OPERATOR> context<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>9</NUMERIC> ) {
		<KEYWORD>return</KEYWORD> []<OPERATOR>;</OPERATOR>
	}
	
	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>selector <OPERATOR>||</OPERATOR> <KEYWORD>typeof</KEYWORD> selector <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> ) {
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>var</KEYWORD> m<OPERATOR>,</OPERATOR> set<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> extra<OPERATOR>,</OPERATOR> ret<OPERATOR>,</OPERATOR> cur<OPERATOR>,</OPERATOR> pop<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR>
		prune <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		contextXML <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO>( context )<OPERATOR>,</OPERATOR>
		parts <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
		soFar <OPERATOR>=</OPERATOR> selector<OPERATOR>;</OPERATOR>
	
	<COMMENT>// Reset the position of the chunker regexp (start from head)</COMMENT>
	<KEYWORD>do</KEYWORD> {
		<OBJ>chunker</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
		m <OPERATOR>=</OPERATOR> <OBJ>chunker</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( soFar )<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( m ) {
			soFar <OPERATOR>=</OPERATOR> m[<NUMERIC>3</NUMERIC>]<OPERATOR>;</OPERATOR>
		
			<OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( m[<NUMERIC>1</NUMERIC>] )<OPERATOR>;</OPERATOR>
		
			<KEYWORD>if</KEYWORD> ( m[<NUMERIC>2</NUMERIC>] ) {
				extra <OPERATOR>=</OPERATOR> m[<NUMERIC>3</NUMERIC>]<OPERATOR>;</OPERATOR>
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}
	} <KEYWORD>while</KEYWORD> ( m )<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>origPOS</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( selector ) ) {

		<KEYWORD>if</KEYWORD> ( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>relative</OO>[ parts[<NUMERIC>0</NUMERIC>] ] ) {
			set <OPERATOR>=</OPERATOR> posProcess( parts[<NUMERIC>0</NUMERIC>] <OPERATOR>+</OPERATOR> parts[<NUMERIC>1</NUMERIC>]<OPERATOR>,</OPERATOR> context )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			set <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>relative</OO>[ parts[<NUMERIC>0</NUMERIC>] ] <OPERATOR>?</OPERATOR>
				[ context ] <OPERATOR>:</OPERATOR>
				Sizzle( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>,</OPERATOR> context )<OPERATOR>;</OPERATOR>

			<KEYWORD>while</KEYWORD> ( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				selector <OPERATOR>=</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>relative</OO>[ selector ] ) {
					selector <OPERATOR>+=</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>;</OPERATOR>
				}
				
				set <OPERATOR>=</OPERATOR> posProcess( selector<OPERATOR>,</OPERATOR> set )<OPERATOR>;</OPERATOR>
			}
		}

	} <KEYWORD>else</KEYWORD> {
		<COMMENT>// Take a shortcut and set the context if the root selector is an ID</COMMENT>
		<COMMENT>// (but not if it'll be faster if the inner selector is an ID)</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>seed <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>9</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>contextXML <OPERATOR>&amp;&amp;</OPERATOR>
				<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>ID</OO><OPERATOR>.</OPERATOR><OO>test</OO>(parts[<NUMERIC>0</NUMERIC>]) <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>ID</OO><OPERATOR>.</OPERATOR><OO>test</OO>(parts[<OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>]) ) {

			ret <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>shift</OO>()<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> contextXML )<OPERATOR>;</OPERATOR>
			context <OPERATOR>=</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO> <OPERATOR>?</OPERATOR>
				<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>,</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>set</OO> )[<NUMERIC>0</NUMERIC>] <OPERATOR>:</OPERATOR>
				<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( context ) {
			ret <OPERATOR>=</OPERATOR> seed <OPERATOR>?</OPERATOR>
				{ expr<OPERATOR>:</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>()<OPERATOR>,</OPERATOR> set<OPERATOR>:</OPERATOR> makeArray(seed) } <OPERATOR>:</OPERATOR>
				<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>()<OPERATOR>,</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> (parts[<NUMERIC>0</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"~"</STRING> <OPERATOR>||</OPERATOR> parts[<NUMERIC>0</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"+"</STRING>) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>?</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>:</OPERATOR> context<OPERATOR>,</OPERATOR> contextXML )<OPERATOR>;</OPERATOR>

			set <OPERATOR>=</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO> <OPERATOR>?</OPERATOR>
				<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>,</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>set</OO> ) <OPERATOR>:</OPERATOR>
				<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>set</OO><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				checkSet <OPERATOR>=</OPERATOR> makeArray( set )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				prune <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>while</KEYWORD> ( <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				cur <OPERATOR>=</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>()<OPERATOR>;</OPERATOR>
				pop <OPERATOR>=</OPERATOR> cur<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>relative</OO>[ cur ] ) {
					cur <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
				} <KEYWORD>else</KEYWORD> {
					pop <OPERATOR>=</OPERATOR> <OBJ>parts</OBJ><OPERATOR>.</OPERATOR><OO>pop</OO>()<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( pop <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
					pop <OPERATOR>=</OPERATOR> context<OPERATOR>;</OPERATOR>
				}

				<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>relative</OO>[ cur ]( checkSet<OPERATOR>,</OPERATOR> pop<OPERATOR>,</OPERATOR> contextXML )<OPERATOR>;</OPERATOR>
			}

		} <KEYWORD>else</KEYWORD> {
			checkSet <OPERATOR>=</OPERATOR> parts <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>
		}
	}

	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>checkSet ) {
		checkSet <OPERATOR>=</OPERATOR> set<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>checkSet ) {
		<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>error</OO>( cur <OPERATOR>||</OPERATOR> selector )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>if</KEYWORD> ( <OBJ>toString</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(checkSet) <OPERATOR>===</OPERATOR> <STRING>"[object Array]"</STRING> ) {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>prune ) {
			<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( results<OPERATOR>,</OPERATOR> checkSet )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( context <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
			<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> checkSet[i] <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( checkSet[i] <OPERATOR>&amp;&amp;</OPERATOR> (checkSet[i] <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD> <OPERATOR>||</OPERATOR> checkSet[i]<OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(context<OPERATOR>,</OPERATOR> checkSet[i])) ) {
					<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( set[i] )<OPERATOR>;</OPERATOR>
				}
			}

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> checkSet[i] <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( checkSet[i] <OPERATOR>&amp;&amp;</OPERATOR> checkSet[i]<OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
					<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( set[i] )<OPERATOR>;</OPERATOR>
				}
			}
		}

	} <KEYWORD>else</KEYWORD> {
		makeArray( checkSet<OPERATOR>,</OPERATOR> results )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>if</KEYWORD> ( extra ) {
		Sizzle( extra<OPERATOR>,</OPERATOR> origContext<OPERATOR>,</OPERATOR> results<OPERATOR>,</OPERATOR> seed )<OPERATOR>;</OPERATOR>
		<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>uniqueSort</OO>( results )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>uniqueSort</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( results ) {
	<KEYWORD>if</KEYWORD> ( sortOrder ) {
		hasDuplicate <OPERATOR>=</OPERATOR> baseHasDuplicate<OPERATOR>;</OPERATOR>
		<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>sort</OO>( sortOrder )<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( hasDuplicate ) {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( results[i] <OPERATOR>===</OPERATOR> results[ i <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC> ] ) {
					<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>( i<OPERATOR>--,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
				}
			}
		}
	}

	<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>matches</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( expr<OPERATOR>,</OPERATOR> set ) {
	<KEYWORD>return</KEYWORD> Sizzle( expr<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> set )<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>matchesSelector</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( node<OPERATOR>,</OPERATOR> expr ) {
	<KEYWORD>return</KEYWORD> Sizzle( expr<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> [node] )<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>find</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( expr<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> isXML ) {
	<KEYWORD>var</KEYWORD> set<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>expr ) {
		<KEYWORD>return</KEYWORD> []<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>order</OO><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		<KEYWORD>var</KEYWORD> match<OPERATOR>,</OPERATOR>
			type <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>order</OO>[i]<OPERATOR>;</OPERATOR>
		
		<KEYWORD>if</KEYWORD> ( (match <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>leftMatch</OO>[ type ]<OPERATOR>.</OPERATOR><OO>exec</OO>( expr )) ) {
			<KEYWORD>var</KEYWORD> left <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>
			<OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>( <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>left</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>( <OBJ>left</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC> ) <OPERATOR>!==</OPERATOR> <STRING>"<ESC>\\</ESC>"</STRING> ) {
				match[<NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> (match[<NUMERIC>1</NUMERIC>] <OPERATOR>||</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\\</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>""</STRING>)<OPERATOR>;</OPERATOR>
				set <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>[ type ]( match<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> isXML )<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( set <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
					expr <OPERATOR>=</OPERATOR> <OBJ>expr</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>[ type ]<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				}
			}
		}
	}

	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>set ) {
		set <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>( <STRING>"*"</STRING> )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> { set<OPERATOR>:</OPERATOR> set<OPERATOR>,</OPERATOR> expr<OPERATOR>:</OPERATOR> expr }<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( expr<OPERATOR>,</OPERATOR> set<OPERATOR>,</OPERATOR> inplace<OPERATOR>,</OPERATOR> not ) {
	<KEYWORD>var</KEYWORD> match<OPERATOR>,</OPERATOR> anyFound<OPERATOR>,</OPERATOR>
		old <OPERATOR>=</OPERATOR> expr<OPERATOR>,</OPERATOR>
		result <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
		curLoop <OPERATOR>=</OPERATOR> set<OPERATOR>,</OPERATOR>
		isXMLFilter <OPERATOR>=</OPERATOR> set <OPERATOR>&amp;&amp;</OPERATOR> set[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO>( set[<NUMERIC>0</NUMERIC>] )<OPERATOR>;</OPERATOR>

	<KEYWORD>while</KEYWORD> ( expr <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>set</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> type <KEYWORD>in</KEYWORD> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO> ) {
			<KEYWORD>if</KEYWORD> ( (match <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>leftMatch</OO>[ type ]<OPERATOR>.</OPERATOR><OO>exec</OO>( expr )) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> match[<NUMERIC>2</NUMERIC>] ) {
				<KEYWORD>var</KEYWORD> found<OPERATOR>,</OPERATOR> item<OPERATOR>,</OPERATOR>
					filter <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>[ type ]<OPERATOR>,</OPERATOR>
					left <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>

				anyFound <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

				<OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>(<NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR><NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>left</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>( <OBJ>left</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC> ) <OPERATOR>===</OPERATOR> <STRING>"<ESC>\\</ESC>"</STRING> ) {
					<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( curLoop <OPERATOR>===</OPERATOR> result ) {
					result <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>preFilter</OO>[ type ] ) {
					match <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>preFilter</OO>[ type ]( match<OPERATOR>,</OPERATOR> curLoop<OPERATOR>,</OPERATOR> inplace<OPERATOR>,</OPERATOR> result<OPERATOR>,</OPERATOR> not<OPERATOR>,</OPERATOR> isXMLFilter )<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>match ) {
						anyFound <OPERATOR>=</OPERATOR> found <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( match <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD> ) {
						<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>if</KEYWORD> ( match ) {
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> (item <OPERATOR>=</OPERATOR> curLoop[i]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
						<KEYWORD>if</KEYWORD> ( item ) {
							found <OPERATOR>=</OPERATOR> filter( item<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> curLoop )<OPERATOR>;</OPERATOR>
							<KEYWORD>var</KEYWORD> pass <OPERATOR>=</OPERATOR> not <OPERATOR>^</OPERATOR> <OPERATOR>!!</OPERATOR>found<OPERATOR>;</OPERATOR>

							<KEYWORD>if</KEYWORD> ( inplace <OPERATOR>&amp;&amp;</OPERATOR> found <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
								<KEYWORD>if</KEYWORD> ( pass ) {
									anyFound <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

								} <KEYWORD>else</KEYWORD> {
									curLoop[i] <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
								}

							} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( pass ) {
								<OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( item )<OPERATOR>;</OPERATOR>
								anyFound <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
							}
						}
					}
				}

				<KEYWORD>if</KEYWORD> ( found <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>inplace ) {
						curLoop <OPERATOR>=</OPERATOR> result<OPERATOR>;</OPERATOR>
					}

					expr <OPERATOR>=</OPERATOR> <OBJ>expr</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>[ type ]<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>anyFound ) {
						<KEYWORD>return</KEYWORD> []<OPERATOR>;</OPERATOR>
					}

					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				}
			}
		}

		<COMMENT>// Improper expression</COMMENT>
		<KEYWORD>if</KEYWORD> ( expr <OPERATOR>===</OPERATOR> old ) {
			<KEYWORD>if</KEYWORD> ( anyFound <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
				<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>error</OO>( expr )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}

		old <OPERATOR>=</OPERATOR> expr<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> curLoop<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>error</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( msg ) {
	<KEYWORD>throw</KEYWORD> <STRING>"Syntax error, unrecognized expression: "</STRING> <OPERATOR>+</OPERATOR> msg<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> Expr <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>selectors</OO> <OPERATOR>=</OPERATOR> {
	order<OPERATOR>:</OPERATOR> [ <STRING>"ID"</STRING><OPERATOR>,</OPERATOR> <STRING>"NAME"</STRING><OPERATOR>,</OPERATOR> <STRING>"TAG"</STRING> ]<OPERATOR>,</OPERATOR>

	match<OPERATOR>:</OPERATOR> {
		ID<OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>#<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\u00c0</ESC>-<ESC>\uFFFF</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		<CONSTANT>CLASS</CONSTANT><OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\.</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\u00c0</ESC>-<ESC>\uFFFF</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		<CONSTANT>NAME</CONSTANT><OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\[</ESC>name=<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\u00c0</ESC>-<ESC>\uFFFF</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		<CONSTANT>ATTR</CONSTANT><OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\[</ESC><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\u00c0</ESC>-<ESC>\uFFFF</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\S</ESC><REGEX_OPERATOR>?</REGEX_OPERATOR>=<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\3</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		TAG<OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\u00c0</ESC>-<ESC>\uFFFF</ESC><ESC>\*</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		<CONSTANT>CHILD</CONSTANT><OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>:<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>only<REGEX_OPERATOR>|</REGEX_OPERATOR>nth<REGEX_OPERATOR>|</REGEX_OPERATOR>last<REGEX_OPERATOR>|</REGEX_OPERATOR>first<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>-child<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\(</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>even<REGEX_OPERATOR>|</REGEX_OPERATOR>odd<REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\d</ESC>n<REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\)</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		POS<OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>:<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>nth<REGEX_OPERATOR>|</REGEX_OPERATOR>eq<REGEX_OPERATOR>|</REGEX_OPERATOR>gt<REGEX_OPERATOR>|</REGEX_OPERATOR>lt<REGEX_OPERATOR>|</REGEX_OPERATOR>first<REGEX_OPERATOR>|</REGEX_OPERATOR>last<REGEX_OPERATOR>|</REGEX_OPERATOR>even<REGEX_OPERATOR>|</REGEX_OPERATOR>odd<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\(</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\d</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\)</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?=</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR>$<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
		<CONSTANT>PSEUDO</CONSTANT><OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>:<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC><ESC>\u00c0</ESC>-<ESC>\uFFFF</ESC><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\\</ESC><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\(</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>'"<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\(</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\)</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\)</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\(</ESC><ESC>\)</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\2</ESC><ESC>\)</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX>
	}<OPERATOR>,</OPERATOR>

	leftMatch<OPERATOR>:</OPERATOR> {}<OPERATOR>,</OPERATOR>

	attrMap<OPERATOR>:</OPERATOR> {
		<STRING>"class"</STRING><OPERATOR>:</OPERATOR> <STRING>"className"</STRING><OPERATOR>,</OPERATOR>
		<STRING>"for"</STRING><OPERATOR>:</OPERATOR> <STRING>"htmlFor"</STRING>
	}<OPERATOR>,</OPERATOR>

	attrHandle<OPERATOR>:</OPERATOR> {
		href<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( <STRING>"href"</STRING> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	relative<OPERATOR>:</OPERATOR> {
		<STRING>"+"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(checkSet<OPERATOR>,</OPERATOR> part){
			<KEYWORD>var</KEYWORD> isPartStr <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> part <OPERATOR>===</OPERATOR> <STRING>"string"</STRING><OPERATOR>,</OPERATOR>
				isTag <OPERATOR>=</OPERATOR> isPartStr <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><REGEX><DELIMITER>/</DELIMITER><ESC>\W</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( part )<OPERATOR>,</OPERATOR>
				isPartStrNotTag <OPERATOR>=</OPERATOR> isPartStr <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isTag<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( isTag ) {
				part <OPERATOR>=</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>checkSet</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( (elem <OPERATOR>=</OPERATOR> checkSet[i]) ) {
					<KEYWORD>while</KEYWORD> ( (elem <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO>) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC> ) {}

					checkSet[i] <OPERATOR>=</OPERATOR> isPartStrNotTag <OPERATOR>||</OPERATOR> elem <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> part <OPERATOR>?</OPERATOR>
						elem <OPERATOR>||</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>:</OPERATOR>
						elem <OPERATOR>===</OPERATOR> part<OPERATOR>;</OPERATOR>
				}
			}

			<KEYWORD>if</KEYWORD> ( isPartStrNotTag ) {
				<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( part<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		<STRING>"&gt;"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( checkSet<OPERATOR>,</OPERATOR> part ) {
			<KEYWORD>var</KEYWORD> elem<OPERATOR>,</OPERATOR>
				isPartStr <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> part <OPERATOR>===</OPERATOR> <STRING>"string"</STRING><OPERATOR>,</OPERATOR>
				i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
				l <OPERATOR>=</OPERATOR> <OBJ>checkSet</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( isPartStr <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><REGEX><DELIMITER>/</DELIMITER><ESC>\W</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( part ) ) {
				part <OPERATOR>=</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>

				<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					elem <OPERATOR>=</OPERATOR> checkSet[i]<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( elem ) {
						<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
						checkSet[i] <OPERATOR>=</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> part <OPERATOR>?</OPERATOR> parent <OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}

			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					elem <OPERATOR>=</OPERATOR> checkSet[i]<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( elem ) {
						checkSet[i] <OPERATOR>=</OPERATOR> isPartStr <OPERATOR>?</OPERATOR>
							<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>:</OPERATOR>
							<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>===</OPERATOR> part<OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>if</KEYWORD> ( isPartStr ) {
					<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( part<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>
				}
			}
		}<OPERATOR>,</OPERATOR>

		<STRING>""</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>(checkSet<OPERATOR>,</OPERATOR> part<OPERATOR>,</OPERATOR> isXML){
			<KEYWORD>var</KEYWORD> nodeCheck<OPERATOR>,</OPERATOR>
				doneName <OPERATOR>=</OPERATOR> done<OPERATOR>++,</OPERATOR>
				checkFn <OPERATOR>=</OPERATOR> dirCheck<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> part <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><REGEX><DELIMITER>/</DELIMITER><ESC>\W</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>(part) ) {
				part <OPERATOR>=</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>
				nodeCheck <OPERATOR>=</OPERATOR> part<OPERATOR>;</OPERATOR>
				checkFn <OPERATOR>=</OPERATOR> dirNodeCheck<OPERATOR>;</OPERATOR>
			}

			checkFn( <STRING>"parentNode"</STRING><OPERATOR>,</OPERATOR> part<OPERATOR>,</OPERATOR> doneName<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> nodeCheck<OPERATOR>,</OPERATOR> isXML )<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		<STRING>"~"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( checkSet<OPERATOR>,</OPERATOR> part<OPERATOR>,</OPERATOR> isXML ) {
			<KEYWORD>var</KEYWORD> nodeCheck<OPERATOR>,</OPERATOR>
				doneName <OPERATOR>=</OPERATOR> done<OPERATOR>++,</OPERATOR>
				checkFn <OPERATOR>=</OPERATOR> dirCheck<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> part <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><REGEX><DELIMITER>/</DELIMITER><ESC>\W</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( part ) ) {
				part <OPERATOR>=</OPERATOR> <OBJ>part</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>
				nodeCheck <OPERATOR>=</OPERATOR> part<OPERATOR>;</OPERATOR>
				checkFn <OPERATOR>=</OPERATOR> dirNodeCheck<OPERATOR>;</OPERATOR>
			}

			checkFn( <STRING>"previousSibling"</STRING><OPERATOR>,</OPERATOR> part<OPERATOR>,</OPERATOR> doneName<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> nodeCheck<OPERATOR>,</OPERATOR> isXML )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	find<OPERATOR>:</OPERATOR> {
		ID<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> isXML ) {
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isXML ) {
				<KEYWORD>var</KEYWORD> m <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>(match[<NUMERIC>1</NUMERIC>])<OPERATOR>;</OPERATOR>
				<COMMENT>// Check parentNode to catch when Blackberry 4.6 returns</COMMENT>
				<COMMENT>// nodes that are no longer in the document #6963</COMMENT>
				<KEYWORD>return</KEYWORD> m <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>m</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>?</OPERATOR> [m] <OPERATOR>:</OPERATOR> []<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		<CONSTANT>NAME</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> context ) {
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByName</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> ) {
				<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
					results <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByName</OO>( match[<NUMERIC>1</NUMERIC>] )<OPERATOR>;</OPERATOR>

				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					<KEYWORD>if</KEYWORD> ( results[i]<OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"name"</STRING>) <OPERATOR>===</OPERATOR> match[<NUMERIC>1</NUMERIC>] ) {
						<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( results[i] )<OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>return</KEYWORD> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> ret<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		TAG<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> context ) {
			<KEYWORD>return</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>( match[<NUMERIC>1</NUMERIC>] )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	preFilter<OPERATOR>:</OPERATOR> {
		<CONSTANT>CLASS</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> curLoop<OPERATOR>,</OPERATOR> inplace<OPERATOR>,</OPERATOR> result<OPERATOR>,</OPERATOR> not<OPERATOR>,</OPERATOR> isXML ) {
			match <OPERATOR>=</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\\</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>""</STRING>) <OPERATOR>+</OPERATOR> <STRING>" "</STRING><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( isXML ) {
				<KEYWORD>return</KEYWORD> match<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR> (elem <OPERATOR>=</OPERATOR> curLoop[i]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( elem ) {
					<KEYWORD>if</KEYWORD> ( not <OPERATOR>^</OPERATOR> (<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>&amp;&amp;</OPERATOR> (<STRING>" "</STRING> <OPERATOR>+</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>+</OPERATOR> <STRING>" "</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\t</ESC><ESC>\n</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>" "</STRING>)<OPERATOR>.</OPERATOR><OO>indexOf</OO>(match) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC>) ) {
						<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>inplace ) {
							<OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( elem )<OPERATOR>;</OPERATOR>
						}

					} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( inplace ) {
						curLoop[i] <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			}

			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		ID<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match ) {
			<KEYWORD>return</KEYWORD> match[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\\</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>""</STRING>)<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		TAG<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> curLoop ) {
			<KEYWORD>return</KEYWORD> match[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		<CONSTANT>CHILD</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match ) {
			<KEYWORD>if</KEYWORD> ( match[<NUMERIC>1</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"nth"</STRING> ) {
				<COMMENT>// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'</COMMENT>
				<KEYWORD>var</KEYWORD> test <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>-<REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\d</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>n<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\+</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR>-<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\d</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>exec</OO>(
					match[<NUMERIC>2</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"even"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <STRING>"2n"</STRING> <OPERATOR>||</OPERATOR> match[<NUMERIC>2</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"odd"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <STRING>"2n+1"</STRING> <OPERATOR>||</OPERATOR>
					<OPERATOR>!</OPERATOR><REGEX><DELIMITER>/</DELIMITER><ESC>\D</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( match[<NUMERIC>2</NUMERIC>] ) <OPERATOR>&amp;&amp;</OPERATOR> <STRING>"0n+"</STRING> <OPERATOR>+</OPERATOR> match[<NUMERIC>2</NUMERIC>] <OPERATOR>||</OPERATOR> match[<NUMERIC>2</NUMERIC>])<OPERATOR>;</OPERATOR>

				<COMMENT>// calculate the numbers (first)n+(last) including if they are negative</COMMENT>
				match[<NUMERIC>2</NUMERIC>] <OPERATOR>=</OPERATOR> (test[<NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> (test[<NUMERIC>2</NUMERIC>] <OPERATOR>||</OPERATOR> <NUMERIC>1</NUMERIC>)) <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				match[<NUMERIC>3</NUMERIC>] <OPERATOR>=</OPERATOR> test[<NUMERIC>3</NUMERIC>] <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// <COMMENT_NOTE>TODO:</COMMENT_NOTE> Move to normal caching system</COMMENT>
			match[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> done<OPERATOR>++;</OPERATOR>

			<KEYWORD>return</KEYWORD> match<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		<CONSTANT>ATTR</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> curLoop<OPERATOR>,</OPERATOR> inplace<OPERATOR>,</OPERATOR> result<OPERATOR>,</OPERATOR> not<OPERATOR>,</OPERATOR> isXML ) {
			<KEYWORD>var</KEYWORD> name <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\\</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>""</STRING>)<OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>isXML <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>attrMap</OO>[name] ) {
				match[<NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>attrMap</OO>[name]<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( match[<NUMERIC>2</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"~="</STRING> ) {
				match[<NUMERIC>4</NUMERIC>] <OPERATOR>=</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> match[<NUMERIC>4</NUMERIC>] <OPERATOR>+</OPERATOR> <STRING>" "</STRING><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> match<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		<CONSTANT>PSEUDO</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> curLoop<OPERATOR>,</OPERATOR> inplace<OPERATOR>,</OPERATOR> result<OPERATOR>,</OPERATOR> not ) {
			<KEYWORD>if</KEYWORD> ( match[<NUMERIC>1</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"not"</STRING> ) {
				<COMMENT>// If we're dealing with a complex expression, or a simple one</COMMENT>
				<KEYWORD>if</KEYWORD> ( ( <OBJ>chunker</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>(match[<NUMERIC>3</NUMERIC>]) <OPERATOR>||</OPERATOR> <STRING>""</STRING> )<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>||</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<ESC>\w</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>(match[<NUMERIC>3</NUMERIC>]) ) {
					match[<NUMERIC>3</NUMERIC>] <OPERATOR>=</OPERATOR> Sizzle(match[<NUMERIC>3</NUMERIC>]<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> curLoop)<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(match[<NUMERIC>3</NUMERIC>]<OPERATOR>,</OPERATOR> curLoop<OPERATOR>,</OPERATOR> inplace<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> <OPERATOR>^</OPERATOR> not)<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>inplace ) {
						<OBJ>result</OBJ><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( result<OPERATOR>,</OPERATOR> ret )<OPERATOR>;</OPERATOR>
					}

					<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
				}

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>POS</OO><OPERATOR>.</OPERATOR><OO>test</OO>( match[<NUMERIC>0</NUMERIC>] ) <OPERATOR>||</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>CHILD</OO><OPERATOR>.</OPERATOR><OO>test</OO>( match[<NUMERIC>0</NUMERIC>] ) ) {
				<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			}
			
			<KEYWORD>return</KEYWORD> match<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		POS<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( match ) {
			<OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>unshift</OO>( <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> match<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	
	filters<OPERATOR>:</OPERATOR> {
		enabled<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>!==</OPERATOR> <STRING>"hidden"</STRING><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		disabled<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		checked<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO> <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		
		selected<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<COMMENT>// Accessing this property makes selected-by-default</COMMENT>
			<COMMENT>// options in Safari work properly</COMMENT>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>selectedIndex</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>selected</OO> <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		parent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		empty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		has<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR>Sizzle( match[<NUMERIC>3</NUMERIC>]<OPERATOR>,</OPERATOR> elem )<OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		header<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> (<REGEX><DELIMITER>/</DELIMITER>h<ESC>\d</ESC><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX>)<OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> )<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		text<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"text"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		radio<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"radio"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		checkbox<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"checkbox"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		file<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"file"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		password<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"password"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		submit<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"submit"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		image<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"image"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		reset<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"reset"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		button<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <STRING>"button"</STRING> <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> <STRING>"button"</STRING><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		input<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> (<REGEX><DELIMITER>/</DELIMITER>input<REGEX_OPERATOR>|</REGEX_OPERATOR>select<REGEX_OPERATOR>|</REGEX_OPERATOR>textarea<REGEX_OPERATOR>|</REGEX_OPERATOR>button<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX>)<OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	setFilters<OPERATOR>:</OPERATOR> {
		first<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
			<KEYWORD>return</KEYWORD> i <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		last<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> array ) {
			<KEYWORD>return</KEYWORD> i <OPERATOR>===</OPERATOR> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		even<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
			<KEYWORD>return</KEYWORD> i <OPERATOR>%</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		odd<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
			<KEYWORD>return</KEYWORD> i <OPERATOR>%</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		lt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> i <OPERATOR>&lt;</OPERATOR> match[<NUMERIC>3</NUMERIC>] <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		gt<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> i <OPERATOR>&gt;</OPERATOR> match[<NUMERIC>3</NUMERIC>] <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		nth<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> match[<NUMERIC>3</NUMERIC>] <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>===</OPERATOR> i<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		eq<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> match[<NUMERIC>3</NUMERIC>] <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>===</OPERATOR> i<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	filter<OPERATOR>:</OPERATOR> {
		<CONSTANT>PSEUDO</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> array ) {
			<KEYWORD>var</KEYWORD> name <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>,</OPERATOR>
				filter <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>filters</OO>[ name ]<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( filter ) {
				<KEYWORD>return</KEYWORD> filter( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> array )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"contains"</STRING> ) {
				<KEYWORD>return</KEYWORD> (<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>textContent</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>innerText</OO> <OPERATOR>||</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>getText</OO>([ elem ]) <OPERATOR>||</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>indexOf</OO>(match[<NUMERIC>3</NUMERIC>]) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( name <OPERATOR>===</OPERATOR> <STRING>"not"</STRING> ) {
				<KEYWORD>var</KEYWORD> not <OPERATOR>=</OPERATOR> match[<NUMERIC>3</NUMERIC>]<OPERATOR>;</OPERATOR>

				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> j <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>not</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> j <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> j<OPERATOR>++</OPERATOR> ) {
					<KEYWORD>if</KEYWORD> ( not[j] <OPERATOR>===</OPERATOR> elem ) {
						<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>error</OO>( <STRING>"Syntax error, unrecognized expression: "</STRING> <OPERATOR>+</OPERATOR> name )<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		<CONSTANT>CHILD</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>,</OPERATOR>
				node <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>

			<KEYWORD>switch</KEYWORD> ( type ) {
				<KEYWORD>case</KEYWORD> <STRING>"only"</STRING><OPERATOR>:</OPERATOR>
				<KEYWORD>case</KEYWORD> <STRING>"first"</STRING><OPERATOR>:</OPERATOR>
					<KEYWORD>while</KEYWORD> ( (node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>previousSibling</OO>) )	 {
						<KEYWORD>if</KEYWORD> ( <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) { 
							<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR> 
						}
					}

					<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"first"</STRING> ) { 
						<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR> 
					}

					node <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>

				<KEYWORD>case</KEYWORD> <STRING>"last"</STRING><OPERATOR>:</OPERATOR>
					<KEYWORD>while</KEYWORD> ( (node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO>) )	 {
						<KEYWORD>if</KEYWORD> ( <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) { 
							<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR> 
						}
					}

					<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

				<KEYWORD>case</KEYWORD> <STRING>"nth"</STRING><OPERATOR>:</OPERATOR>
					<KEYWORD>var</KEYWORD> first <OPERATOR>=</OPERATOR> match[<NUMERIC>2</NUMERIC>]<OPERATOR>,</OPERATOR>
						last <OPERATOR>=</OPERATOR> match[<NUMERIC>3</NUMERIC>]<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( first <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> last <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
						<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
					}
					
					<KEYWORD>var</KEYWORD> doneName <OPERATOR>=</OPERATOR> match[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR>
						parent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
	
					<KEYWORD>if</KEYWORD> ( parent <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>sizcache</OO> <OPERATOR>!==</OPERATOR> doneName <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeIndex</OO>) ) {
						<KEYWORD>var</KEYWORD> count <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
						
						<KEYWORD>for</KEYWORD> ( node <OPERATOR>=</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR> node<OPERATOR>;</OPERATOR> node <OPERATOR>=</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO> ) {
							<KEYWORD>if</KEYWORD> ( <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
								<OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeIndex</OO> <OPERATOR>=</OPERATOR> <OPERATOR>++</OPERATOR>count<OPERATOR>;</OPERATOR>
							}
						} 

						<OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>sizcache</OO> <OPERATOR>=</OPERATOR> doneName<OPERATOR>;</OPERATOR>
					}
					
					<KEYWORD>var</KEYWORD> diff <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeIndex</OO> <OPERATOR>-</OPERATOR> last<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( first <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
						<KEYWORD>return</KEYWORD> diff <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> {
						<KEYWORD>return</KEYWORD> ( diff <OPERATOR>%</OPERATOR> first <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> diff <OPERATOR>/</OPERATOR> first <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> )<OPERATOR>;</OPERATOR>
					}
			}
		}<OPERATOR>,</OPERATOR>

		ID<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"id"</STRING>) <OPERATOR>===</OPERATOR> match<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		TAG<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> (match <OPERATOR>===</OPERATOR> <STRING>"*"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC>) <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> match<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		
		<CONSTANT>CLASS</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>return</KEYWORD> (<STRING>" "</STRING> <OPERATOR>+</OPERATOR> (<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"class"</STRING>)) <OPERATOR>+</OPERATOR> <STRING>" "</STRING>)
				<OPERATOR>.</OPERATOR><OO>indexOf</OO>( match ) <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		<CONSTANT>ATTR</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>var</KEYWORD> name <OPERATOR>=</OPERATOR> match[<NUMERIC>1</NUMERIC>]<OPERATOR>,</OPERATOR>
				result <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>attrHandle</OO>[ name ] <OPERATOR>?</OPERATOR>
					<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>attrHandle</OO>[ name ]( elem ) <OPERATOR>:</OPERATOR>
					elem[ name ] <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>
						elem[ name ] <OPERATOR>:</OPERATOR>
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( name )<OPERATOR>,</OPERATOR>
				value <OPERATOR>=</OPERATOR> result <OPERATOR>+</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR>
				type <OPERATOR>=</OPERATOR> match[<NUMERIC>2</NUMERIC>]<OPERATOR>,</OPERATOR>
				check <OPERATOR>=</OPERATOR> match[<NUMERIC>4</NUMERIC>]<OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> result <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"!="</STRING> <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"="</STRING> <OPERATOR>?</OPERATOR>
				value <OPERATOR>===</OPERATOR> check <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"*="</STRING> <OPERATOR>?</OPERATOR>
				<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(check) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"~="</STRING> <OPERATOR>?</OPERATOR>
				(<STRING>" "</STRING> <OPERATOR>+</OPERATOR> value <OPERATOR>+</OPERATOR> <STRING>" "</STRING>)<OPERATOR>.</OPERATOR><OO>indexOf</OO>(check) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR>
				<OPERATOR>!</OPERATOR>check <OPERATOR>?</OPERATOR>
				value <OPERATOR>&amp;&amp;</OPERATOR> result <OPERATOR>!==</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"!="</STRING> <OPERATOR>?</OPERATOR>
				value <OPERATOR>!==</OPERATOR> check <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"^="</STRING> <OPERATOR>?</OPERATOR>
				<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(check) <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"$="</STRING> <OPERATOR>?</OPERATOR>
				<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(<OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <OBJ>check</OBJ><OPERATOR>.</OPERATOR><OO>length</OO>) <OPERATOR>===</OPERATOR> check <OPERATOR>:</OPERATOR>
				type <OPERATOR>===</OPERATOR> <STRING>"|="</STRING> <OPERATOR>?</OPERATOR>
				value <OPERATOR>===</OPERATOR> check <OPERATOR>||</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>substr</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>check</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>) <OPERATOR>===</OPERATOR> check <OPERATOR>+</OPERATOR> <STRING>"-"</STRING> <OPERATOR>:</OPERATOR>
				<KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		POS<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> array ) {
			<KEYWORD>var</KEYWORD> name <OPERATOR>=</OPERATOR> match[<NUMERIC>2</NUMERIC>]<OPERATOR>,</OPERATOR>
				filter <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>setFilters</OO>[ name ]<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( filter ) {
				<KEYWORD>return</KEYWORD> filter( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> match<OPERATOR>,</OPERATOR> array )<OPERATOR>;</OPERATOR>
			}
		}
	}
}<OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> origPOS <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>POS</OO><OPERATOR>,</OPERATOR>
	fescape <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(all<OPERATOR>,</OPERATOR> num){
		<KEYWORD>return</KEYWORD> <STRING>"<ESC>\\</ESC>"</STRING> <OPERATOR>+</OPERATOR> (num <OPERATOR>-</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> type <KEYWORD>in</KEYWORD> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO> ) {
	<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>[ type ] <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>[ type ]<OPERATOR>.</OPERATOR><OO>source</OO> <OPERATOR>+</OPERATOR> (<REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?!</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\[</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?!</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\(</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\)</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>source</OO>) )<OPERATOR>;</OPERATOR>
	<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>leftMatch</OO>[ type ] <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>RegExp</TYPE>( <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\r</ESC><REGEX_OPERATOR>|</REGEX_OPERATOR><ESC>\n</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>source</OO> <OPERATOR>+</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO>[ type ]<OPERATOR>.</OPERATOR><OO>source</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\\</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> fescape) )<OPERATOR>;</OPERATOR>
}

<KEYWORD>var</KEYWORD> makeArray <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( array<OPERATOR>,</OPERATOR> results ) {
	array <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>slice</OO><OPERATOR>.</OPERATOR><OO>call</OO>( array<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC> )<OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( results ) {
		<OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( results<OPERATOR>,</OPERATOR> array )<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
	}
	
	<KEYWORD>return</KEYWORD> array<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<COMMENT>// Perform a simple check to determine if the browser is capable of</COMMENT>
<COMMENT>// converting a NodeList to an array using builtin methods.</COMMENT>
<COMMENT>// Also verifies that the returned array holds DOM nodes</COMMENT>
<COMMENT>// (which is not the case in the Blackberry browser)</COMMENT>
<KEYWORD>try</KEYWORD> {
	<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>slice</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC> )[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>nodeType</OO><OPERATOR>;</OPERATOR>

<COMMENT>// Provide a fallback method if it does not work</COMMENT>
} <KEYWORD>catch</KEYWORD>( e ) {
	makeArray <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( array<OPERATOR>,</OPERATOR> results ) {
		<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			ret <OPERATOR>=</OPERATOR> results <OPERATOR>||</OPERATOR> []<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>toString</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(array) <OPERATOR>===</OPERATOR> <STRING>"[object Array]"</STRING> ) {
			<OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( ret<OPERATOR>,</OPERATOR> array )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> ) {
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> l <OPERATOR>=</OPERATOR> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( array[i] )<OPERATOR>;</OPERATOR>
				}

			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> array[i]<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( array[i] )<OPERATOR>;</OPERATOR>
				}
			}
		}

		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<KEYWORD>var</KEYWORD> sortOrder<OPERATOR>,</OPERATOR> siblingCheck<OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO> ) {
	sortOrder <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( a<OPERATOR>,</OPERATOR> b ) {
		<KEYWORD>if</KEYWORD> ( a <OPERATOR>===</OPERATOR> b ) {
			hasDuplicate <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO> ) {
			<KEYWORD>return</KEYWORD> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO> <OPERATOR>?</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO>(b) <OPERATOR>&amp;</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>?</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

} <KEYWORD>else</KEYWORD> {
	sortOrder <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( a<OPERATOR>,</OPERATOR> b ) {
		<KEYWORD>var</KEYWORD> al<OPERATOR>,</OPERATOR> bl<OPERATOR>,</OPERATOR>
			ap <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
			bp <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
			aup <OPERATOR>=</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>,</OPERATOR>
			bup <OPERATOR>=</OPERATOR> <OBJ>b</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>,</OPERATOR>
			cur <OPERATOR>=</OPERATOR> aup<OPERATOR>;</OPERATOR>

		<COMMENT>// The nodes are identical, we can exit early</COMMENT>
		<KEYWORD>if</KEYWORD> ( a <OPERATOR>===</OPERATOR> b ) {
			hasDuplicate <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<COMMENT>// If the nodes are siblings (or identical) we can do a quick check</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( aup <OPERATOR>===</OPERATOR> bup ) {
			<KEYWORD>return</KEYWORD> siblingCheck( a<OPERATOR>,</OPERATOR> b )<OPERATOR>;</OPERATOR>

		<COMMENT>// If no parents were found then the nodes are disconnected</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>aup ) {
			<KEYWORD>return</KEYWORD> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>bup ) {
			<KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Otherwise they're somewhere else in the tree so we need</COMMENT>
		<COMMENT>// to build up a full list of the parentNodes for comparison</COMMENT>
		<KEYWORD>while</KEYWORD> ( cur ) {
			<OBJ>ap</OBJ><OPERATOR>.</OPERATOR><OO>unshift</OO>( cur )<OPERATOR>;</OPERATOR>
			cur <OPERATOR>=</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		}

		cur <OPERATOR>=</OPERATOR> bup<OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( cur ) {
			<OBJ>bp</OBJ><OPERATOR>.</OPERATOR><OO>unshift</OO>( cur )<OPERATOR>;</OPERATOR>
			cur <OPERATOR>=</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		}

		al <OPERATOR>=</OPERATOR> <OBJ>ap</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
		bl <OPERATOR>=</OPERATOR> <OBJ>bp</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>

		<COMMENT>// Start walking down the tree looking for a discrepancy</COMMENT>
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> al <OPERATOR>&amp;&amp;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> bl<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( ap[i] <OPERATOR>!==</OPERATOR> bp[i] ) {
				<KEYWORD>return</KEYWORD> siblingCheck( ap[i]<OPERATOR>,</OPERATOR> bp[i] )<OPERATOR>;</OPERATOR>
			}
		}

		<COMMENT>// We ended someplace up the tree so do a sibling check</COMMENT>
		<KEYWORD>return</KEYWORD> i <OPERATOR>===</OPERATOR> al <OPERATOR>?</OPERATOR>
			siblingCheck( a<OPERATOR>,</OPERATOR> bp[i]<OPERATOR>,</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> ) <OPERATOR>:</OPERATOR>
			siblingCheck( ap[i]<OPERATOR>,</OPERATOR> b<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

	siblingCheck <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( a<OPERATOR>,</OPERATOR> b<OPERATOR>,</OPERATOR> ret ) {
		<KEYWORD>if</KEYWORD> ( a <OPERATOR>===</OPERATOR> b ) {
			<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> cur <OPERATOR>=</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( cur ) {
			<KEYWORD>if</KEYWORD> ( cur <OPERATOR>===</OPERATOR> b ) {
				<KEYWORD>return</KEYWORD> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			}

			cur <OPERATOR>=</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<COMMENT>// Utility function for retreiving the text value of an array of DOM nodes</COMMENT>
<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>getText</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elems ) {
	<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> elems[i]<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		elem <OPERATOR>=</OPERATOR> elems[i]<OPERATOR>;</OPERATOR>

		<COMMENT>// Get the text from text nodes and CDATA nodes</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>4</NUMERIC> ) {
			ret <OPERATOR>+=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeValue</OO><OPERATOR>;</OPERATOR>

		<COMMENT>// Traverse everything else, except comment nodes</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>8</NUMERIC> ) {
			ret <OPERATOR>+=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>getText</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO> )<OPERATOR>;</OPERATOR>
		}
	}

	<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<COMMENT>// Check to see if the browser returns elements by name when</COMMENT>
<COMMENT>// querying by getElementById (and provide a workaround)</COMMENT>
(<KEYWORD>function</KEYWORD>(){
	<COMMENT>// We're going to inject a fake input element with a specified name</COMMENT>
	<KEYWORD>var</KEYWORD> form <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>,</OPERATOR>
		id <OPERATOR>=</OPERATOR> <STRING>"script"</STRING> <OPERATOR>+</OPERATOR> (<KEYWORD>new</KEYWORD> <TYPE>Date</TYPE>())<OPERATOR>.</OPERATOR><OO>getTime</OO>()<OPERATOR>,</OPERATOR>
		root <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>;</OPERATOR>

	<OBJ>form</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;a name='"</STRING> <OPERATOR>+</OPERATOR> id <OPERATOR>+</OPERATOR> <STRING>"'/&gt;"</STRING><OPERATOR>;</OPERATOR>

	<COMMENT>// Inject it into the root element, check its status, and remove it quickly</COMMENT>
	<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( form<OPERATOR>,</OPERATOR> <OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>

	<COMMENT>// The workaround has to do additional checks after a getElementById</COMMENT>
	<COMMENT>// Which slows things down for other browsers (hence the branching)</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>( id ) ) {
		<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>.</OPERATOR><OO>ID</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> isXML ) {
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isXML ) {
				<KEYWORD>var</KEYWORD> m <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementById</OO>(match[<NUMERIC>1</NUMERIC>])<OPERATOR>;</OPERATOR>

				<KEYWORD>return</KEYWORD> m <OPERATOR>?</OPERATOR>
					<OBJ>m</OBJ><OPERATOR>.</OPERATOR><OO>id</OO> <OPERATOR>===</OPERATOR> match[<NUMERIC>1</NUMERIC>] <OPERATOR>||</OPERATOR> <KEYWORD>typeof</KEYWORD> <OBJ>m</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>m</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(<STRING>"id"</STRING>)<OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>===</OPERATOR> match[<NUMERIC>1</NUMERIC>] <OPERATOR>?</OPERATOR>
						[m] <OPERATOR>:</OPERATOR>
						<TYPE>undefined</TYPE> <OPERATOR>:</OPERATOR>
					[]<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>;</OPERATOR>

		<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO><OPERATOR>.</OPERATOR><OO>ID</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> match ) {
			<KEYWORD>var</KEYWORD> node <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttributeNode</OO>(<STRING>"id"</STRING>)<OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> node <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>nodeValue</OO> <OPERATOR>===</OPERATOR> match<OPERATOR>;</OPERATOR>
		}<OPERATOR>;</OPERATOR>
	}

	<OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( form )<OPERATOR>;</OPERATOR>

	<COMMENT>// release memory in IE</COMMENT>
	root <OPERATOR>=</OPERATOR> form <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
})()<OPERATOR>;</OPERATOR>

(<KEYWORD>function</KEYWORD>(){
	<COMMENT>// Check to see if the browser returns only elements</COMMENT>
	<COMMENT>// when doing getElementsByTagName("*")</COMMENT>

	<COMMENT>// Create a fake element</COMMENT>
	<KEYWORD>var</KEYWORD> div <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>
	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createComment</OO>(<STRING>""</STRING>) )<OPERATOR>;</OPERATOR>

	<COMMENT>// Make sure no comments are found</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"*"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
		<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>.</OPERATOR><OO>TAG</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> context ) {
			<KEYWORD>var</KEYWORD> results <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>( match[<NUMERIC>1</NUMERIC>] )<OPERATOR>;</OPERATOR>

			<COMMENT>// Filter out possible comments</COMMENT>
			<KEYWORD>if</KEYWORD> ( match[<NUMERIC>1</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"*"</STRING> ) {
				<KEYWORD>var</KEYWORD> tmp <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>

				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> results[i]<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					<KEYWORD>if</KEYWORD> ( results[i]<OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
						<OBJ>tmp</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( results[i] )<OPERATOR>;</OPERATOR>
					}
				}

				results <OPERATOR>=</OPERATOR> tmp<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> results<OPERATOR>;</OPERATOR>
		}<OPERATOR>;</OPERATOR>
	}

	<COMMENT>// Check to see if an attribute returns normalized href attributes</COMMENT>
	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;a href='#'&gt;&lt;/a&gt;"</STRING><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>getAttribute</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR>
			<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>getAttribute</OO>(<STRING>"href"</STRING>) <OPERATOR>!==</OPERATOR> <STRING>"#"</STRING> ) {

		<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>attrHandle</OO><OPERATOR>.</OPERATOR><OO>href</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( <STRING>"href"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC> )<OPERATOR>;</OPERATOR>
		}<OPERATOR>;</OPERATOR>
	}

	<COMMENT>// release memory in IE</COMMENT>
	div <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
})()<OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO> ) {
	(<KEYWORD>function</KEYWORD>(){
		<KEYWORD>var</KEYWORD> oldSizzle <OPERATOR>=</OPERATOR> Sizzle<OPERATOR>,</OPERATOR>
			div <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>,</OPERATOR>
			id <OPERATOR>=</OPERATOR> <STRING>"__sizzle__"</STRING><OPERATOR>;</OPERATOR>

		<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;p class='TEST'&gt;&lt;/p&gt;"</STRING><OPERATOR>;</OPERATOR>

		<COMMENT>// Safari can't handle uppercase or unicode characters when</COMMENT>
		<COMMENT>// in quirks mode.</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(<STRING>".TEST"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}
	
		Sizzle <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( query<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> extra<OPERATOR>,</OPERATOR> seed ) {
			context <OPERATOR>=</OPERATOR> context <OPERATOR>||</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>

			<COMMENT>// Make sure that attribute selectors are quoted</COMMENT>
			query <OPERATOR>=</OPERATOR> <OBJ>query</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\=</ESC><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^'"<ESC>\]</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>"='$1']"</STRING>)<OPERATOR>;</OPERATOR>

			<COMMENT>// Only use querySelectorAll on non-XML documents</COMMENT>
			<COMMENT>// (ID selectors don't work in non-HTML documents)</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>seed <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO>(context) ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>9</NUMERIC> ) {
					<KEYWORD>try</KEYWORD> {
						<KEYWORD>return</KEYWORD> makeArray( <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>(query)<OPERATOR>,</OPERATOR> extra )<OPERATOR>;</OPERATOR>
					} <KEYWORD>catch</KEYWORD>(qsaError) {}

				<COMMENT>// qSA works strangely on Element-rooted queries</COMMENT>
				<COMMENT>// We can work around this by specifying an extra ID on the root</COMMENT>
				<COMMENT>// and working up from there (Thanks to Andrew Dupont for the technique)</COMMENT>
				<COMMENT>// IE 8 doesn't work on object elements</COMMENT>
				} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>!==</OPERATOR> <STRING>"object"</STRING> ) {
					<KEYWORD>var</KEYWORD> old <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getAttribute</OO>( <STRING>"id"</STRING> )<OPERATOR>,</OPERATOR>
						nid <OPERATOR>=</OPERATOR> old <OPERATOR>||</OPERATOR> id<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>old ) {
						<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>setAttribute</OO>( <STRING>"id"</STRING><OPERATOR>,</OPERATOR> nid )<OPERATOR>;</OPERATOR>
					}

					<KEYWORD>try</KEYWORD> {
						<KEYWORD>return</KEYWORD> makeArray( <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>querySelectorAll</OO>( <STRING>"#"</STRING> <OPERATOR>+</OPERATOR> nid <OPERATOR>+</OPERATOR> <STRING>" "</STRING> <OPERATOR>+</OPERATOR> query )<OPERATOR>,</OPERATOR> extra )<OPERATOR>;</OPERATOR>

					} <KEYWORD>catch</KEYWORD>(pseudoError) {
					} finally {
						<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>old ) {
							<OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>( <STRING>"id"</STRING> )<OPERATOR>;</OPERATOR>
						}
					}
				}
			}
		
			<KEYWORD>return</KEYWORD> oldSizzle(query<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> extra<OPERATOR>,</OPERATOR> seed)<OPERATOR>;</OPERATOR>
		}<OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> prop <KEYWORD>in</KEYWORD> oldSizzle ) {
			Sizzle[ prop ] <OPERATOR>=</OPERATOR> oldSizzle[ prop ]<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// release memory in IE</COMMENT>
		div <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	})()<OPERATOR>;</OPERATOR>
}

(<KEYWORD>function</KEYWORD>(){
	<KEYWORD>var</KEYWORD> html <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR>
		matches <OPERATOR>=</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>matchesSelector</OO> <OPERATOR>||</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>mozMatchesSelector</OO> <OPERATOR>||</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>webkitMatchesSelector</OO> <OPERATOR>||</OPERATOR> <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>msMatchesSelector</OO><OPERATOR>,</OPERATOR>
		pseudoWorks <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

	<KEYWORD>try</KEYWORD> {
		<COMMENT>// This should fail with an exception</COMMENT>
		<COMMENT>// Gecko does not error, returns false instead</COMMENT>
		<OBJ>matches</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR> <STRING>"[test!='']:sizzle"</STRING> )<OPERATOR>;</OPERATOR>
	
	} <KEYWORD>catch</KEYWORD>( pseudoError ) {
		pseudoWorks <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<KEYWORD>if</KEYWORD> ( matches ) {
		<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>matchesSelector</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( node<OPERATOR>,</OPERATOR> expr ) {
			<COMMENT>// Make sure that attribute selectors are quoted</COMMENT>
			expr <OPERATOR>=</OPERATOR> <OBJ>expr</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(<REGEX><DELIMITER>/</DELIMITER><ESC>\=</ESC><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^'"<ESC>\]</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\]</ESC><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR> <STRING>"='$1']"</STRING>)<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO>( node ) ) {
				<KEYWORD>try</KEYWORD> { 
					<KEYWORD>if</KEYWORD> ( pseudoWorks <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>PSEUDO</OO><OPERATOR>.</OPERATOR><OO>test</OO>( expr ) <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><REGEX><DELIMITER>/</DELIMITER>!=<DELIMITER>/</DELIMITER></REGEX><OPERATOR>.</OPERATOR><OO>test</OO>( expr ) ) {
						<KEYWORD>return</KEYWORD> <OBJ>matches</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( node<OPERATOR>,</OPERATOR> expr )<OPERATOR>;</OPERATOR>
					}
				} <KEYWORD>catch</KEYWORD>(e) {}
			}

			<KEYWORD>return</KEYWORD> Sizzle(expr<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> [node])<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}<OPERATOR>;</OPERATOR>
	}
})()<OPERATOR>;</OPERATOR>

(<KEYWORD>function</KEYWORD>(){
	<KEYWORD>var</KEYWORD> div <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>

	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> <STRING>"&lt;div class='test e'&gt;&lt;/div&gt;&lt;div class='test'&gt;&lt;/div&gt;"</STRING><OPERATOR>;</OPERATOR>

	<COMMENT>// Opera can't find a second classname (in 9.6)</COMMENT>
	<COMMENT>// Also, make sure that getElementsByClassName actually exists</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO> <OPERATOR>||</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(<STRING>"e"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
		<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<COMMENT>// Safari caches class attributes, doesn't catch changes (in 3.2)</COMMENT>
	<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>lastChild</OO><OPERATOR>.</OPERATOR><OO>className</OO> <OPERATOR>=</OPERATOR> <STRING>"e"</STRING><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(<STRING>"e"</STRING>)<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
		<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
	}
	
	<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>order</OO><OPERATOR>.</OPERATOR><OO>splice</OO>(<NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"CLASS"</STRING>)<OPERATOR>;</OPERATOR>
	<OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>.</OPERATOR><OO>CLASS</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( match<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> isXML ) {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO> <OPERATOR>!==</OPERATOR> <STRING>"undefined"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isXML ) {
			<KEYWORD>return</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByClassName</OO>(match[<NUMERIC>1</NUMERIC>])<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>

	<COMMENT>// release memory in IE</COMMENT>
	div <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
})()<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> dirNodeCheck( dir<OPERATOR>,</OPERATOR> cur<OPERATOR>,</OPERATOR> doneName<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> nodeCheck<OPERATOR>,</OPERATOR> isXML ) {
	<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>checkSet</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> checkSet[i]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( elem ) {
			<KEYWORD>var</KEYWORD> match <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

			elem <OPERATOR>=</OPERATOR> elem[dir]<OPERATOR>;</OPERATOR>

			<KEYWORD>while</KEYWORD> ( elem ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizcache</OO> <OPERATOR>===</OPERATOR> doneName ) {
					match <OPERATOR>=</OPERATOR> checkSet[<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizset</OO>]<OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>isXML ){
					<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizcache</OO> <OPERATOR>=</OPERATOR> doneName<OPERATOR>;</OPERATOR>
					<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizset</OO> <OPERATOR>=</OPERATOR> i<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> cur ) {
					match <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				}

				elem <OPERATOR>=</OPERATOR> elem[dir]<OPERATOR>;</OPERATOR>
			}

			checkSet[i] <OPERATOR>=</OPERATOR> match<OPERATOR>;</OPERATOR>
		}
	}
}

<KEYWORD>function</KEYWORD> dirCheck( dir<OPERATOR>,</OPERATOR> cur<OPERATOR>,</OPERATOR> doneName<OPERATOR>,</OPERATOR> checkSet<OPERATOR>,</OPERATOR> nodeCheck<OPERATOR>,</OPERATOR> isXML ) {
	<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>checkSet</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> checkSet[i]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( elem ) {
			<KEYWORD>var</KEYWORD> match <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
			
			elem <OPERATOR>=</OPERATOR> elem[dir]<OPERATOR>;</OPERATOR>

			<KEYWORD>while</KEYWORD> ( elem ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizcache</OO> <OPERATOR>===</OPERATOR> doneName ) {
					match <OPERATOR>=</OPERATOR> checkSet[<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizset</OO>]<OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>isXML ) {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizcache</OO> <OPERATOR>=</OPERATOR> doneName<OPERATOR>;</OPERATOR>
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>sizset</OO> <OPERATOR>=</OPERATOR> i<OPERATOR>;</OPERATOR>
					}

					<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> cur <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> ) {
						<KEYWORD>if</KEYWORD> ( elem <OPERATOR>===</OPERATOR> cur ) {
							match <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						}

					} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( cur<OPERATOR>,</OPERATOR> [elem] )<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
						match <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}

				elem <OPERATOR>=</OPERATOR> elem[dir]<OPERATOR>;</OPERATOR>
			}

			checkSet[i] <OPERATOR>=</OPERATOR> match<OPERATOR>;</OPERATOR>
		}
	}
}

<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>contains</OO> ) {
	<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( a<OPERATOR>,</OPERATOR> b ) {
		<KEYWORD>return</KEYWORD> a <OPERATOR>!==</OPERATOR> b <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>?</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>(b) <OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO> ) {
	<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( a<OPERATOR>,</OPERATOR> b ) {
		<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR>(<OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>compareDocumentPosition</OO>(b) <OPERATOR>&amp;</OPERATOR> <NUMERIC>16</NUMERIC>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

} <KEYWORD>else</KEYWORD> {
	<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
	<COMMENT>// documentElement is verified for cases where it doesn't yet exist</COMMENT>
	<COMMENT>// (such as loading iframes in IE - #4833) </COMMENT>
	<KEYWORD>var</KEYWORD> documentElement <OPERATOR>=</OPERATOR> (elem <OPERATOR>?</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> elem <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> documentElement <OPERATOR>?</OPERATOR> <OBJ>documentElement</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>!==</OPERATOR> <STRING>"HTML"</STRING> <OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> posProcess <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> context ) {
	<KEYWORD>var</KEYWORD> match<OPERATOR>,</OPERATOR>
		tmpSet <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
		later <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR>
		root <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>?</OPERATOR> [context] <OPERATOR>:</OPERATOR> context<OPERATOR>;</OPERATOR>

	<COMMENT>// Position selectors must be done after the filter</COMMENT>
	<COMMENT>// And so must :not(positional) so we move all PSEUDOs to the end</COMMENT>
	<KEYWORD>while</KEYWORD> ( (match <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>PSEUDO</OO><OPERATOR>.</OPERATOR><OO>exec</OO>( selector )) ) {
		later <OPERATOR>+=</OPERATOR> match[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
		selector <OPERATOR>=</OPERATOR> <OBJ>selector</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>PSEUDO</OO><OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
	}

	selector <OPERATOR>=</OPERATOR> <OBJ>Expr</OBJ><OPERATOR>.</OPERATOR><OO>relative</OO>[selector] <OPERATOR>?</OPERATOR> selector <OPERATOR>+</OPERATOR> <STRING>"*"</STRING> <OPERATOR>:</OPERATOR> selector<OPERATOR>;</OPERATOR>

	<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>root</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
		Sizzle( selector<OPERATOR>,</OPERATOR> root[i]<OPERATOR>,</OPERATOR> tmpSet )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( later<OPERATOR>,</OPERATOR> tmpSet )<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<COMMENT>// EXPOSE</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>find</OO> <OPERATOR>=</OPERATOR> Sizzle<OPERATOR>;</OPERATOR>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO> <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>selectors</OO><OPERATOR>;</OPERATOR>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO>[<STRING>":"</STRING>] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>;</OPERATOR>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>unique</OO> <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>uniqueSort</OO><OPERATOR>;</OPERATOR>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>text</OO> <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>getText</OO><OPERATOR>;</OPERATOR>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isXMLDoc</OO> <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>isXML</OO><OPERATOR>;</OPERATOR>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO> <OPERATOR>=</OPERATOR> <OBJ>Sizzle</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO><OPERATOR>;</OPERATOR>


})()<OPERATOR>;</OPERATOR>


<KEYWORD>var</KEYWORD> runtil <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>Until$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rparentsprev <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>parents<REGEX_OPERATOR>|</REGEX_OPERATOR>prevUntil<REGEX_OPERATOR>|</REGEX_OPERATOR>prevAll<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	<COMMENT>// Note: This RegExp should be improved, or likely pulled from Sizzle</COMMENT>
	rmultiselector <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>,<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	isSimple <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^:#<ESC>\[</ESC><ESC>\.</ESC>,<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	slice <OPERATOR>=</OPERATOR> <OBJ>Array</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>slice</OO><OPERATOR>,</OPERATOR>
	POS <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>POS</OO><OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	find<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( <STRING>""</STRING><OPERATOR>,</OPERATOR> <STRING>"find"</STRING><OPERATOR>,</OPERATOR> selector )<OPERATOR>,</OPERATOR>
			length <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			length <OPERATOR>=</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>( selector<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR> ret )<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( i <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				<COMMENT>// Make sure that the results are unique</COMMENT>
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> n <OPERATOR>=</OPERATOR> length<OPERATOR>;</OPERATOR> n <OPERATOR>&lt;</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> n<OPERATOR>++</OPERATOR> ) {
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> r <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> r <OPERATOR>&lt;</OPERATOR> length<OPERATOR>;</OPERATOR> r<OPERATOR>++</OPERATOR> ) {
						<KEYWORD>if</KEYWORD> ( ret[r] <OPERATOR>===</OPERATOR> ret[n] ) {
							<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>(n<OPERATOR>--,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
							<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
						}
					}
				}
			}
		}

		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	has<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( target ) {
		<KEYWORD>var</KEYWORD> targets <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( target )<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>targets</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> targets[i] ) ) {
					<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
				}
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	not<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( winnow(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> selector<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD>)<OPERATOR>,</OPERATOR> <STRING>"not"</STRING><OPERATOR>,</OPERATOR> selector)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	filter<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( winnow(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> selector<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD>)<OPERATOR>,</OPERATOR> <STRING>"filter"</STRING><OPERATOR>,</OPERATOR> selector )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	is<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>return</KEYWORD> <OPERATOR>!!</OPERATOR>selector <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( selector<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	closest<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selectors<OPERATOR>,</OPERATOR> context ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> l<OPERATOR>,</OPERATOR> cur <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>( selectors ) ) {
			<KEYWORD>var</KEYWORD> match<OPERATOR>,</OPERATOR> selector<OPERATOR>,</OPERATOR>
				matches <OPERATOR>=</OPERATOR> {}<OPERATOR>,</OPERATOR>
				level <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( cur <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>selectors</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>selectors</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					selector <OPERATOR>=</OPERATOR> selectors[i]<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>matches[selector] ) {
						matches[selector] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>match</OO><OPERATOR>.</OPERATOR><OO>POS</OO><OPERATOR>.</OPERATOR><OO>test</OO>( selector ) <OPERATOR>?</OPERATOR> 
							<FUNCTION>jQuery</FUNCTION>( selector<OPERATOR>,</OPERATOR> context <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> ) <OPERATOR>:</OPERATOR>
							selector<OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>while</KEYWORD> ( cur <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>&amp;&amp;</OPERATOR> cur <OPERATOR>!==</OPERATOR> context ) {
					<KEYWORD>for</KEYWORD> ( selector <KEYWORD>in</KEYWORD> matches ) {
						match <OPERATOR>=</OPERATOR> matches[selector]<OPERATOR>;</OPERATOR>

						<KEYWORD>if</KEYWORD> ( <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>jquery</OO> <OPERATOR>?</OPERATOR> <OBJ>match</OBJ><OPERATOR>.</OPERATOR><OO>index</OO>(cur) <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <FUNCTION>jQuery</FUNCTION>(cur)<OPERATOR>.</OPERATOR><OO>is</OO>(match) ) {
							<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>({ selector<OPERATOR>:</OPERATOR> selector<OPERATOR>,</OPERATOR> elem<OPERATOR>:</OPERATOR> cur<OPERATOR>,</OPERATOR> level<OPERATOR>:</OPERATOR> level })<OPERATOR>;</OPERATOR>
						}
					}

					cur <OPERATOR>=</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
					level<OPERATOR>++;</OPERATOR>
				}
			}

			<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> pos <OPERATOR>=</OPERATOR> <OBJ>POS</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( selectors ) <OPERATOR>?</OPERATOR> 
			<FUNCTION>jQuery</FUNCTION>( selectors<OPERATOR>,</OPERATOR> context <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> ) <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			cur <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>;</OPERATOR>

			<KEYWORD>while</KEYWORD> ( cur ) {
				<KEYWORD>if</KEYWORD> ( pos <OPERATOR>?</OPERATOR> <OBJ>pos</OBJ><OPERATOR>.</OPERATOR><OO>index</OO>(cur) <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>.</OPERATOR><OO>matchesSelector</OO>(cur<OPERATOR>,</OPERATOR> selectors) ) {
					<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( cur )<OPERATOR>;</OPERATOR>
					<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					cur <OPERATOR>=</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>cur <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> cur <OPERATOR>===</OPERATOR> context ) {
						<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
					}
				}
			}
		}

		ret <OPERATOR>=</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>unique</OO>(ret) <OPERATOR>:</OPERATOR> ret<OPERATOR>;</OPERATOR>
		
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( ret<OPERATOR>,</OPERATOR> <STRING>"closest"</STRING><OPERATOR>,</OPERATOR> selectors )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	<COMMENT>// Determine the position of an element within</COMMENT>
	<COMMENT>// the matched set of elements</COMMENT>
	index<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem <OPERATOR>||</OPERATOR> <KEYWORD>typeof</KEYWORD> elem <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR>
				<COMMENT>// If it receives a string, the selector is used</COMMENT>
				<COMMENT>// If it receives nothing, the siblings are used</COMMENT>
				elem <OPERATOR>?</OPERATOR> <FUNCTION>jQuery</FUNCTION>( elem ) <OPERATOR>:</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>()<OPERATOR>.</OPERATOR><OO>children</OO>() )<OPERATOR>;</OPERATOR>
		}
		<COMMENT>// Locate the position of the desired element</COMMENT>
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO>(
			<COMMENT>// If it receives a jQuery object, the first element is used</COMMENT>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>jquery</OO> <OPERATOR>?</OPERATOR> elem[<NUMERIC>0</NUMERIC>] <OPERATOR>:</OPERATOR> elem<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	add<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> context ) {
		<KEYWORD>var</KEYWORD> set <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> selector <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>?</OPERATOR>
				<FUNCTION>jQuery</FUNCTION>( selector<OPERATOR>,</OPERATOR> context <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> ) <OPERATOR>:</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>( selector )<OPERATOR>,</OPERATOR>
			all <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>()<OPERATOR>,</OPERATOR> set )<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( isDisconnected( set[<NUMERIC>0</NUMERIC>] ) <OPERATOR>||</OPERATOR> isDisconnected( all[<NUMERIC>0</NUMERIC>] ) <OPERATOR>?</OPERATOR>
			all <OPERATOR>:</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>unique</OO>( all ) )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	andSelf<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>add</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prevObject</OO> )<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<COMMENT>// A painfully simple check to see if an element is disconnected</COMMENT>
<COMMENT>// from a document (should be improved, where feasible).</COMMENT>
<KEYWORD>function</KEYWORD> isDisconnected( node ) {
	<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR>node <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>||</OPERATOR> <OBJ>node</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>;</OPERATOR>
}

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>({
	parent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>var</KEYWORD> parent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> parent <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>11</NUMERIC> <OPERATOR>?</OPERATOR> parent <OPERATOR>:</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	parents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dir</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"parentNode"</STRING> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	parentsUntil<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> until ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dir</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"parentNode"</STRING><OPERATOR>,</OPERATOR> until )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	next<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nth</OO>( elem<OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"nextSibling"</STRING> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	prev<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nth</OO>( elem<OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"previousSibling"</STRING> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	nextAll<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dir</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"nextSibling"</STRING> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	prevAll<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dir</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"previousSibling"</STRING> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	nextUntil<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> until ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dir</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"nextSibling"</STRING><OPERATOR>,</OPERATOR> until )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	prevUntil<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> until ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>dir</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"previousSibling"</STRING><OPERATOR>,</OPERATOR> until )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	siblings<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>sibling</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>,</OPERATOR> elem )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	children<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>sibling</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	contents<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"iframe"</STRING> ) <OPERATOR>?</OPERATOR>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>contentDocument</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>contentWindow</OO><OPERATOR>.</OPERATOR><OO>document</OO> <OPERATOR>:</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO> )<OPERATOR>;</OPERATOR>
	}
}<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> fn ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( until<OPERATOR>,</OPERATOR> selector ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> until )<OPERATOR>;</OPERATOR>
		
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>runtil</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( name ) ) {
			selector <OPERATOR>=</OPERATOR> until<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( selector <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> selector <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
			ret <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( selector<OPERATOR>,</OPERATOR> ret )<OPERATOR>;</OPERATOR>
		}

		ret <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>unique</OO>( ret ) <OPERATOR>:</OPERATOR> ret<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( (<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>rmultiselector</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( selector )) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rparentsprev</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( name ) ) {
			ret <OPERATOR>=</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>reverse</OO>()<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( ret<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> <OBJ>slice</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(arguments)<OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>","</STRING>) )<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	filter<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( expr<OPERATOR>,</OPERATOR> elems<OPERATOR>,</OPERATOR> not ) {
		<KEYWORD>if</KEYWORD> ( not ) {
			expr <OPERATOR>=</OPERATOR> <STRING>":not("</STRING> <OPERATOR>+</OPERATOR> expr <OPERATOR>+</OPERATOR> <STRING>")"</STRING><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>elems</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>.</OPERATOR><OO>matchesSelector</OO>(elems[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> expr) <OPERATOR>?</OPERATOR> [ elems[<NUMERIC>0</NUMERIC>] ] <OPERATOR>:</OPERATOR> [] <OPERATOR>:</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>find</OO><OPERATOR>.</OPERATOR><OO>matches</OO>(expr<OPERATOR>,</OPERATOR> elems)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	dir<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> dir<OPERATOR>,</OPERATOR> until ) {
		<KEYWORD>var</KEYWORD> matched <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
			cur <OPERATOR>=</OPERATOR> elem[ dir ]<OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( cur <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>9</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> (until <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>||</OPERATOR> <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><FUNCTION>jQuery</FUNCTION>( cur )<OPERATOR>.</OPERATOR><OO>is</OO>( until )) ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<OBJ>matched</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( cur )<OPERATOR>;</OPERATOR>
			}
			cur <OPERATOR>=</OPERATOR> cur[dir]<OPERATOR>;</OPERATOR>
		}
		<KEYWORD>return</KEYWORD> matched<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	nth<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( cur<OPERATOR>,</OPERATOR> result<OPERATOR>,</OPERATOR> dir<OPERATOR>,</OPERATOR> elem ) {
		result <OPERATOR>=</OPERATOR> result <OPERATOR>||</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		<KEYWORD>var</KEYWORD> num <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> cur<OPERATOR>;</OPERATOR> cur <OPERATOR>=</OPERATOR> cur[dir] ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>cur</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>++</OPERATOR>num <OPERATOR>===</OPERATOR> result ) {
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> cur<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	sibling<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( n<OPERATOR>,</OPERATOR> elem ) {
		<KEYWORD>var</KEYWORD> r <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <OPERATOR>;</OPERATOR> n<OPERATOR>;</OPERATOR> n <OPERATOR>=</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO> ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> n <OPERATOR>!==</OPERATOR> elem ) {
				<OBJ>r</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( n )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> r<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<COMMENT>// Implement the identical functionality for filter and not</COMMENT>
<KEYWORD>function</KEYWORD> winnow( elements<OPERATOR>,</OPERATOR> qualifier<OPERATOR>,</OPERATOR> keep ) {
	<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( qualifier ) ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>grep</OO>(elements<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
			<KEYWORD>var</KEYWORD> retVal <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR><OBJ>qualifier</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> elem )<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> retVal <OPERATOR>===</OPERATOR> keep<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>

	} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>qualifier</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>grep</OO>(elements<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
			<KEYWORD>return</KEYWORD> (elem <OPERATOR>===</OPERATOR> qualifier) <OPERATOR>===</OPERATOR> keep<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>

	} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> qualifier <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
		<KEYWORD>var</KEYWORD> filtered <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>grep</OO>(elements<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>isSimple</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( qualifier ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(qualifier<OPERATOR>,</OPERATOR> filtered<OPERATOR>,</OPERATOR> <OPERATOR>!</OPERATOR>keep)<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> {
			qualifier <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( qualifier<OPERATOR>,</OPERATOR> filtered )<OPERATOR>;</OPERATOR>
		}
	}

	<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>grep</OO>(elements<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> i ) {
		<KEYWORD>return</KEYWORD> (<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO>( elem<OPERATOR>,</OPERATOR> qualifier ) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC>) <OPERATOR>===</OPERATOR> keep<OPERATOR>;</OPERATOR>
	})<OPERATOR>;</OPERATOR>
}




<KEYWORD>var</KEYWORD> rinlinejQuery <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER> jQuery<ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>="<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>|</REGEX_OPERATOR>null<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>"<DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rleadingWhitespace <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<ESC>\s</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rxhtmlTag <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>&lt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?!</REGEX_SUBPATTERN>area<REGEX_OPERATOR>|</REGEX_OPERATOR>br<REGEX_OPERATOR>|</REGEX_OPERATOR>col<REGEX_OPERATOR>|</REGEX_OPERATOR>embed<REGEX_OPERATOR>|</REGEX_OPERATOR>hr<REGEX_OPERATOR>|</REGEX_OPERATOR>img<REGEX_OPERATOR>|</REGEX_OPERATOR>input<REGEX_OPERATOR>|</REGEX_OPERATOR>link<REGEX_OPERATOR>|</REGEX_OPERATOR>meta<REGEX_OPERATOR>|</REGEX_OPERATOR>param<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC>:<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&gt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><ESC>\/</ESC>&gt;<DELIMITER>/</DELIMITER><KEYWORD>ig</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rtagName <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>&lt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\w</ESC>:<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rtbody <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>&lt;tbody<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rhtml <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>&lt;<REGEX_OPERATOR>|</REGEX_OPERATOR>&amp;#<REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\w</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>;<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rnocache <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>&lt;<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>script<REGEX_OPERATOR>|</REGEX_OPERATOR>object<REGEX_OPERATOR>|</REGEX_OPERATOR>embed<REGEX_OPERATOR>|</REGEX_OPERATOR>option<REGEX_OPERATOR>|</REGEX_OPERATOR>style<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	<COMMENT>// checked="checked" or checked (html5)</COMMENT>
	rchecked <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>checked<ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^=<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>|</REGEX_OPERATOR>=<ESC>\s</ESC><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_OPERATOR>.</REGEX_OPERATOR>checked<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	raction <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\=</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^="'&gt;<ESC>\s</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\/</ESC><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>&gt;<DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	wrapMap <OPERATOR>=</OPERATOR> {
		option<OPERATOR>:</OPERATOR> [ <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;select multiple='multiple'&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/select&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		legend<OPERATOR>:</OPERATOR> [ <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;fieldset&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/fieldset&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		thead<OPERATOR>:</OPERATOR> [ <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;table&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/table&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		tr<OPERATOR>:</OPERATOR> [ <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;table&gt;&lt;tbody&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/tbody&gt;&lt;/table&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		td<OPERATOR>:</OPERATOR> [ <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		col<OPERATOR>:</OPERATOR> [ <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;table&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;colgroup&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/colgroup&gt;&lt;/table&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		area<OPERATOR>:</OPERATOR> [ <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"&lt;map&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/map&gt;"</STRING> ]<OPERATOR>,</OPERATOR>
		_default<OPERATOR>:</OPERATOR> [ <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> <STRING>""</STRING> ]
	}<OPERATOR>;</OPERATOR>

<OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>optgroup</OO> <OPERATOR>=</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>option</OO><OPERATOR>;</OPERATOR>
<OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>tbody</OO> <OPERATOR>=</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>tfoot</OO> <OPERATOR>=</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>colgroup</OO> <OPERATOR>=</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>caption</OO> <OPERATOR>=</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>thead</OO><OPERATOR>;</OPERATOR>
<OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>th</OO> <OPERATOR>=</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>td</OO><OPERATOR>;</OPERATOR>

<COMMENT>// IE can't serialize &lt;link&gt; and &lt;script&gt; tags normally</COMMENT>
<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>htmlSerialize</OO> ) {
	<OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>_default</OO> <OPERATOR>=</OPERATOR> [ <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <STRING>"div&lt;div&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;/div&gt;"</STRING> ]<OPERATOR>;</OPERATOR>
}

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	text<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( text ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(text) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>

				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>text</OO>( <OBJ>text</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>text</OO>()) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> text <OPERATOR>!==</OPERATOR> <STRING>"object"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> text <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>empty</OO>()<OPERATOR>.</OPERATOR><OO>append</OO>( (<KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> <TYPE>document</TYPE>)<OPERATOR>.</OPERATOR><OO>createTextNode</OO>( text ) )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>text</OO>( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	wrapAll<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( html ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( html ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>wrapAll</OO>( <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] ) {
			<COMMENT>// The elements to wrap the target around</COMMENT>
			<KEYWORD>var</KEYWORD> wrap <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( html<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>ownerDocument</OO> )<OPERATOR>.</OPERATOR><OO>eq</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR><OO>clone</OO>(<KEYWORD>true</KEYWORD>)<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
				<OBJ>wrap</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] )<OPERATOR>;</OPERATOR>
			}

			<OBJ>wrap</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>() {
				<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

				<KEYWORD>while</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
					elem <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
				}

				<KEYWORD>return</KEYWORD> elem<OPERATOR>;</OPERATOR>
			})<OPERATOR>.</OPERATOR><OO>append</OO>(<KEYWORD>this</KEYWORD>)<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	wrapInner<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( html ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( html ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>wrapInner</OO>( <OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>,</OPERATOR>
				contents <OPERATOR>=</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>contents</OO>()<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( <OBJ>contents</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				<OBJ>contents</OBJ><OPERATOR>.</OPERATOR><OO>wrapAll</OO>( html )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>( html )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	wrap<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( html ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>.</OPERATOR><OO>wrapAll</OO>( html )<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	unwrap<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parent</OO>()<OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"body"</STRING> ) ) {
				<FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>.</OPERATOR><OO>replaceWith</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO> )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>.</OPERATOR><OO>end</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	append<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>domManip</OO>(arguments<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( elem )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	prepend<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>domManip</OO>(arguments<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( elem<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	before<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>domManip</OO>(arguments<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( elem<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
			<KEYWORD>var</KEYWORD> set <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(arguments[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
			<OBJ>set</OBJ><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( set<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>toArray</OO>() )<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( set<OPERATOR>,</OPERATOR> <STRING>"before"</STRING><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	after<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>domManip</OO>(arguments<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( elem<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO> )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
			<KEYWORD>var</KEYWORD> set <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"after"</STRING><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>
			<OBJ>set</OBJ><OPERATOR>.</OPERATOR><OO>push</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( set<OPERATOR>,</OPERATOR> <FUNCTION>jQuery</FUNCTION>(arguments[<NUMERIC>0</NUMERIC>])<OPERATOR>.</OPERATOR><OO>toArray</OO>() )<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> set<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
	
	<COMMENT>// keepData is for internal use only--do not document</COMMENT>
	remove<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector<OPERATOR>,</OPERATOR> keepData ) {
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR> (elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>selector <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>( selector<OPERATOR>,</OPERATOR> [ elem ] )<OPERATOR>.</OPERATOR><OO>length</OO> ) {
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>keepData <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cleanData</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"*"</STRING>) )<OPERATOR>;</OPERATOR>
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cleanData</OO>( [ elem ] )<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
					 <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>( elem )<OPERATOR>;</OPERATOR>
				}
			}
		}
		
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	empty<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR> (elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<COMMENT>// Remove element nodes and prevent memory leaks</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cleanData</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"*"</STRING>) )<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Remove any remaining nodes</COMMENT>
			<KEYWORD>while</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> ) {
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>
			}
		}
		
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	clone<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( events ) {
		<COMMENT>// Do the clone</COMMENT>
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>noCloneEvent</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isXMLDoc</OO>(<KEYWORD>this</KEYWORD>) ) {
				<COMMENT>// IE copies events bound via attachEvent when</COMMENT>
				<COMMENT>// using cloneNode. Calling detachEvent on the</COMMENT>
				<COMMENT>// clone will also remove the events from the orignal</COMMENT>
				<COMMENT>// In order to get around this, we use innerHTML.</COMMENT>
				<COMMENT>// Unfortunately, this means some modifications to</COMMENT>
				<COMMENT>// attributes in IE that are actually only stored</COMMENT>
				<COMMENT>// as properties will not be copied (such as the</COMMENT>
				<COMMENT>// the name attribute on an input).</COMMENT>
				<KEYWORD>var</KEYWORD> html <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>outerHTML</OO><OPERATOR>,</OPERATOR>
					ownerDocument <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>html ) {
					<KEYWORD>var</KEYWORD> div <OPERATOR>=</OPERATOR> <OBJ>ownerDocument</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>
					<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>) )<OPERATOR>;</OPERATOR>
					html <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO><OPERATOR>;</OPERATOR>
				}

				<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>clean</OO>([<OBJ>html</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(rinlinejQuery<OPERATOR>,</OPERATOR> <STRING>""</STRING>)
					<COMMENT>// Handle the case in IE 8 where action=/test/&gt; self-closes a tag</COMMENT>
					<OPERATOR>.</OPERATOR><OO>replace</OO>(raction<OPERATOR>,</OPERATOR> <STRING>'="$1"&gt;'</STRING>)
					<OPERATOR>.</OPERATOR><OO>replace</OO>(rleadingWhitespace<OPERATOR>,</OPERATOR> <STRING>""</STRING>)]<OPERATOR>,</OPERATOR> ownerDocument)[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>)<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>

		<COMMENT>// Copy the events from the original to the clone</COMMENT>
		<KEYWORD>if</KEYWORD> ( events <OPERATOR>===</OPERATOR> <KEYWORD>true</KEYWORD> ) {
			cloneCopyEvent( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> ret )<OPERATOR>;</OPERATOR>
			cloneCopyEvent( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<STRING>"*"</STRING>)<OPERATOR>,</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>find</OO>(<STRING>"*"</STRING>) )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Return the cloned set</COMMENT>
		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	html<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( value ) {
		<KEYWORD>if</KEYWORD> ( value <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>?</OPERATOR>
				<KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>innerHTML</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(rinlinejQuery<OPERATOR>,</OPERATOR> <STRING>""</STRING>) <OPERATOR>:</OPERATOR>
				<KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// See if we can take a shortcut and just use innerHTML</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> value <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>rnocache</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( value ) <OPERATOR>&amp;&amp;</OPERATOR>
			(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>leadingWhitespace</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>rleadingWhitespace</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( value )) <OPERATOR>&amp;&amp;</OPERATOR>
			<OPERATOR>!</OPERATOR>wrapMap[ (<OBJ>rtagName</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( value ) <OPERATOR>||</OPERATOR> [<STRING>""</STRING><OPERATOR>,</OPERATOR> <STRING>""</STRING>])[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() ] ) {

			value <OPERATOR>=</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(rxhtmlTag<OPERATOR>,</OPERATOR> <STRING>"&lt;$1&gt;&lt;/$2&gt;"</STRING>)<OPERATOR>;</OPERATOR>

			<KEYWORD>try</KEYWORD> {
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					<COMMENT>// Remove element nodes and prevent memory leaks</COMMENT>
					<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[i]<OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cleanData</OO>( <KEYWORD>this</KEYWORD>[i]<OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"*"</STRING>) )<OPERATOR>;</OPERATOR>
						<KEYWORD>this</KEYWORD>[i]<OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
					}
				}

			<COMMENT>// If using innerHTML throws an exception, use the fallback method</COMMENT>
			} <KEYWORD>catch</KEYWORD>(e) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>empty</OO>()<OPERATOR>.</OPERATOR><OO>append</OO>( value )<OPERATOR>;</OPERATOR>
			}

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( value ) ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i){
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>

				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>html</OO>( <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>html</OO>()) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>empty</OO>()<OPERATOR>.</OPERATOR><OO>append</OO>( value )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	replaceWith<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( value ) {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
			<COMMENT>// Make sure that the elements are removed from the DOM before they are inserted</COMMENT>
			<COMMENT>// this can help fix replacing a parent with child elements</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( value ) ) {
				<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
					<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>,</OPERATOR> old <OPERATOR>=</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>html</OO>()<OPERATOR>;</OPERATOR>
					<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>replaceWith</OO>( <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> old ) )<OPERATOR>;</OPERATOR>
				})<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> value <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> ) {
				value <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( value )<OPERATOR>.</OPERATOR><OO>detach</OO>()<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
				<KEYWORD>var</KEYWORD> next <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><OPERATOR>,</OPERATOR>
					parent <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>

				<FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>.</OPERATOR><OO>remove</OO>()<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( next ) {
					<FUNCTION>jQuery</FUNCTION>(next)<OPERATOR>.</OPERATOR><OO>before</OO>( value )<OPERATOR>;</OPERATOR>
				} <KEYWORD>else</KEYWORD> {
					<FUNCTION>jQuery</FUNCTION>(parent)<OPERATOR>.</OPERATOR><OO>append</OO>( value )<OPERATOR>;</OPERATOR>
				}
			})<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( <FUNCTION>jQuery</FUNCTION>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value) <OPERATOR>?</OPERATOR> value() <OPERATOR>:</OPERATOR> value)<OPERATOR>,</OPERATOR> <STRING>"replaceWith"</STRING><OPERATOR>,</OPERATOR> value )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	detach<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>remove</OO>( selector<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	domManip<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( args<OPERATOR>,</OPERATOR> table<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>var</KEYWORD> results<OPERATOR>,</OPERATOR> first<OPERATOR>,</OPERATOR> fragment<OPERATOR>,</OPERATOR> parent<OPERATOR>,</OPERATOR>
			value <OPERATOR>=</OPERATOR> args[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR>
			scripts <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>

		<COMMENT>// We can't cloneNode fragments that contain checked, in WebKit</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>checkClone</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> value <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rchecked</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( value ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
				<FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>domManip</OO>( args<OPERATOR>,</OPERATOR> table<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD> )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>(i) {
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>;</OPERATOR>
				args[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> table <OPERATOR>?</OPERATOR> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>html</OO>() <OPERATOR>:</OPERATOR> <TYPE>undefined</TYPE>)<OPERATOR>;</OPERATOR>
				<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>domManip</OO>( args<OPERATOR>,</OPERATOR> table<OPERATOR>,</OPERATOR> callback )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] ) {
			parent <OPERATOR>=</OPERATOR> value <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>value</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// If we're in a fragment, just use that instead of building a new one</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>&amp;&amp;</OPERATOR> parent <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>11</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				results <OPERATOR>=</OPERATOR> { fragment<OPERATOR>:</OPERATOR> parent }<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				results <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>buildFragment</OO>( args<OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> scripts )<OPERATOR>;</OPERATOR>
			}
			
			fragment <OPERATOR>=</OPERATOR> <OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>fragment</OO><OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( <OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				first <OPERATOR>=</OPERATOR> fragment <OPERATOR>=</OPERATOR> <OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				first <OPERATOR>=</OPERATOR> <OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( first ) {
				table <OPERATOR>=</OPERATOR> table <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( first<OPERATOR>,</OPERATOR> <STRING>"tr"</STRING> )<OPERATOR>;</OPERATOR>

				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
					<OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>(
						table <OPERATOR>?</OPERATOR>
							root(<KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR> first) <OPERATOR>:</OPERATOR>
							<KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR>
						i <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>results</OBJ><OPERATOR>.</OPERATOR><OO>cacheable</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC>  <OPERATOR>?</OPERATOR>
							<OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>cloneNode</OO>(<KEYWORD>true</KEYWORD>) <OPERATOR>:</OPERATOR>
							fragment
					)<OPERATOR>;</OPERATOR>
				}
			}

			<KEYWORD>if</KEYWORD> ( <OBJ>scripts</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( scripts<OPERATOR>,</OPERATOR> evalScript )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> root( elem<OPERATOR>,</OPERATOR> cur ) {
	<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>(elem<OPERATOR>,</OPERATOR> <STRING>"table"</STRING>) <OPERATOR>?</OPERATOR>
		(<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"tbody"</STRING>)[<NUMERIC>0</NUMERIC>] <OPERATOR>||</OPERATOR>
		<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>(<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"tbody"</STRING>))) <OPERATOR>:</OPERATOR>
		elem<OPERATOR>;</OPERATOR>
}

<KEYWORD>function</KEYWORD> cloneCopyEvent(orig<OPERATOR>,</OPERATOR> ret) {
	<KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

	<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>!==</OPERATOR> (orig[i] <OPERATOR>&amp;&amp;</OPERATOR> orig[i]<OPERATOR>.</OPERATOR><OO>nodeName</OO>) ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> oldData <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( orig[i<OPERATOR>++</OPERATOR>] )<OPERATOR>,</OPERATOR>
			curData <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> oldData )<OPERATOR>,</OPERATOR>
			events <OPERATOR>=</OPERATOR> oldData <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>oldData</OBJ><OPERATOR>.</OPERATOR><OO>events</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( events ) {
			<KEYWORD>delete</KEYWORD> <OBJ>curData</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO><OPERATOR>;</OPERATOR>
			<OBJ>curData</OBJ><OPERATOR>.</OPERATOR><OO>events</OO> <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> type <KEYWORD>in</KEYWORD> events ) {
				<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> handler <KEYWORD>in</KEYWORD> events[ type ] ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>add</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> events[ type ][ handler ]<OPERATOR>,</OPERATOR> events[ type ][ handler ]<OPERATOR>.</OPERATOR><OO>data</OO> )<OPERATOR>;</OPERATOR>
				}
			}
		}
	})<OPERATOR>;</OPERATOR>
}

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>buildFragment</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( args<OPERATOR>,</OPERATOR> nodes<OPERATOR>,</OPERATOR> scripts ) {
	<KEYWORD>var</KEYWORD> fragment<OPERATOR>,</OPERATOR> cacheable<OPERATOR>,</OPERATOR> cacheresults<OPERATOR>,</OPERATOR>
		doc <OPERATOR>=</OPERATOR> (nodes <OPERATOR>&amp;&amp;</OPERATOR> nodes[<NUMERIC>0</NUMERIC>] <OPERATOR>?</OPERATOR> nodes[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> nodes[<NUMERIC>0</NUMERIC>] <OPERATOR>:</OPERATOR> <TYPE>document</TYPE>)<OPERATOR>;</OPERATOR>

	<COMMENT>// Only cache "small" (1/2 KB) strings that are associated with the main document</COMMENT>
	<COMMENT>// Cloning options loses the selected state, so don't cache them</COMMENT>
	<COMMENT>// IE 6 doesn't like it when you put &lt;object&gt; or &lt;embed&gt; elements in a fragment</COMMENT>
	<COMMENT>// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OBJ>args</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> args[<NUMERIC>0</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> args[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>&lt;</OPERATOR> <NUMERIC>512</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> doc <OPERATOR>===</OPERATOR> <TYPE>document</TYPE> <OPERATOR>&amp;&amp;</OPERATOR>
		<OPERATOR>!</OPERATOR><OBJ>rnocache</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( args[<NUMERIC>0</NUMERIC>] ) <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>checkClone</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>rchecked</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( args[<NUMERIC>0</NUMERIC>] )) ) {

		cacheable <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		cacheresults <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fragments</OO>[ args[<NUMERIC>0</NUMERIC>] ]<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> ( cacheresults ) {
			<KEYWORD>if</KEYWORD> ( cacheresults <OPERATOR>!==</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				fragment <OPERATOR>=</OPERATOR> cacheresults<OPERATOR>;</OPERATOR>
			}
		}
	}

	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>fragment ) {
		fragment <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>createDocumentFragment</OO>()<OPERATOR>;</OPERATOR>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>clean</OO>( args<OPERATOR>,</OPERATOR> doc<OPERATOR>,</OPERATOR> fragment<OPERATOR>,</OPERATOR> scripts )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>if</KEYWORD> ( cacheable ) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fragments</OO>[ args[<NUMERIC>0</NUMERIC>] ] <OPERATOR>=</OPERATOR> cacheresults <OPERATOR>?</OPERATOR> fragment <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> { fragment<OPERATOR>:</OPERATOR> fragment<OPERATOR>,</OPERATOR> cacheable<OPERATOR>:</OPERATOR> cacheable }<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fragments</OO> <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>({
	appendTo<OPERATOR>:</OPERATOR> <STRING>"append"</STRING><OPERATOR>,</OPERATOR>
	prependTo<OPERATOR>:</OPERATOR> <STRING>"prepend"</STRING><OPERATOR>,</OPERATOR>
	insertBefore<OPERATOR>:</OPERATOR> <STRING>"before"</STRING><OPERATOR>,</OPERATOR>
	insertAfter<OPERATOR>:</OPERATOR> <STRING>"after"</STRING><OPERATOR>,</OPERATOR>
	replaceAll<OPERATOR>:</OPERATOR> <STRING>"replaceWith"</STRING>
}<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> original ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( selector ) {
		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
			insert <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( selector )<OPERATOR>,</OPERATOR>
			parent <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>;</OPERATOR>
		
		<KEYWORD>if</KEYWORD> ( parent <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>11</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>parent</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>insert</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
			insert[ original ]( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] )<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
			
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> l <OPERATOR>=</OPERATOR> <OBJ>insert</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>var</KEYWORD> elems <OPERATOR>=</OPERATOR> (i <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>?</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>clone</OO>(<KEYWORD>true</KEYWORD>) <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>get</OO>()<OPERATOR>;</OPERATOR>
				<FUNCTION>jQuery</FUNCTION>( insert[i] )[ original ]( elems )<OPERATOR>;</OPERATOR>
				ret <OPERATOR>=</OPERATOR> <OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>concat</OO>( elems )<OPERATOR>;</OPERATOR>
			}
		
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pushStack</OO>( ret<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> <OBJ>insert</OBJ><OPERATOR>.</OPERATOR><OO>selector</OO> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	clean<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elems<OPERATOR>,</OPERATOR> context<OPERATOR>,</OPERATOR> fragment<OPERATOR>,</OPERATOR> scripts ) {
		context <OPERATOR>=</OPERATOR> context <OPERATOR>||</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>

		<COMMENT>// !context.createElement fails in IE with an error but returns typeof 'object'</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO> <OPERATOR>===</OPERATOR> <STRING>"undefined"</STRING> ) {
			context <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> context[<NUMERIC>0</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> context[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>ownerDocument</OO> <OPERATOR>||</OPERATOR> <TYPE>document</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> []<OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR> (elem <OPERATOR>=</OPERATOR> elems[i]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> elem <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> ) {
				elem <OPERATOR>+=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem ) {
				<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Convert html string into DOM nodes</COMMENT>
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> elem <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>rhtml</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( elem ) ) {
				elem <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>createTextNode</OO>( elem )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> elem <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
				<COMMENT>// Fix "XHTML"-style tags in all browsers</COMMENT>
				elem <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(rxhtmlTag<OPERATOR>,</OPERATOR> <STRING>"&lt;$1&gt;&lt;/$2&gt;"</STRING>)<OPERATOR>;</OPERATOR>

				<COMMENT>// Trim whitespace, otherwise indexOf won't work as expected</COMMENT>
				<KEYWORD>var</KEYWORD> tag <OPERATOR>=</OPERATOR> (<OBJ>rtagName</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( elem ) <OPERATOR>||</OPERATOR> [<STRING>""</STRING><OPERATOR>,</OPERATOR> <STRING>""</STRING>])[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>,</OPERATOR>
					wrap <OPERATOR>=</OPERATOR> wrapMap[ tag ] <OPERATOR>||</OPERATOR> <OBJ>wrapMap</OBJ><OPERATOR>.</OPERATOR><OO>_default</OO><OPERATOR>,</OPERATOR>
					depth <OPERATOR>=</OPERATOR> wrap[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR>
					div <OPERATOR>=</OPERATOR> <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>;</OPERATOR>

				<COMMENT>// Go to html and back, then peel off extra wrappers</COMMENT>
				<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> wrap[<NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> elem <OPERATOR>+</OPERATOR> wrap[<NUMERIC>2</NUMERIC>]<OPERATOR>;</OPERATOR>

				<COMMENT>// Move to the right depth</COMMENT>
				<KEYWORD>while</KEYWORD> ( depth<OPERATOR>--</OPERATOR> ) {
					div <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>lastChild</OO><OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Remove IE's autoinserted &lt;tbody&gt; from table fragments</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>tbody</OO> ) {

					<COMMENT>// String was a &lt;table&gt;, *may* have spurious &lt;tbody&gt;</COMMENT>
					<KEYWORD>var</KEYWORD> hasBody <OPERATOR>=</OPERATOR> <OBJ>rtbody</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(elem)<OPERATOR>,</OPERATOR>
						tbody <OPERATOR>=</OPERATOR> tag <OPERATOR>===</OPERATOR> <STRING>"table"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>hasBody <OPERATOR>?</OPERATOR>
							<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>childNodes</OO> <OPERATOR>:</OPERATOR>

							<COMMENT>// String was a bare &lt;thead&gt; or &lt;tfoot&gt;</COMMENT>
							wrap[<NUMERIC>1</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"&lt;table&gt;"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>hasBody <OPERATOR>?</OPERATOR>
								<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO> <OPERATOR>:</OPERATOR>
								[]<OPERATOR>;</OPERATOR>

					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> j <OPERATOR>=</OPERATOR> <OBJ>tbody</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> j <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>;</OPERATOR> <OPERATOR>--</OPERATOR>j ) {
						<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( tbody[ j ]<OPERATOR>,</OPERATOR> <STRING>"tbody"</STRING> ) <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>tbody[ j ]<OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>.</OPERATOR><OO>length</OO> ) {
							tbody[ j ]<OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>( tbody[ j ] )<OPERATOR>;</OPERATOR>
						}
					}

				}

				<COMMENT>// IE completely kills leading whitespace when innerHTML is used</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>leadingWhitespace</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rleadingWhitespace</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( elem ) ) {
					<OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( <OBJ>context</OBJ><OPERATOR>.</OPERATOR><OO>createTextNode</OO>( <OBJ>rleadingWhitespace</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>(elem)[<NUMERIC>0</NUMERIC>] )<OPERATOR>,</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>
				}

				elem <OPERATOR>=</OPERATOR> <OBJ>div</OBJ><OPERATOR>.</OPERATOR><OO>childNodes</OO><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> ) {
				<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( elem )<OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				ret <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>merge</OO>( ret<OPERATOR>,</OPERATOR> elem )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>if</KEYWORD> ( fragment ) {
			<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> ret[i]<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( scripts <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>( ret[i]<OPERATOR>,</OPERATOR> <STRING>"script"</STRING> ) <OPERATOR>&amp;&amp;</OPERATOR> (<OPERATOR>!</OPERATOR>ret[i]<OPERATOR>.</OPERATOR><OO>type</OO> <OPERATOR>||</OPERATOR> ret[i]<OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>===</OPERATOR> <STRING>"text/javascript"</STRING>) ) {
					<OBJ>scripts</OBJ><OPERATOR>.</OPERATOR><OO>push</OO>( ret[i]<OPERATOR>.</OPERATOR><OO>parentNode</OO> <OPERATOR>?</OPERATOR> ret[i]<OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>( ret[i] ) <OPERATOR>:</OPERATOR> ret[i] )<OPERATOR>;</OPERATOR>
				
				} <KEYWORD>else</KEYWORD> {
					<KEYWORD>if</KEYWORD> ( ret[i]<OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
						<OBJ>ret</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( ret<OPERATOR>,</OPERATOR> [i <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>concat</OO>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>(ret[i]<OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"script"</STRING>))) )<OPERATOR>;</OPERATOR>
					}
					<OBJ>fragment</OBJ><OPERATOR>.</OPERATOR><OO>appendChild</OO>( ret[i] )<OPERATOR>;</OPERATOR>
				}
			}
		}

		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	cleanData<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elems ) {
		<KEYWORD>var</KEYWORD> data<OPERATOR>,</OPERATOR> id<OPERATOR>,</OPERATOR> cache <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO><OPERATOR>,</OPERATOR>
			special <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>special</OO><OPERATOR>,</OPERATOR>
			deleteExpando <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>deleteExpando</OO><OPERATOR>;</OPERATOR>
		
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> elem<OPERATOR>;</OPERATOR> (elem <OPERATOR>=</OPERATOR> elems[i]) <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noData</OO>[<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()] ) {
				<KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
			}

			id <OPERATOR>=</OPERATOR> elem[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ]<OPERATOR>;</OPERATOR>
			
			<KEYWORD>if</KEYWORD> ( id ) {
				data <OPERATOR>=</OPERATOR> cache[ id ]<OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( data <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>events</OO> ) {
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> type <KEYWORD>in</KEYWORD> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>events</OO> ) {
						<KEYWORD>if</KEYWORD> ( special[ type ] ) {
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>remove</OO>( elem<OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>

						} <KEYWORD>else</KEYWORD> {
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>removeEvent</OO>( elem<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>handle</OO> )<OPERATOR>;</OPERATOR>
						}
					}
				}
				
				<KEYWORD>if</KEYWORD> ( deleteExpando ) {
					<KEYWORD>delete</KEYWORD> elem[ <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> ]<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO> ) {
					<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>removeAttribute</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expando</OO> )<OPERATOR>;</OPERATOR>
				}
				
				<KEYWORD>delete</KEYWORD> cache[ id ]<OPERATOR>;</OPERATOR>
			}
		}
	}
})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> evalScript( i<OPERATOR>,</OPERATOR> elem ) {
	<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>src</OO> ) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajax</OO>({
			url<OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>src</OO><OPERATOR>,</OPERATOR>
			async<OPERATOR>:</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR>
			dataType<OPERATOR>:</OPERATOR> <STRING>"script"</STRING>
		})<OPERATOR>;</OPERATOR>
	} <KEYWORD>else</KEYWORD> {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>globalEval</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>text</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>textContent</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>||</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
		<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO><OPERATOR>.</OPERATOR><OO>removeChild</OO>( elem )<OPERATOR>;</OPERATOR>
	}
}




<KEYWORD>var</KEYWORD> ralpha <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>alpha<ESC>\(</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><ESC>\)</ESC><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	ropacity <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>opacity=<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rdashAlpha <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>-<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>a-z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>ig</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rupper <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>A-Z<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rnumpx <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^-<REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>px<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rnum <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^-<REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\d</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	cssShow <OPERATOR>=</OPERATOR> { position<OPERATOR>:</OPERATOR> <STRING>"absolute"</STRING><OPERATOR>,</OPERATOR> visibility<OPERATOR>:</OPERATOR> <STRING>"hidden"</STRING><OPERATOR>,</OPERATOR> display<OPERATOR>:</OPERATOR> <STRING>"block"</STRING> }<OPERATOR>,</OPERATOR>
	cssWidth <OPERATOR>=</OPERATOR> [ <STRING>"Left"</STRING><OPERATOR>,</OPERATOR> <STRING>"Right"</STRING> ]<OPERATOR>,</OPERATOR>
	cssHeight <OPERATOR>=</OPERATOR> [ <STRING>"Top"</STRING><OPERATOR>,</OPERATOR> <STRING>"Bottom"</STRING> ]<OPERATOR>,</OPERATOR>
	curCSS<OPERATOR>,</OPERATOR>

	getComputedStyle<OPERATOR>,</OPERATOR>
	currentStyle<OPERATOR>,</OPERATOR>

	fcamelCase <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( all<OPERATOR>,</OPERATOR> letter ) {
		<KEYWORD>return</KEYWORD> <OBJ>letter</OBJ><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>css</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> value ) {
	<COMMENT>// Setting 'undefined' is a no-op</COMMENT>
	<KEYWORD>if</KEYWORD> ( <OBJ>arguments</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>===</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> value <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>access</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> value ) {
		<KEYWORD>return</KEYWORD> value <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> <OPERATOR>?</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> value ) <OPERATOR>:</OPERATOR>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> name )<OPERATOR>;</OPERATOR>
	})<OPERATOR>;</OPERATOR>
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	<COMMENT>// Add in style property hooks for overriding the default</COMMENT>
	<COMMENT>// behavior of getting and setting a style property</COMMENT>
	cssHooks<OPERATOR>:</OPERATOR> {
		opacity<OPERATOR>:</OPERATOR> {
			get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> computed ) {
				<KEYWORD>if</KEYWORD> ( computed ) {
					<COMMENT>// We should always get a number back from opacity</COMMENT>
					<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> curCSS( elem<OPERATOR>,</OPERATOR> <STRING>"opacity"</STRING><OPERATOR>,</OPERATOR> <STRING>"opacity"</STRING> )<OPERATOR>;</OPERATOR>
					<KEYWORD>return</KEYWORD> ret <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>?</OPERATOR> <STRING>"1"</STRING> <OPERATOR>:</OPERATOR> ret<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>opacity</OO><OPERATOR>;</OPERATOR>
				}
			}
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Exclude the following css properties to add px</COMMENT>
	cssNumber<OPERATOR>:</OPERATOR> {
		<STRING>"zIndex"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		<STRING>"fontWeight"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		<STRING>"opacity"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		<STRING>"zoom"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		<STRING>"lineHeight"</STRING><OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Add in properties whose names you wish to fix before</COMMENT>
	<COMMENT>// setting or getting the value</COMMENT>
	cssProps<OPERATOR>:</OPERATOR> {
		<COMMENT>// normalize float css property</COMMENT>
		<STRING>"float"</STRING><OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>cssFloat</OO> <OPERATOR>?</OPERATOR> <STRING>"cssFloat"</STRING> <OPERATOR>:</OPERATOR> <STRING>"styleFloat"</STRING>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Get and set the style property on a DOM Node</COMMENT>
	style<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> value<OPERATOR>,</OPERATOR> extra ) {
		<COMMENT>// Don't set styles on text and comment nodes</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>8</NUMERIC> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO> ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Make sure that we're working with the right name</COMMENT>
		<KEYWORD>var</KEYWORD> ret<OPERATOR>,</OPERATOR> origName <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>camelCase</OO>( name )<OPERATOR>,</OPERATOR>
			style <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>,</OPERATOR> hooks <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssHooks</OO>[ origName ]<OPERATOR>;</OPERATOR>

		name <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssProps</OO>[ origName ] <OPERATOR>||</OPERATOR> origName<OPERATOR>;</OPERATOR>

		<COMMENT>// Check if we're setting a value</COMMENT>
		<KEYWORD>if</KEYWORD> ( value <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			<COMMENT>// Make sure that NaN and null values aren't set. See: #7116</COMMENT>
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> value <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <FUNCTION>isNaN</FUNCTION>( value ) <OPERATOR>||</OPERATOR> value <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
				<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// If a number was passed in, add 'px' to the (except for certain CSS properties)</COMMENT>
			<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> value <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssNumber</OO>[ origName ] ) {
				value <OPERATOR>+=</OPERATOR> <STRING>"px"</STRING><OPERATOR>;</OPERATOR>
			}

			<COMMENT>// If a hook was provided, use that value, otherwise just set the specified value</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>hooks <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>(<STRING>"set"</STRING> <KEYWORD>in</KEYWORD> hooks) <OPERATOR>||</OPERATOR> (value <OPERATOR>=</OPERATOR> <OBJ>hooks</OBJ><OPERATOR>.</OPERATOR><OO>set</OO>( elem<OPERATOR>,</OPERATOR> value )) <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
				<COMMENT>// Wrapped to prevent IE from throwing errors when 'invalid' values are provided</COMMENT>
				<COMMENT>// Fixes bug #5509</COMMENT>
				<KEYWORD>try</KEYWORD> {
					style[ name ] <OPERATOR>=</OPERATOR> value<OPERATOR>;</OPERATOR>
				} <KEYWORD>catch</KEYWORD>(e) {}
			}

		} <KEYWORD>else</KEYWORD> {
			<COMMENT>// If a hook was provided get the non-computed value from there</COMMENT>
			<KEYWORD>if</KEYWORD> ( hooks <OPERATOR>&amp;&amp;</OPERATOR> <STRING>"get"</STRING> <KEYWORD>in</KEYWORD> hooks <OPERATOR>&amp;&amp;</OPERATOR> (ret <OPERATOR>=</OPERATOR> <OBJ>hooks</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>( elem<OPERATOR>,</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>,</OPERATOR> extra )) <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
				<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Otherwise just get the value from the style object</COMMENT>
			<KEYWORD>return</KEYWORD> style[ name ]<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	css<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> extra ) {
		<COMMENT>// Make sure that we're working with the right name</COMMENT>
		<KEYWORD>var</KEYWORD> ret<OPERATOR>,</OPERATOR> origName <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>camelCase</OO>( name )<OPERATOR>,</OPERATOR>
			hooks <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssHooks</OO>[ origName ]<OPERATOR>;</OPERATOR>

		name <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssProps</OO>[ origName ] <OPERATOR>||</OPERATOR> origName<OPERATOR>;</OPERATOR>

		<COMMENT>// If a hook was provided get the computed value from there</COMMENT>
		<KEYWORD>if</KEYWORD> ( hooks <OPERATOR>&amp;&amp;</OPERATOR> <STRING>"get"</STRING> <KEYWORD>in</KEYWORD> hooks <OPERATOR>&amp;&amp;</OPERATOR> (ret <OPERATOR>=</OPERATOR> <OBJ>hooks</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>( elem<OPERATOR>,</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> extra )) <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>

		<COMMENT>// Otherwise, if a way to get the computed value exists, use that</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( curCSS ) {
			<KEYWORD>return</KEYWORD> curCSS( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> origName )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// A method for quickly swapping in/out CSS properties to get correct calculations</COMMENT>
	swap<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> options<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>var</KEYWORD> old <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>

		<COMMENT>// Remember the old values, and insert the new ones</COMMENT>
		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> name <KEYWORD>in</KEYWORD> options ) {
			old[ name ] <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[ name ]<OPERATOR>;</OPERATOR>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[ name ] <OPERATOR>=</OPERATOR> options[ name ]<OPERATOR>;</OPERATOR>
		}

		<OBJ>callback</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( elem )<OPERATOR>;</OPERATOR>

		<COMMENT>// Revert the old values</COMMENT>
		<KEYWORD>for</KEYWORD> ( name <KEYWORD>in</KEYWORD> options ) {
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[ name ] <OPERATOR>=</OPERATOR> old[ name ]<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	camelCase<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( string ) {
		<KEYWORD>return</KEYWORD> <OBJ>string</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( rdashAlpha<OPERATOR>,</OPERATOR> fcamelCase )<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<COMMENT>// DEPRECATED, Use jQuery.css() instead</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>curCSS</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO><OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>([<STRING>"height"</STRING><OPERATOR>,</OPERATOR> <STRING>"width"</STRING>]<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> name ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssHooks</OO>[ name ] <OPERATOR>=</OPERATOR> {
		get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> computed<OPERATOR>,</OPERATOR> extra ) {
			<KEYWORD>var</KEYWORD> val<OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( computed ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>0</NUMERIC> ) {
					val <OPERATOR>=</OPERATOR> getWH( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> extra )<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>swap</OO>( elem<OPERATOR>,</OPERATOR> cssShow<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
						val <OPERATOR>=</OPERATOR> getWH( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> extra )<OPERATOR>;</OPERATOR>
					})<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( val <OPERATOR>&lt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
					val <OPERATOR>=</OPERATOR> curCSS( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> name )<OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( val <OPERATOR>===</OPERATOR> <STRING>"0px"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> currentStyle ) {
						val <OPERATOR>=</OPERATOR> currentStyle( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> name )<OPERATOR>;</OPERATOR>
					}

					<KEYWORD>if</KEYWORD> ( val <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
						<COMMENT>// Should return "auto" instead of 0, use 0 for</COMMENT>
						<COMMENT>// temporary backwards-compat</COMMENT>
						<KEYWORD>return</KEYWORD> val <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>||</OPERATOR> val <OPERATOR>===</OPERATOR> <STRING>"auto"</STRING> <OPERATOR>?</OPERATOR> <STRING>"0px"</STRING> <OPERATOR>:</OPERATOR> val<OPERATOR>;</OPERATOR>
					}
				}

				<KEYWORD>if</KEYWORD> ( val <OPERATOR>&lt;</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>||</OPERATOR> val <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> ) {
					val <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[ name ]<OPERATOR>;</OPERATOR>

					<COMMENT>// Should return "auto" instead of 0, use 0 for</COMMENT>
					<COMMENT>// temporary backwards-compat</COMMENT>
					<KEYWORD>return</KEYWORD> val <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>||</OPERATOR> val <OPERATOR>===</OPERATOR> <STRING>"auto"</STRING> <OPERATOR>?</OPERATOR> <STRING>"0px"</STRING> <OPERATOR>:</OPERATOR> val<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>return</KEYWORD> <KEYWORD>typeof</KEYWORD> val <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>?</OPERATOR> val <OPERATOR>:</OPERATOR> val <OPERATOR>+</OPERATOR> <STRING>"px"</STRING><OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>,</OPERATOR>

		set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> value ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>rnumpx</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( value ) ) {
				<COMMENT>// ignore negative width and height values #1599</COMMENT>
				value <OPERATOR>=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>(value)<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( value <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
					<KEYWORD>return</KEYWORD> value <OPERATOR>+</OPERATOR> <STRING>"px"</STRING><OPERATOR>;</OPERATOR>
				}

			} <KEYWORD>else</KEYWORD> {
				<KEYWORD>return</KEYWORD> value<OPERATOR>;</OPERATOR>
			}
		}
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>cssHooks</OO><OPERATOR>.</OPERATOR><OO>opacity</OO> <OPERATOR>=</OPERATOR> {
		get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> computed ) {
			<COMMENT>// IE uses filters for opacity</COMMENT>
			<KEYWORD>return</KEYWORD> <OBJ>ropacity</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>((computed <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO> <OPERATOR>?</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>filter</OO>) <OPERATOR>||</OPERATOR> <STRING>""</STRING>) <OPERATOR>?</OPERATOR>
				(<FUNCTION>parseFloat</FUNCTION>(<OBJ>RegExp</OBJ><OPERATOR>.</OPERATOR><OO>$1</OO>) <OPERATOR>/</OPERATOR> <NUMERIC>100</NUMERIC>) <OPERATOR>+</OPERATOR> <STRING>""</STRING> <OPERATOR>:</OPERATOR>
				computed <OPERATOR>?</OPERATOR> <STRING>"1"</STRING> <OPERATOR>:</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		set<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> value ) {
			<KEYWORD>var</KEYWORD> style <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// IE has trouble with opacity if it does not have layout</COMMENT>
			<COMMENT>// Force it by setting the zoom level</COMMENT>
			<OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>zoom</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

			<COMMENT>// Set the alpha filter to set the opacity</COMMENT>
			<KEYWORD>var</KEYWORD> opacity <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isNaN</OO>(value) <OPERATOR>?</OPERATOR>
				<STRING>""</STRING> <OPERATOR>:</OPERATOR>
				<STRING>"alpha(opacity="</STRING> <OPERATOR>+</OPERATOR> value <OPERATOR>*</OPERATOR> <NUMERIC>100</NUMERIC> <OPERATOR>+</OPERATOR> <STRING>")"</STRING><OPERATOR>,</OPERATOR>
				filter <OPERATOR>=</OPERATOR> <OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>||</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>

			<OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>=</OPERATOR> <OBJ>ralpha</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(filter) <OPERATOR>?</OPERATOR>
				<OBJ>filter</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>(ralpha<OPERATOR>,</OPERATOR> opacity) <OPERATOR>:</OPERATOR>
				<OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO> <OPERATOR>+</OPERATOR> <STRING>' '</STRING> <OPERATOR>+</OPERATOR> opacity<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>
}

<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>defaultView</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>defaultView</OO><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO> ) {
	getComputedStyle <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> newName<OPERATOR>,</OPERATOR> name ) {
		<KEYWORD>var</KEYWORD> ret<OPERATOR>,</OPERATOR> defaultView<OPERATOR>,</OPERATOR> computedStyle<OPERATOR>;</OPERATOR>

		name <OPERATOR>=</OPERATOR> <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>replace</OO>( rupper<OPERATOR>,</OPERATOR> <STRING>"-$1"</STRING> )<OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>(defaultView <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>defaultView</OO>) ) {
			<KEYWORD>return</KEYWORD> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( (computedStyle <OPERATOR>=</OPERATOR> <OBJ>defaultView</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>( elem<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD> )) ) {
			ret <OPERATOR>=</OPERATOR> <OBJ>computedStyle</OBJ><OPERATOR>.</OPERATOR><OO>getPropertyValue</OO>( name )<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( ret <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR> elem ) ) {
				ret <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( elem<OPERATOR>,</OPERATOR> name )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<KEYWORD>if</KEYWORD> ( <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>currentStyle</OO> ) {
	currentStyle <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> name ) {
		<KEYWORD>var</KEYWORD> left<OPERATOR>,</OPERATOR> rsLeft<OPERATOR>,</OPERATOR>
			ret <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO>[ name ]<OPERATOR>,</OPERATOR>
			style <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>;</OPERATOR>

		<COMMENT>// From the awesome hack by Dean Edwards</COMMENT>
		<COMMENT>// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291</COMMENT>

		<COMMENT>// If we're not dealing with a regular pixel number</COMMENT>
		<COMMENT>// but a number that has a weird ending, we need to convert it to pixels</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>rnumpx</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( ret ) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rnum</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( ret ) ) {
			<COMMENT>// Remember the original values</COMMENT>
			left <OPERATOR>=</OPERATOR> <OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>left</OO><OPERATOR>;</OPERATOR>
			rsLeft <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>runtimeStyle</OO><OPERATOR>.</OPERATOR><OO>left</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// Put in the new values to get a computed value out</COMMENT>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>runtimeStyle</OO><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO><OPERATOR>.</OPERATOR><OO>left</OO><OPERATOR>;</OPERATOR>
			<OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>=</OPERATOR> name <OPERATOR>===</OPERATOR> <STRING>"fontSize"</STRING> <OPERATOR>?</OPERATOR> <STRING>"1em"</STRING> <OPERATOR>:</OPERATOR> (ret <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
			ret <OPERATOR>=</OPERATOR> <OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>pixelLeft</OO> <OPERATOR>+</OPERATOR> <STRING>"px"</STRING><OPERATOR>;</OPERATOR>

			<COMMENT>// Revert the changed values</COMMENT>
			<OBJ>style</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>=</OPERATOR> left<OPERATOR>;</OPERATOR>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>runtimeStyle</OO><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>=</OPERATOR> rsLeft<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> ret <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>?</OPERATOR> <STRING>"auto"</STRING> <OPERATOR>:</OPERATOR> ret<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

curCSS <OPERATOR>=</OPERATOR> getComputedStyle <OPERATOR>||</OPERATOR> currentStyle<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> getWH( elem<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> extra ) {
	<KEYWORD>var</KEYWORD> which <OPERATOR>=</OPERATOR> name <OPERATOR>===</OPERATOR> <STRING>"width"</STRING> <OPERATOR>?</OPERATOR> cssWidth <OPERATOR>:</OPERATOR> cssHeight<OPERATOR>,</OPERATOR>
		val <OPERATOR>=</OPERATOR> name <OPERATOR>===</OPERATOR> <STRING>"width"</STRING> <OPERATOR>?</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO> <OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetHeight</OO><OPERATOR>;</OPERATOR>

	<KEYWORD>if</KEYWORD> ( extra <OPERATOR>===</OPERATOR> <STRING>"border"</STRING> ) {
		<KEYWORD>return</KEYWORD> val<OPERATOR>;</OPERATOR>
	}

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( which<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>extra ) {
			val <OPERATOR>-=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"padding"</STRING> <OPERATOR>+</OPERATOR> <KEYWORD>this</KEYWORD> )) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( extra <OPERATOR>===</OPERATOR> <STRING>"margin"</STRING> ) {
			val <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"margin"</STRING> <OPERATOR>+</OPERATOR> <KEYWORD>this</KEYWORD> )) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			val <OPERATOR>-=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"border"</STRING> <OPERATOR>+</OPERATOR> <KEYWORD>this</KEYWORD> <OPERATOR>+</OPERATOR> <STRING>"Width"</STRING> )) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}
	})<OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> val<OPERATOR>;</OPERATOR>
}

<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>.</OPERATOR><OO>hidden</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>var</KEYWORD> width <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetWidth</OO><OPERATOR>,</OPERATOR>
			height <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetHeight</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> (width <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> height <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC>) <OPERATOR>||</OPERATOR> (<OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>reliableHiddenOffsets</OO> <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"display"</STRING> )) <OPERATOR>===</OPERATOR> <STRING>"none"</STRING>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>.</OPERATOR><OO>visible</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>.</OPERATOR><OO>hidden</OO>( elem )<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}




<KEYWORD>var</KEYWORD> jsc <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>,</OPERATOR>
	rscript <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>&lt;script<ESC>\b</ESC><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&lt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?!</REGEX_SUBPATTERN>&lt;<ESC>\/</ESC>script&gt;<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>&lt;<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&lt;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR>&lt;<ESC>\/</ESC>script&gt;<DELIMITER>/</DELIMITER><KEYWORD>gi</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rselectTextarea <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>select<REGEX_OPERATOR>|</REGEX_OPERATOR>textarea<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rinput <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>color<REGEX_OPERATOR>|</REGEX_OPERATOR>date<REGEX_OPERATOR>|</REGEX_OPERATOR>datetime<REGEX_OPERATOR>|</REGEX_OPERATOR>email<REGEX_OPERATOR>|</REGEX_OPERATOR>hidden<REGEX_OPERATOR>|</REGEX_OPERATOR>month<REGEX_OPERATOR>|</REGEX_OPERATOR>number<REGEX_OPERATOR>|</REGEX_OPERATOR>password<REGEX_OPERATOR>|</REGEX_OPERATOR>range<REGEX_OPERATOR>|</REGEX_OPERATOR>search<REGEX_OPERATOR>|</REGEX_OPERATOR>tel<REGEX_OPERATOR>|</REGEX_OPERATOR>text<REGEX_OPERATOR>|</REGEX_OPERATOR>time<REGEX_OPERATOR>|</REGEX_OPERATOR>url<REGEX_OPERATOR>|</REGEX_OPERATOR>week<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rnoContent <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>GET<REGEX_OPERATOR>|</REGEX_OPERATOR>HEAD<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rbracket <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\[</ESC><ESC>\]</ESC>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	jsre <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\=</ESC><ESC>\?</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER>&amp;<REGEX_OPERATOR>|</REGEX_OPERATOR>$<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rquery <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><ESC>\?</ESC><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rts <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR>&amp;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>_=<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^&amp;<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>*</REGEX_OPERATOR><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rurl <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><ESC>\w</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR>:<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><ESC>\/</ESC><ESC>\/</ESC><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>^<ESC>\/</ESC><REGEX_OPERATOR>?</REGEX_OPERATOR>#<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	r20 <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>%20<DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rhash <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>#<REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>

	<COMMENT>// Keep a copy of the old load method</COMMENT>
	_load <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>load</OO><OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	load<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( url<OPERATOR>,</OPERATOR> params<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> url <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> _load ) {
			<KEYWORD>return</KEYWORD> <OBJ>_load</OBJ><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>

		<COMMENT>// Don't do a request if no elements are being requested</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> off <OPERATOR>=</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>" "</STRING>)<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> ( off <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
			<KEYWORD>var</KEYWORD> selector <OPERATOR>=</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(off<OPERATOR>,</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>length</OO>)<OPERATOR>;</OPERATOR>
			url <OPERATOR>=</OPERATOR> <OBJ>url</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> off)<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Default to a GET request</COMMENT>
		<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <STRING>"GET"</STRING><OPERATOR>;</OPERATOR>

		<COMMENT>// If the second parameter was provided</COMMENT>
		<KEYWORD>if</KEYWORD> ( params ) {
			<COMMENT>// If it's a function</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( params ) ) {
				<COMMENT>// We assume that it's the callback</COMMENT>
				callback <OPERATOR>=</OPERATOR> params<OPERATOR>;</OPERATOR>
				params <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>

			<COMMENT>// Otherwise, build a param string</COMMENT>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> params <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> ) {
				params <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>param</OO>( params<OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajaxSettings</OO><OPERATOR>.</OPERATOR><OO>traditional</OO> )<OPERATOR>;</OPERATOR>
				type <OPERATOR>=</OPERATOR> <STRING>"POST"</STRING><OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// Request the remote document</COMMENT>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajax</OO>({
			url<OPERATOR>:</OPERATOR> url<OPERATOR>,</OPERATOR>
			type<OPERATOR>:</OPERATOR> type<OPERATOR>,</OPERATOR>
			dataType<OPERATOR>:</OPERATOR> <STRING>"html"</STRING><OPERATOR>,</OPERATOR>
			data<OPERATOR>:</OPERATOR> params<OPERATOR>,</OPERATOR>
			complete<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( res<OPERATOR>,</OPERATOR> status ) {
				<COMMENT>// If successful, inject the HTML into all the matched elements</COMMENT>
				<KEYWORD>if</KEYWORD> ( status <OPERATOR>===</OPERATOR> <STRING>"success"</STRING> <OPERATOR>||</OPERATOR> status <OPERATOR>===</OPERATOR> <STRING>"notmodified"</STRING> ) {
					<COMMENT>// See if a selector was specified</COMMENT>
					<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>html</OO>( selector <OPERATOR>?</OPERATOR>
						<COMMENT>// Create a dummy div to hold the results</COMMENT>
						<FUNCTION>jQuery</FUNCTION>(<STRING>"&lt;div&gt;"</STRING>)
							<COMMENT>// inject the contents of the document in, removing the scripts</COMMENT>
							<COMMENT>// to avoid any 'Permission Denied' errors in IE</COMMENT>
							<OPERATOR>.</OPERATOR><OO>append</OO>(<OBJ>res</OBJ><OPERATOR>.</OPERATOR><OO>responseText</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(rscript<OPERATOR>,</OPERATOR> <STRING>""</STRING>))

							<COMMENT>// Locate the specified elements</COMMENT>
							<OPERATOR>.</OPERATOR><OO>find</OO>(selector) <OPERATOR>:</OPERATOR>

						<COMMENT>// If not, just inject the full result</COMMENT>
						<OBJ>res</OBJ><OPERATOR>.</OPERATOR><OO>responseText</OO> )<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( callback ) {
					<OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( callback<OPERATOR>,</OPERATOR> [<OBJ>res</OBJ><OPERATOR>.</OPERATOR><OO>responseText</OO><OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> res] )<OPERATOR>;</OPERATOR>
				}
			}
		})<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	serialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>param</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>serializeArray</OO>())<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	serializeArray<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elements</OO> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>makeArray</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elements</OO>) <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		})
		<OPERATOR>.</OPERATOR><OO>filter</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>name</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>disabled</OO> <OPERATOR>&amp;&amp;</OPERATOR>
				(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>checked</OO> <OPERATOR>||</OPERATOR> <OBJ>rselectTextarea</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>) <OPERATOR>||</OPERATOR>
					<OBJ>rinput</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>type</OO>))<OPERATOR>;</OPERATOR>
		})
		<OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> elem ) {
			<KEYWORD>var</KEYWORD> val <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>val</OO>()<OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> val <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR>
				<KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(val) <OPERATOR>?</OPERATOR>
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>( val<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( val<OPERATOR>,</OPERATOR> i ) {
						<KEYWORD>return</KEYWORD> { name<OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>,</OPERATOR> value<OPERATOR>:</OPERATOR> val }<OPERATOR>;</OPERATOR>
					}) <OPERATOR>:</OPERATOR>
					{ name<OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>,</OPERATOR> value<OPERATOR>:</OPERATOR> val }<OPERATOR>;</OPERATOR>
		})<OPERATOR>.</OPERATOR><OO>get</OO>()<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<COMMENT>// Attach a bunch of functions for handling common AJAX events</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( <STRING>"ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend"</STRING><OPERATOR>.</OPERATOR><OO>split</OO>(<STRING>" "</STRING>)<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> o ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[o] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( f ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>bind</OO>(o<OPERATOR>,</OPERATOR> f)<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	get<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( url<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> type ) {
		<COMMENT>// shift arguments if data argument was omited</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( data ) ) {
			type <OPERATOR>=</OPERATOR> type <OPERATOR>||</OPERATOR> callback<OPERATOR>;</OPERATOR>
			callback <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajax</OO>({
			type<OPERATOR>:</OPERATOR> <STRING>"GET"</STRING><OPERATOR>,</OPERATOR>
			url<OPERATOR>:</OPERATOR> url<OPERATOR>,</OPERATOR>
			data<OPERATOR>:</OPERATOR> data<OPERATOR>,</OPERATOR>
			success<OPERATOR>:</OPERATOR> callback<OPERATOR>,</OPERATOR>
			dataType<OPERATOR>:</OPERATOR> type
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	getScript<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( url<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(url<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> <STRING>"script"</STRING>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	getJSON<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( url<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>get</OO>(url<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> <STRING>"json"</STRING>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	post<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( url<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> callback<OPERATOR>,</OPERATOR> type ) {
		<COMMENT>// shift arguments if data argument was omited</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( data ) ) {
			type <OPERATOR>=</OPERATOR> type <OPERATOR>||</OPERATOR> callback<OPERATOR>;</OPERATOR>
			callback <OPERATOR>=</OPERATOR> data<OPERATOR>;</OPERATOR>
			data <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajax</OO>({
			type<OPERATOR>:</OPERATOR> <STRING>"POST"</STRING><OPERATOR>,</OPERATOR>
			url<OPERATOR>:</OPERATOR> url<OPERATOR>,</OPERATOR>
			data<OPERATOR>:</OPERATOR> data<OPERATOR>,</OPERATOR>
			success<OPERATOR>:</OPERATOR> callback<OPERATOR>,</OPERATOR>
			dataType<OPERATOR>:</OPERATOR> type
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	ajaxSetup<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( settings ) {
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajaxSettings</OO><OPERATOR>,</OPERATOR> settings )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	ajaxSettings<OPERATOR>:</OPERATOR> {
		url<OPERATOR>:</OPERATOR> <OBJ>location</OBJ><OPERATOR>.</OPERATOR><OO>href</OO><OPERATOR>,</OPERATOR>
		global<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		type<OPERATOR>:</OPERATOR> <STRING>"GET"</STRING><OPERATOR>,</OPERATOR>
		contentType<OPERATOR>:</OPERATOR> <STRING>"application/x-www-form-urlencoded"</STRING><OPERATOR>,</OPERATOR>
		processData<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		async<OPERATOR>:</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR>
		<COMMENT>/*</COMMENT>
<COMMENT>		timeout: 0,</COMMENT>
<COMMENT>		data: null,</COMMENT>
<COMMENT>		username: null,</COMMENT>
<COMMENT>		password: null,</COMMENT>
<COMMENT>		traditional: false,</COMMENT>
<COMMENT>		*/</COMMENT>
		<COMMENT>// This function can be overriden by calling jQuery.ajaxSetup</COMMENT>
		xhr<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
			<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>XMLHttpRequest</OO>()<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		accepts<OPERATOR>:</OPERATOR> {
			xml<OPERATOR>:</OPERATOR> <STRING>"application/xml, text/xml"</STRING><OPERATOR>,</OPERATOR>
			html<OPERATOR>:</OPERATOR> <STRING>"text/html"</STRING><OPERATOR>,</OPERATOR>
			script<OPERATOR>:</OPERATOR> <STRING>"text/javascript, application/javascript"</STRING><OPERATOR>,</OPERATOR>
			json<OPERATOR>:</OPERATOR> <STRING>"application/json, text/javascript"</STRING><OPERATOR>,</OPERATOR>
			text<OPERATOR>:</OPERATOR> <STRING>"text/plain"</STRING><OPERATOR>,</OPERATOR>
			_default<OPERATOR>:</OPERATOR> <STRING>"*/*"</STRING>
		}
	}<OPERATOR>,</OPERATOR>

	ajax<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( origSettings ) {
		<KEYWORD>var</KEYWORD> s <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>(<KEYWORD>true</KEYWORD><OPERATOR>,</OPERATOR> {}<OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajaxSettings</OO><OPERATOR>,</OPERATOR> origSettings)<OPERATOR>,</OPERATOR>
			jsonp<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> type <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>type</OO><OPERATOR>.</OPERATOR><OO>toUpperCase</OO>()<OPERATOR>,</OPERATOR> noContent <OPERATOR>=</OPERATOR> <OBJ>rnoContent</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(type)<OPERATOR>;</OPERATOR>

		<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>.</OPERATOR><OO>replace</OO>( rhash<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>

		<COMMENT>// Use original (not extended) context object if it was provided</COMMENT>
		<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>=</OPERATOR> origSettings <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>origSettings</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <OBJ>origSettings</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>:</OPERATOR> s<OPERATOR>;</OPERATOR>

		<COMMENT>// convert data if not already a string</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>processData</OO> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>!==</OPERATOR> <STRING>"string"</STRING> ) {
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>param</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>traditional</OO> )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Handle JSONP Parameter Callbacks</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>===</OPERATOR> <STRING>"jsonp"</STRING> ) {
			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"GET"</STRING> ) {
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jsre</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> ) ) {
					<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> <OPERATOR>+=</OPERATOR> (<OBJ>rquery</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> ) <OPERATOR>?</OPERATOR> <STRING>"&amp;"</STRING> <OPERATOR>:</OPERATOR> <STRING>"?"</STRING>) <OPERATOR>+</OPERATOR> (<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>jsonp</OO> <OPERATOR>||</OPERATOR> <STRING>"callback"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"=?"</STRING><OPERATOR>;</OPERATOR>
				}
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jsre</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>) ) {
				<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>?</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>+</OPERATOR> <STRING>"&amp;"</STRING> <OPERATOR>:</OPERATOR> <STRING>""</STRING>) <OPERATOR>+</OPERATOR> (<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>jsonp</OO> <OPERATOR>||</OPERATOR> <STRING>"callback"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"=?"</STRING><OPERATOR>;</OPERATOR>
			}
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>=</OPERATOR> <STRING>"json"</STRING><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Build temporary JSONP function</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>===</OPERATOR> <STRING>"json"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jsre</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>) <OPERATOR>||</OPERATOR> <OBJ>jsre</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>)) ) {
			jsonp <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>jsonpCallback</OO> <OPERATOR>||</OPERATOR> (<STRING>"jsonp"</STRING> <OPERATOR>+</OPERATOR> jsc<OPERATOR>++</OPERATOR>)<OPERATOR>;</OPERATOR>

			<COMMENT>// Replace the =? sequence both in the query string and the data</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> ) {
				<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>=</OPERATOR> (<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>+</OPERATOR> <STRING>""</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(jsre<OPERATOR>,</OPERATOR> <STRING>"="</STRING> <OPERATOR>+</OPERATOR> jsonp <OPERATOR>+</OPERATOR> <STRING>"$1"</STRING>)<OPERATOR>;</OPERATOR>
			}

			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(jsre<OPERATOR>,</OPERATOR> <STRING>"="</STRING> <OPERATOR>+</OPERATOR> jsonp <OPERATOR>+</OPERATOR> <STRING>"$1"</STRING>)<OPERATOR>;</OPERATOR>

			<COMMENT>// We need to make sure</COMMENT>
			<COMMENT>// that a JSONP style response is executed properly</COMMENT>
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>=</OPERATOR> <STRING>"script"</STRING><OPERATOR>;</OPERATOR>

			<COMMENT>// Handle JSONP-style loading</COMMENT>
			<KEYWORD>var</KEYWORD> customJsonp <OPERATOR>=</OPERATOR> <TYPE>window</TYPE>[ jsonp ]<OPERATOR>;</OPERATOR>

			<TYPE>window</TYPE>[ jsonp ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( tmp ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( customJsonp ) ) {
					customJsonp( tmp )<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					<COMMENT>// Garbage collect</COMMENT>
					<TYPE>window</TYPE>[ jsonp ] <OPERATOR>=</OPERATOR> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>

					<KEYWORD>try</KEYWORD> {
						<KEYWORD>delete</KEYWORD> <TYPE>window</TYPE>[ jsonp ]<OPERATOR>;</OPERATOR>
					} <KEYWORD>catch</KEYWORD>( jsonpError ) {}
				}

				data <OPERATOR>=</OPERATOR> tmp<OPERATOR>;</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleSuccess</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleComplete</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
				
				<KEYWORD>if</KEYWORD> ( head ) {
					<OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( script )<OPERATOR>;</OPERATOR>
				}
			}<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>===</OPERATOR> <STRING>"script"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO> <OPERATOR>===</OPERATOR> <KEYWORD>null</KEYWORD> ) {
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>cache</OO> <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> noContent ) {
			<KEYWORD>var</KEYWORD> ts <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>;</OPERATOR>

			<COMMENT>// try replacing _= if it is there</COMMENT>
			<KEYWORD>var</KEYWORD> ret <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>.</OPERATOR><OO>replace</OO>(rts<OPERATOR>,</OPERATOR> <STRING>"$1_="</STRING> <OPERATOR>+</OPERATOR> ts)<OPERATOR>;</OPERATOR>

			<COMMENT>// if nothing was replaced, add timestamp to the end</COMMENT>
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> <OPERATOR>=</OPERATOR> ret <OPERATOR>+</OPERATOR> ((ret <OPERATOR>===</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>) <OPERATOR>?</OPERATOR> (<OBJ>rquery</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>) <OPERATOR>?</OPERATOR> <STRING>"&amp;"</STRING> <OPERATOR>:</OPERATOR> <STRING>"?"</STRING>) <OPERATOR>+</OPERATOR> <STRING>"_="</STRING> <OPERATOR>+</OPERATOR> ts <OPERATOR>:</OPERATOR> <STRING>""</STRING>)<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// If data is available, append data to url for GET/HEAD requests</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>&amp;&amp;</OPERATOR> noContent ) {
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> <OPERATOR>+=</OPERATOR> (<OBJ>rquery</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>) <OPERATOR>?</OPERATOR> <STRING>"&amp;"</STRING> <OPERATOR>:</OPERATOR> <STRING>"?"</STRING>) <OPERATOR>+</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Watch for a new set of requests</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>active</OO><OPERATOR>++</OPERATOR> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( <STRING>"ajaxStart"</STRING> )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Matches an absolute URL, and saves the domain</COMMENT>
		<KEYWORD>var</KEYWORD> parts <OPERATOR>=</OPERATOR> <OBJ>rurl</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> )<OPERATOR>,</OPERATOR>
			remote <OPERATOR>=</OPERATOR> parts <OPERATOR>&amp;&amp;</OPERATOR> (parts[<NUMERIC>1</NUMERIC>] <OPERATOR>&amp;&amp;</OPERATOR> parts[<NUMERIC>1</NUMERIC>]<OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>!==</OPERATOR> <OBJ>location</OBJ><OPERATOR>.</OPERATOR><OO>protocol</OO> <OPERATOR>||</OPERATOR> parts[<NUMERIC>2</NUMERIC>]<OPERATOR>.</OPERATOR><OO>toLowerCase</OO>() <OPERATOR>!==</OPERATOR> <OBJ>location</OBJ><OPERATOR>.</OPERATOR><OO>host</OO>)<OPERATOR>;</OPERATOR>

		<COMMENT>// If we're requesting a remote document</COMMENT>
		<COMMENT>// and trying to load JSON or Script with a GET</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>===</OPERATOR> <STRING>"script"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"GET"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> remote ) {
			<KEYWORD>var</KEYWORD> head <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>getElementsByTagName</OO>(<STRING>"head"</STRING>)[<NUMERIC>0</NUMERIC>] <OPERATOR>||</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> script <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"script"</STRING>)<OPERATOR>;</OPERATOR>
			<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>scriptCharset</OO> ) {
				<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>charset</OO> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>scriptCharset</OO><OPERATOR>;</OPERATOR>
			}
			<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>src</OO> <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// Handle Script loading</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>jsonp ) {
				<KEYWORD>var</KEYWORD> done <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

				<COMMENT>// Attach handlers for all browsers</COMMENT>
				<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>onload</OO> <OPERATOR>=</OPERATOR> <OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>done <OPERATOR>&amp;&amp;</OPERATOR> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>||</OPERATOR>
							<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>===</OPERATOR> <STRING>"loaded"</STRING> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>===</OPERATOR> <STRING>"complete"</STRING>) ) {
						done <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleSuccess</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleComplete</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>

						<COMMENT>// Handle memory leak in IE</COMMENT>
						<OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>onload</OO> <OPERATOR>=</OPERATOR> <OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
						<KEYWORD>if</KEYWORD> ( head <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>script</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO> ) {
							<OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( script )<OPERATOR>;</OPERATOR>
						}
					}
				}<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Use insertBefore instead of appendChild  to circumvent an IE6 bug.</COMMENT>
			<COMMENT>// This arises when a base node is used (#2709 and #4378).</COMMENT>
			<OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( script<OPERATOR>,</OPERATOR> <OBJ>head</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>

			<COMMENT>// We handle everything using the script element injection</COMMENT>
			<KEYWORD>return</KEYWORD> <TYPE>undefined</TYPE><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> requestDone <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// Create the request object</COMMENT>
		<KEYWORD>var</KEYWORD> xhr <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>xhr</OO>()<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>xhr ) {
			<KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Open the socket</COMMENT>
		<COMMENT>// Passing null username, generates a login popup on Opera (#2865)</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>username</OO> ) {
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>open</OO>(type<OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>async</OO><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>username</OO><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>password</OO>)<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> {
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>open</OO>(type<OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>async</OO>)<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Need an extra try/catch for cross domain requests in Firefox 3</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<COMMENT>// Set content-type if data specified and content-body is valid for this type</COMMENT>
			<KEYWORD>if</KEYWORD> ( (<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>noContent) <OPERATOR>||</OPERATOR> (origSettings <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>origSettings</OBJ><OPERATOR>.</OPERATOR><OO>contentType</OO>) ) {
				<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>setRequestHeader</OO>(<STRING>"Content-Type"</STRING><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>contentType</OO>)<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>ifModified</OO> ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>lastModified</OO>[<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>] ) {
					<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>setRequestHeader</OO>(<STRING>"If-Modified-Since"</STRING><OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>lastModified</OO>[<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>])<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>etag</OO>[<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>] ) {
					<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>setRequestHeader</OO>(<STRING>"If-None-Match"</STRING><OPERATOR>,</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>etag</OO>[<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO>])<OPERATOR>;</OPERATOR>
				}
			}

			<COMMENT>// Set header so the called script knows that it's an XMLHttpRequest</COMMENT>
			<COMMENT>// Only send the header if it's not a remote XHR</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>remote ) {
				<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>setRequestHeader</OO>(<STRING>"X-Requested-With"</STRING><OPERATOR>,</OPERATOR> <STRING>"XMLHttpRequest"</STRING>)<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// Set the Accepts header for the server, depending on the dataType</COMMENT>
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>setRequestHeader</OO>(<STRING>"Accept"</STRING><OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>accepts</OO>[ <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> ] <OPERATOR>?</OPERATOR>
				<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>accepts</OO>[ <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO> ] <OPERATOR>+</OPERATOR> <STRING>", */*; q=0.01"</STRING> <OPERATOR>:</OPERATOR>
				<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>accepts</OO><OPERATOR>.</OPERATOR><OO>_default</OO> )<OPERATOR>;</OPERATOR>
		} <KEYWORD>catch</KEYWORD>( headerError ) {}

		<COMMENT>// Allow custom headers/mimetypes and early abort</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>beforeSend</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>beforeSend</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> s) <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> ) {
			<COMMENT>// Handle the global AJAX counter</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>active</OO><OPERATOR>--</OPERATOR> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( <STRING>"ajaxStop"</STRING> )<OPERATOR>;</OPERATOR>
			}

			<COMMENT>// close opended socket</COMMENT>
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>abort</OO>()<OPERATOR>;</OPERATOR>
			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>triggerGlobal</OO>( s<OPERATOR>,</OPERATOR> <STRING>"ajaxSend"</STRING><OPERATOR>,</OPERATOR> [xhr<OPERATOR>,</OPERATOR> s] )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Wait for a response to come back</COMMENT>
		<KEYWORD>var</KEYWORD> onreadystatechange <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( isTimeout ) {
			<COMMENT>// The request was aborted</COMMENT>
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>xhr <OPERATOR>||</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>||</OPERATOR> isTimeout <OPERATOR>===</OPERATOR> <STRING>"abort"</STRING> ) {
				<COMMENT>// Opera doesn't call onreadystatechange before this point</COMMENT>
				<COMMENT>// so we simulate the call</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>requestDone ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleComplete</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
				}

				requestDone <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
				<KEYWORD>if</KEYWORD> ( xhr ) {
					<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noop</OO><OPERATOR>;</OPERATOR>
				}

			<COMMENT>// The transfer is complete and the data is available, or the request timed out</COMMENT>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>requestDone <OPERATOR>&amp;&amp;</OPERATOR> xhr <OPERATOR>&amp;&amp;</OPERATOR> (<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>readyState</OO> <OPERATOR>===</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>||</OPERATOR> isTimeout <OPERATOR>===</OPERATOR> <STRING>"timeout"</STRING>) ) {
				requestDone <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
				<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>onreadystatechange</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noop</OO><OPERATOR>;</OPERATOR>

				status <OPERATOR>=</OPERATOR> isTimeout <OPERATOR>===</OPERATOR> <STRING>"timeout"</STRING> <OPERATOR>?</OPERATOR>
					<STRING>"timeout"</STRING> <OPERATOR>:</OPERATOR>
					<OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>httpSuccess</OO>( xhr ) <OPERATOR>?</OPERATOR>
						<STRING>"error"</STRING> <OPERATOR>:</OPERATOR>
						<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>ifModified</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>httpNotModified</OO>( xhr<OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>url</OO> ) <OPERATOR>?</OPERATOR>
							<STRING>"notmodified"</STRING> <OPERATOR>:</OPERATOR>
							<STRING>"success"</STRING><OPERATOR>;</OPERATOR>

				<KEYWORD>var</KEYWORD> errMsg<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( status <OPERATOR>===</OPERATOR> <STRING>"success"</STRING> ) {
					<COMMENT>// Watch for, and catch, XML document parse errors</COMMENT>
					<KEYWORD>try</KEYWORD> {
						<COMMENT>// process the data (runs the xml through httpData regardless of callback)</COMMENT>
						data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>httpData</OO>( xhr<OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataType</OO><OPERATOR>,</OPERATOR> s )<OPERATOR>;</OPERATOR>
					} <KEYWORD>catch</KEYWORD>( parserError ) {
						status <OPERATOR>=</OPERATOR> <STRING>"parsererror"</STRING><OPERATOR>;</OPERATOR>
						errMsg <OPERATOR>=</OPERATOR> parserError<OPERATOR>;</OPERATOR>
					}
				}

				<COMMENT>// Make sure that the request was successful or notmodified</COMMENT>
				<KEYWORD>if</KEYWORD> ( status <OPERATOR>===</OPERATOR> <STRING>"success"</STRING> <OPERATOR>||</OPERATOR> status <OPERATOR>===</OPERATOR> <STRING>"notmodified"</STRING> ) {
					<COMMENT>// JSONP handles its own success callback</COMMENT>
					<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>jsonp ) {
						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleSuccess</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
					}
				} <KEYWORD>else</KEYWORD> {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleError</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> errMsg )<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Fire the complete handlers</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>jsonp ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleComplete</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( isTimeout <OPERATOR>===</OPERATOR> <STRING>"timeout"</STRING> ) {
					<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>abort</OO>()<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Stop memory leaks</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>async</OO> ) {
					xhr <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
				}
			}
		}<OPERATOR>;</OPERATOR>

		<COMMENT>// Override the abort handler, if we can (IE 6 doesn't allow it, but that's OK)</COMMENT>
		<COMMENT>// Opera doesn't fire onreadystatechange at all on abort</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<KEYWORD>var</KEYWORD> oldAbort <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>abort</OO><OPERATOR>;</OPERATOR>
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>abort</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
				<KEYWORD>if</KEYWORD> ( xhr ) {
					<COMMENT>// oldAbort has no call property in IE7 so</COMMENT>
					<COMMENT>// just do it this way, which works in all</COMMENT>
					<COMMENT>// browsers</COMMENT>
					<OBJ>Function</OBJ><OPERATOR>.</OPERATOR><OO>prototype</OO><OPERATOR>.</OPERATOR><OO>call</OO><OPERATOR>.</OPERATOR><OO>call</OO>( oldAbort<OPERATOR>,</OPERATOR> xhr )<OPERATOR>;</OPERATOR>
				}

				onreadystatechange( <STRING>"abort"</STRING> )<OPERATOR>;</OPERATOR>
			}<OPERATOR>;</OPERATOR>
		} <KEYWORD>catch</KEYWORD>( abortError ) {}

		<COMMENT>// Timeout checker</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>async</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>timeout</OO> <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> ) {
			<FUNCTION>setTimeout</FUNCTION>(<KEYWORD>function</KEYWORD>() {
				<COMMENT>// Check to see if the request is still happening</COMMENT>
				<KEYWORD>if</KEYWORD> ( xhr <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>requestDone ) {
					onreadystatechange( <STRING>"timeout"</STRING> )<OPERATOR>;</OPERATOR>
				}
			}<OPERATOR>,</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>timeout</OO>)<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Send the data</COMMENT>
		<KEYWORD>try</KEYWORD> {
			<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>send</OO>( noContent <OPERATOR>||</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>data</OO> )<OPERATOR>;</OPERATOR>

		} <KEYWORD>catch</KEYWORD>( sendError ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleError</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>,</OPERATOR> sendError )<OPERATOR>;</OPERATOR>

			<COMMENT>// Fire the complete handlers</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>handleComplete</OO>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// firefox 1.5 doesn't fire statechange for sync requests</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>async</OO> ) {
			onreadystatechange()<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// return XMLHttpRequest to allow aborting the request etc.</COMMENT>
		<KEYWORD>return</KEYWORD> xhr<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Serialize an array of form elements or a set of</COMMENT>
	<COMMENT>// key/values into a query string</COMMENT>
	param<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( a<OPERATOR>,</OPERATOR> traditional ) {
		<KEYWORD>var</KEYWORD> s <OPERATOR>=</OPERATOR> []<OPERATOR>,</OPERATOR>
			add <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( key<OPERATOR>,</OPERATOR> value ) {
				<COMMENT>// If value is a function, invoke it and return its value</COMMENT>
				value <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(value) <OPERATOR>?</OPERATOR> value() <OPERATOR>:</OPERATOR> value<OPERATOR>;</OPERATOR>
				s[ <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ] <OPERATOR>=</OPERATOR> <FUNCTION>encodeURIComponent</FUNCTION>(key) <OPERATOR>+</OPERATOR> <STRING>"="</STRING> <OPERATOR>+</OPERATOR> <FUNCTION>encodeURIComponent</FUNCTION>(value)<OPERATOR>;</OPERATOR>
			}<OPERATOR>;</OPERATOR>
		
		<COMMENT>// Set traditional to true for jQuery &lt;= 1.3.2 behavior.</COMMENT>
		<KEYWORD>if</KEYWORD> ( traditional <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			traditional <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajaxSettings</OO><OPERATOR>.</OPERATOR><OO>traditional</OO><OPERATOR>;</OPERATOR>
		}
		
		<COMMENT>// If an array was passed in, assume that it is an array of form elements.</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(a) <OPERATOR>||</OPERATOR> <OBJ>a</OBJ><OPERATOR>.</OPERATOR><OO>jquery</OO> ) {
			<COMMENT>// Serialize the form elements</COMMENT>
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( a<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
				add( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>name</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>value</OO> )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
			
		} <KEYWORD>else</KEYWORD> {
			<COMMENT>// If traditional, encode the "old" way (the way 1.3.2 or older</COMMENT>
			<COMMENT>// did it), otherwise encode params recursively.</COMMENT>
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> prefix <KEYWORD>in</KEYWORD> a ) {
				buildParams( prefix<OPERATOR>,</OPERATOR> a[prefix]<OPERATOR>,</OPERATOR> traditional<OPERATOR>,</OPERATOR> add )<OPERATOR>;</OPERATOR>
			}
		}

		<COMMENT>// Return the resulting serialization</COMMENT>
		<KEYWORD>return</KEYWORD> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>join</OO>(<STRING>"&amp;"</STRING>)<OPERATOR>.</OPERATOR><OO>replace</OO>(r20<OPERATOR>,</OPERATOR> <STRING>"+"</STRING>)<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> buildParams( prefix<OPERATOR>,</OPERATOR> obj<OPERATOR>,</OPERATOR> traditional<OPERATOR>,</OPERATOR> add ) {
	<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(obj) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>obj</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
		<COMMENT>// Serialize array item.</COMMENT>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( obj<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> v ) {
			<KEYWORD>if</KEYWORD> ( traditional <OPERATOR>||</OPERATOR> <OBJ>rbracket</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>( prefix ) ) {
				<COMMENT>// Treat each array item as a scalar.</COMMENT>
				add( prefix<OPERATOR>,</OPERATOR> v )<OPERATOR>;</OPERATOR>

			} <KEYWORD>else</KEYWORD> {
				<COMMENT>// If array item is non-scalar (array or object), encode its</COMMENT>
				<COMMENT>// numeric index to resolve deserialization ambiguity issues.</COMMENT>
				<COMMENT>// Note that rack (as of 1.0.0) can't currently deserialize</COMMENT>
				<COMMENT>// nested arrays properly, and attempting to do so may cause</COMMENT>
				<COMMENT>// a server error. Possible fixes are to modify rack's</COMMENT>
				<COMMENT>// deserialization algorithm or to provide an option or flag</COMMENT>
				<COMMENT>// to force array serialization to be shallow.</COMMENT>
				buildParams( prefix <OPERATOR>+</OPERATOR> <STRING>"["</STRING> <OPERATOR>+</OPERATOR> ( <KEYWORD>typeof</KEYWORD> v <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>(v) <OPERATOR>?</OPERATOR> i <OPERATOR>:</OPERATOR> <STRING>""</STRING> ) <OPERATOR>+</OPERATOR> <STRING>"]"</STRING><OPERATOR>,</OPERATOR> v<OPERATOR>,</OPERATOR> traditional<OPERATOR>,</OPERATOR> add )<OPERATOR>;</OPERATOR>
			}
		})<OPERATOR>;</OPERATOR>
			
	} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>traditional <OPERATOR>&amp;&amp;</OPERATOR> obj <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> obj <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> ) {
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isEmptyObject</OO>( obj ) ) {
			add( prefix<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>

		<COMMENT>// Serialize object item.</COMMENT>
		} <KEYWORD>else</KEYWORD> {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( obj<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( k<OPERATOR>,</OPERATOR> v ) {
				buildParams( prefix <OPERATOR>+</OPERATOR> <STRING>"["</STRING> <OPERATOR>+</OPERATOR> k <OPERATOR>+</OPERATOR> <STRING>"]"</STRING><OPERATOR>,</OPERATOR> v<OPERATOR>,</OPERATOR> traditional<OPERATOR>,</OPERATOR> add )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}
					
	} <KEYWORD>else</KEYWORD> {
		<COMMENT>// Serialize scalar item.</COMMENT>
		add( prefix<OPERATOR>,</OPERATOR> obj )<OPERATOR>;</OPERATOR>
	}
}

<COMMENT>// This is still on the jQuery object... for now</COMMENT>
<COMMENT>// Want to move this to jQuery.ajax some day</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({

	<COMMENT>// Counter for holding the number of active queries</COMMENT>
	active<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>

	<COMMENT>// Last-Modified header cache for next request</COMMENT>
	lastModified<OPERATOR>:</OPERATOR> {}<OPERATOR>,</OPERATOR>
	etag<OPERATOR>:</OPERATOR> {}<OPERATOR>,</OPERATOR>

	handleError<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> e ) {
		<COMMENT>// If a local callback was specified, fire it</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>error</OO> ) {
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>error</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> e )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Fire the global callback</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>triggerGlobal</OO>( s<OPERATOR>,</OPERATOR> <STRING>"ajaxError"</STRING><OPERATOR>,</OPERATOR> [xhr<OPERATOR>,</OPERATOR> s<OPERATOR>,</OPERATOR> e] )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	handleSuccess<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> data ) {
		<COMMENT>// If a local callback was specified, fire it and pass it the data</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>success</OO> ) {
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>success</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>,</OPERATOR> data<OPERATOR>,</OPERATOR> status<OPERATOR>,</OPERATOR> xhr )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Fire the global callback</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>triggerGlobal</OO>( s<OPERATOR>,</OPERATOR> <STRING>"ajaxSuccess"</STRING><OPERATOR>,</OPERATOR> [xhr<OPERATOR>,</OPERATOR> s] )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	handleComplete<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( s<OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status ) {
		<COMMENT>// Process result</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO> ) {
			<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>,</OPERATOR> xhr<OPERATOR>,</OPERATOR> status )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// The request was completed</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>triggerGlobal</OO>( s<OPERATOR>,</OPERATOR> <STRING>"ajaxComplete"</STRING><OPERATOR>,</OPERATOR> [xhr<OPERATOR>,</OPERATOR> s] )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Handle the global AJAX counter</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>global</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>active</OO><OPERATOR>--</OPERATOR> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO><OPERATOR>.</OPERATOR><OO>trigger</OO>( <STRING>"ajaxStop"</STRING> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>
		
	triggerGlobal<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( s<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> args ) {
		(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO><OPERATOR>.</OPERATOR><OO>url</OO> <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>context</OO>) <OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>event</OO>)<OPERATOR>.</OPERATOR><OO>trigger</OO>(type<OPERATOR>,</OPERATOR> args)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Determines if an XMLHttpRequest was successful or not</COMMENT>
	httpSuccess<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( xhr ) {
		<KEYWORD>try</KEYWORD> {
			<COMMENT>// IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450</COMMENT>
			<KEYWORD>return</KEYWORD> <OPERATOR>!</OPERATOR><OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>location</OBJ><OPERATOR>.</OPERATOR><OO>protocol</OO> <OPERATOR>===</OPERATOR> <STRING>"file:"</STRING> <OPERATOR>||</OPERATOR>
				<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>&gt;=</OPERATOR> <NUMERIC>200</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>&lt;</OPERATOR> <NUMERIC>300</NUMERIC> <OPERATOR>||</OPERATOR>
				<OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>===</OPERATOR> <NUMERIC>304</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1223</NUMERIC><OPERATOR>;</OPERATOR>
		} <KEYWORD>catch</KEYWORD>(e) {}

		<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Determines if an XMLHttpRequest returns NotModified</COMMENT>
	httpNotModified<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( xhr<OPERATOR>,</OPERATOR> url ) {
		<KEYWORD>var</KEYWORD> lastModified <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>getResponseHeader</OO>(<STRING>"Last-Modified"</STRING>)<OPERATOR>,</OPERATOR>
			etag <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>getResponseHeader</OO>(<STRING>"Etag"</STRING>)<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( lastModified ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>lastModified</OO>[url] <OPERATOR>=</OPERATOR> lastModified<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( etag ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>etag</OO>[url] <OPERATOR>=</OPERATOR> etag<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>status</OO> <OPERATOR>===</OPERATOR> <NUMERIC>304</NUMERIC><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	httpData<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( xhr<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> s ) {
		<KEYWORD>var</KEYWORD> ct <OPERATOR>=</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>getResponseHeader</OO>(<STRING>"content-type"</STRING>) <OPERATOR>||</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR>
			xml <OPERATOR>=</OPERATOR> type <OPERATOR>===</OPERATOR> <STRING>"xml"</STRING> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>type <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>ct</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"xml"</STRING>) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			data <OPERATOR>=</OPERATOR> xml <OPERATOR>?</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>responseXML</OO> <OPERATOR>:</OPERATOR> <OBJ>xhr</OBJ><OPERATOR>.</OPERATOR><OO>responseText</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( xml <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>data</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>.</OPERATOR><OO>nodeName</OO> <OPERATOR>===</OPERATOR> <STRING>"parsererror"</STRING> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>error</OO>( <STRING>"parsererror"</STRING> )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// Allow a pre-filtering function to sanitize the response</COMMENT>
		<COMMENT>// s is checked to keep backwards compatibility</COMMENT>
		<KEYWORD>if</KEYWORD> ( s <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataFilter</OO> ) {
			data <OPERATOR>=</OPERATOR> <OBJ>s</OBJ><OPERATOR>.</OPERATOR><OO>dataFilter</OO>( data<OPERATOR>,</OPERATOR> type )<OPERATOR>;</OPERATOR>
		}

		<COMMENT>// The filter can actually parse the response</COMMENT>
		<KEYWORD>if</KEYWORD> ( <KEYWORD>typeof</KEYWORD> data <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> ) {
			<COMMENT>// Get the JavaScript object, if JSON is used.</COMMENT>
			<KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"json"</STRING> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>type <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>ct</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"json"</STRING>) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				data <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>parseJSON</OO>( data )<OPERATOR>;</OPERATOR>

			<COMMENT>// If the type is "script", eval it in global context</COMMENT>
			} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( type <OPERATOR>===</OPERATOR> <STRING>"script"</STRING> <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>type <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>ct</OBJ><OPERATOR>.</OPERATOR><OO>indexOf</OO>(<STRING>"javascript"</STRING>) <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>globalEval</OO>( data )<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>return</KEYWORD> data<OPERATOR>;</OPERATOR>
	}

})<OPERATOR>;</OPERATOR>

<COMMENT>/*</COMMENT>
<COMMENT> * Create the request object; Microsoft failed to properly</COMMENT>
<COMMENT> * implement the XMLHttpRequest in IE7 (can't request local files),</COMMENT>
<COMMENT> * so we use the ActiveXObject when it is available</COMMENT>
<COMMENT> * Additionally XMLHttpRequest can be disabled in IE7/IE8 so</COMMENT>
<COMMENT> * we need a fallback.</COMMENT>
<COMMENT> */</COMMENT>
<KEYWORD>if</KEYWORD> ( <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>ActiveXObject</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajaxSettings</OO><OPERATOR>.</OPERATOR><OO>xhr</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>location</OO><OPERATOR>.</OPERATOR><OO>protocol</OO> <OPERATOR>!==</OPERATOR> <STRING>"file:"</STRING> ) {
			<KEYWORD>try</KEYWORD> {
				<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>XMLHttpRequest</OO>()<OPERATOR>;</OPERATOR>
			} <KEYWORD>catch</KEYWORD>(xhrError) {}
		}

		<KEYWORD>try</KEYWORD> {
			<KEYWORD>return</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>window</OBJ><OPERATOR>.</OPERATOR><OO>ActiveXObject</OO>(<STRING>"Microsoft.XMLHTTP"</STRING>)<OPERATOR>;</OPERATOR>
		} <KEYWORD>catch</KEYWORD>(activeError) {}
	}<OPERATOR>;</OPERATOR>
}

<COMMENT>// Does this browser support XHR requests?</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>ajax</OO> <OPERATOR>=</OPERATOR> <OPERATOR>!!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>ajaxSettings</OO><OPERATOR>.</OPERATOR><OO>xhr</OO>()<OPERATOR>;</OPERATOR>




<KEYWORD>var</KEYWORD> elemdisplay <OPERATOR>=</OPERATOR> {}<OPERATOR>,</OPERATOR>
	rfxtypes <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>toggle<REGEX_OPERATOR>|</REGEX_OPERATOR>show<REGEX_OPERATOR>|</REGEX_OPERATOR>hide<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	rfxnum <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>=<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>?</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER><ESC>\d</ESC><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_OPERATOR>.</REGEX_OPERATOR><ESC>\-</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><REGEX_OPERATOR>+</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_OPERATOR>.</REGEX_OPERATOR><REGEX_OPERATOR>*</REGEX_OPERATOR><REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
	timerId<OPERATOR>,</OPERATOR>
	fxAttrs <OPERATOR>=</OPERATOR> [
		<COMMENT>// height animations</COMMENT>
		[ <STRING>"height"</STRING><OPERATOR>,</OPERATOR> <STRING>"marginTop"</STRING><OPERATOR>,</OPERATOR> <STRING>"marginBottom"</STRING><OPERATOR>,</OPERATOR> <STRING>"paddingTop"</STRING><OPERATOR>,</OPERATOR> <STRING>"paddingBottom"</STRING> ]<OPERATOR>,</OPERATOR>
		<COMMENT>// width animations</COMMENT>
		[ <STRING>"width"</STRING><OPERATOR>,</OPERATOR> <STRING>"marginLeft"</STRING><OPERATOR>,</OPERATOR> <STRING>"marginRight"</STRING><OPERATOR>,</OPERATOR> <STRING>"paddingLeft"</STRING><OPERATOR>,</OPERATOR> <STRING>"paddingRight"</STRING> ]<OPERATOR>,</OPERATOR>
		<COMMENT>// opacity animations</COMMENT>
		[ <STRING>"opacity"</STRING> ]
	]<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	show<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>var</KEYWORD> elem<OPERATOR>,</OPERATOR> display<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( speed <OPERATOR>||</OPERATOR> speed <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>animate</OO>( genFx(<STRING>"show"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC>)<OPERATOR>,</OPERATOR> speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback)<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> j <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> j<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>;</OPERATOR>
				display <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>;</OPERATOR>

				<COMMENT>// Reset the inline display of this element to learn if it is</COMMENT>
				<COMMENT>// being hidden by cascaded rules or not</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>(elem<OPERATOR>,</OPERATOR> <STRING>"olddisplay"</STRING>) <OPERATOR>&amp;&amp;</OPERATOR> display <OPERATOR>===</OPERATOR> <STRING>"none"</STRING> ) {
					display <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Set elements which have been overridden with display: none</COMMENT>
				<COMMENT>// in a stylesheet to whatever the default browser style is</COMMENT>
				<COMMENT>// for such an element</COMMENT>
				<KEYWORD>if</KEYWORD> ( display <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"display"</STRING> ) <OPERATOR>===</OPERATOR> <STRING>"none"</STRING> ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>(elem<OPERATOR>,</OPERATOR> <STRING>"olddisplay"</STRING><OPERATOR>,</OPERATOR> defaultDisplay(<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>))<OPERATOR>;</OPERATOR>
				}
			}

			<COMMENT>// Set the display of most of the elements in a second loop</COMMENT>
			<COMMENT>// to avoid the constant reflow</COMMENT>
			<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> j<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[i]<OPERATOR>;</OPERATOR>
				display <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO><OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( display <OPERATOR>===</OPERATOR> <STRING>""</STRING> <OPERATOR>||</OPERATOR> display <OPERATOR>===</OPERATOR> <STRING>"none"</STRING> ) {
					<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>(elem<OPERATOR>,</OPERATOR> <STRING>"olddisplay"</STRING>) <OPERATOR>||</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
				}
			}

			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	hide<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>if</KEYWORD> ( speed <OPERATOR>||</OPERATOR> speed <OPERATOR>===</OPERATOR> <NUMERIC>0</NUMERIC> ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>animate</OO>( genFx(<STRING>"hide"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC>)<OPERATOR>,</OPERATOR> speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback)<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> j <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> j<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>var</KEYWORD> display <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( <KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR> <STRING>"display"</STRING> )<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( display <OPERATOR>!==</OPERATOR> <STRING>"none"</STRING> ) {
					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>data</OO>( <KEYWORD>this</KEYWORD>[i]<OPERATOR>,</OPERATOR> <STRING>"olddisplay"</STRING><OPERATOR>,</OPERATOR> display )<OPERATOR>;</OPERATOR>
				}
			}

			<COMMENT>// Set the display of the elements in a second loop</COMMENT>
			<COMMENT>// to avoid the constant reflow</COMMENT>
			<KEYWORD>for</KEYWORD> ( i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> j<OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
				<KEYWORD>this</KEYWORD>[i]<OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"none"</STRING><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Save the old toggle function</COMMENT>
	_toggle<OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>toggle</OO><OPERATOR>,</OPERATOR>

	toggle<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fn<OPERATOR>,</OPERATOR> fn2<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>var</KEYWORD> bool <OPERATOR>=</OPERATOR> <KEYWORD>typeof</KEYWORD> fn <OPERATOR>===</OPERATOR> <STRING>"boolean"</STRING><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(fn) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(fn2) ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>_toggle</OO><OPERATOR>.</OPERATOR><OO>apply</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> arguments )<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( fn <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>||</OPERATOR> bool ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
				<KEYWORD>var</KEYWORD> state <OPERATOR>=</OPERATOR> bool <OPERATOR>?</OPERATOR> fn <OPERATOR>:</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>is</OO>(<STRING>":hidden"</STRING>)<OPERATOR>;</OPERATOR>
				<FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)[ state <OPERATOR>?</OPERATOR> <STRING>"show"</STRING> <OPERATOR>:</OPERATOR> <STRING>"hide"</STRING> ]()<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>animate</OO>(genFx(<STRING>"toggle"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC>)<OPERATOR>,</OPERATOR> fn<OPERATOR>,</OPERATOR> fn2<OPERATOR>,</OPERATOR> callback)<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	fadeTo<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( speed<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>filter</OO>(<STRING>":hidden"</STRING>)<OPERATOR>.</OPERATOR><OO>css</OO>(<STRING>"opacity"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR><OO>show</OO>()<OPERATOR>.</OPERATOR><OO>end</OO>()
					<OPERATOR>.</OPERATOR><OO>animate</OO>({opacity<OPERATOR>:</OPERATOR> to}<OPERATOR>,</OPERATOR> speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	animate<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( prop<OPERATOR>,</OPERATOR> speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>var</KEYWORD> optall <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>speed</OO>(speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback)<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isEmptyObject</OO>( prop ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( <OBJ>optall</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO> )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[ <OBJ>optall</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO> <OPERATOR>===</OPERATOR> <KEYWORD>false</KEYWORD> <OPERATOR>?</OPERATOR> <STRING>"each"</STRING> <OPERATOR>:</OPERATOR> <STRING>"queue"</STRING> ](<KEYWORD>function</KEYWORD>() {
			<COMMENT>// <COMMENT_NOTE>XXX</COMMENT_NOTE> 'this' does not always have a nodeName when running the</COMMENT>
			<COMMENT>// test suite</COMMENT>

			<KEYWORD>var</KEYWORD> opt <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({}<OPERATOR>,</OPERATOR> optall)<OPERATOR>,</OPERATOR> p<OPERATOR>,</OPERATOR>
				isElement <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
				hidden <OPERATOR>=</OPERATOR> isElement <OPERATOR>&amp;&amp;</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>is</OO>(<STRING>":hidden"</STRING>)<OPERATOR>,</OPERATOR>
				self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( p <KEYWORD>in</KEYWORD> prop ) {
				<KEYWORD>var</KEYWORD> name <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>camelCase</OO>( p )<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( p <OPERATOR>!==</OPERATOR> name ) {
					prop[ name ] <OPERATOR>=</OPERATOR> prop[ p ]<OPERATOR>;</OPERATOR>
					<KEYWORD>delete</KEYWORD> prop[ p ]<OPERATOR>;</OPERATOR>
					p <OPERATOR>=</OPERATOR> name<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( prop[p] <OPERATOR>===</OPERATOR> <STRING>"hide"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> hidden <OPERATOR>||</OPERATOR> prop[p] <OPERATOR>===</OPERATOR> <STRING>"show"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>hidden ) {
					<KEYWORD>return</KEYWORD> <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO><OPERATOR>.</OPERATOR><OO>call</OO>(<KEYWORD>this</KEYWORD>)<OPERATOR>;</OPERATOR>
				}

				<KEYWORD>if</KEYWORD> ( isElement <OPERATOR>&amp;&amp;</OPERATOR> ( p <OPERATOR>===</OPERATOR> <STRING>"height"</STRING> <OPERATOR>||</OPERATOR> p <OPERATOR>===</OPERATOR> <STRING>"width"</STRING> ) ) {
					<COMMENT>// Make sure that nothing sneaks out</COMMENT>
					<COMMENT>// Record all 3 overflow attributes because IE does not</COMMENT>
					<COMMENT>// change the overflow attribute when overflowX and</COMMENT>
					<COMMENT>// overflowY are set to the same value</COMMENT>
					<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>overflow</OO> <OPERATOR>=</OPERATOR> [ <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>overflow</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>overflowX</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>overflowY</OO> ]<OPERATOR>;</OPERATOR>

					<COMMENT>// Set display property to inline-block for height/width</COMMENT>
					<COMMENT>// animations on inline elements that are having width/height</COMMENT>
					<COMMENT>// animated</COMMENT>
					<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"display"</STRING> ) <OPERATOR>===</OPERATOR> <STRING>"inline"</STRING> <OPERATOR>&amp;&amp;</OPERATOR>
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> <STRING>"float"</STRING> ) <OPERATOR>===</OPERATOR> <STRING>"none"</STRING> ) {
						<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>inlineBlockNeedsLayout</OO> ) {
							<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"inline-block"</STRING><OPERATOR>;</OPERATOR>

						} <KEYWORD>else</KEYWORD> {
							<KEYWORD>var</KEYWORD> display <OPERATOR>=</OPERATOR> defaultDisplay(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>)<OPERATOR>;</OPERATOR>

							<COMMENT>// inline-level elements accept inline-block;</COMMENT>
							<COMMENT>// block-level elements need to be inline with layout</COMMENT>
							<KEYWORD>if</KEYWORD> ( display <OPERATOR>===</OPERATOR> <STRING>"inline"</STRING> ) {
								<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"inline-block"</STRING><OPERATOR>;</OPERATOR>

							} <KEYWORD>else</KEYWORD> {
								<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>display</OO> <OPERATOR>=</OPERATOR> <STRING>"inline"</STRING><OPERATOR>;</OPERATOR>
								<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>zoom</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
							}
						}
					}
				}

				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isArray</OO>( prop[p] ) ) {
					<COMMENT>// Create (if needed) and add to specialEasing</COMMENT>
					(<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>specialEasing</OO> <OPERATOR>=</OPERATOR> <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>specialEasing</OO> <OPERATOR>||</OPERATOR> {})[p] <OPERATOR>=</OPERATOR> prop[p][<NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>
					prop[p] <OPERATOR>=</OPERATOR> prop[p][<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
				}
			}

			<KEYWORD>if</KEYWORD> ( <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>overflow</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>overflow</OO> <OPERATOR>=</OPERATOR> <STRING>"hidden"</STRING><OPERATOR>;</OPERATOR>
			}

			<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>curAnim</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({}<OPERATOR>,</OPERATOR> prop)<OPERATOR>;</OPERATOR>

			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( prop<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> val ) {
				<KEYWORD>var</KEYWORD> e <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO>( self<OPERATOR>,</OPERATOR> opt<OPERATOR>,</OPERATOR> name )<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>rfxtypes</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(val) ) {
					e[ val <OPERATOR>===</OPERATOR> <STRING>"toggle"</STRING> <OPERATOR>?</OPERATOR> hidden <OPERATOR>?</OPERATOR> <STRING>"show"</STRING> <OPERATOR>:</OPERATOR> <STRING>"hide"</STRING> <OPERATOR>:</OPERATOR> val ]( prop )<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					<KEYWORD>var</KEYWORD> parts <OPERATOR>=</OPERATOR> <OBJ>rfxnum</OBJ><OPERATOR>.</OPERATOR><OO>exec</OO>(val)<OPERATOR>,</OPERATOR>
						start <OPERATOR>=</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>cur</OO>() <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

					<KEYWORD>if</KEYWORD> ( parts ) {
						<KEYWORD>var</KEYWORD> end <OPERATOR>=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( parts[<NUMERIC>2</NUMERIC>] )<OPERATOR>,</OPERATOR>
							unit <OPERATOR>=</OPERATOR> parts[<NUMERIC>3</NUMERIC>] <OPERATOR>||</OPERATOR> <STRING>"px"</STRING><OPERATOR>;</OPERATOR>

						<COMMENT>// We need to compute starting value</COMMENT>
						<KEYWORD>if</KEYWORD> ( unit <OPERATOR>!==</OPERATOR> <STRING>"px"</STRING> ) {
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( self<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> (end <OPERATOR>||</OPERATOR> <NUMERIC>1</NUMERIC>) <OPERATOR>+</OPERATOR> unit)<OPERATOR>;</OPERATOR>
							start <OPERATOR>=</OPERATOR> ((end <OPERATOR>||</OPERATOR> <NUMERIC>1</NUMERIC>) <OPERATOR>/</OPERATOR> <OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>cur</OO>()) <OPERATOR>*</OPERATOR> start<OPERATOR>;</OPERATOR>
							<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( self<OPERATOR>,</OPERATOR> name<OPERATOR>,</OPERATOR> start <OPERATOR>+</OPERATOR> unit)<OPERATOR>;</OPERATOR>
						}

						<COMMENT>// If a +=/-= token was provided, we're doing a relative animation</COMMENT>
						<KEYWORD>if</KEYWORD> ( parts[<NUMERIC>1</NUMERIC>] ) {
							end <OPERATOR>=</OPERATOR> ((parts[<NUMERIC>1</NUMERIC>] <OPERATOR>===</OPERATOR> <STRING>"-="</STRING> <OPERATOR>?</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC>) <OPERATOR>*</OPERATOR> end) <OPERATOR>+</OPERATOR> start<OPERATOR>;</OPERATOR>
						}

						<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>custom</OO>( start<OPERATOR>,</OPERATOR> end<OPERATOR>,</OPERATOR> unit )<OPERATOR>;</OPERATOR>

					} <KEYWORD>else</KEYWORD> {
						<OBJ>e</OBJ><OPERATOR>.</OPERATOR><OO>custom</OO>( start<OPERATOR>,</OPERATOR> val<OPERATOR>,</OPERATOR> <STRING>""</STRING> )<OPERATOR>;</OPERATOR>
					}
				}
			})<OPERATOR>;</OPERATOR>

			<COMMENT>// For JS strict compliance</COMMENT>
			<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	stop<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( clearQueue<OPERATOR>,</OPERATOR> gotoEnd ) {
		<KEYWORD>var</KEYWORD> timers <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>timers</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( clearQueue ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO>([])<OPERATOR>;</OPERATOR>
		}

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
			<COMMENT>// go in reverse order so anything added to the queue during the loop is ignored</COMMENT>
			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <OBJ>timers</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>--</OPERATOR> ) {
				<KEYWORD>if</KEYWORD> ( timers[i]<OPERATOR>.</OPERATOR><OO>elem</OO> <OPERATOR>===</OPERATOR> <KEYWORD>this</KEYWORD> ) {
					<KEYWORD>if</KEYWORD> (gotoEnd) {
						<COMMENT>// force the next step to be the last</COMMENT>
						timers[i](<KEYWORD>true</KEYWORD>)<OPERATOR>;</OPERATOR>
					}

					<OBJ>timers</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>(i<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
				}
			}
		})<OPERATOR>;</OPERATOR>

		<COMMENT>// start the next in the queue if the last step wasn't forced</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>gotoEnd ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>dequeue</OO>()<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
	}

})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> genFx( type<OPERATOR>,</OPERATOR> num ) {
	<KEYWORD>var</KEYWORD> obj <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( <OBJ>fxAttrs</OBJ><OPERATOR>.</OPERATOR><OO>concat</OO><OPERATOR>.</OPERATOR><OO>apply</OO>([]<OPERATOR>,</OPERATOR> <OBJ>fxAttrs</OBJ><OPERATOR>.</OPERATOR><OO>slice</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>num))<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>() {
		obj[ <KEYWORD>this</KEYWORD> ] <OPERATOR>=</OPERATOR> type<OPERATOR>;</OPERATOR>
	})<OPERATOR>;</OPERATOR>

	<KEYWORD>return</KEYWORD> obj<OPERATOR>;</OPERATOR>
}

<COMMENT>// Generate shortcuts for custom animations</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>({
	slideDown<OPERATOR>:</OPERATOR> genFx(<STRING>"show"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>,</OPERATOR>
	slideUp<OPERATOR>:</OPERATOR> genFx(<STRING>"hide"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>,</OPERATOR>
	slideToggle<OPERATOR>:</OPERATOR> genFx(<STRING>"toggle"</STRING><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>,</OPERATOR>
	fadeIn<OPERATOR>:</OPERATOR> { opacity<OPERATOR>:</OPERATOR> <STRING>"show"</STRING> }<OPERATOR>,</OPERATOR>
	fadeOut<OPERATOR>:</OPERATOR> { opacity<OPERATOR>:</OPERATOR> <STRING>"hide"</STRING> }<OPERATOR>,</OPERATOR>
	fadeToggle<OPERATOR>:</OPERATOR> { opacity<OPERATOR>:</OPERATOR> <STRING>"toggle"</STRING> }
}<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( name<OPERATOR>,</OPERATOR> props ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ name ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback ) {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>animate</OO>( props<OPERATOR>,</OPERATOR> speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> callback )<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({
	speed<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( speed<OPERATOR>,</OPERATOR> easing<OPERATOR>,</OPERATOR> fn ) {
		<KEYWORD>var</KEYWORD> opt <OPERATOR>=</OPERATOR> speed <OPERATOR>&amp;&amp;</OPERATOR> <KEYWORD>typeof</KEYWORD> speed <OPERATOR>===</OPERATOR> <STRING>"object"</STRING> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>({}<OPERATOR>,</OPERATOR> speed) <OPERATOR>:</OPERATOR> {
			complete<OPERATOR>:</OPERATOR> fn <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR>fn <OPERATOR>&amp;&amp;</OPERATOR> easing <OPERATOR>||</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( speed ) <OPERATOR>&amp;&amp;</OPERATOR> speed<OPERATOR>,</OPERATOR>
			duration<OPERATOR>:</OPERATOR> speed<OPERATOR>,</OPERATOR>
			easing<OPERATOR>:</OPERATOR> fn <OPERATOR>&amp;&amp;</OPERATOR> easing <OPERATOR>||</OPERATOR> easing <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>(easing) <OPERATOR>&amp;&amp;</OPERATOR> easing
		}<OPERATOR>;</OPERATOR>

		<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>duration</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>off</OO> <OPERATOR>?</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>:</OPERATOR> <KEYWORD>typeof</KEYWORD> <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>duration</OO> <OPERATOR>===</OPERATOR> <STRING>"number"</STRING> <OPERATOR>?</OPERATOR> <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>duration</OO> <OPERATOR>:</OPERATOR>
			<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>duration</OO> <KEYWORD>in</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>speeds</OO> <OPERATOR>?</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>speeds</OO>[<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>duration</OO>] <OPERATOR>:</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>speeds</OO><OPERATOR>.</OPERATOR><OO>_default</OO><OPERATOR>;</OPERATOR>

		<COMMENT>// Queueing</COMMENT>
		<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>old</OO> <OPERATOR>=</OPERATOR> <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO><OPERATOR>;</OPERATOR>
		<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>complete</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
			<KEYWORD>if</KEYWORD> ( <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>queue</OO> <OPERATOR>!==</OPERATOR> <KEYWORD>false</KEYWORD> ) {
				<FUNCTION>jQuery</FUNCTION>(<KEYWORD>this</KEYWORD>)<OPERATOR>.</OPERATOR><OO>dequeue</OO>()<OPERATOR>;</OPERATOR>
			}
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( <OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>old</OO> ) ) {
				<OBJ>opt</OBJ><OPERATOR>.</OPERATOR><OO>old</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
			}
		}<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> opt<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	easing<OPERATOR>:</OPERATOR> {
		linear<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( p<OPERATOR>,</OPERATOR> n<OPERATOR>,</OPERATOR> firstNum<OPERATOR>,</OPERATOR> diff ) {
			<KEYWORD>return</KEYWORD> firstNum <OPERATOR>+</OPERATOR> diff <OPERATOR>*</OPERATOR> p<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>
		swing<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( p<OPERATOR>,</OPERATOR> n<OPERATOR>,</OPERATOR> firstNum<OPERATOR>,</OPERATOR> diff ) {
			<KEYWORD>return</KEYWORD> ((<OPERATOR>-</OPERATOR><OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>cos</OO>(p<OPERATOR>*</OPERATOR><OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>PI</OO>)<OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC>) <OPERATOR>+</OPERATOR> <NUMERIC>0.5</NUMERIC>) <OPERATOR>*</OPERATOR> diff <OPERATOR>+</OPERATOR> firstNum<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	timers<OPERATOR>:</OPERATOR> []<OPERATOR>,</OPERATOR>

	fx<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> options<OPERATOR>,</OPERATOR> prop ) {
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO> <OPERATOR>=</OPERATOR> options<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO> <OPERATOR>=</OPERATOR> elem<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> <OPERATOR>=</OPERATOR> prop<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>orig</OO> ) {
			<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>orig</OO> <OPERATOR>=</OPERATOR> {}<OPERATOR>;</OPERATOR>
		}
	}

})<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>prototype</OO> <OPERATOR>=</OPERATOR> {
	<COMMENT>// Simple function for setting a style value</COMMENT>
	update<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>step</OO> ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>step</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>now</OO><OPERATOR>,</OPERATOR> <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
		}

		(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>step</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO>] <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>step</OO><OPERATOR>.</OPERATOR><OO>_default</OO>)( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Get the current size</COMMENT>
	cur<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO>] <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> (<OPERATOR>!</OPERATOR><OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>.</OPERATOR><OO>style</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>.</OPERATOR><OO>style</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO>] <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD>) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO>[ <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> ]<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> r <OPERATOR>=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> ) )<OPERATOR>;</OPERATOR>
		<KEYWORD>return</KEYWORD> r <OPERATOR>&amp;&amp;</OPERATOR> r <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>10000</NUMERIC> <OPERATOR>?</OPERATOR> r <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Start an animation from one number to another</COMMENT>
	custom<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( from<OPERATOR>,</OPERATOR> to<OPERATOR>,</OPERATOR> unit ) {
		<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR>
			fx <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>startTime</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>start</OO> <OPERATOR>=</OPERATOR> from<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>end</OO> <OPERATOR>=</OPERATOR> to<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>unit</OO> <OPERATOR>=</OPERATOR> unit <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>unit</OO> <OPERATOR>||</OPERATOR> <STRING>"px"</STRING><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>now</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>start</OO><OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pos</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>state</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>function</KEYWORD> t( gotoEnd ) {
			<KEYWORD>return</KEYWORD> <OBJ>self</OBJ><OPERATOR>.</OPERATOR><OO>step</OO>(gotoEnd)<OPERATOR>;</OPERATOR>
		}

		<OBJ>t</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( t() <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>timers</OO><OPERATOR>.</OPERATOR><OO>push</OO>(t) <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>timerId ) {
			timerId <OPERATOR>=</OPERATOR> <FUNCTION>setInterval</FUNCTION>(<OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>tick</OO><OPERATOR>,</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>interval</OO>)<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Simple 'show' function</COMMENT>
	show<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<COMMENT>// Remember where we started, so that we can go back to it later</COMMENT>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>orig</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO>] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> )<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>show</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// Begin the animation</COMMENT>
		<COMMENT>// Make sure that we start at a small width/height to avoid any</COMMENT>
		<COMMENT>// flash of content</COMMENT>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>custom</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> <OPERATOR>===</OPERATOR> <STRING>"width"</STRING> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> <OPERATOR>===</OPERATOR> <STRING>"height"</STRING> <OPERATOR>?</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cur</OO>())<OPERATOR>;</OPERATOR>

		<COMMENT>// Start by showing the element</COMMENT>
		<FUNCTION>jQuery</FUNCTION>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO> )<OPERATOR>.</OPERATOR><OO>show</OO>()<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Simple 'hide' function</COMMENT>
	hide<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<COMMENT>// Remember where we started, so that we can go back to it later</COMMENT>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>orig</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO>] <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> )<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>hide</OO> <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

		<COMMENT>// Begin the animation</COMMENT>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>custom</OO>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>cur</OO>()<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	<COMMENT>// Each step of an animation</COMMENT>
	step<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( gotoEnd ) {
		<KEYWORD>var</KEYWORD> t <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>()<OPERATOR>,</OPERATOR> done <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( gotoEnd <OPERATOR>||</OPERATOR> t <OPERATOR>&gt;=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO> <OPERATOR>+</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>startTime</OO> ) {
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>now</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>end</OO><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pos</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>state</OO> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>update</OO>()<OPERATOR>;</OPERATOR>

			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>curAnim</OO>[ <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> ] <OPERATOR>=</OPERATOR> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>

			<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <KEYWORD>in</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>curAnim</OO> ) {
				<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>curAnim</OO>[i] <OPERATOR>!==</OPERATOR> <KEYWORD>true</KEYWORD> ) {
					done <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
				}
			}

			<KEYWORD>if</KEYWORD> ( done ) {
				<COMMENT>// Reset the overflow</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>overflow</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>shrinkWrapBlocks</OO> ) {
					<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR>
						options <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>;</OPERATOR>

					<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( [ <STRING>""</STRING><OPERATOR>,</OPERATOR> <STRING>"X"</STRING><OPERATOR>,</OPERATOR> <STRING>"Y"</STRING> ]<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD> (index<OPERATOR>,</OPERATOR> value) {
						<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>[ <STRING>"overflow"</STRING> <OPERATOR>+</OPERATOR> value ] <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>overflow</OO>[index]<OPERATOR>;</OPERATOR>
					} )<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Hide the element if the "hide" operation was done</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>hide</OO> ) {
					<FUNCTION>jQuery</FUNCTION>(<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO>)<OPERATOR>.</OPERATOR><OO>hide</OO>()<OPERATOR>;</OPERATOR>
				}

				<COMMENT>// Reset the properties, if the item has been hidden or shown</COMMENT>
				<KEYWORD>if</KEYWORD> ( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>hide</OO> <OPERATOR>||</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>show</OO> ) {
					<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> p <KEYWORD>in</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>curAnim</OO> ) {
						<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> p<OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>orig</OO>[p] )<OPERATOR>;</OPERATOR>
					}
				}

				<COMMENT>// Execute the complete function</COMMENT>
				<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>complete</OO><OPERATOR>.</OPERATOR><OO>call</OO>( <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO> )<OPERATOR>;</OPERATOR>
			}

			<KEYWORD>return</KEYWORD> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>

		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>var</KEYWORD> n <OPERATOR>=</OPERATOR> t <OPERATOR>-</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>startTime</OO><OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>state</OO> <OPERATOR>=</OPERATOR> n <OPERATOR>/</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO><OPERATOR>;</OPERATOR>

			<COMMENT>// Perform the easing function, defaults to swing</COMMENT>
			<KEYWORD>var</KEYWORD> specialEasing <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>specialEasing</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>specialEasing</OO>[<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO>]<OPERATOR>;</OPERATOR>
			<KEYWORD>var</KEYWORD> defaultEasing <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>easing</OO> <OPERATOR>||</OPERATOR> (<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>easing</OO><OPERATOR>.</OPERATOR><OO>swing</OO> <OPERATOR>?</OPERATOR> <STRING>"swing"</STRING> <OPERATOR>:</OPERATOR> <STRING>"linear"</STRING>)<OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pos</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>easing</OO>[specialEasing <OPERATOR>||</OPERATOR> defaultEasing](<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>state</OO><OPERATOR>,</OPERATOR> n<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>options</OO><OPERATOR>.</OPERATOR><OO>duration</OO>)<OPERATOR>;</OPERATOR>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>now</OO> <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>start</OO> <OPERATOR>+</OPERATOR> ((<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>end</OO> <OPERATOR>-</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>) <OPERATOR>*</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>pos</OO>)<OPERATOR>;</OPERATOR>

			<COMMENT>// Perform the next step of the animation</COMMENT>
			<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>update</OO>()<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> <KEYWORD>true</KEYWORD><OPERATOR>;</OPERATOR>
	}
}<OPERATOR>;</OPERATOR>

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>,</OPERATOR> {
	tick<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>var</KEYWORD> timers <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>timers</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>for</KEYWORD> ( <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>timers</OBJ><OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> ) {
			<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>timers[i]() ) {
				<OBJ>timers</OBJ><OPERATOR>.</OPERATOR><OO>splice</OO>(i<OPERATOR>--,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
			}
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><OBJ>timers</OBJ><OPERATOR>.</OPERATOR><OO>length</OO> ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fx</OO><OPERATOR>.</OPERATOR><OO>stop</OO>()<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>,</OPERATOR>

	interval<OPERATOR>:</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR>

	stop<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<FUNCTION>clearInterval</FUNCTION>( timerId )<OPERATOR>;</OPERATOR>
		timerId <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	speeds<OPERATOR>:</OPERATOR> {
		slow<OPERATOR>:</OPERATOR> <NUMERIC>600</NUMERIC><OPERATOR>,</OPERATOR>
		fast<OPERATOR>:</OPERATOR> <NUMERIC>200</NUMERIC><OPERATOR>,</OPERATOR>
		<COMMENT>// Default speed</COMMENT>
		_default<OPERATOR>:</OPERATOR> <NUMERIC>400</NUMERIC>
	}<OPERATOR>,</OPERATOR>

	step<OPERATOR>:</OPERATOR> {
		opacity<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fx ) {
			<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>style</OO>( <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>,</OPERATOR> <STRING>"opacity"</STRING><OPERATOR>,</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>now</OO> )<OPERATOR>;</OPERATOR>
		}<OPERATOR>,</OPERATOR>

		_default<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( fx ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>.</OPERATOR><OO>style</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>.</OPERATOR><OO>style</OO>[ <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> ] <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD> ) {
				<OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>.</OPERATOR><OO>style</OO>[ <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> ] <OPERATOR>=</OPERATOR> (<OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> <OPERATOR>===</OPERATOR> <STRING>"width"</STRING> <OPERATOR>||</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> <OPERATOR>===</OPERATOR> <STRING>"height"</STRING> <OPERATOR>?</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>) <OPERATOR>:</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>now</OO>) <OPERATOR>+</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>unit</OO><OPERATOR>;</OPERATOR>
			} <KEYWORD>else</KEYWORD> {
				<OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO>[ <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>prop</OO> ] <OPERATOR>=</OPERATOR> <OBJ>fx</OBJ><OPERATOR>.</OPERATOR><OO>now</OO><OPERATOR>;</OPERATOR>
			}
		}
	}
})<OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>expr</OO><OPERATOR>.</OPERATOR><OO>filters</OO><OPERATOR>.</OPERATOR><OO>animated</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( elem ) {
		<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>grep</OO>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>timers</OO><OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( fn ) {
			<KEYWORD>return</KEYWORD> elem <OPERATOR>===</OPERATOR> <OBJ>fn</OBJ><OPERATOR>.</OPERATOR><OO>elem</OO><OPERATOR>;</OPERATOR>
		})<OPERATOR>.</OPERATOR><OO>length</OO><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<KEYWORD>function</KEYWORD> defaultDisplay( nodeName ) {
	<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elemdisplay[ nodeName ] ) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>(<STRING>"&lt;"</STRING> <OPERATOR>+</OPERATOR> nodeName <OPERATOR>+</OPERATOR> <STRING>"&gt;"</STRING>)<OPERATOR>.</OPERATOR><OO>appendTo</OO>(<STRING>"body"</STRING>)<OPERATOR>,</OPERATOR>
			display <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(<STRING>"display"</STRING>)<OPERATOR>;</OPERATOR>

		<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>remove</OO>()<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( display <OPERATOR>===</OPERATOR> <STRING>"none"</STRING> <OPERATOR>||</OPERATOR> display <OPERATOR>===</OPERATOR> <STRING>""</STRING> ) {
			display <OPERATOR>=</OPERATOR> <STRING>"block"</STRING><OPERATOR>;</OPERATOR>
		}

		elemdisplay[ nodeName ] <OPERATOR>=</OPERATOR> display<OPERATOR>;</OPERATOR>
	}

	<KEYWORD>return</KEYWORD> elemdisplay[ nodeName ]<OPERATOR>;</OPERATOR>
}




<KEYWORD>var</KEYWORD> rtable <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^t<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>able<REGEX_OPERATOR>|</REGEX_OPERATOR>d<REGEX_OPERATOR>|</REGEX_OPERATOR>h<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>,</OPERATOR>
	rroot <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>^<REGEX_SUBPATTERN_MARKER>(</REGEX_SUBPATTERN_MARKER><REGEX_SUBPATTERN>?:</REGEX_SUBPATTERN>body<REGEX_OPERATOR>|</REGEX_OPERATOR>html<REGEX_SUBPATTERN_MARKER>)</REGEX_SUBPATTERN_MARKER>$<DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD></REGEX><OPERATOR>;</OPERATOR>

<KEYWORD>if</KEYWORD> ( <STRING>"getBoundingClientRect"</STRING> <KEYWORD>in</KEYWORD> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO> ) {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>offset</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( options ) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> box<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( options ) { 
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>( i ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>setOffset</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> options<OPERATOR>,</OPERATOR> i )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( elem <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>body</OO> ) {
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>bodyOffset</OO>( elem )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>try</KEYWORD> {
			box <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>getBoundingClientRect</OO>()<OPERATOR>;</OPERATOR>
		} <KEYWORD>catch</KEYWORD>(e) {}

		<KEYWORD>var</KEYWORD> doc <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>,</OPERATOR>
			docElem <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>;</OPERATOR>

		<COMMENT>// Make sure we're not dealing with a disconnected DOM node</COMMENT>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>box <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>contains</OO>( docElem<OPERATOR>,</OPERATOR> elem ) ) {
			<KEYWORD>return</KEYWORD> box <OPERATOR>||</OPERATOR> { top<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC> }<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> body <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>,</OPERATOR>
			win <OPERATOR>=</OPERATOR> getWindow(doc)<OPERATOR>,</OPERATOR>
			clientTop  <OPERATOR>=</OPERATOR> <OBJ>docElem</OBJ><OPERATOR>.</OPERATOR><OO>clientTop</OO>  <OPERATOR>||</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>clientTop</OO>  <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			clientLeft <OPERATOR>=</OPERATOR> <OBJ>docElem</OBJ><OPERATOR>.</OPERATOR><OO>clientLeft</OO> <OPERATOR>||</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>clientLeft</OO> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			scrollTop  <OPERATOR>=</OPERATOR> (<OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>pageYOffset</OO> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>boxModel</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>docElem</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO>  <OPERATOR>||</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO> )<OPERATOR>,</OPERATOR>
			scrollLeft <OPERATOR>=</OPERATOR> (<OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>pageXOffset</OO> <OPERATOR>||</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>boxModel</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>docElem</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO> <OPERATOR>||</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO>)<OPERATOR>,</OPERATOR>
			top  <OPERATOR>=</OPERATOR> <OBJ>box</OBJ><OPERATOR>.</OPERATOR><OO>top</OO>  <OPERATOR>+</OPERATOR> scrollTop  <OPERATOR>-</OPERATOR> clientTop<OPERATOR>,</OPERATOR>
			left <OPERATOR>=</OPERATOR> <OBJ>box</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>+</OPERATOR> scrollLeft <OPERATOR>-</OPERATOR> clientLeft<OPERATOR>;</OPERATOR>

		<KEYWORD>return</KEYWORD> { top<OPERATOR>:</OPERATOR> top<OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> left }<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

} <KEYWORD>else</KEYWORD> {
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>offset</OO> <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( options ) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( options ) { 
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>( i ) {
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>setOffset</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> options<OPERATOR>,</OPERATOR> i )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem <OPERATOR>||</OPERATOR> <OPERATOR>!</OPERATOR><OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO> ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( elem <OPERATOR>===</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>.</OPERATOR><OO>body</OO> ) {
			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>bodyOffset</OO>( elem )<OPERATOR>;</OPERATOR>
		}

		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>initialize</OO>()<OPERATOR>;</OPERATOR>

		<KEYWORD>var</KEYWORD> computedStyle<OPERATOR>,</OPERATOR>
			offsetParent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO><OPERATOR>,</OPERATOR>
			prevOffsetParent <OPERATOR>=</OPERATOR> elem<OPERATOR>,</OPERATOR>
			doc <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>ownerDocument</OO><OPERATOR>,</OPERATOR>
			docElem <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO><OPERATOR>,</OPERATOR>
			body <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>,</OPERATOR>
			defaultView <OPERATOR>=</OPERATOR> <OBJ>doc</OBJ><OPERATOR>.</OPERATOR><OO>defaultView</OO><OPERATOR>,</OPERATOR>
			prevComputedStyle <OPERATOR>=</OPERATOR> defaultView <OPERATOR>?</OPERATOR> <OBJ>defaultView</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>( elem<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD> ) <OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO><OPERATOR>,</OPERATOR>
			top <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO><OPERATOR>,</OPERATOR>
			left <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetLeft</OO><OPERATOR>;</OPERATOR>

		<KEYWORD>while</KEYWORD> ( (elem <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentNode</OO>) <OPERATOR>&amp;&amp;</OPERATOR> elem <OPERATOR>!==</OPERATOR> body <OPERATOR>&amp;&amp;</OPERATOR> elem <OPERATOR>!==</OPERATOR> docElem ) {
			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>supportsFixedPosition</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>prevComputedStyle</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>===</OPERATOR> <STRING>"fixed"</STRING> ) {
				<KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
			}

			computedStyle <OPERATOR>=</OPERATOR> defaultView <OPERATOR>?</OPERATOR> <OBJ>defaultView</OBJ><OPERATOR>.</OPERATOR><OO>getComputedStyle</OO>(elem<OPERATOR>,</OPERATOR> <KEYWORD>null</KEYWORD>) <OPERATOR>:</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>currentStyle</OO><OPERATOR>;</OPERATOR>
			top  <OPERATOR>-=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO><OPERATOR>;</OPERATOR>
			left <OPERATOR>-=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO><OPERATOR>;</OPERATOR>

			<KEYWORD>if</KEYWORD> ( elem <OPERATOR>===</OPERATOR> offsetParent ) {
				top  <OPERATOR>+=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO><OPERATOR>;</OPERATOR>
				left <OPERATOR>+=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetLeft</OO><OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>doesNotAddBorder</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR>(<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>doesAddBorderForTableAndCells</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>rtable</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>)) ) {
					top  <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>computedStyle</OBJ><OPERATOR>.</OPERATOR><OO>borderTopWidth</OO>  ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
					left <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>computedStyle</OBJ><OPERATOR>.</OPERATOR><OO>borderLeftWidth</OO> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				}

				prevOffsetParent <OPERATOR>=</OPERATOR> offsetParent<OPERATOR>;</OPERATOR>
				offsetParent <OPERATOR>=</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO><OPERATOR>;</OPERATOR>
			}

			<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>subtractsBorderForOverflowNotVisible</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>computedStyle</OBJ><OPERATOR>.</OPERATOR><OO>overflow</OO> <OPERATOR>!==</OPERATOR> <STRING>"visible"</STRING> ) {
				top  <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>computedStyle</OBJ><OPERATOR>.</OPERATOR><OO>borderTopWidth</OO>  ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
				left <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>computedStyle</OBJ><OPERATOR>.</OPERATOR><OO>borderLeftWidth</OO> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			}

			prevComputedStyle <OPERATOR>=</OPERATOR> computedStyle<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>prevComputedStyle</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>===</OPERATOR> <STRING>"relative"</STRING> <OPERATOR>||</OPERATOR> <OBJ>prevComputedStyle</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>===</OPERATOR> <STRING>"static"</STRING> ) {
			top  <OPERATOR>+=</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO><OPERATOR>;</OPERATOR>
			left <OPERATOR>+=</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>offsetLeft</OO><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>supportsFixedPosition</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>prevComputedStyle</OBJ><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>===</OPERATOR> <STRING>"fixed"</STRING> ) {
			top  <OPERATOR>+=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>( <OBJ>docElem</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO><OPERATOR>,</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollTop</OO> )<OPERATOR>;</OPERATOR>
			left <OPERATOR>+=</OPERATOR> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>( <OBJ>docElem</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO><OPERATOR>,</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>scrollLeft</OO> )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> { top<OPERATOR>:</OPERATOR> top<OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> left }<OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>
}

<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO> <OPERATOR>=</OPERATOR> {
	initialize<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>var</KEYWORD> body <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>,</OPERATOR> container <OPERATOR>=</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>createElement</OO>(<STRING>"div"</STRING>)<OPERATOR>,</OPERATOR> innerDiv<OPERATOR>,</OPERATOR> checkDiv<OPERATOR>,</OPERATOR> table<OPERATOR>,</OPERATOR> td<OPERATOR>,</OPERATOR> bodyMarginTop <OPERATOR>=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(body<OPERATOR>,</OPERATOR> <STRING>"marginTop"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
			html <OPERATOR>=</OPERATOR> <STRING>"&lt;div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"</STRING><OPERATOR>;</OPERATOR>

		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>extend</OO>( <OBJ>container</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>,</OPERATOR> { position<OPERATOR>:</OPERATOR> <STRING>"absolute"</STRING><OPERATOR>,</OPERATOR> top<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> margin<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> border<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> width<OPERATOR>:</OPERATOR> <STRING>"1px"</STRING><OPERATOR>,</OPERATOR> height<OPERATOR>:</OPERATOR> <STRING>"1px"</STRING><OPERATOR>,</OPERATOR> visibility<OPERATOR>:</OPERATOR> <STRING>"hidden"</STRING> } )<OPERATOR>;</OPERATOR>

		<OBJ>container</OBJ><OPERATOR>.</OPERATOR><OO>innerHTML</OO> <OPERATOR>=</OPERATOR> html<OPERATOR>;</OPERATOR>
		<OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>insertBefore</OO>( container<OPERATOR>,</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO> )<OPERATOR>;</OPERATOR>
		innerDiv <OPERATOR>=</OPERATOR> <OBJ>container</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		checkDiv <OPERATOR>=</OPERATOR> <OBJ>innerDiv</OBJ><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>
		td <OPERATOR>=</OPERATOR> <OBJ>innerDiv</OBJ><OPERATOR>.</OPERATOR><OO>nextSibling</OO><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>.</OPERATOR><OO>firstChild</OO><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>doesNotAddBorder</OO> <OPERATOR>=</OPERATOR> (<OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO> <OPERATOR>!==</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>doesAddBorderForTableAndCells</OO> <OPERATOR>=</OPERATOR> (<OBJ>td</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO> <OPERATOR>===</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>

		<OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <STRING>"fixed"</STRING><OPERATOR>;</OPERATOR>
		<OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>top</OO> <OPERATOR>=</OPERATOR> <STRING>"20px"</STRING><OPERATOR>;</OPERATOR>

		<COMMENT>// safari subtracts parent border width here which is 5px</COMMENT>
		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>supportsFixedPosition</OO> <OPERATOR>=</OPERATOR> (<OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO> <OPERATOR>===</OPERATOR> <NUMERIC>20</NUMERIC> <OPERATOR>||</OPERATOR> <OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO> <OPERATOR>===</OPERATOR> <NUMERIC>15</NUMERIC>)<OPERATOR>;</OPERATOR>
		<OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>top</OO> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>

		<OBJ>innerDiv</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>overflow</OO> <OPERATOR>=</OPERATOR> <STRING>"hidden"</STRING><OPERATOR>;</OPERATOR>
		<OBJ>innerDiv</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <STRING>"relative"</STRING><OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>subtractsBorderForOverflowNotVisible</OO> <OPERATOR>=</OPERATOR> (<OBJ>checkDiv</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO> <OPERATOR>===</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>

		<OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>doesNotIncludeMarginInBodyOffset</OO> <OPERATOR>=</OPERATOR> (<OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO> <OPERATOR>!==</OPERATOR> bodyMarginTop)<OPERATOR>;</OPERATOR>

		<OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>removeChild</OO>( container )<OPERATOR>;</OPERATOR>
		body <OPERATOR>=</OPERATOR> container <OPERATOR>=</OPERATOR> innerDiv <OPERATOR>=</OPERATOR> checkDiv <OPERATOR>=</OPERATOR> table <OPERATOR>=</OPERATOR> td <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>initialize</OO> <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>noop</OO><OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	bodyOffset<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( body ) {
		<KEYWORD>var</KEYWORD> top <OPERATOR>=</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>offsetTop</OO><OPERATOR>,</OPERATOR>
			left <OPERATOR>=</OPERATOR> <OBJ>body</OBJ><OPERATOR>.</OPERATOR><OO>offsetLeft</OO><OPERATOR>;</OPERATOR>

		<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>initialize</OO>()<OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO><OPERATOR>.</OPERATOR><OO>doesNotIncludeMarginInBodyOffset</OO> ) {
			top  <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(body<OPERATOR>,</OPERATOR> <STRING>"marginTop"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
			left <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(body<OPERATOR>,</OPERATOR> <STRING>"marginLeft"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>return</KEYWORD> { top<OPERATOR>:</OPERATOR> top<OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> left }<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>
	
	setOffset<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>( elem<OPERATOR>,</OPERATOR> options<OPERATOR>,</OPERATOR> i ) {
		<KEYWORD>var</KEYWORD> position <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"position"</STRING> )<OPERATOR>;</OPERATOR>

		<COMMENT>// set position first, in-case top/left are set even on static elem</COMMENT>
		<KEYWORD>if</KEYWORD> ( position <OPERATOR>===</OPERATOR> <STRING>"static"</STRING> ) {
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>style</OO><OPERATOR>.</OPERATOR><OO>position</OO> <OPERATOR>=</OPERATOR> <STRING>"relative"</STRING><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> curElem <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( elem )<OPERATOR>,</OPERATOR>
			curOffset <OPERATOR>=</OPERATOR> <OBJ>curElem</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO>()<OPERATOR>,</OPERATOR>
			curCSSTop <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"top"</STRING> )<OPERATOR>,</OPERATOR>
			curCSSLeft <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> <STRING>"left"</STRING> )<OPERATOR>,</OPERATOR>
			calculatePosition <OPERATOR>=</OPERATOR> (position <OPERATOR>===</OPERATOR> <STRING>"absolute"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>inArray</OO>(<STRING>'auto'</STRING><OPERATOR>,</OPERATOR> [curCSSTop<OPERATOR>,</OPERATOR> curCSSLeft]) <OPERATOR>&gt;</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>)<OPERATOR>,</OPERATOR>
			props <OPERATOR>=</OPERATOR> {}<OPERATOR>,</OPERATOR> curPosition <OPERATOR>=</OPERATOR> {}<OPERATOR>,</OPERATOR> curTop<OPERATOR>,</OPERATOR> curLeft<OPERATOR>;</OPERATOR>

		<COMMENT>// need to be able to calculate position if either top or left is auto and position is absolute</COMMENT>
		<KEYWORD>if</KEYWORD> ( calculatePosition ) {
			curPosition <OPERATOR>=</OPERATOR> <OBJ>curElem</OBJ><OPERATOR>.</OPERATOR><OO>position</OO>()<OPERATOR>;</OPERATOR>
		}

		curTop  <OPERATOR>=</OPERATOR> calculatePosition <OPERATOR>?</OPERATOR> <OBJ>curPosition</OBJ><OPERATOR>.</OPERATOR><OO>top</OO>  <OPERATOR>:</OPERATOR> <FUNCTION>parseInt</FUNCTION>( curCSSTop<OPERATOR>,</OPERATOR>  <NUMERIC>10</NUMERIC> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		curLeft <OPERATOR>=</OPERATOR> calculatePosition <OPERATOR>?</OPERATOR> <OBJ>curPosition</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>:</OPERATOR> <FUNCTION>parseInt</FUNCTION>( curCSSLeft<OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( options ) ) {
			options <OPERATOR>=</OPERATOR> <OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> curOffset )<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>top</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD>) {
			<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>top</OO> <OPERATOR>=</OPERATOR> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>top</OO> <OPERATOR>-</OPERATOR> <OBJ>curOffset</OBJ><OPERATOR>.</OPERATOR><OO>top</OO>) <OPERATOR>+</OPERATOR> curTop<OPERATOR>;</OPERATOR>
		}
		<KEYWORD>if</KEYWORD> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD>) {
			<OBJ>props</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>=</OPERATOR> (<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>-</OPERATOR> <OBJ>curOffset</OBJ><OPERATOR>.</OPERATOR><OO>left</OO>) <OPERATOR>+</OPERATOR> curLeft<OPERATOR>;</OPERATOR>
		}
		
		<KEYWORD>if</KEYWORD> ( <STRING>"using"</STRING> <KEYWORD>in</KEYWORD> options ) {
			<OBJ>options</OBJ><OPERATOR>.</OPERATOR><OO>using</OO><OPERATOR>.</OPERATOR><OO>call</OO>( elem<OPERATOR>,</OPERATOR> props )<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> {
			<OBJ>curElem</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( props )<OPERATOR>;</OPERATOR>
		}
	}
}<OPERATOR>;</OPERATOR>


<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO><OPERATOR>.</OPERATOR><OO>extend</OO>({
	position<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR><KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR>

		<COMMENT>// Get *real* offsetParent</COMMENT>
		offsetParent <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO>()<OPERATOR>,</OPERATOR>

		<COMMENT>// Get correct offsets</COMMENT>
		offset       <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO>()<OPERATOR>,</OPERATOR>
		parentOffset <OPERATOR>=</OPERATOR> <OBJ>rroot</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(offsetParent[<NUMERIC>0</NUMERIC>]<OPERATOR>.</OPERATOR><OO>nodeName</OO>) <OPERATOR>?</OPERATOR> { top<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> left<OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC> } <OPERATOR>:</OPERATOR> <OBJ>offsetParent</OBJ><OPERATOR>.</OPERATOR><OO>offset</OO>()<OPERATOR>;</OPERATOR>

		<COMMENT>// Subtract element margins</COMMENT>
		<COMMENT>// note: when an element has margin: auto the offsetLeft and marginLeft</COMMENT>
		<COMMENT>// are the same in Safari causing offset.left to incorrectly be 0</COMMENT>
		<OBJ>offset</OBJ><OPERATOR>.</OPERATOR><OO>top</OO>  <OPERATOR>-=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(elem<OPERATOR>,</OPERATOR> <STRING>"marginTop"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<OBJ>offset</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>-=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(elem<OPERATOR>,</OPERATOR> <STRING>"marginLeft"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<COMMENT>// Add offsetParent borders</COMMENT>
		<OBJ>parentOffset</OBJ><OPERATOR>.</OPERATOR><OO>top</OO>  <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(offsetParent[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> <STRING>"borderTopWidth"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
		<OBJ>parentOffset</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>+=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(offsetParent[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> <STRING>"borderLeftWidth"</STRING>) ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

		<COMMENT>// Subtract the two offsets</COMMENT>
		<KEYWORD>return</KEYWORD> {
			top<OPERATOR>:</OPERATOR>  <OBJ>offset</OBJ><OPERATOR>.</OPERATOR><OO>top</OO>  <OPERATOR>-</OPERATOR> <OBJ>parentOffset</OBJ><OPERATOR>.</OPERATOR><OO>top</OO><OPERATOR>,</OPERATOR>
			left<OPERATOR>:</OPERATOR> <OBJ>offset</OBJ><OPERATOR>.</OPERATOR><OO>left</OO> <OPERATOR>-</OPERATOR> <OBJ>parentOffset</OBJ><OPERATOR>.</OPERATOR><OO>left</OO>
		}<OPERATOR>;</OPERATOR>
	}<OPERATOR>,</OPERATOR>

	offsetParent<OPERATOR>:</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>map</OO>(<KEYWORD>function</KEYWORD>() {
			<KEYWORD>var</KEYWORD> offsetParent <OPERATOR>=</OPERATOR> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO> <OPERATOR>||</OPERATOR> <OBJ>document</OBJ><OPERATOR>.</OPERATOR><OO>body</OO><OPERATOR>;</OPERATOR>
			<KEYWORD>while</KEYWORD> ( offsetParent <OPERATOR>&amp;&amp;</OPERATOR> (<OPERATOR>!</OPERATOR><OBJ>rroot</OBJ><OPERATOR>.</OPERATOR><OO>test</OO>(<OBJ>offsetParent</OBJ><OPERATOR>.</OPERATOR><OO>nodeName</OO>) <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>(offsetParent<OPERATOR>,</OPERATOR> <STRING>"position"</STRING>) <OPERATOR>===</OPERATOR> <STRING>"static"</STRING>) ) {
				offsetParent <OPERATOR>=</OPERATOR> <OBJ>offsetParent</OBJ><OPERATOR>.</OPERATOR><OO>offsetParent</OO><OPERATOR>;</OPERATOR>
			}
			<KEYWORD>return</KEYWORD> offsetParent<OPERATOR>;</OPERATOR>
		})<OPERATOR>;</OPERATOR>
	}
})<OPERATOR>;</OPERATOR>


<COMMENT>// Create scrollLeft and scrollTop methods</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>( [<STRING>"Left"</STRING><OPERATOR>,</OPERATOR> <STRING>"Top"</STRING>]<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> name ) {
	<KEYWORD>var</KEYWORD> method <OPERATOR>=</OPERATOR> <STRING>"scroll"</STRING> <OPERATOR>+</OPERATOR> name<OPERATOR>;</OPERATOR>

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ method ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>(val) {
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> win<OPERATOR>;</OPERATOR>
		
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem ) {
			<KEYWORD>return</KEYWORD> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( val <OPERATOR>!==</OPERATOR> <TYPE>undefined</TYPE> ) {
			<COMMENT>// Set the scroll offset</COMMENT>
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>() {
				win <OPERATOR>=</OPERATOR> getWindow( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>

				<KEYWORD>if</KEYWORD> ( win ) {
					<OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>scrollTo</OO>(
						<OPERATOR>!</OPERATOR>i <OPERATOR>?</OPERATOR> val <OPERATOR>:</OPERATOR> <FUNCTION>jQuery</FUNCTION>(win)<OPERATOR>.</OPERATOR><OO>scrollLeft</OO>()<OPERATOR>,</OPERATOR>
						 i <OPERATOR>?</OPERATOR> val <OPERATOR>:</OPERATOR> <FUNCTION>jQuery</FUNCTION>(win)<OPERATOR>.</OPERATOR><OO>scrollTop</OO>()
					)<OPERATOR>;</OPERATOR>

				} <KEYWORD>else</KEYWORD> {
					<KEYWORD>this</KEYWORD>[ method ] <OPERATOR>=</OPERATOR> val<OPERATOR>;</OPERATOR>
				}
			})<OPERATOR>;</OPERATOR>
		} <KEYWORD>else</KEYWORD> {
			win <OPERATOR>=</OPERATOR> getWindow( elem )<OPERATOR>;</OPERATOR>

			<COMMENT>// Return the scroll offset</COMMENT>
			<KEYWORD>return</KEYWORD> win <OPERATOR>?</OPERATOR> (<STRING>"pageXOffset"</STRING> <KEYWORD>in</KEYWORD> win) <OPERATOR>?</OPERATOR> win[ i <OPERATOR>?</OPERATOR> <STRING>"pageYOffset"</STRING> <OPERATOR>:</OPERATOR> <STRING>"pageXOffset"</STRING> ] <OPERATOR>:</OPERATOR>
				<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>support</OO><OPERATOR>.</OPERATOR><OO>boxModel</OO> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>documentElement</OO>[ method ] <OPERATOR>||</OPERATOR>
					<OBJ>win</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>body</OO>[ method ] <OPERATOR>:</OPERATOR>
				elem[ method ]<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>
})<OPERATOR>;</OPERATOR>

<KEYWORD>function</KEYWORD> getWindow( elem ) {
	<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isWindow</OO>( elem ) <OPERATOR>?</OPERATOR>
		elem <OPERATOR>:</OPERATOR>
		<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>9</NUMERIC> <OPERATOR>?</OPERATOR>
			<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>defaultView</OO> <OPERATOR>||</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>parentWindow</OO> <OPERATOR>:</OPERATOR>
			<KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
}




<COMMENT>// Create innerHeight, innerWidth, outerHeight and outerWidth methods</COMMENT>
<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>([ <STRING>"Height"</STRING><OPERATOR>,</OPERATOR> <STRING>"Width"</STRING> ]<OPERATOR>,</OPERATOR> <KEYWORD>function</KEYWORD>( i<OPERATOR>,</OPERATOR> name ) {

	<KEYWORD>var</KEYWORD> type <OPERATOR>=</OPERATOR> <OBJ>name</OBJ><OPERATOR>.</OPERATOR><OO>toLowerCase</OO>()<OPERATOR>;</OPERATOR>

	<COMMENT>// innerHeight and innerWidth</COMMENT>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[<STRING>"inner"</STRING> <OPERATOR>+</OPERATOR> name] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>() {
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>?</OPERATOR>
			<FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> <STRING>"padding"</STRING> ) ) <OPERATOR>:</OPERATOR>
			<KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

	<COMMENT>// outerHeight and outerWidth</COMMENT>
	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[<STRING>"outer"</STRING> <OPERATOR>+</OPERATOR> name] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( margin ) {
		<KEYWORD>return</KEYWORD> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>] <OPERATOR>?</OPERATOR>
			<FUNCTION>parseFloat</FUNCTION>( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>,</OPERATOR> type<OPERATOR>,</OPERATOR> margin <OPERATOR>?</OPERATOR> <STRING>"margin"</STRING> <OPERATOR>:</OPERATOR> <STRING>"border"</STRING> ) ) <OPERATOR>:</OPERATOR>
			<KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
	}<OPERATOR>;</OPERATOR>

	<OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>fn</OO>[ type ] <OPERATOR>=</OPERATOR> <KEYWORD>function</KEYWORD>( size ) {
		<COMMENT>// Get window width or height</COMMENT>
		<KEYWORD>var</KEYWORD> elem <OPERATOR>=</OPERATOR> <KEYWORD>this</KEYWORD>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
		<KEYWORD>if</KEYWORD> ( <OPERATOR>!</OPERATOR>elem ) {
			<KEYWORD>return</KEYWORD> size <OPERATOR>==</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>?</OPERATOR> <KEYWORD>null</KEYWORD> <OPERATOR>:</OPERATOR> <KEYWORD>this</KEYWORD><OPERATOR>;</OPERATOR>
		}
		
		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isFunction</OO>( size ) ) {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>each</OO>(<KEYWORD>function</KEYWORD>( i ) {
				<KEYWORD>var</KEYWORD> self <OPERATOR>=</OPERATOR> <FUNCTION>jQuery</FUNCTION>( <KEYWORD>this</KEYWORD> )<OPERATOR>;</OPERATOR>
				self[ type ]( <OBJ>size</OBJ><OPERATOR>.</OPERATOR><OO>call</OO>( <KEYWORD>this</KEYWORD><OPERATOR>,</OPERATOR> i<OPERATOR>,</OPERATOR> self[ type ]() ) )<OPERATOR>;</OPERATOR>
			})<OPERATOR>;</OPERATOR>
		}

		<KEYWORD>if</KEYWORD> ( <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isWindow</OO>( elem ) ) {
			<COMMENT>// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode</COMMENT>
			<KEYWORD>return</KEYWORD> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>compatMode</OO> <OPERATOR>===</OPERATOR> <STRING>"CSS1Compat"</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>documentElement</OO>[ <STRING>"client"</STRING> <OPERATOR>+</OPERATOR> name ] <OPERATOR>||</OPERATOR>
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>document</OO><OPERATOR>.</OPERATOR><OO>body</OO>[ <STRING>"client"</STRING> <OPERATOR>+</OPERATOR> name ]<OPERATOR>;</OPERATOR>

		<COMMENT>// Get document width or height</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>nodeType</OO> <OPERATOR>===</OPERATOR> <NUMERIC>9</NUMERIC> ) {
			<COMMENT>// Either scroll[Width/Height] or offset[Width/Height], whichever is greater</COMMENT>
			<KEYWORD>return</KEYWORD> <OBJ>Math</OBJ><OPERATOR>.</OPERATOR><OO>max</OO>(
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO>[<STRING>"client"</STRING> <OPERATOR>+</OPERATOR> name]<OPERATOR>,</OPERATOR>
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>body</OO>[<STRING>"scroll"</STRING> <OPERATOR>+</OPERATOR> name]<OPERATOR>,</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO>[<STRING>"scroll"</STRING> <OPERATOR>+</OPERATOR> name]<OPERATOR>,</OPERATOR>
				<OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>body</OO>[<STRING>"offset"</STRING> <OPERATOR>+</OPERATOR> name]<OPERATOR>,</OPERATOR> <OBJ>elem</OBJ><OPERATOR>.</OPERATOR><OO>documentElement</OO>[<STRING>"offset"</STRING> <OPERATOR>+</OPERATOR> name]
			)<OPERATOR>;</OPERATOR>

		<COMMENT>// Get or set width or height on the element</COMMENT>
		} <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> ( size <OPERATOR>===</OPERATOR> <TYPE>undefined</TYPE> ) {
			<KEYWORD>var</KEYWORD> orig <OPERATOR>=</OPERATOR> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( elem<OPERATOR>,</OPERATOR> type )<OPERATOR>,</OPERATOR>
				ret <OPERATOR>=</OPERATOR> <FUNCTION>parseFloat</FUNCTION>( orig )<OPERATOR>;</OPERATOR>

			<KEYWORD>return</KEYWORD> <OBJ>jQuery</OBJ><OPERATOR>.</OPERATOR><OO>isNaN</OO>( ret ) <OPERATOR>?</OPERATOR> orig <OPERATOR>:</OPERATOR> ret<OPERATOR>;</OPERATOR>

		<COMMENT>// Set the width or height on the element (default to pixels if value is unitless)</COMMENT>
		} <KEYWORD>else</KEYWORD> {
			<KEYWORD>return</KEYWORD> <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>css</OO>( type<OPERATOR>,</OPERATOR> <KEYWORD>typeof</KEYWORD> size <OPERATOR>===</OPERATOR> <STRING>"string"</STRING> <OPERATOR>?</OPERATOR> size <OPERATOR>:</OPERATOR> size <OPERATOR>+</OPERATOR> <STRING>"px"</STRING> )<OPERATOR>;</OPERATOR>
		}
	}<OPERATOR>;</OPERATOR>

})<OPERATOR>;</OPERATOR>


})(<TYPE>window</TYPE>)<OPERATOR>;</OPERATOR>
