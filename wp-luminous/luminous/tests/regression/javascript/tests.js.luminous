<COMMENT>// contrived, not real</COMMENT>
<COMMENT>//</COMMENT>

<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>xyz<DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> x <OPERATOR>/</OPERATOR>xyz<OPERATOR>/</OPERATOR> <OPERATOR>;</OPERATOR> <COMMENT>// snytax error, but technically division with a missing operand.</COMMENT>
<COMMENT>// slashes don't need escaping in char classes</COMMENT>
<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>123<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>45/6<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>a<DELIMITER>/</DELIMITER><KEYWORD>ig</KEYWORD></REGEX>
<COMMENT>// not a char class</COMMENT>
<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>123<ESC>\[</ESC>123<DELIMITER>/</DELIMITER></REGEX>]<OPERATOR>;</OPERATOR>
avar x <OPERATOR>=</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>123<REGEX_CLASS_MARKER>[</REGEX_CLASS_MARKER>/abc/<ESC>\]</ESC>aa<REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER>b<ESC>\.</ESC><ESC>\/</ESC><REGEX_CLASS_MARKER>]</REGEX_CLASS_MARKER><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD></REGEX><OPERATOR>;</OPERATOR>
g <OPERATOR>=</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>;</OPERATOR>
<COMMENT>// vim gets this wrong</COMMENT>
<NUMERIC>4</NUMERIC><OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>/</OPERATOR>g       


<STRING>"this is an unterminated string</STRING>
eek
<STRING>"this is not \</STRING>
<STRING>    an unterminated string"</STRING><OPERATOR>;</OPERATOR>
<STRING>'same story</STRING>
here
<STRING>'xyz\</STRING>
<STRING>    abc'</STRING><OPERATOR>;</OPERATOR>


[<REGEX><DELIMITER>/</DELIMITER>123<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>regex<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR> 
  <COMMENT>// hello )</COMMENT>
  <REGEX><DELIMITER>/</DELIMITER>345<DELIMITER>/</DELIMITER></REGEX>]<OPERATOR>;</OPERATOR>

<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <XML>&lt;<HTMLTAG>iam</HTMLTAG>&gt;an XML literal &lt;<HTMLTAG>/iam</HTMLTAG>&gt;</XML><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <XML>&lt;<HTMLTAG>iamanxmlliteral</HTMLTAG>/&gt;</XML>
<COMMENT>// we don't validate their XML, we just keep track of how many open tags there</COMMENT>
<COMMENT>// are. From our point of view, this is complete</COMMENT>
<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <XML>&lt;<HTMLTAG>i</HTMLTAG> <TYPE>am</TYPE> &gt; &lt;<HTMLTAG>an</HTMLTAG>&gt; &lt;<HTMLTAG>/xml</HTMLTAG>&gt; &lt;<HTMLTAG>/literal</HTMLTAG>&gt;</XML><OPERATOR>;</OPERATOR>
<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <XML>&lt;<HTMLTAG>i</HTMLTAG> <TYPE>am</TYPE>&gt; &lt;<HTMLTAG>an</HTMLTAG>/&gt; &lt;<HTMLTAG>/xml</HTMLTAG>&gt;</XML> literal
<COMMENT>// not XML</COMMENT>
<KEYWORD>var</KEYWORD> x <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>&lt;</OPERATOR>i<OPERATOR>&gt;</OPERATOR> am not xml<OPERATOR>;</OPERATOR>

{ <STRING>'key'</STRING><OPERATOR>:</OPERATOR> <REGEX><DELIMITER>/</DELIMITER>regex<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
  <STRING>'another'</STRING><OPERATOR>:</OPERATOR>
    <COMMENT>// xyz,</COMMENT>
    <REGEX><DELIMITER>/</DELIMITER>regex<DELIMITER>/</DELIMITER></REGEX><OPERATOR>,</OPERATOR>
    <NUMERIC>1</NUMERIC>
    <COMMENT>// xyz,</COMMENT>
    <OPERATOR>/</OPERATOR><NUMERIC>2</NUMERIC><OPERATOR>/</OPERATOR>i<OPERATOR>,</OPERATOR>
  <STRING>'key2'</STRING><OPERATOR>:</OPERATOR> <XML>&lt;<HTMLTAG>xml</HTMLTAG>/&gt;</XML><OPERATOR>,</OPERATOR>
  <STRING>'another'</STRING><OPERATOR>:</OPERATOR> <COMMENT>/*  this shouldn't confuse    */</COMMENT> <COMMENT>// us</COMMENT>
    <XML>&lt;<HTMLTAG>xml</HTMLTAG>&gt;,</XML>
<XML>}</XML>
<XML></XML>
<XML></XML>
<XML></XML>