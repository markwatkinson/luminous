<COMMENT>{- Parsec parser for fullerror.  The sole expected method, parseFullError,</COMMENT>
<COMMENT>   takes a string as input, and returns a list of terms, where each term</COMMENT>
<COMMENT>   was separated by a semicolon in the input.</COMMENT>
<COMMENT> -}</COMMENT>
<KEYWORD>module</KEYWORD> <TYPE>Parser</TYPE> ( parseFullError ) <KEYWORD>where</KEYWORD>

<KEYWORD>import</KEYWORD> <TYPE>Text</TYPE><FUNCTION>.</FUNCTION><TYPE>ParserCombinators</TYPE><FUNCTION>.</FUNCTION><TYPE>Parsec</TYPE>
<KEYWORD>import</KEYWORD> <KEYWORD>qualified</KEYWORD> <TYPE>Text</TYPE><FUNCTION>.</FUNCTION><TYPE>ParserCombinators</TYPE><FUNCTION>.</FUNCTION><TYPE>Parsec</TYPE><FUNCTION>.</FUNCTION><TYPE>Token</TYPE> <KEYWORD>as</KEYWORD> <TYPE>P</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>Text</TYPE><FUNCTION>.</FUNCTION><TYPE>ParserCombinators</TYPE><FUNCTION>.</FUNCTION><TYPE>Parsec</TYPE><FUNCTION>.</FUNCTION><TYPE>Language</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>Control</TYPE><FUNCTION>.</FUNCTION><TYPE>Monad</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>Control</TYPE><FUNCTION>.</FUNCTION><TYPE>Monad</TYPE><FUNCTION>.</FUNCTION><TYPE>Error</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>Control</TYPE><FUNCTION>.</FUNCTION><TYPE>Monad</TYPE><FUNCTION>.</FUNCTION><TYPE>State</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>Data</TYPE><FUNCTION>.</FUNCTION><TYPE>Char</TYPE>

<KEYWORD>import</KEYWORD> <TYPE>Syntax</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>Typing</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>TaplError</TYPE>
<KEYWORD>import</KEYWORD> <TYPE>SimpleContext</TYPE>

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Lexer, making use of the Parsec.Token and Language</COMMENT>
<COMMENT>   modules for ease of lexing programming language constructs</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>
fullErrorDef <OPERATOR>=</OPERATOR> <TYPE>LanguageDef</TYPE>
                { commentStart    <OPERATOR>=</OPERATOR> <STRING>"/*"</STRING>
                , commentEnd      <OPERATOR>=</OPERATOR> <STRING>"*/"</STRING>
                , commentLine     <OPERATOR>=</OPERATOR> <STRING>""</STRING>
                , nestedComments  <OPERATOR>=</OPERATOR> <TYPE>False</TYPE>
                , identStart      <OPERATOR>=</OPERATOR> letter 
                , identLetter     <OPERATOR>=</OPERATOR> letter <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> digit
                , opStart         <OPERATOR>=</OPERATOR> <FUNCTION>fail</FUNCTION> <STRING>"no operators"</STRING>
                , opLetter        <OPERATOR>=</OPERATOR> <FUNCTION>fail</FUNCTION> <STRING>"no operators"</STRING>
                , reservedOpNames <OPERATOR>=</OPERATOR> <OPERATOR>[]</OPERATOR>
                , caseSensitive   <OPERATOR>=</OPERATOR> <TYPE>True</TYPE>
                , reservedNames   <OPERATOR>=</OPERATOR> <OPERATOR>[</OPERATOR><STRING>"inert"</STRING>, <STRING>"true"</STRING>, <STRING>"false"</STRING>, <STRING>"if"</STRING>, <STRING>"then"</STRING>, <STRING>"else"</STRING>, <STRING>"Bool"</STRING>, <STRING>"Nat"</STRING>, <STRING>"String"</STRING>, <STRING>"Unit"</STRING>, <STRING>"Float"</STRING>, <STRING>"case"</STRING>, <STRING>"of"</STRING>, <STRING>"as"</STRING>, <STRING>"lambda"</STRING>, <STRING>"let"</STRING>, <STRING>"in"</STRING>, <STRING>"fix"</STRING>, <STRING>"letrec"</STRING>, <STRING>"timesfloat"</STRING>, <STRING>"succ"</STRING>, <STRING>"pred"</STRING>, <STRING>"iszero"</STRING>, <STRING>"unit"</STRING>, <STRING>"try"</STRING>, <STRING>"with"</STRING>, <STRING>"error"</STRING>, <STRING>"Bot"</STRING><OPERATOR>]</OPERATOR>
                }

lexer <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>makeTokenParser</OO> fullErrorDef

parens        <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>parens</OO>        lexer
braces        <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>braces</OO>        lexer
squares       <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>squares</OO>       lexer
identifier    <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>identifier</OO>    lexer
reserved      <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>reserved</OO>      lexer
symbol        <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>symbol</OO>        lexer
whiteSpace    <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>whiteSpace</OO>    lexer
float         <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>float</OO>         lexer
semi          <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>semi</OO>          lexer
comma         <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>comma</OO>         lexer
colon         <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>colon</OO>         lexer
stringLiteral <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>stringLiteral</OO> lexer
natural       <OPERATOR>=</OPERATOR> <TYPE>P</TYPE><FUNCTION>.</FUNCTION><OO>natural</OO>       lexer

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Parsing Binders</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

<COMMENT>-- due to the definition of "identState" in fullErrorDef,</COMMENT>
<COMMENT>-- this is the only way that an underscore can enter our system,</COMMENT>
<COMMENT>-- and thus there is no chance of it being misused as a variable elsewhere</COMMENT>
parseVarBind <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> var <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> symbol <STRING>"_"</STRING>
                  symbol <STRING>":"</STRING>
                  ty <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseType
                  <KEYWORD>let</KEYWORD> binding <OPERATOR>=</OPERATOR> <TYPE>VarBind</TYPE> ty
                  updateState <FUNCTION>$</FUNCTION> appendBinding var binding
                  <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmBind</TYPE> var binding


parseAbbBind forLetrec
    <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> var <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> symbol <STRING>"_"</STRING>
         <COMMENT>-- For a letrec, we need to temporarily add a binding, so that</COMMENT>
         <COMMENT>-- we can lookup this variable while parsing the body.  </COMMENT>
         <COMMENT>-- Note that both setState calls use the original Context</COMMENT>
         ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
         when forLetrec <FUNCTION>$</FUNCTION> setState <FUNCTION>$</FUNCTION> appendBinding var <TYPE>NameBind</TYPE> ctx
         binding <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getBinding var
         setState <FUNCTION>$</FUNCTION> appendBinding var binding ctx
         <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmBind</TYPE> var binding
    <KEYWORD>where</KEYWORD> getBinding var <OPERATOR>=</OPERATOR> <KEYWORD>if</KEYWORD> (isUpper <FUNCTION>$</FUNCTION> var <FUNCTION>!!</FUNCTION> <NUMERIC>0</NUMERIC>)
                           <KEYWORD>then</KEYWORD> (try <FUNCTION>$</FUNCTION> completeTyAbbBind var) <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
                                (<FUNCTION>return</FUNCTION> <TYPE>TyVarBind</TYPE>)
                           <KEYWORD>else</KEYWORD> withType <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> withoutType
          withoutType    <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> symbol <STRING>"="</STRING>
                              t <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
                              liftM (<TYPE>TmAbbBind</TYPE> t) (getType t)
          withType       <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> symbol <STRING>":"</STRING>
                              ty <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseType
                              symbol <STRING>"="</STRING>
                              liftM ((<FUNCTION>flip</FUNCTION> <TYPE>TmAbbBind</TYPE>) (<TYPE>Just</TYPE> ty)) parseTerm
          completeTyAbbBind var 
                         <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> symbol <STRING>"="</STRING>
                              ty <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseType
                              <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TyAbbBind</TYPE> ty
          getType t      <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
                              <KEYWORD>case</KEYWORD> evalState (runErrorT (typeof t)) ctx <KEYWORD>of</KEYWORD>
                                <TYPE>Left</TYPE> err <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>Nothing</TYPE>
                                <TYPE>Right</TYPE> ty <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>Just</TYPE> ty

parseBinder <OPERATOR>=</OPERATOR> (try parseVarBind) <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> (parseAbbBind <TYPE>False</TYPE>)

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Parsing Types</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseTypeBool   <OPERATOR>=</OPERATOR> reserved <STRING>"Bool"</STRING>   <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyBool</TYPE>

parseTypeNat    <OPERATOR>=</OPERATOR> reserved <STRING>"Nat"</STRING>    <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyNat</TYPE>

parseTypeFloat  <OPERATOR>=</OPERATOR> reserved <STRING>"Float"</STRING>  <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyFloat</TYPE>

parseTypeUnit   <OPERATOR>=</OPERATOR> reserved <STRING>"Unit"</STRING>   <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyUnit</TYPE>

parseTypeString <OPERATOR>=</OPERATOR> reserved <STRING>"String"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyString</TYPE>

parseTypeBot    <OPERATOR>=</OPERATOR> reserved <STRING>"Bot"</STRING>    <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyBot</TYPE>

parseNamedType  <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> ty <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier
                     <KEYWORD>if</KEYWORD> isUpper <FUNCTION>$</FUNCTION> ty <FUNCTION>!!</FUNCTION> <NUMERIC>0</NUMERIC>
                       <KEYWORD>then</KEYWORD> makeNamedType ty
                       <KEYWORD>else</KEYWORD> <FUNCTION>fail</FUNCTION> <STRING>"types must start with an uppercase letter"</STRING>
    <KEYWORD>where</KEYWORD> makeNamedType ty       <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState 
                                      throwsToParser <FUNCTION>$</FUNCTION> makeTyVarOrTyId ty ctx
          makeTyVarOrTyId ty ctx <OPERATOR>=</OPERATOR> catchError (makeTyVar ty ctx) 
                                   (<FUNCTION>\e</FUNCTION> <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TyId</TYPE> ty)
          makeTyVar       ty ctx <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> idx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> indexOf ty ctx
                                      <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TyVar</TYPE> <FUNCTION>$</FUNCTION> <TYPE>TmVar</TYPE> idx (ctxLength ctx)

parseVariantType <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> symbol <STRING>"&lt;"</STRING>
                      fields <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> sepBy1 parseField comma
                      symbol <STRING>"&gt;"</STRING>
                      <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TyVariant</TYPE> fields
    <KEYWORD>where</KEYWORD> parseField <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> var <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier
                          colon
                          ty <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseType
                          <FUNCTION>return</FUNCTION> (var, ty)

parseTypeArr <OPERATOR>=</OPERATOR> parseTypeBool   <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseTypeNat    <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseTypeFloat  <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseTypeUnit   <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseTypeString <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseTypeBot    <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseNamedType  <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               parseVariantType  <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
               braces parseType

parseType <OPERATOR>=</OPERATOR> parseTypeArr <OPERATOR>`chainr1`</OPERATOR> (symbol <STRING>"-&gt;"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TyArr</TYPE>)

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Parsing zero-arg terms</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseTrue  <OPERATOR>=</OPERATOR> reserved <STRING>"true"</STRING>  <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TmTrue</TYPE>

parseFalse <OPERATOR>=</OPERATOR> reserved <STRING>"false"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TmFalse</TYPE>

parseUnit  <OPERATOR>=</OPERATOR> reserved <STRING>"unit"</STRING>  <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TmUnit</TYPE>

parseNat <OPERATOR>=</OPERATOR> liftM numToSucc natural
    <KEYWORD>where</KEYWORD> numToSucc <NUMERIC>0</NUMERIC> <OPERATOR>=</OPERATOR> <TYPE>TmZero</TYPE>
          numToSucc n <OPERATOR>=</OPERATOR> <TYPE>TmSucc</TYPE> <FUNCTION>$</FUNCTION> numToSucc (n <FUNCTION>-</FUNCTION> <NUMERIC>1</NUMERIC>)

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Arith Parsers</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseOneArg keyword constructor <OPERATOR>=</OPERATOR> reserved keyword <FUNCTION>&gt;&gt;</FUNCTION> 
                                  liftM constructor parseTerm

parseSucc   <OPERATOR>=</OPERATOR> parseOneArg <STRING>"succ"</STRING>   <TYPE>TmSucc</TYPE>

parsePred   <OPERATOR>=</OPERATOR> parseOneArg <STRING>"pred"</STRING>   <TYPE>TmPred</TYPE>

parseIsZero <OPERATOR>=</OPERATOR> parseOneArg <STRING>"iszero"</STRING> <TYPE>TmIsZero</TYPE>

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Other Parsers</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseString <OPERATOR>=</OPERATOR> liftM <TYPE>TmString</TYPE> stringLiteral 

parseFloat <OPERATOR>=</OPERATOR> liftM <TYPE>TmFloat</TYPE> float

parseTimesFloat <OPERATOR>=</OPERATOR> reserved <STRING>"timesfloat"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> 
                  liftM2 <TYPE>TmTimesFloat</TYPE> parseNonApp parseNonApp

parseIf <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> reserved <STRING>"if"</STRING>
             t1 <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
             reserved <STRING>"then"</STRING>
             t2 <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
             reserved <STRING>"else"</STRING>
             liftM (<TYPE>TmIf</TYPE> t1 t2) parseTerm

parseVar <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> var <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier
              <KEYWORD>if</KEYWORD> (isUpper <FUNCTION>$</FUNCTION> var <FUNCTION>!!</FUNCTION> <NUMERIC>0</NUMERIC>)
                <KEYWORD>then</KEYWORD> <FUNCTION>fail</FUNCTION> <STRING>"variables must start with a lowercase letter"</STRING>
                <KEYWORD>else</KEYWORD> <KEYWORD>do</KEYWORD> ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
                        idx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> throwsToParser <FUNCTION>$</FUNCTION> indexOf var ctx
                        <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmVar</TYPE> idx (ctxLength ctx)

parseInert <OPERATOR>=</OPERATOR> reserved <STRING>"inert"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> squares (liftM <TYPE>TmInert</TYPE> parseType)

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   let/lambda</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

<COMMENT>-- for both let and lambda, we need to make sure we restore the</COMMENT>
<COMMENT>-- state after parsing the body, so that the lexical binding doesn't leak</COMMENT>
parseAbs <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> reserved <STRING>"lambda"</STRING>
              ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
              (<TYPE>TmBind</TYPE> var (<TYPE>VarBind</TYPE> ty)) <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseVarBind
              symbol <STRING>"."</STRING>
              body <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
              setState ctx
              <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmAbs</TYPE> var ty body

parseLet <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> reserved <STRING>"let"</STRING>
              ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
              (<TYPE>TmBind</TYPE> var binding) <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> (parseAbbBind <TYPE>False</TYPE>)
              reserved <STRING>"in"</STRING>
              body <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
              setState ctx
              <KEYWORD>case</KEYWORD> binding <KEYWORD>of</KEYWORD>
                <TYPE>TmAbbBind</TYPE> t ty <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmLet</TYPE> var t body
                <FUNCTION>otherwise</FUNCTION>      <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>fail</FUNCTION> <STRING>"malformed let statement"</STRING>

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Fix and Letrec</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseLetrec <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> reserved <STRING>"letrec"</STRING>
                 ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
                 (<TYPE>TmBind</TYPE> var binding) <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> (parseAbbBind <TYPE>True</TYPE>)
                 reserved <STRING>"in"</STRING>
                 body <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
                 setState ctx
                 <KEYWORD>case</KEYWORD> binding <KEYWORD>of</KEYWORD>
                   <TYPE>TmAbbBind</TYPE> t (<TYPE>Just</TYPE> ty)
                       <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmLet</TYPE> var (<TYPE>TmFix</TYPE> (<TYPE>TmAbs</TYPE> var ty t)) body
                   <FUNCTION>otherwise</FUNCTION>      
                       <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>fail</FUNCTION> <STRING>"malformed letrec statement"</STRING>

parseFix <OPERATOR>=</OPERATOR> reserved <STRING>"fix"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> liftM <TYPE>TmFix</TYPE> parseTerm

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Records and Projections</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

<COMMENT>-- Fields can either be named or not.  If they are not, then they</COMMENT>
<COMMENT>-- are numbered starting with 1.  To keep parsing the fields simple,</COMMENT>
<COMMENT>-- we label them with -1 at first if they have no name.  We then</COMMENT>
<COMMENT>-- replace the -1's with the correct index as a post-processing step.</COMMENT>
parseRecord <OPERATOR>=</OPERATOR> braces <FUNCTION>$</FUNCTION> liftM <TYPE>TmRecord</TYPE> <FUNCTION>$</FUNCTION> liftM (addNumbers <NUMERIC>1</NUMERIC>) <FUNCTION>$</FUNCTION> 
              sepBy parseRecordField comma
    <KEYWORD>where</KEYWORD> addNumbers _ <OPERATOR>[]</OPERATOR> <OPERATOR>=</OPERATOR> <OPERATOR>[]</OPERATOR>
          addNumbers i ((<STRING>"-1"</STRING>,t)<OPERATOR>:</OPERATOR>fs) <OPERATOR>=</OPERATOR> (<FUNCTION>show</FUNCTION> i, t) <OPERATOR>:</OPERATOR> (addNumbers (i<FUNCTION>+</FUNCTION><NUMERIC>1</NUMERIC>) fs)
          addNumbers i (       f<OPERATOR>:</OPERATOR>fs) <OPERATOR>=</OPERATOR>           f <OPERATOR>:</OPERATOR> (addNumbers (i<FUNCTION>+</FUNCTION><NUMERIC>1</NUMERIC>) fs)

parseRecordField <OPERATOR>=</OPERATOR> liftM2 (,) parseName parseTerm
    <KEYWORD>where</KEYWORD> parseName <OPERATOR>=</OPERATOR> (try (<KEYWORD>do</KEYWORD> {name <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier<OPERATOR>;</OPERATOR> symbol <STRING>"="</STRING><OPERATOR>;</OPERATOR> <FUNCTION>return</FUNCTION> name}))
                      <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> <STRING>"-1"</STRING>

parseProj <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> t <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseRecord <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> parens parseTerm
               symbol <STRING>"."</STRING>
               liftM (<TYPE>TmProj</TYPE> t) (identifier <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> (liftM <FUNCTION>show</FUNCTION> natural))

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Variants and Cases</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseVariant <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> symbol <STRING>"&lt;"</STRING>
                  var <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier
                  symbol <STRING>"="</STRING>
                  t <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
                  symbol <STRING>"&gt;"</STRING>
                  reserved <STRING>"as"</STRING>
                  liftM (<TYPE>TmTag</TYPE> var t) parseType

parseCase <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> reserved <STRING>"case"</STRING>
               t <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
               reserved <STRING>"of"</STRING>
               liftM (<TYPE>TmCase</TYPE> t) <FUNCTION>$</FUNCTION> sepBy1 parseBranch (symbol <STRING>"|"</STRING>)
    <KEYWORD>where</KEYWORD> parseBranch <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> symbol <STRING>"&lt;"</STRING>
                           label <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier
                           symbol <STRING>"="</STRING>
                           var <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> identifier
                           symbol <STRING>"&gt;"</STRING>
                           symbol <STRING>"==&gt;"</STRING>
                           ctx <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> getState
                           setState <FUNCTION>$</FUNCTION> appendBinding var <TYPE>NameBind</TYPE> ctx
                           t <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
                           setState ctx
                           <FUNCTION>return</FUNCTION> (label, (var,t))

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Exceptions</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseError <OPERATOR>=</OPERATOR> reserved <STRING>"error"</STRING> <FUNCTION>&gt;&gt;</FUNCTION> <FUNCTION>return</FUNCTION> (<TYPE>TmError</TYPE> <TYPE>TyBot</TYPE>)

parseTryWith <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> reserved <STRING>"try"</STRING>
                  t1 <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseTerm
                  reserved <STRING>"with"</STRING>
                  liftM (<TYPE>TmTry</TYPE> t1) parseTerm

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Putting it all together</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

parseNonApp <OPERATOR>=</OPERATOR> parseTrue <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseFalse <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseSucc <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parsePred <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseIsZero <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseIf <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              (try parseFloat) <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseTimesFloat <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseNat <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseAbs <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseLet <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              (try parseBinder) <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseVar <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseUnit <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseString <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              (try parseProj) <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseRecord <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseCase <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseVariant <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseInert <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseFix <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseLetrec <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseError <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parseTryWith <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION>
              parens parseTerm

<COMMENT>-- parses a non-application which could be an ascription</COMMENT>
<COMMENT>-- (the non-application parsing is left-factored)</COMMENT>
parseNonAppOrAscribe <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> t <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseNonApp
                          (<KEYWORD>do</KEYWORD> reserved <STRING>"as"</STRING>
                              ty <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> parseType
                              <FUNCTION>return</FUNCTION> <FUNCTION>$</FUNCTION> <TYPE>TmAscribe</TYPE> t ty) <FUNCTION>&lt;</FUNCTION><FUNCTION>|</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> t

<COMMENT>-- For non-applications, we don't need to deal with associativity,</COMMENT>
<COMMENT>-- but we need to special handling (in the form of 'chainl1' here)</COMMENT>
<COMMENT>-- so that we enforce left-associativity as we aggregate a list of terms</COMMENT>
parseTerm <OPERATOR>=</OPERATOR> chainl1 parseNonAppOrAscribe <FUNCTION>$</FUNCTION> <FUNCTION>return</FUNCTION> <TYPE>TmApp</TYPE>

parseTerms <OPERATOR>=</OPERATOR> <KEYWORD>do</KEYWORD> whiteSpace <COMMENT>-- lexer handles whitespace everywhere except here</COMMENT>
                ts <FUNCTION>&lt;</FUNCTION><FUNCTION>-</FUNCTION> endBy1 parseTerm semi
                eof
                <FUNCTION>return</FUNCTION> ts

parseFullError <OPERATOR>::</OPERATOR> <TYPE>String</TYPE> <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <TYPE>ThrowsError</TYPE> <OPERATOR>[</OPERATOR><TYPE>Term</TYPE><OPERATOR>]</OPERATOR>
parseFullError str 
    <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> runParser parseTerms newContext <STRING>"fullerror Parser"</STRING> str <KEYWORD>of</KEYWORD>
        <TYPE>Left</TYPE> err <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> throwError <FUNCTION>$</FUNCTION> <TYPE>ParserError</TYPE> <FUNCTION>$</FUNCTION> <FUNCTION>show</FUNCTION> err
        <TYPE>Right</TYPE> ts <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>return</FUNCTION> ts

<COMMENT>{- ------------------------------</COMMENT>
<COMMENT>   Helpers</COMMENT>
<COMMENT>   ------------------------------ -}</COMMENT>

throwsToParser action <OPERATOR>=</OPERATOR> <KEYWORD>case</KEYWORD> action <KEYWORD>of</KEYWORD>
                          <TYPE>Left</TYPE> err  <FUNCTION>-</FUNCTION><FUNCTION>&gt;</FUNCTION> <FUNCTION>fail</FUNCTION> <FUNCTION>$</FUNCTION> sho