<COMMENT>#Ruby supports multiline strings by providing two types of here doc syntax. The first syntax uses and additional dash, but allows you to indent the "end of here doc" delimiter ('eos' in the example).</COMMENT>
  <DELIMITER>&lt;&lt;-eos</DELIMITER>
<HEREDOC>    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor </HEREDOC>
<HEREDOC>    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </HEREDOC>
<HEREDOC>    exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute </HEREDOC>
<HEREDOC>    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla </HEREDOC>
<HEREDOC>    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia</HEREDOC>
<HEREDOC>    deserunt mollit anim id est laborum.</HEREDOC>
<HEREDOC>    ' "</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>  eos</DELIMITER>
<COMMENT>#Another here doc syntax doesn't require you to use the dash, but it does require that the "end of here doc" delimiter is in column 1 (or there are no spaces that precede it).</COMMENT>
  <DELIMITER>&lt;&lt;eos</DELIMITER>
<HEREDOC>    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor </HEREDOC>
<HEREDOC>    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </HEREDOC>
<HEREDOC>    exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute </HEREDOC>
<HEREDOC>    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla </HEREDOC>
<HEREDOC>    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia</HEREDOC>
<HEREDOC>    deserunt mollit anim id est laborum.</HEREDOC>
<HEREDOC>    ' "</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>eos</DELIMITER>
<COMMENT>#Both options support the following syntax when passed as a parameter.</COMMENT>
  <CONSTANT>Content</CONSTANT>.<OO>new</OO>(<VALUE>:value</VALUE> <OPERATOR>=&gt;</OPERATOR> <DELIMITER>&lt;&lt;eos</DELIMITER>)
<HEREDOC>    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor </HEREDOC>
<HEREDOC>    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </HEREDOC>
<HEREDOC>    exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute </HEREDOC>
<HEREDOC>    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla </HEREDOC>
<HEREDOC>    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia</HEREDOC>
<HEREDOC>    ' "</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>eos</DELIMITER>

 <CONSTANT>Content</CONSTANT>.<OO>new</OO>(<VALUE>:value</VALUE> <OPERATOR>=&gt;</OPERATOR> <DELIMITER>&lt;&lt;eos</DELIMITER>
<HEREDOC>    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor </HEREDOC>
<HEREDOC>    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </HEREDOC>
<HEREDOC>    exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute </HEREDOC>
<HEREDOC>    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla </HEREDOC>
<HEREDOC>    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia</HEREDOC>
<HEREDOC>    ' "</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>eos</DELIMITER>
)
<COMMENT>#As an alternative, you could also pass the parameter using quotes.</COMMENT>
  <CONSTANT>Content</CONSTANT>.<OO>new</OO>(<VALUE>:value</VALUE> <OPERATOR>=&gt;</OPERATOR> <STRING>"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor </STRING>
<STRING>    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </STRING>
<STRING>    exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute </STRING>
<STRING>    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla </STRING>
<STRING>    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia"</STRING>)
             
             
             
             
             
             
<FUNCTION>print</FUNCTION> <DELIMITER>&lt;&lt;EOF</DELIMITER>
<HEREDOC>The price is </HEREDOC><DELIMITER>#{</DELIMITER><INTERPOLATION><VARIABLE>$Price</VARIABLE></INTERPOLATION><DELIMITER>}</DELIMITER><HEREDOC>.</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>EOF</DELIMITER>

<FUNCTION>print</FUNCTION> <DELIMITER>&lt;&lt;"EOF"</DELIMITER><OPERATOR>;</OPERATOR>          <COMMENT># same as above</COMMENT>
<HEREDOC>The price is </HEREDOC><DELIMITER>#{</DELIMITER><INTERPOLATION><VARIABLE>$Price</VARIABLE></INTERPOLATION><DELIMITER>}</DELIMITER><HEREDOC>.</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>EOF</DELIMITER>

<FUNCTION>print</FUNCTION> <DELIMITER>&lt;&lt;`EOC`</DELIMITER>           <COMMENT># execute commands</COMMENT>
<HEREDOC>echo hi there</HEREDOC>
<HEREDOC>echo lo there</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>EOC</DELIMITER>

<COMMENT># this should go until the indented one</COMMENT>
<FUNCTION>print</FUNCTION> <DELIMITER>&lt;&lt;"foo"</DELIMITER>, <DELIMITER>&lt;&lt;-"bar"</DELIMITER>  <COMMENT># you can stack them</COMMENT>
<HEREDOC>I said foo.</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>foo</DELIMITER><HEREDOC></HEREDOC>
<HEREDOC>I said bar.</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>    bar</DELIMITER>

<COMMENT># Kate gets this one wrong</COMMENT>
myfunc(<DELIMITER>&lt;&lt;"THIS"</DELIMITER>, <NUMERIC>23</NUMERIC>, <DELIMITER>&lt;&lt;'THAT'</DELIMITER>)
<HEREDOC>Here's a line</HEREDOC>
<HEREDOC>or two.</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>THIS</DELIMITER><HEREDOC></HEREDOC>
<HEREDOC>and here's another.</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>THAT</DELIMITER>

<KEYWORD>if</KEYWORD> need_define_foo
<FUNCTION>eval</FUNCTION> <DELIMITER>&lt;&lt;-EOS</DELIMITER>         <COMMENT># delimiters can be indented</COMMENT>
<HEREDOC>def foo</HEREDOC>
<HEREDOC>print "foo\n"</HEREDOC>
<HEREDOC>end</HEREDOC>
<HEREDOC></HEREDOC><DELIMITER>EOS</DELIMITER>
<KEYWORD>end</KEYWORD>
