<KEYWORD>package</KEYWORD> dom

<COMMENT>/*</COMMENT>
<COMMENT> * Node implementation</COMMENT>
<COMMENT> *</COMMENT>
<COMMENT> * Copyright (c) 2009, Rob Russell</COMMENT>
<COMMENT> * Copyright (c) 2010, Jeff Schiller</COMMENT>
<COMMENT> */</COMMENT>

<COMMENT>// <COMMENT_NOTE>TODO:</COMMENT_NOTE> think about how to make this class a bit more generic to promote extensibility</COMMENT>
<COMMENT>//       (for instance, this class has to know about Attr, Element and Document types to</COMMENT>
<COMMENT>//        implement NodeName() among other things)</COMMENT>

<KEYWORD>import</KEYWORD> (
  <STRING>"container/vector"</STRING><OPERATOR>;</OPERATOR>
  <STRING>"xml"</STRING><OPERATOR>;</OPERATOR>
)

<KEYWORD>type</KEYWORD> <USER_FUNCTION>_node</USER_FUNCTION> <KEYWORD>struct</KEYWORD> {
  T <TYPE>int</TYPE><OPERATOR>;</OPERATOR> <COMMENT>// node type</COMMENT>
  p Node<OPERATOR>;</OPERATOR> <COMMENT>// parent</COMMENT>
  c <OBJ>vector</OBJ><OPERATOR>.</OPERATOR><OO>Vector</OO><OPERATOR>;</OPERATOR> <COMMENT>// children</COMMENT>
  n <OBJ>xml</OBJ><OPERATOR>.</OPERATOR><OO>Name</OO><OPERATOR>;</OPERATOR> <COMMENT>// name</COMMENT>
  self Node<OPERATOR>;</OPERATOR> <COMMENT>// this _node as a Node</COMMENT>
}

<COMMENT>// internal methods used so that our workhorses can do the real work</COMMENT>
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) setParent(p Node) {
  <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>p</OO> <OPERATOR>=</OPERATOR> p<OPERATOR>;</OPERATOR>
}
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) insertChildAt(c Node<OPERATOR>,</OPERATOR> i <TYPE>uint</TYPE>) {
  <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Insert</OO>(<TYPE>int</TYPE>(i)<OPERATOR>,</OPERATOR> c)<OPERATOR>;</OPERATOR>
}
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) removeChild(c Node) {
  <KEYWORD>for</KEYWORD> i <OPERATOR>:=</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Len</OO>()<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC> <OPERATOR>;</OPERATOR> i <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC> <OPERATOR>;</OPERATOR> i<OPERATOR>--</OPERATOR> {
    <KEYWORD>if</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>At</OO>(i)<OPERATOR>.</OPERATOR>(Node) <OPERATOR>==</OPERATOR> c {
      <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Delete</OO>(i)<OPERATOR>;</OPERATOR>
      <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
    }
  }
}

<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) NodeName() <TYPE>string</TYPE> {
  <KEYWORD>switch</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>T</OO> {
    <KEYWORD>case</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>n</OO><OPERATOR>.</OPERATOR><OO>Local</OO><OPERATOR>;</OPERATOR>
    <KEYWORD>case</KEYWORD> <NUMERIC>2</NUMERIC><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>n</OO><OPERATOR>.</OPERATOR><OO>Local</OO><OPERATOR>;</OPERATOR>
    <KEYWORD>case</KEYWORD> <NUMERIC>9</NUMERIC><OPERATOR>:</OPERATOR> <KEYWORD>return</KEYWORD> <STRING>"#document"</STRING><OPERATOR>;</OPERATOR>
  }
  <KEYWORD>return</KEYWORD> <STRING>"Node.NodeName() not implemented"</STRING><OPERATOR>;</OPERATOR>
}
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) NodeValue() <TYPE>string</TYPE> { <KEYWORD>return</KEYWORD> <STRING>"Node.NodeValue() not implemented"</STRING><OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) TagName() <TYPE>string</TYPE> { <KEYWORD>return</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>NodeName</OO>()<OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) NodeType() <TYPE>int</TYPE> { <KEYWORD>return</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>T</OO><OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) AppendChild(c Node) Node { <KEYWORD>return</KEYWORD> appendChild(n<OPERATOR>,</OPERATOR>c)<OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) RemoveChild(c Node) Node { <KEYWORD>return</KEYWORD> removeChild(n<OPERATOR>,</OPERATOR>c)<OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) ChildNodes() NodeList { <KEYWORD>return</KEYWORD> newChildNodelist(n)<OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) ParentNode() Node { <KEYWORD>return</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>p</OO><OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) Attributes() NamedNodeMap { <KEYWORD>return</KEYWORD> NamedNodeMap(nil)<OPERATOR>;</OPERATOR> }
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) HasChildNodes() (b <TYPE>bool</TYPE>) {
  b <OPERATOR>=</OPERATOR> <VALUE>false</VALUE><OPERATOR>;</OPERATOR>
  <KEYWORD>if</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Len</OO>() <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> {
    b <OPERATOR>=</OPERATOR> <VALUE>true</VALUE><OPERATOR>;</OPERATOR>
  }
  <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
}

<COMMENT>// has to be package-scoped because of</COMMENT>
<KEYWORD>func</KEYWORD> <USER_FUNCTION>ownerDocument</USER_FUNCTION>(n Node) (d Document) {
  d <OPERATOR>=</OPERATOR> nil<OPERATOR>;</OPERATOR>

  <KEYWORD>for</KEYWORD> n<OPERATOR>!=</OPERATOR>nil {
    <KEYWORD>if</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>NodeType</OO>()<OPERATOR>==</OPERATOR><NUMERIC>9</NUMERIC> {
      <KEYWORD>return</KEYWORD> <OBJ>n</OBJ><OPERATOR>.</OPERATOR>(Document)<OPERATOR>;</OPERATOR>
    }
    n <OPERATOR>=</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>ParentNode</OO>()<OPERATOR>;</OPERATOR>
  }
  <KEYWORD>return</KEYWORD> Document(nil)<OPERATOR>;</OPERATOR>
}

<COMMENT>//func (n *_node) OwnerDocument(n Node) (d Document) {</COMMENT>
  <COMMENT>//d = nil;</COMMENT>
  <COMMENT>//p := n.p;</COMMENT>
  <COMMENT>//</COMMENT>
  <COMMENT>//for p!=nil {</COMMENT>
  <COMMENT>//  if p.NodeType()==9 {</COMMENT>
  <COMMENT>//    return (*_doc)(p);</COMMENT>
  <COMMENT>//  }</COMMENT>
  <COMMENT>//  p = n.p;</COMMENT>
  <COMMENT>//}</COMMENT>
<COMMENT>//  return Document(nil);</COMMENT>
<COMMENT>//}</COMMENT>


<KEYWORD>func</KEYWORD> <USER_FUNCTION>newNode</USER_FUNCTION>(_t <TYPE>int</TYPE>) (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) {
  n <OPERATOR>=</OPERATOR> <FUNCTION>new</FUNCTION>(<TYPE>_node</TYPE>)<OPERATOR>;</OPERATOR>
  <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>T</OO> <OPERATOR>=</OPERATOR> _t<OPERATOR>;</OPERATOR>
  <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>self</OO> <OPERATOR>=</OPERATOR> Node(n)
  <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
}


<KEYWORD>func</KEYWORD> (p <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) InsertBefore(nc Node<OPERATOR>,</OPERATOR> rc Node) Node {
  <KEYWORD>if</KEYWORD> rc <OPERATOR>==</OPERATOR> nil {
    <COMMENT>// if refChild is null, insert newChild at the end of the list of children.</COMMENT>
    <KEYWORD>return</KEYWORD> appendChild(p<OPERATOR>,</OPERATOR>nc)
  } <KEYWORD>else</KEYWORD> <KEYWORD>if</KEYWORD> rc <OPERATOR>==</OPERATOR> nc {
    <COMMENT>// inserting a node before itself is implementation dependent</COMMENT>
    <KEYWORD>return</KEYWORD> nc
  }
  <COMMENT>// if newChild is already in the tree somewhere,</COMMENT>
  <COMMENT>// remove it before reparenting</COMMENT>
  <KEYWORD>if</KEYWORD> <OBJ>nc</OBJ><OPERATOR>.</OPERATOR><OO>ParentNode</OO>() <OPERATOR>!=</OPERATOR> nil {
    removeChild(<OBJ>nc</OBJ><OPERATOR>.</OPERATOR><OO>ParentNode</OO>()<OPERATOR>,</OPERATOR> nc)
  }
  <COMMENT>// find refChild &amp; insert</COMMENT>
  nl <OPERATOR>:=</OPERATOR> <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>ChildNodes</OO>()
  i <OPERATOR>:=</OPERATOR> <OBJ>nl</OBJ><OPERATOR>.</OPERATOR><OO>Length</OO>()
  <KEYWORD>for</KEYWORD> cix <OPERATOR>:=</OPERATOR> <TYPE>uint</TYPE>(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> cix <OPERATOR>&lt;</OPERATOR> i<OPERATOR>;</OPERATOR> cix<OPERATOR>++</OPERATOR> {
    <KEYWORD>if</KEYWORD> <OBJ>nl</OBJ><OPERATOR>.</OPERATOR><OO>Item</OO>(cix) <OPERATOR>==</OPERATOR> rc {
      <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>insertChildAt</OO>(nc<OPERATOR>,</OPERATOR> cix)
      <OBJ>nc</OBJ><OPERATOR>.</OPERATOR><OO>setParent</OO>(p)
    }
  }
  <KEYWORD>return</KEYWORD> nc<OPERATOR>;</OPERATOR>
}

<KEYWORD>func</KEYWORD> (p <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) ReplaceChild(nc Node<OPERATOR>,</OPERATOR> rc Node) Node {
  <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>InsertBefore</OO>(nc<OPERATOR>,</OPERATOR> rc)<OPERATOR>;</OPERATOR>
  <KEYWORD>return</KEYWORD> <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>RemoveChild</OO>(rc)<OPERATOR>;</OPERATOR>
}
<KEYWORD>func</KEYWORD> (p <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) FirstChild() Node {
  res <OPERATOR>:=</OPERATOR> Node(nil)
  <KEYWORD>if</KEYWORD> <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Len</OO>() <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> {
    res <OPERATOR>=</OPERATOR> <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>At</OO>(<NUMERIC>0</NUMERIC>)<OPERATOR>.</OPERATOR>(Node)
  }
  <KEYWORD>return</KEYWORD> res
}
<KEYWORD>func</KEYWORD> (p <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) LastChild() Node {
  res <OPERATOR>:=</OPERATOR> Node(nil)
  <KEYWORD>if</KEYWORD> <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Len</OO>() <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> {
    res <OPERATOR>=</OPERATOR> <OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>At</OO>(<OBJ>p</OBJ><OPERATOR>.</OPERATOR><OO>c</OO><OPERATOR>.</OPERATOR><OO>Len</OO>()<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>)<OPERATOR>.</OPERATOR>(Node)
  }
  <KEYWORD>return</KEYWORD> res
}
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) PreviousSibling() Node {
  children <OPERATOR>:=</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>p</OO><OPERATOR>.</OPERATOR><OO>ChildNodes</OO>()
  <KEYWORD>for</KEYWORD> i <OPERATOR>:=</OPERATOR> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>Length</OO>()<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>--</OPERATOR> {
    <KEYWORD>if</KEYWORD> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>Item</OO>(i) <OPERATOR>==</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>self</OO> {
      <KEYWORD>return</KEYWORD> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>Item</OO>(i<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>)
    }
  }
  <KEYWORD>return</KEYWORD> Node(nil)
}
<KEYWORD>func</KEYWORD> (n <OPERATOR>*</OPERATOR><TYPE>_node</TYPE>) NextSibling() Node {
  children <OPERATOR>:=</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>p</OO><OPERATOR>.</OPERATOR><OO>ChildNodes</OO>()
  <KEYWORD>for</KEYWORD> i <OPERATOR>:=</OPERATOR> <TYPE>uint</TYPE>(<NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR> i <OPERATOR>&lt;</OPERATOR> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>Length</OO>()<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> i<OPERATOR>++</OPERATOR> {
    <KEYWORD>if</KEYWORD> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>Item</OO>(i) <OPERATOR>==</OPERATOR> <OBJ>n</OBJ><OPERATOR>.</OPERATOR><OO>self</OO> {
      <KEYWORD>return</KEYWORD> <OBJ>children</OBJ><OPERATOR>.</OPERATOR><OO>Item</OO>(i<OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC>)
    }
  }
  <KEYWORD>return</KEYWORD> Node(nil)
}