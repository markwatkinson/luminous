<KEYWORD>package</KEYWORD> libscala

<KEYWORD>object</KEYWORD> util {
    <COMMENT>//looping functions:</COMMENT>

    <KEYWORD>def</KEYWORD> repeat(iterations<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE>)(func<OPERATOR>:</OPERATOR> <OPERATOR>=&gt;</OPERATOR> <TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <KEYWORD>while</KEYWORD> (i <OPERATOR>&lt;</OPERATOR> iterations) { func<OPERATOR>;</OPERATOR> i <OPERATOR>+=</OPERATOR> <NUMERIC>1</NUMERIC> }
    }

    <KEYWORD>def</KEYWORD> simpleLoop(iterations<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE>)(func<OPERATOR>:</OPERATOR> (<TYPE>Int</TYPE>) <OPERATOR>=&gt;</OPERATOR> <TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <KEYWORD>while</KEYWORD> (i <OPERATOR>&lt;</OPERATOR> iterations) { func(i)<OPERATOR>;</OPERATOR> i <OPERATOR>+=</OPERATOR> <NUMERIC>1</NUMERIC> }
    }

    <KEYWORD>def</KEYWORD> rangeLoop(begin<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE><OPERATOR>,</OPERATOR> end<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE><OPERATOR>,</OPERATOR> step<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE>)(function<OPERATOR>:</OPERATOR> (<TYPE>Int</TYPE>)<OPERATOR>=&gt;</OPERATOR><TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> begin<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (step <OPERATOR>&gt;=</OPERATOR> <NUMERIC>0</NUMERIC>) <KEYWORD>while</KEYWORD> (i <OPERATOR>&lt;</OPERATOR> end) {
            function(i)
            i <OPERATOR>+=</OPERATOR> step
        } <KEYWORD>else</KEYWORD> <KEYWORD>while</KEYWORD> (i <OPERATOR>&gt;</OPERATOR> end) {
            function(i)
            i <OPERATOR>+=</OPERATOR> step
        }
    }

    <KEYWORD>def</KEYWORD> arrayLoop[T](array<OPERATOR>:</OPERATOR> <TYPE>Array</TYPE>[T])(function<OPERATOR>:</OPERATOR> (<TYPE>Int</TYPE><OPERATOR>,</OPERATOR> T)<OPERATOR>=&gt;</OPERATOR><TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> l <OPERATOR>=</OPERATOR> <OBJ>array</OBJ><OPERATOR>.</OPERATOR><OO>size</OO>
        <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <KEYWORD>while</KEYWORD>(i <OPERATOR>&lt;</OPERATOR> l) {
            function(i<OPERATOR>,</OPERATOR> array(i))
            i <OPERATOR>+=</OPERATOR> <NUMERIC>1</NUMERIC>
        }
    }

    <KEYWORD>def</KEYWORD> seqLoop[T](seq<OPERATOR>:</OPERATOR> <TYPE>Seq</TYPE>[T])(function<OPERATOR>:</OPERATOR> (<TYPE>Int</TYPE><OPERATOR>,</OPERATOR> T) <OPERATOR>=&gt;</OPERATOR> <TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> l <OPERATOR>=</OPERATOR> <OBJ>seq</OBJ><OPERATOR>.</OPERATOR><OO>size</OO>
        <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <KEYWORD>while</KEYWORD>(i <OPERATOR>&lt;</OPERATOR> l) {
            function(i<OPERATOR>,</OPERATOR> seq(i))
            i <OPERATOR>+=</OPERATOR> <NUMERIC>1</NUMERIC>
        }
    }

    <KEYWORD>def</KEYWORD> spawn(func<OPERATOR>:</OPERATOR> <OPERATOR>=&gt;</OPERATOR> <TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> thread <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Thread</TYPE> {
            <KEYWORD>final</KEYWORD> <KEYWORD>override</KEYWORD> <KEYWORD>def</KEYWORD> run <OPERATOR>=</OPERATOR> {func}
            setDaemon(<VALUE>true</VALUE>)
        }
        <OBJ>thread</OBJ><OPERATOR>.</OPERATOR><OO>start</OO>()
    }

    <KEYWORD>def</KEYWORD> thread(func<OPERATOR>:</OPERATOR> ()<OPERATOR>=&gt;</OPERATOR> <TYPE>Unit</TYPE>)<OPERATOR>:</OPERATOR> <TYPE>Unit</TYPE> <OPERATOR>=</OPERATOR> spawn{func()}

    <KEYWORD>def</KEYWORD> connString(db<OPERATOR>:</OPERATOR> <TYPE>String</TYPE><OPERATOR>,</OPERATOR> host<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> port<OPERATOR>:</OPERATOR><TYPE>Int</TYPE><OPERATOR>,</OPERATOR> dbname<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> user<OPERATOR>:</OPERATOR><TYPE>String</TYPE><OPERATOR>,</OPERATOR> pass<OPERATOR>:</OPERATOR><TYPE>String</TYPE>) <OPERATOR>=</OPERATOR> {
        <STRING>"jdbc:%s://%s:%s/%s?user=%s&amp;password=%s"</STRING><OPERATOR>.</OPERATOR><OO>format</OO>(db<OPERATOR>,</OPERATOR> host<OPERATOR>,</OPERATOR> port<OPERATOR>,</OPERATOR> dbname<OPERATOR>,</OPERATOR> user<OPERATOR>,</OPERATOR> pass)
    }

    <DOCCOMMENT>/** benchmark a code block e.g. util.bench{statement; statement; statement} */</DOCCOMMENT>
    <KEYWORD>def</KEYWORD> bench(block<OPERATOR>:</OPERATOR> <OPERATOR>=&gt;</OPERATOR> <TYPE>Any</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> begin <OPERATOR>=</OPERATOR> <OBJ>System</OBJ><OPERATOR>.</OPERATOR><OO>currentTimeMillis</OO>()
        println(<STRING>"Answer: "</STRING> <OPERATOR>+</OPERATOR> block)
        <KEYWORD>val</KEYWORD> end <OPERATOR>=</OPERATOR> <OBJ>System</OBJ><OPERATOR>.</OPERATOR><OO>currentTimeMillis</OO>()
        println(<STRING>"Time Taken: "</STRING> <OPERATOR>+</OPERATOR> (end <OPERATOR>-</OPERATOR> begin)<OPERATOR>/1000.0</OPERATOR> <OPERATOR>+</OPERATOR> <STRING>" seconds."</STRING>)
    }

    <KEYWORD>def</KEYWORD> unixTime <OPERATOR>=</OPERATOR> <OBJ>System</OBJ><OPERATOR>.</OPERATOR><OO>currentTimeMillis</OO><OPERATOR>/1000.0</OPERATOR>

    <KEYWORD>def</KEYWORD> foreach[T](iterable<OPERATOR>:</OPERATOR> <OBJ>java</OBJ><OPERATOR>.</OPERATOR><OO>lang</OO><OPERATOR>.</OPERATOR><OO>Iterable</OO>[T])(function<OPERATOR>:</OPERATOR> (T) <OPERATOR>=&gt;</OPERATOR> <TYPE>Unit</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> iterator <OPERATOR>=</OPERATOR> <OBJ>iterable</OBJ><OPERATOR>.</OPERATOR><OO>iterator</OO>
        <KEYWORD>while</KEYWORD>(<OBJ>iterator</OBJ><OPERATOR>.</OPERATOR><OO>hasNext</OO>) function(<OBJ>iterator</OBJ><OPERATOR>.</OPERATOR><OO>next</OO>)
    }

    <KEYWORD>def</KEYWORD> fetchUrlBuf(url<OPERATOR>:</OPERATOR> <TYPE>String</TYPE>)<OPERATOR>:</OPERATOR> <TYPE>StringBuffer</TYPE> <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> urlObject <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>java</OBJ><OPERATOR>.</OPERATOR><OO>net</OO><OPERATOR>.</OPERATOR><OO>URL</OO>(url)<OPERATOR>;</OPERATOR>
        <KEYWORD>val</KEYWORD> input <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>java</OBJ><OPERATOR>.</OPERATOR><OO>io</OO><OPERATOR>.</OPERATOR><OO>BufferedInputStream</OO>(<OBJ>urlObject</OBJ><OPERATOR>.</OPERATOR><OO>openStream</OO>)
        <KEYWORD>val</KEYWORD> buffer <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>StringBuffer</TYPE>

        <KEYWORD>var</KEYWORD> ptr <OPERATOR>=</OPERATOR> <OBJ>input</OBJ><OPERATOR>.</OPERATOR><OO>read</OO>
        <KEYWORD>while</KEYWORD> (ptr <OPERATOR>!=</OPERATOR> <OPERATOR>-1</OPERATOR>) {
            <OBJ>buffer</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(<OBJ>ptr</OBJ><OPERATOR>.</OPERATOR><OO>asInstanceOf</OO>[<TYPE>Char</TYPE>])
            ptr <OPERATOR>=</OPERATOR> <OBJ>input</OBJ><OPERATOR>.</OPERATOR><OO>read</OO>
        }
        buffer
    }

    <KEYWORD>def</KEYWORD> fetchUrl(url<OPERATOR>:</OPERATOR> <TYPE>String</TYPE>)<OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <OPERATOR>=</OPERATOR> fetchUrlBuf(url)<OPERATOR>.</OPERATOR><OO>toString</OO>

    <KEYWORD>def</KEYWORD> randomBytes(size<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> random <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <OBJ>java</OBJ><OPERATOR>.</OPERATOR><OO>util</OO><OPERATOR>.</OPERATOR><OO>Random</OO>
        <KEYWORD>val</KEYWORD> buf <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>Array</TYPE>[<TYPE>Byte</TYPE>](size)
        <OBJ>random</OBJ><OPERATOR>.</OPERATOR><OO>nextBytes</OO>(buf)
        buf
    }

    <DOCCOMMENT>/** String consisting of only the characters in safeChars */</DOCCOMMENT>
    <KEYWORD>def</KEYWORD> randomSafeString(size<OPERATOR>:</OPERATOR> <TYPE>Int</TYPE><OPERATOR>,</OPERATOR> safeChars<OPERATOR>:</OPERATOR> <TYPE>String</TYPE>) <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> sb <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> StringBuilder
        <KEYWORD>val</KEYWORD> l <OPERATOR>=</OPERATOR> <OBJ>safeChars</OBJ><OPERATOR>.</OPERATOR><OO>length</OO>
        <KEYWORD>for</KEYWORD> (b <OPERATOR>&lt;</OPERATOR><OPERATOR>-</OPERATOR> randomBytes(size)) <OBJ>sb</OBJ><OPERATOR>.</OPERATOR><OO>append</OO> (safeChars(b <OPERATOR>%</OPERATOR> l))
        <OBJ>sb</OBJ><OPERATOR>.</OPERATOR><OO>toString</OO>
    }

    <DOCCOMMENT>/** Characters that can be returned in a url-safe string */</DOCCOMMENT>
    <KEYWORD>val</KEYWORD> safeChars <OPERATOR>=</OPERATOR> <STRING>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890._"</STRING>

    <DOCCOMMENT>/** URL-safe String */</DOCCOMMENT>
    <KEYWORD>def</KEYWORD> randomSafestring(size<OPERATOR>:</OPERATOR><TYPE>Int</TYPE>) <OPERATOR>=</OPERATOR> randomSafeString(size<OPERATOR>,</OPERATOR> safeChars)

    <DOCCOMMENT>/** For templating. Concatenates all arguments into a String, which it returns */</DOCCOMMENT>
    <KEYWORD>def</KEYWORD> joinSeq(sep<OPERATOR>:</OPERATOR> <TYPE>String</TYPE><OPERATOR>,</OPERATOR> items<OPERATOR>:</OPERATOR> <TYPE>Seq</TYPE>[<TYPE>Any</TYPE>])<OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <OPERATOR>=</OPERATOR> {
        <KEYWORD>val</KEYWORD> builder <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> StringBuilder()
        <KEYWORD>var</KEYWORD> l <OPERATOR>=</OPERATOR> <OBJ>items</OBJ><OPERATOR>.</OPERATOR><OO>length</OO>
        <KEYWORD>var</KEYWORD> i <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <KEYWORD>while</KEYWORD>(i <OPERATOR>&lt;</OPERATOR> l<OPERATOR>-1</OPERATOR>) {
            <OBJ>builder</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(items(i))
            <OBJ>builder</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(sep)
            i <OPERATOR>+=</OPERATOR> <NUMERIC>1</NUMERIC>
        }
        <OBJ>builder</OBJ><OPERATOR>.</OPERATOR><OO>append</OO>(items(l <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>))
        <OBJ>builder</OBJ><OPERATOR>.</OPERATOR><OO>toString</OO>()
    }

    <KEYWORD>def</KEYWORD> join(sep<OPERATOR>:</OPERATOR> <TYPE>String</TYPE><OPERATOR>,</OPERATOR> items<OPERATOR>:</OPERATOR> <TYPE>Any</TYPE><OPERATOR>*</OPERATOR>)<OPERATOR>:</OPERATOR> <TYPE>String</TYPE> <OPERATOR>=</OPERATOR> joinSeq(sep<OPERATOR>,</OPERATOR> items)
}