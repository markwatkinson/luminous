<DELIMITER>&lt;?php</DELIMITER>

<COMMENT>/*</COMMENT>
<COMMENT>Copyright 2010 Mark Watkinson. All rights reserved.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>Redistribution and use in source and binary forms, with or without modification, are</COMMENT>
<COMMENT>permitted provided that the following conditions are met:</COMMENT>
<COMMENT></COMMENT>
<COMMENT>1. Redistributions of source code must retain the above copyright notice, this list of</COMMENT>
<COMMENT>conditions and the following disclaimer.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>2. Redistributions in binary form must reproduce the above copyright notice, this list</COMMENT>
<COMMENT>of conditions and the following disclaimer in the documentation and/or other materials</COMMENT>
<COMMENT>provided with the distribution.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>THIS SOFTWARE IS PROVIDED BY Mark Watkinson ``AS IS'' AND ANY EXPRESS OR IMPLIED</COMMENT>
<COMMENT>WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</COMMENT>
<COMMENT>FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Mark Watkinson OR</COMMENT>
<COMMENT>CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</COMMENT>
<COMMENT>CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</COMMENT>
<COMMENT>SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON</COMMENT>
<COMMENT>ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</COMMENT>
<COMMENT>NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF</COMMENT>
<COMMENT>ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>The views and conclusions contained in the software and documentation are those of the</COMMENT>
<COMMENT>authors and should not be interpreted as representing official policies, either expressed</COMMENT>
<COMMENT>or implied, of Mark Watkinson.</COMMENT>
<COMMENT>*/</COMMENT>




<DOCCOMMENT>/**</DOCCOMMENT>
<DOCCOMMENT> * <DOCTAG>\brief</DOCTAG> A simple markup parser (the parser and the markup is simple)</DOCCOMMENT>
<DOCCOMMENT> * <DOCTAG>\package</DOCTAG><DOCPROPERTY> MarkupLite</DOCPROPERTY></DOCCOMMENT>
<DOCCOMMENT> * <DOCTAG>\author</DOCTAG> Mark Watkinson</DOCCOMMENT>
<DOCCOMMENT> * </DOCCOMMENT>
<DOCCOMMENT> * </DOCCOMMENT>
<DOCCOMMENT> * The highlight and linkifier callbacks can be used to provide syntax highlighting</DOCCOMMENT>
<DOCCOMMENT> * to {{{ }}} blocks, and to look up link identifiers. highlight_cb should </DOCCOMMENT>
<DOCCOMMENT> * be defined as </DOCCOMMENT>
<DOCCOMMENT> *      str function($code, $language) </DOCCOMMENT>
<DOCCOMMENT> * and should return the formatted/highlighted code block.</DOCCOMMENT>
<DOCCOMMENT> * </DOCCOMMENT>
<DOCCOMMENT> * linkifier_cb should be defined as:</DOCCOMMENT>
<DOCCOMMENT> *   mixed function($identifier)</DOCCOMMENT>
<DOCCOMMENT> * and should return either a URL to the linked content, or boolean false if </DOCCOMMENT>
<DOCCOMMENT> * the identifier is meaningless.</DOCCOMMENT>
<DOCCOMMENT> * </DOCCOMMENT>
<DOCCOMMENT> * Call Format() to format a string of text after setting your own handlers</DOCCOMMENT>
<DOCCOMMENT> * and callbacks.</DOCCOMMENT>
<DOCCOMMENT> * </DOCCOMMENT>
<DOCCOMMENT> */</DOCCOMMENT>


<KEYWORD>class</KEYWORD> <USER_FUNCTION>MarkupLite</USER_FUNCTION>
{  
  <KEYWORD>private</KEYWORD> <VARIABLE>$hidden_cache</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>()<OPERATOR>;</OPERATOR>  
  <KEYWORD>private</KEYWORD> <VARIABLE>$handlers</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>()<OPERATOR>;</OPERATOR>
  
  <KEYWORD>public</KEYWORD> <VARIABLE>$highlight_cb</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
  <KEYWORD>public</KEYWORD> <VARIABLE>$linkifier_cb</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
 
  <KEYWORD>private</KEYWORD> <VARIABLE>$headings</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>()<OPERATOR>;</OPERATOR>
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>MarkupLite</USER_FUNCTION>()
  {
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'prepare'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'PreparePost'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'code'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseCodeBlock'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC>)<OPERATOR>;</OPERATOR>   
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'alignment'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseAlignment'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'tables'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseTables'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'text'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseText'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'dividors'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseDividors'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'lists'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseLists'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'links'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseLinks'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'headers'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseHeaders'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC>)<OPERATOR>;</OPERATOR>
    
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'toc'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseTableOfContents'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC>)<OPERATOR>;</OPERATOR>
    
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'whitespace'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseWhitespace'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>AddHandler</OO>(<STRING>'cleanup'</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'Unhide'</STRING>)<OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC>)<OPERATOR>;</OPERATOR>
  }
  
  <DOCCOMMENT>/** </DOCCOMMENT>
<DOCCOMMENT>   * Adds a handler</DOCCOMMENT>
<DOCCOMMENT>   * 'func' is a function which receives the string as its only argument.</DOCCOMMENT>
<DOCCOMMENT>   * It should return the string (with modifications) afterwards</DOCCOMMENT>
<DOCCOMMENT>   * </DOCCOMMENT>
<DOCCOMMENT>   * Priority is an integer 0-10 which allows the caller to define a simple</DOCCOMMENT>
<DOCCOMMENT>   * hierarchy of what order the handlers should be executed in</DOCCOMMENT>
<DOCCOMMENT>   */</DOCCOMMENT> 
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>AddHandler</USER_FUNCTION>(<VARIABLE>$name</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$func</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$priority</VARIABLE>)
  {
    <VARIABLE>$handler</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>(
      <STRING>'name'</STRING><OPERATOR>=&gt;</OPERATOR><VARIABLE>$name</VARIABLE><OPERATOR>,</OPERATOR>
      <STRING>'func'</STRING><OPERATOR>=&gt;</OPERATOR><VARIABLE>$func</VARIABLE><OPERATOR>,</OPERATOR>
      <STRING>'priority'</STRING><OPERATOR>=&gt;</OPERATOR><VARIABLE>$priority</VARIABLE>
      )<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>handlers</OO>[] <OPERATOR>=</OPERATOR> <VARIABLE>$handler</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>RemoveHandler</USER_FUNCTION>(<VARIABLE>$name</VARIABLE>)
  {
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>handlers</OO> <KEYWORD>as</KEYWORD> <VARIABLE>$x</VARIABLE><OPERATOR>=&gt;</OPERATOR><VARIABLE>$h</VARIABLE>)
    {
      <KEYWORD>if</KEYWORD> (<VARIABLE>$h</VARIABLE>[<STRING>'name'</STRING>] <OPERATOR>==</OPERATOR> <VARIABLE>$name</VARIABLE>)
        <FUNCTION>unset</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>handlers</OO>[<VARIABLE>$x</VARIABLE>])<OPERATOR>;</OPERATOR>
    }
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>Hide</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    
    <VARIABLE>$md5</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>md5</FUNCTION>(<VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>hidden_cache</OO>[<VARIABLE>$md5</VARIABLE>] <OPERATOR>=</OPERATOR> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
<COMMENT>//     echo "Returning $md5&lt;br&gt;";</COMMENT>
    <KEYWORD>return</KEYWORD> <STRING>"&lt;<VARIABLE>$md5</VARIABLE>&gt;"</STRING><OPERATOR>;</OPERATOR>    
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>GenerateTableOfContents</USER_FUNCTION>()
  {
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>isset</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>headings</OO>[<NUMERIC>0</NUMERIC>]))
      <KEYWORD>return</KEYWORD> <STRING>""</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$depth</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>headings</OO>[<NUMERIC>0</NUMERIC>][<STRING>'depth'</STRING>]<OPERATOR>;</OPERATOR>
    <VARIABLE>$toc</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"&lt;div class='toc'&gt;"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>headings</OO> <KEYWORD>as</KEYWORD> <VARIABLE>$h</VARIABLE>)
    {
      <VARIABLE>$indent</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$h</VARIABLE>[<STRING>'depth'</STRING>]<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>*</OPERATOR><NUMERIC>0.5</NUMERIC><OPERATOR>;</OPERATOR>
      <VARIABLE>$line</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"&lt;div class='toc_line' style='padding-left:<VARIABLE>{$indent}</VARIABLE>em;'&gt;"</STRING><OPERATOR>;</OPERATOR>
      <VARIABLE>$line</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"&lt;a href='#<VARIABLE>{$h['id']}</VARIABLE>'&gt;<VARIABLE>{$h['title']}</VARIABLE>&lt;/a&gt;&lt;/div&gt;"</STRING><OPERATOR>;</OPERATOR>
      <VARIABLE>$toc</VARIABLE> <OPERATOR>.=</OPERATOR> <VARIABLE>$line</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$toc</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"&lt;/div&gt;"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$toc</VARIABLE><OPERATOR>;</OPERATOR>
  }
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseTableOfContents</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/<ESC>\\</ESC><ESC>\c</ESC>ontents/"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>GenerateTableOfContents</OO>()<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseAlignment</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/^#<ESC>\+</ESC>{2}<ESC>\n</ESC>*(.*?)<ESC>\n</ESC>*-{2}#/sm"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;div style='text-align:right'&gt;$1&lt;/div&gt;"</STRING><OPERATOR>,</OPERATOR> 
      <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/^#<ESC>\+</ESC><ESC>\n</ESC>*(.*?)<ESC>\n</ESC>*-#/sm"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;div style='text-align:center'&gt;$1&lt;/div&gt;"</STRING><OPERATOR>,</OPERATOR> 
      <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseTablesCb</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <VARIABLE>$rows</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>explode</FUNCTION>(<STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$matches</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
    <VARIABLE>$table</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"&lt;table&gt;"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$rows</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$r</VARIABLE>)
    {
      <VARIABLE>$r</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$r</VARIABLE>)<OPERATOR>;</OPERATOR>
      <KEYWORD>if</KEYWORD> (<VARIABLE>$r</VARIABLE> <OPERATOR>==</OPERATOR> <STRING>""</STRING>)
        <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
      <VARIABLE>$cols</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>explode</FUNCTION>(<STRING>"||"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$r</VARIABLE>)<OPERATOR>;</OPERATOR>
      <FUNCTION>array_pop</FUNCTION>(<VARIABLE>$cols</VARIABLE>)<OPERATOR>;</OPERATOR>
      <FUNCTION>unset</FUNCTION>(<VARIABLE>$cols</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>      
      <VARIABLE>$row</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
      <KEYWORD>foreach</KEYWORD> (<VARIABLE>$cols</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$c</VARIABLE>)
      {
        <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<FUNCTION>isset</FUNCTION>(<VARIABLE>$c</VARIABLE>[<NUMERIC>0</NUMERIC>]) <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$c</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>==</OPERATOR> <STRING>"="</STRING>)
        {
          <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>" class='title'"</STRING><OPERATOR>;</OPERATOR>
          <VARIABLE>$c</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>substr</FUNCTION>(<VARIABLE>$c</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
        }
        <VARIABLE>$c</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$c</VARIABLE>)<OPERATOR>;</OPERATOR>        
        <VARIABLE>$row</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"&lt;td<VARIABLE>$title</VARIABLE>&gt; <VARIABLE>$c</VARIABLE> &lt;/td&gt;"</STRING><OPERATOR>;</OPERATOR>
      }
      <VARIABLE>$table</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"&lt;tr&gt;<VARIABLE>$row</VARIABLE>&lt;/tr&gt;"</STRING><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$table</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"&lt;/table&gt;"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$table</VARIABLE><OPERATOR>;</OPERATOR>    
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseTables</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/(^<ESC>\s</ESC>*(<ESC>\|</ESC><ESC>\|</ESC>.*<ESC>\|</ESC><ESC>\|</ESC>)([ <ESC>\t</ESC>]*<ESC>\n</ESC>|$))+/m"</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> 
      <STRING>'ParseTablesCb'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseCodeBlockCb</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <VARIABLE>$flags</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>1</NUMERIC>])<OPERATOR>;</OPERATOR>
    <VARIABLE>$code</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>2</NUMERIC>])<OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$flags</VARIABLE> <OPERATOR>==</OPERATOR> <STRING>"raw"</STRING> <OPERATOR>||</OPERATOR> <VARIABLE>$flags</VARIABLE> <OPERATOR>==</OPERATOR> <STRING>""</STRING>)
      <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(<VARIABLE>$code</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>elseif</KEYWORD>(<FUNCTION>preg_match</FUNCTION>(<STRING>"/lang(?:uage)?=(.*)/"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$flags</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$m</VARIABLE>))
    {
      <KEYWORD>if</KEYWORD> (<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>highlight_cb</OO> <OPERATOR>!==</OPERATOR> <KEYWORD>null</KEYWORD>)
        
        <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(
          <STRING>"&lt;div class=code_example_highlighted&gt;"</STRING> <OPERATOR>.</OPERATOR>
                             <FUNCTION>call_user_func</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>highlight_cb</OO><OPERATOR>,</OPERATOR> <VARIABLE>$code</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$m</VARIABLE>[<NUMERIC>1</NUMERIC>])
                             <OPERATOR>.</OPERATOR> <STRING>"&lt;/div&gt;"</STRING>
                             )<OPERATOR>;</OPERATOR>
      <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(<STRING>"&lt;div class=code_example&gt;"</STRING> <OPERATOR>.</OPERATOR> 
                         <FUNCTION>htmlentities</FUNCTION>(<VARIABLE>$code</VARIABLE>) <OPERATOR>.</OPERATOR> <STRING>"&lt;/div&gt;"</STRING>)<OPERATOR>;</OPERATOR>  
    }
    <KEYWORD>elseif</KEYWORD> (<VARIABLE>$flags</VARIABLE> <OPERATOR>==</OPERATOR> <STRING>"verbatim"</STRING>)
      <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(<STRING>"&lt;div class=code_example&gt;"</STRING> <OPERATOR>.</OPERATOR> 
                         <FUNCTION>htmlentities</FUNCTION>(<VARIABLE>$code</VARIABLE>) <OPERATOR>.</OPERATOR> <STRING>"&lt;/div&gt;"</STRING>)<OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseInlineCode</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(<STRING>"&lt;span class='inline-code'&gt;"</STRING> <OPERATOR>.</OPERATOR> <FUNCTION>htmlentities</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>1</NUMERIC>]) <OPERATOR>.</OPERATOR> <STRING>"&lt;/span&gt;"</STRING>)<OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseCodeBlock</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/`(.*?)`/"</STRING><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseInlineCode'</STRING>)<OPERATOR>,</OPERATOR>
    <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>    
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/<ESC>\{</ESC><ESC>\{</ESC><ESC>\{</ESC>(.*?$)(.*?)<ESC>\}</ESC><ESC>\}</ESC><ESC>\}</ESC>/ms"</STRING><OPERATOR>,</OPERATOR> 
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseCodeBlockCb'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>


    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>Unhide</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>hidden_cache</OO> <KEYWORD>as</KEYWORD> <VARIABLE>$checksum</VARIABLE><OPERATOR>=&gt;</OPERATOR><VARIABLE>$content</VARIABLE>)
    {
      <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>str_replace</FUNCTION>(<STRING>"&lt;<VARIABLE>$checksum</VARIABLE>&gt;"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$content</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
      <FUNCTION>unset</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>hidden_cache</OO>[<VARIABLE>$checksum</VARIABLE>])<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>PreparePost</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>str_replace</FUNCTION>(<STRING>"<ESC>\r</ESC><ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>str_replace</FUNCTION>(<STRING>"<ESC>\r</ESC>"</STRING><OPERATOR>,</OPERATOR> <STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/^[ <ESC>\t</ESC>]+$/m"</STRING><OPERATOR>,</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }

  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseHeadersCb</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <VARIABLE>$x</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>1</NUMERIC>])<OPERATOR>;</OPERATOR> 
    <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>2</NUMERIC>])<OPERATOR>;</OPERATOR>
    
    <VARIABLE>$id</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<FUNCTION>isset</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>3</NUMERIC>]))
      <VARIABLE>$id</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>trim</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>3</NUMERIC>])<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>strlen</FUNCTION>(<VARIABLE>$id</VARIABLE>))
      <VARIABLE>$id</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'id_'</STRING> <OPERATOR>.</OPERATOR> <FUNCTION>md5</FUNCTION>(<VARIABLE>$title</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>headings</OO>[] <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>(<STRING>'title'</STRING><OPERATOR>=&gt;</OPERATOR><VARIABLE>$title</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'id'</STRING><OPERATOR>=&gt;</OPERATOR><VARIABLE>$id</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'depth'</STRING><OPERATOR>=&gt;</OPERATOR><VARIABLE>$x</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <STRING>"&lt;h<VARIABLE>$x</VARIABLE> id='<VARIABLE>$id</VARIABLE>'&gt;<VARIABLE>$title</VARIABLE>&lt;/h<VARIABLE>$x</VARIABLE>&gt;"</STRING><OPERATOR>;</OPERATOR>
  }

  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseHeaders</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <KEYWORD>return</KEYWORD> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/^([=]+)(.*?)<ESC>\\</ESC>1(.*)/m"</STRING><OPERATOR>,</OPERATOR> 
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseHeadersCb'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
  }

  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseWhitespace</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/(?&lt;=^|<ESC>\n</ESC>)([ ]+)(.*)/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;blockquote&gt;$2&lt;/blockquote&gt;'</STRING><OPERATOR>,</OPERATOR>  <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$block_elements</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"((h[0-9]+)|table|blockquote|([ou]l))"</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/<ESC>\n</ESC>*(&lt;(<ESC>\/</ESC>?<VARIABLE>$block_elements</VARIABLE>)&gt;)<ESC>\n</ESC>*/"</STRING><OPERATOR>,</OPERATOR> <STRING>"$1"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/<ESC>\n</ESC><ESC>\n</ESC>+/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;p&gt;'</STRING><OPERATOR>,</OPERATOR>  <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/<ESC>\n</ESC>/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;br&gt;'</STRING><OPERATOR>,</OPERATOR>  <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>  
    
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseText</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$chars</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"[a-zA-Z0-9]"</STRING><OPERATOR>;</OPERATOR>
    
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/(?&lt;!<VARIABLE>$chars</VARIABLE>)_(.*?)_(?!<VARIABLE>$chars</VARIABLE>)/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;em&gt;$1&lt;/em&gt;'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/(?&lt;!<VARIABLE>$chars</VARIABLE>)<ESC>\*</ESC>(.*?)<ESC>\*</ESC>(?!<VARIABLE>$chars</VARIABLE>)/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;strong&gt;$1&lt;/strong&gt;'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/<ESC>\^</ESC>(.*?)<ESC>\^</ESC>/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;sup&gt;$1&lt;/sup&gt;'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/,,(.*?),,/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;sub&gt;$1&lt;/sub&gt;'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/~~(.*?)~~/"</STRING><OPERATOR>,</OPERATOR> <STRING>'&lt;s&gt;$1&lt;/s&gt;'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseDividors</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <KEYWORD>return</KEYWORD> <FUNCTION>preg_replace</FUNCTION>(<STRING>"/^[ <ESC>\t</ESC>]*----[ <ESC>\t</ESC><ESC>\-</ESC>]*$/m"</STRING><OPERATOR>,</OPERATOR> <STRING>"&lt;hr&gt;"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>    
  }
  
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseListLines_</USER_FUNCTION>(<VARIABLE>$lines</VARIABLE>)
  {
    <VARIABLE>$list_elements</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>(<NUMERIC>0</NUMERIC><OPERATOR>=&gt;</OPERATOR><FUNCTION>array</FUNCTION>())<OPERATOR>;</OPERATOR>
    <VARIABLE>$level</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$indent</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    
    
    
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$lines</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$line</VARIABLE>)
    {
      <VARIABLE>$ltrimmed</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>ltrim</FUNCTION>(<VARIABLE>$line</VARIABLE>)<OPERATOR>;</OPERATOR>
      <VARIABLE>$this_indent</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$line</VARIABLE>) <OPERATOR>-</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$ltrimmed</VARIABLE>)<OPERATOR>;</OPERATOR>
      
      <KEYWORD>if</KEYWORD> (<VARIABLE>$this_indent</VARIABLE> <OPERATOR>&gt;</OPERATOR> <VARIABLE>$indent</VARIABLE>)
        <VARIABLE>$level</VARIABLE><OPERATOR>++;</OPERATOR>
      <KEYWORD>elseif</KEYWORD>(<VARIABLE>$this_indent</VARIABLE> <OPERATOR>&lt;</OPERATOR> <VARIABLE>$indent</VARIABLE>)
        <VARIABLE>$level</VARIABLE><OPERATOR>--;</OPERATOR>
      
      <FUNCTION>array_push</FUNCTION>(<VARIABLE>$list_elements</VARIABLE>[<VARIABLE>$level</VARIABLE>]<OPERATOR>,</OPERATOR> <VARIABLE>$ltrimmed</VARIABLE>)<OPERATOR>;</OPERATOR>
    }
    
    <FUNCTION>print_r</FUNCTION>(<VARIABLE>$list_elements</VARIABLE>)<OPERATOR>;</OPERATOR>
    
    <KEYWORD>return</KEYWORD> <STRING>""</STRING><OPERATOR>;</OPERATOR>
    
  }
  
  
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseListLines</USER_FUNCTION>(<VARIABLE>$lines</VARIABLE>)
  {    
    <VARIABLE>$stack</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>()<OPERATOR>;</OPERATOR>
    <VARIABLE>$indent</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$list</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$held_points</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    
    <VARIABLE>$indents</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>()<OPERATOR>;</OPERATOR>
    
    
    
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$lines</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$line</VARIABLE>)
    {
      <VARIABLE>$ltrimmed</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>ltrim</FUNCTION>(<VARIABLE>$line</VARIABLE>)<OPERATOR>;</OPERATOR>
      <VARIABLE>$this_indent</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$line</VARIABLE>) <OPERATOR>-</OPERATOR> <FUNCTION>strlen</FUNCTION>(<VARIABLE>$ltrimmed</VARIABLE>)<OPERATOR>;</OPERATOR>

      <KEYWORD>if</KEYWORD> (<VARIABLE>$this_indent</VARIABLE> <OPERATOR>&gt;</OPERATOR> <VARIABLE>$indent</VARIABLE>)
      {
        <VARIABLE>$stack</VARIABLE>[] <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$indent</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$ltrimmed</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
        <VARIABLE>$list</VARIABLE> <OPERATOR>.=</OPERATOR> (<VARIABLE>$ltrimmed</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>==</OPERATOR> <STRING>'*'</STRING>)<OPERATOR>?</OPERATOR> <STRING>"&lt;ul&gt;"</STRING> <OPERATOR>:</OPERATOR> <STRING>"&lt;ol&gt;"</STRING><OPERATOR>;</OPERATOR>
        <FUNCTION>array_push</FUNCTION>(<VARIABLE>$indents</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$this_indent</VARIABLE>)<OPERATOR>;</OPERATOR>
      }
      
      <KEYWORD>if</KEYWORD> (<VARIABLE>$this_indent</VARIABLE> <OPERATOR>&lt;</OPERATOR> <VARIABLE>$indent</VARIABLE>)
      {
        <KEYWORD>while</KEYWORD> (<NUMERIC>1</NUMERIC>)
        {
          <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>count</FUNCTION>(<VARIABLE>$indents</VARIABLE>))
            <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
          <KEYWORD>if</KEYWORD> (<VARIABLE>$indents</VARIABLE>[<FUNCTION>count</FUNCTION>(<VARIABLE>$indents</VARIABLE>)<OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>] <OPERATOR>==</OPERATOR> <VARIABLE>$this_indent</VARIABLE>)
            <KEYWORD>break</KEYWORD><OPERATOR>;</OPERATOR>
          <VARIABLE>$i</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array_pop</FUNCTION>(<VARIABLE>$indents</VARIABLE>)<OPERATOR>;</OPERATOR>
          <VARIABLE>$s</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array_pop</FUNCTION>(<VARIABLE>$stack</VARIABLE>)<OPERATOR>;</OPERATOR>
          <VARIABLE>$list</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>'&lt;/li&gt;'</STRING><OPERATOR>;</OPERATOR>       
          <VARIABLE>$list</VARIABLE> <OPERATOR>.=</OPERATOR> (<VARIABLE>$s</VARIABLE>[<NUMERIC>1</NUMERIC>] <OPERATOR>==</OPERATOR> <STRING>'*'</STRING>)<OPERATOR>?</OPERATOR> <STRING>"&lt;/ul&gt;"</STRING> <OPERATOR>:</OPERATOR> <STRING>"&lt;/ol&gt;"</STRING><OPERATOR>;</OPERATOR>
        }
      }
      
      <VARIABLE>$indent</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$this_indent</VARIABLE><OPERATOR>;</OPERATOR>        
      <VARIABLE>$point</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>isset</FUNCTION>(<VARIABLE>$ltrimmed</VARIABLE>[<NUMERIC>1</NUMERIC>])<OPERATOR>?</OPERATOR> <FUNCTION>substr</FUNCTION>(<VARIABLE>$ltrimmed</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>) <OPERATOR>:</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
      
      <KEYWORD>while</KEYWORD> (<VARIABLE>$held_points</VARIABLE><OPERATOR>--</OPERATOR>)
        <VARIABLE>$list</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>'&lt;/li&gt;'</STRING><OPERATOR>;</OPERATOR>
      
      <VARIABLE>$list</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"&lt;li&gt;<VARIABLE>$point</VARIABLE>"</STRING><OPERATOR>;</OPERATOR>
      <VARIABLE>$held_points</VARIABLE><OPERATOR>++;</OPERATOR>
    }
    
    <VARIABLE>$stack_</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array_reverse</FUNCTION>(<VARIABLE>$stack</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$stack_</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$s</VARIABLE>)
      <VARIABLE>$list</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>'&lt;/li&gt;'</STRING> <OPERATOR>.</OPERATOR> ((<VARIABLE>$s</VARIABLE>[<NUMERIC>1</NUMERIC>] <OPERATOR>==</OPERATOR> <STRING>'*'</STRING>)<OPERATOR>?</OPERATOR> <STRING>"&lt;/ul&gt;"</STRING> <OPERATOR>:</OPERATOR> <STRING>"&lt;/ol&gt;"</STRING>)<OPERATOR>;</OPERATOR>
    
    <KEYWORD>return</KEYWORD> <VARIABLE>$list</VARIABLE><OPERATOR>;</OPERATOR>
    
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseListsCb</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <VARIABLE>$lines</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>explode</FUNCTION>(<STRING>"<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$matches</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$lines</VARIABLE> <KEYWORD>as</KEYWORD> <VARIABLE>$i</VARIABLE><OPERATOR>=&gt;</OPERATOR><VARIABLE>$l</VARIABLE>)
    {
      <KEYWORD>if</KEYWORD> (<FUNCTION>trim</FUNCTION>(<VARIABLE>$l</VARIABLE>) <OPERATOR>===</OPERATOR> <STRING>""</STRING>)
        <FUNCTION>unset</FUNCTION>(<VARIABLE>$lines</VARIABLE>[<VARIABLE>$i</VARIABLE>])<OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$lite_list</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>ParseListLines</OO>(<VARIABLE>$lines</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$lite_list</VARIABLE><OPERATOR>;</OPERATOR>
    
  }
  
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseLists</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/(^[ ]+[<ESC>\*</ESC>#].*?(<ESC>\n</ESC>|$))+/m"</STRING><OPERATOR>,</OPERATOR>
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseListsCb'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseLinksCb</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <VARIABLE>$link</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$text</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>null</KEYWORD><OPERATOR>;</OPERATOR>
    
    <VARIABLE>$x</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_split</FUNCTION>(<STRING>"/<ESC>\s</ESC>+/"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$matches</VARIABLE>[<NUMERIC>1</NUMERIC>])<OPERATOR>;</OPERATOR>
    <VARIABLE>$uri</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$x</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
    <VARIABLE>$prelinker_return</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>false</KEYWORD><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>linkifier_cb</OO> <OPERATOR>!==</OPERATOR> <KEYWORD>null</KEYWORD>)
      <VARIABLE>$prelinker_return</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>call_user_func</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>linkifier_cb</OO><OPERATOR>,</OPERATOR> <VARIABLE>$uri</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$prelinker_return</VARIABLE> <OPERATOR>!==</OPERATOR> <KEYWORD>false</KEYWORD>)
    {
      <KEYWORD>if</KEYWORD> (<FUNCTION>count</FUNCTION>(<VARIABLE>$x</VARIABLE>) <OPERATOR>===</OPERATOR> <NUMERIC>1</NUMERIC>)
        <VARIABLE>$x</VARIABLE>[<NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> <VARIABLE>$prelinker_return</VARIABLE>[<STRING>'name'</STRING>]<OPERATOR>;</OPERATOR>
      <VARIABLE>$uri</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$prelinker_return</VARIABLE>[<STRING>'uri'</STRING>]<OPERATOR>;;</OPERATOR>
    }
    
    <KEYWORD>if</KEYWORD> (<FUNCTION>preg_match</FUNCTION>(<STRING>"/^www<ESC>\d</ESC>*<ESC>\.</ESC>/"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$uri</VARIABLE>))
      <VARIABLE>$uri</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"http://<VARIABLE>$uri</VARIABLE>"</STRING><OPERATOR>;</OPERATOR>
    
    <VARIABLE>$a</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"&lt;a href='<VARIABLE>$uri</VARIABLE>'%target&gt;%text%ext&lt;/a&gt;"</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$texts</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>()<OPERATOR>;</OPERATOR>
    <KEYWORD>for</KEYWORD> (<VARIABLE>$i</VARIABLE><OPERATOR>=</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> <VARIABLE>$i</VARIABLE><OPERATOR>&lt;</OPERATOR><FUNCTION>count</FUNCTION>(<VARIABLE>$x</VARIABLE>)<OPERATOR>;</OPERATOR> <VARIABLE>$i</VARIABLE><OPERATOR>++</OPERATOR>)
    {
      <VARIABLE>$t</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$x</VARIABLE>[<VARIABLE>$i</VARIABLE>]<OPERATOR>;</OPERATOR>      
      <KEYWORD>if</KEYWORD> (<FUNCTION>preg_match</FUNCTION>(<STRING>"/^.*<ESC>\.</ESC>(gif|jpe?g|png|bmp)<ESC>\s</ESC>*$/i"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$t</VARIABLE>))
        <VARIABLE>$texts</VARIABLE> []<OPERATOR>=</OPERATOR> <STRING>"&lt;img src='<VARIABLE>$t</VARIABLE>' class='linked_img'&gt;"</STRING><OPERATOR>;</OPERATOR>
      <KEYWORD>else</KEYWORD>
        <VARIABLE>$texts</VARIABLE> []<OPERATOR>=</OPERATOR> <VARIABLE>$t</VARIABLE><OPERATOR>;</OPERATOR>
      
    }
    <VARIABLE>$text</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>implode</FUNCTION>(<STRING>" "</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$texts</VARIABLE>)<OPERATOR>;</OPERATOR>
    
    <KEYWORD>if</KEYWORD> (<FUNCTION>trim</FUNCTION>(<VARIABLE>$text</VARIABLE>) <OPERATOR>===</OPERATOR> <STRING>""</STRING>)
      <VARIABLE>$text</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$uri</VARIABLE><OPERATOR>;</OPERATOR>
    
    <VARIABLE>$target</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>    
    <VARIABLE>$ext</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>""</STRING><OPERATOR>;</OPERATOR>
    
    <KEYWORD>if</KEYWORD> (<FUNCTION>preg_match</FUNCTION>(<STRING>"%^.*?://%"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$uri</VARIABLE>))
    {
      <VARIABLE>$target</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>" target=_blank"</STRING><OPERATOR>;</OPERATOR>
      <VARIABLE>$ext</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"%.*://(www<ESC>\d</ESC>*<ESC>\.</ESC>)?%"</STRING><OPERATOR>,</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$uri</VARIABLE>)<OPERATOR>;</OPERATOR>
      <VARIABLE>$ext</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace</FUNCTION>(<STRING>"%/.*$%"</STRING><OPERATOR>,</OPERATOR> <STRING>""</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$ext</VARIABLE>)<OPERATOR>;</OPERATOR>
      <VARIABLE>$ext</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>" [<VARIABLE>$ext</VARIABLE>]"</STRING><OPERATOR>;</OPERATOR>
    }    
    <VARIABLE>$a</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"&lt;a href='<VARIABLE>$uri</VARIABLE>'<VARIABLE>$target</VARIABLE>&gt;<VARIABLE>$text</VARIABLE>&lt;/a&gt;<VARIABLE>$ext</VARIABLE>"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(<VARIABLE>$a</VARIABLE>)<OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseLinksCb2</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <VARIABLE>$link</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>array</FUNCTION>(<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <VARIABLE>$matches</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>.</OPERATOR> <STRING>" "</STRING> <OPERATOR>.</OPERATOR> <VARIABLE>$matches</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>ParseLinksCb</OO>(<VARIABLE>$link</VARIABLE>)<OPERATOR>;</OPERATOR>    
  }
  
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>PrelinkerCb</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <KEYWORD>if</KEYWORD> ((<VARIABLE>$lookup</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>call_user_func</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>linkifier_cb</OO><OPERATOR>,</OPERATOR> <VARIABLE>$matches</VARIABLE>[<NUMERIC>1</NUMERIC>]))
          <OPERATOR>!==</OPERATOR> <KEYWORD>false</KEYWORD>)
    {
      <KEYWORD>if</KEYWORD> (<FUNCTION>isset</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>2</NUMERIC>]) <OPERATOR>&amp;&amp;</OPERATOR> <FUNCTION>strlen</FUNCTION>(<FUNCTION>trim</FUNCTION>(<VARIABLE>$matches</VARIABLE>[<NUMERIC>2</NUMERIC>])))
        <KEYWORD>return</KEYWORD> <STRING>"[<VARIABLE>$lookup</VARIABLE> <VARIABLE>{$matches[2]}</VARIABLE>]"</STRING><OPERATOR>;</OPERATOR>
      
      <KEYWORD>return</KEYWORD> <STRING>"[<VARIABLE>$lookup</VARIABLE> <VARIABLE>{$matches[1]}</VARIABLE>]"</STRING><OPERATOR>;</OPERATOR>
    }
    
    <KEYWORD>return</KEYWORD> <VARIABLE>$matches</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>Prelinker</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    <KEYWORD>if</KEYWORD> (<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>linkifier_cb</OO> <OPERATOR>===</OPERATOR> <KEYWORD>null</KEYWORD>)
      <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
    
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/<ESC>\[</ESC>(<ESC>\S</ESC>+?)(<ESC>\s</ESC>+.*?)?<ESC>\]</ESC>/"</STRING><OPERATOR>,</OPERATOR>
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'PrelinkerCb'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
      
  }
  
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseLinksImages</USER_FUNCTION>(<VARIABLE>$matches</VARIABLE>)
  {
    <KEYWORD>return</KEYWORD> <VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>Hide</OO>(<STRING>"&lt;img src='<VARIABLE>{$matches[0]}</VARIABLE>' title='' alt=''&gt;"</STRING>)<OPERATOR>;</OPERATOR>
  }
  <KEYWORD>function</KEYWORD> <USER_FUNCTION>ParseLinks</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {    
    
<COMMENT>//     $str = $this-&gt;Prelinker($str);</COMMENT>
    
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/<ESC>\[</ESC>(.*?)<ESC>\]</ESC>/m"</STRING><OPERATOR>,</OPERATOR> 
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseLinksCb'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
      
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"/(?&lt;=<ESC>\s</ESC>)[^<ESC>\s</ESC>!]<ESC>\S</ESC>*?<ESC>\.</ESC>(gif|jpe?g|png|bmp)<ESC>\b</ESC>/i"</STRING><OPERATOR>,</OPERATOR>
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseLinksImages'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>
      
    <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>preg_replace_callback</FUNCTION>(<STRING>"@(http://|www<ESC>\d</ESC>*<ESC>\.</ESC>)<ESC>\S</ESC>*@"</STRING><OPERATOR>,</OPERATOR>
      <FUNCTION>array</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'ParseLinksCb2'</STRING>)<OPERATOR>,</OPERATOR> <VARIABLE>$str</VARIABLE>)<OPERATOR>;</OPERATOR>    

    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }

  <KEYWORD>function</KEYWORD> <USER_FUNCTION>Format</USER_FUNCTION>(<VARIABLE>$str</VARIABLE>)
  {
    
    <FUNCTION>usort</FUNCTION>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>handlers</OO><OPERATOR>,</OPERATOR> <FUNCTION>create_function</FUNCTION>(<STRING>'$a,$b'</STRING><OPERATOR>,</OPERATOR> <STRING>'</STRING>
<STRING>    return $a["priority"] - $b["priority"];</STRING>
<STRING>    '</STRING>))<OPERATOR>;</OPERATOR>
        
    <KEYWORD>foreach</KEYWORD>(<VARIABLE>$this</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>handlers</OO> <KEYWORD>as</KEYWORD> <VARIABLE>$handler</VARIABLE>)
    {
      <VARIABLE>$func</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$handler</VARIABLE>[<STRING>'func'</STRING>]<OPERATOR>;</OPERATOR>
      <VARIABLE>$str</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>call_user_func_array</FUNCTION>(<VARIABLE>$func</VARIABLE><OPERATOR>,</OPERATOR> <FUNCTION>array</FUNCTION>(<VARIABLE>$str</VARIABLE><OPERATOR>,</OPERATOR> <OPERATOR>&amp;</OPERATOR><VARIABLE>$this</VARIABLE>))<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$str</VARIABLE><OPERATOR>;</OPERATOR>
  }
}


