<COMMENT>// Copyright (c) 2006, ComponentAce</COMMENT>
<COMMENT>// http://www.componentace.com</COMMENT>
<COMMENT>// All rights reserved.</COMMENT>

<COMMENT>// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</COMMENT>

<COMMENT>// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</COMMENT>
<COMMENT>// Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</COMMENT>
<COMMENT>// Neither the name of ComponentAce nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</COMMENT>
<COMMENT>// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</COMMENT>

<COMMENT>/*</COMMENT>
<COMMENT>Copyright (c) 2000,2001,2002,2003 ymnk, JCraft,Inc. All rights reserved.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>Redistribution and use in source and binary forms, with or without</COMMENT>
<COMMENT>modification, are permitted provided that the following conditions are met:</COMMENT>
<COMMENT></COMMENT>
<COMMENT>1. Redistributions of source code must retain the above copyright notice,</COMMENT>
<COMMENT>this list of conditions and the following disclaimer.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>2. Redistributions in binary form must reproduce the above copyright</COMMENT>
<COMMENT>notice, this list of conditions and the following disclaimer in</COMMENT>
<COMMENT>the documentation and/or other materials provided with the distribution.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>3. The names of the authors may not be used to endorse or promote products</COMMENT>
<COMMENT>derived from this software without specific prior written permission.</COMMENT>
<COMMENT></COMMENT>
<COMMENT>THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,</COMMENT>
<COMMENT>INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</COMMENT>
<COMMENT>FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,</COMMENT>
<COMMENT>INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,</COMMENT>
<COMMENT>INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</COMMENT>
<COMMENT>LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,</COMMENT>
<COMMENT>OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</COMMENT>
<COMMENT>LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</COMMENT>
<COMMENT>NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,</COMMENT>
<COMMENT>EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</COMMENT>
<COMMENT>*/</COMMENT>
<COMMENT>/*</COMMENT>
<COMMENT>* This program is based on zlib-1.1.3, so all credit should go authors</COMMENT>
<COMMENT>* Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)</COMMENT>
<COMMENT>* and contributors of zlib.</COMMENT>
<COMMENT>*/</COMMENT>
<KEYWORD>using</KEYWORD> System<OPERATOR>;</OPERATOR>
<KEYWORD>namespace</KEYWORD> zlib
{

        <KEYWORD>sealed</KEYWORD> <KEYWORD>class</KEYWORD> Tree
        {
                <KEYWORD>private</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>MAX_BITS</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>
                <KEYWORD>private</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>BL_CODES</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>;</OPERATOR>
                <KEYWORD>private</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>D_CODES</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>30</NUMERIC><OPERATOR>;</OPERATOR>
                <KEYWORD>private</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>LITERALS</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>256</NUMERIC><OPERATOR>;</OPERATOR>
                <KEYWORD>private</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>LENGTH_CODES</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>;</OPERATOR>
                <KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE> <CONSTANT>L_CODES</CONSTANT> <OPERATOR>=</OPERATOR> (<CONSTANT>LITERALS</CONSTANT> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC> <OPERATOR>+</OPERATOR> <CONSTANT>LENGTH_CODES</CONSTANT>)<OPERATOR>;</OPERATOR>
                <KEYWORD>private</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE> <CONSTANT>HEAP_SIZE</CONSTANT> <OPERATOR>=</OPERATOR> (<NUMERIC>2</NUMERIC> <OPERATOR>*</OPERATOR> <CONSTANT>L_CODES</CONSTANT> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>

                <COMMENT>// Bit length codes must not exceed MAX_BL_BITS bits</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>MAX_BL_BITS</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>;</OPERATOR>

                <COMMENT>// end of block literal code</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>END_BLOCK</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>256</NUMERIC><OPERATOR>;</OPERATOR>

                <COMMENT>// repeat previous bit length 3-6 times (2 bits of repeat count)</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>REP_3_6</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR>

                <COMMENT>// repeat a zero length 3-10 times  (3 bits of repeat count)</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>REPZ_3_10</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>;</OPERATOR>

                <COMMENT>// repeat a zero length 11-138 times  (7 bits of repeat count)</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>REPZ_11_138</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>;</OPERATOR>

                <COMMENT>// extra bits for each length code</COMMENT>
                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE>[] extra_lbits <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>int</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>}<OPERATOR>;</OPERATOR>

                <COMMENT>// extra bits for each distance code</COMMENT>
                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE>[] extra_dbits <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>int</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC>}<OPERATOR>;</OPERATOR>

                <COMMENT>// extra bits for each bit length code</COMMENT>
                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE>[] extra_blbits <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>int</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC>}<OPERATOR>;</OPERATOR>

                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>byte</TYPE>[] bl_order <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>byte</TYPE>[]{<NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC>}<OPERATOR>;</OPERATOR>


                <COMMENT>// The lengths of the bit length codes are sent in order of decreasing</COMMENT>
                <COMMENT>// probability, to avoid transmitting the lengths for unused bit</COMMENT>
                <COMMENT>// length codes.</COMMENT>

                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> Buf_size <OPERATOR>=</OPERATOR> <NUMERIC>8</NUMERIC> <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>

                <COMMENT>// see definition of array dist_code below</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>const</TYPE> <TYPE>int</TYPE> <CONSTANT>DIST_CODE_LEN</CONSTANT> <OPERATOR>=</OPERATOR> <NUMERIC>512</NUMERIC><OPERATOR>;</OPERATOR>

                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>byte</TYPE>[] _dist_code <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>byte</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR>
                        <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>29</NUMERIC>}<OPERATOR>;</OPERATOR>

                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>byte</TYPE>[] _length_code <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>byte</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>9</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>11</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>13</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>15</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>17</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>18</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>19</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>21</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>22</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>23</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>25</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>26</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>27</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC>}<OPERATOR>;</OPERATOR>

                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE>[] base_length <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>int</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>10</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>14</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>20</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>28</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>32</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>40</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>48</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>56</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>80</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>96</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>112</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>128</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>160</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>192</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>224</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC>}<OPERATOR>;</OPERATOR>

                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <KEYWORD>readonly</KEYWORD> <TYPE>int</TYPE>[] base_dist <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>int</TYPE>[]{<NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>32</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>48</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>64</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>96</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>128</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>192</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>256</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>384</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>512</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>768</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1024</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>1536</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>2048</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>3072</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>4096</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>6144</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>8192</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>12288</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>16384</NUMERIC><OPERATOR>,</OPERATOR> <NUMERIC>24576</NUMERIC>}<OPERATOR>;</OPERATOR>

                <COMMENT>// Mapping from a distance to a distance code. dist is the distance - 1 and</COMMENT>
                <COMMENT>// must not have side effects. _dist_code[256] and _dist_code[257] are never</COMMENT>
                <COMMENT>// used.</COMMENT>
                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <TYPE>int</TYPE> d_code(<TYPE>int</TYPE> dist)
                {
                        <KEYWORD>return</KEYWORD> ((dist) <OPERATOR>&lt;</OPERATOR> <NUMERIC>256</NUMERIC><OPERATOR>?</OPERATOR>_dist_code[dist]<OPERATOR>:</OPERATOR>_dist_code[<NUMERIC>256</NUMERIC> <OPERATOR>+</OPERATOR> (<OBJ>SupportClass</OBJ><OPERATOR>.</OPERATOR><OO>URShift</OO>((dist)<OPERATOR>,</OPERATOR> <NUMERIC>7</NUMERIC>))])<OPERATOR>;</OPERATOR>
                }

                <KEYWORD>internal</KEYWORD> <TYPE>short</TYPE>[] dyn_tree<OPERATOR>;</OPERATOR> <COMMENT>// the dynamic tree</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>int</TYPE> max_code<OPERATOR>;</OPERATOR> <COMMENT>// largest code with non zero frequency</COMMENT>
                <KEYWORD>internal</KEYWORD> StaticTree stat_desc<OPERATOR>;</OPERATOR> <COMMENT>// the corresponding static tree</COMMENT>

                <COMMENT>// Compute the optimal bit lengths for a tree and update the total bit length</COMMENT>
                <COMMENT>// for the current block.</COMMENT>
                <COMMENT>// IN assertion: the fields freq and dad are set, heap[heap_max] and</COMMENT>
                <COMMENT>//    above are the tree nodes sorted by increasing frequency.</COMMENT>
                <COMMENT>// OUT assertions: the field len is set to the optimal bit length, the</COMMENT>
                <COMMENT>//     array bl_count contains the frequencies for each bit length.</COMMENT>
                <COMMENT>//     The length opt_len is updated; static_len is also updated if stree is</COMMENT>
                <COMMENT>//     not null.</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>void</TYPE>  gen_bitlen(Deflate s)
                {
                        <TYPE>short</TYPE>[] tree <OPERATOR>=</OPERATOR> dyn_tree<OPERATOR>;</OPERATOR>
                        <TYPE>short</TYPE>[] stree <OPERATOR>=</OPERATOR> <OBJ>stat_desc</OBJ><OPERATOR>.</OPERATOR><OO>static_tree</OO><OPERATOR>;</OPERATOR>
                        <TYPE>int</TYPE>[] extra <OPERATOR>=</OPERATOR> <OBJ>stat_desc</OBJ><OPERATOR>.</OPERATOR><OO>extra_bits</OO><OPERATOR>;</OPERATOR>
                        <TYPE>int</TYPE> base_Renamed <OPERATOR>=</OPERATOR> <OBJ>stat_desc</OBJ><OPERATOR>.</OPERATOR><OO>extra_base</OO><OPERATOR>;</OPERATOR>
                        <TYPE>int</TYPE> max_length <OPERATOR>=</OPERATOR> <OBJ>stat_desc</OBJ><OPERATOR>.</OPERATOR><OO>max_length</OO><OPERATOR>;</OPERATOR>
                        <TYPE>int</TYPE> h<OPERATOR>;</OPERATOR> <COMMENT>// heap index</COMMENT>
                        <TYPE>int</TYPE> n<OPERATOR>,</OPERATOR> m<OPERATOR>;</OPERATOR> <COMMENT>// iterate over the tree elements</COMMENT>
                        <TYPE>int</TYPE> bits<OPERATOR>;</OPERATOR> <COMMENT>// bit length</COMMENT>
                        <TYPE>int</TYPE> xbits<OPERATOR>;</OPERATOR> <COMMENT>// extra bits</COMMENT>
                        <TYPE>short</TYPE> f<OPERATOR>;</OPERATOR> <COMMENT>// frequency</COMMENT>
                        <TYPE>int</TYPE> overflow <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>// number of elements with bit length too large</COMMENT>

                        <KEYWORD>for</KEYWORD> (bits <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> bits <OPERATOR>&lt;=</OPERATOR> <CONSTANT>MAX_BITS</CONSTANT><OPERATOR>;</OPERATOR> bits<OPERATOR>++</OPERATOR>)
                                s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits] <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

                        <COMMENT>// In a first pass, compute the optimal bit lengths (which may</COMMENT>
                        <COMMENT>// overflow in the case of the bit length tree).</COMMENT>
                        tree[s<OPERATOR>.</OPERATOR><OO>heap</OO>[s<OPERATOR>.</OPERATOR><OO>heap_max</OO>] <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>// root of the heap</COMMENT>

                        <KEYWORD>for</KEYWORD> (h <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap_max</OO> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> h <OPERATOR>&lt;</OPERATOR> <CONSTANT>HEAP_SIZE</CONSTANT><OPERATOR>;</OPERATOR> h<OPERATOR>++</OPERATOR>)
                        {
                                n <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[h]<OPERATOR>;</OPERATOR>
                                bits <OPERATOR>=</OPERATOR> tree[tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
                                <KEYWORD>if</KEYWORD> (bits <OPERATOR>&gt;</OPERATOR> max_length)
                                {
                                        bits <OPERATOR>=</OPERATOR> max_length<OPERATOR>;</OPERATOR> overflow<OPERATOR>++;</OPERATOR>
                                }
                                tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) bits<OPERATOR>;</OPERATOR>
                                <COMMENT>// We overwrite tree[n*2+1] which is no longer needed</COMMENT>

                                <KEYWORD>if</KEYWORD> (n <OPERATOR>&gt;</OPERATOR> max_code)
                                        <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR> <COMMENT>// not a leaf node</COMMENT>

                                s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits]<OPERATOR>++;</OPERATOR>
                                xbits <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
                                <KEYWORD>if</KEYWORD> (n <OPERATOR>&gt;=</OPERATOR> base_Renamed)
                                        xbits <OPERATOR>=</OPERATOR> extra[n <OPERATOR>-</OPERATOR> base_Renamed]<OPERATOR>;</OPERATOR>
                                f <OPERATOR>=</OPERATOR> tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>]<OPERATOR>;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>opt_len</OO> <OPERATOR>+=</OPERATOR> f <OPERATOR>*</OPERATOR> (bits <OPERATOR>+</OPERATOR> xbits)<OPERATOR>;</OPERATOR>
                                <KEYWORD>if</KEYWORD> (stree <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD>)
                                        s<OPERATOR>.</OPERATOR><OO>static_len</OO> <OPERATOR>+=</OPERATOR> f <OPERATOR>*</OPERATOR> (stree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> xbits)<OPERATOR>;</OPERATOR>
                        }
                        <KEYWORD>if</KEYWORD> (overflow <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>)
                                <KEYWORD>return</KEYWORD> <OPERATOR>;</OPERATOR>

                        <COMMENT>// This happens for example on obj2 and pic of the Calgary corpus</COMMENT>
                        <COMMENT>// Find the first bit length which could increase:</COMMENT>
                        <KEYWORD>do</KEYWORD>
                        {
                                bits <OPERATOR>=</OPERATOR> max_length <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
                                <KEYWORD>while</KEYWORD> (s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits] <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>)
                                        bits<OPERATOR>--;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits]<OPERATOR>--;</OPERATOR> <COMMENT>// move one leaf down the tree</COMMENT>
                                s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) (s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>+</OPERATOR> <NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR> <COMMENT>// move one overflow item as its brother</COMMENT>
                                s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[max_length]<OPERATOR>--;</OPERATOR>
                                <COMMENT>// The brother of the overflow item also moves one step up,</COMMENT>
                                <COMMENT>// but this does not affect bl_count[max_length]</COMMENT>
                                overflow <OPERATOR>-=</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
                        }
                        <KEYWORD>while</KEYWORD> (overflow <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>

                        <KEYWORD>for</KEYWORD> (bits <OPERATOR>=</OPERATOR> max_length<OPERATOR>;</OPERATOR> bits <OPERATOR>!=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> bits<OPERATOR>--</OPERATOR>)
                        {
                                n <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>bl_count</OO>[bits]<OPERATOR>;</OPERATOR>
                                <KEYWORD>while</KEYWORD> (n <OPERATOR>!=</OPERATOR> <NUMERIC>0</NUMERIC>)
                                {
                                        m <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[<OPERATOR>--</OPERATOR>h]<OPERATOR>;</OPERATOR>
                                        <KEYWORD>if</KEYWORD> (m <OPERATOR>&gt;</OPERATOR> max_code)
                                                <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
                                        <KEYWORD>if</KEYWORD> (tree[m <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>!=</OPERATOR> bits)
                                        {
                                                s<OPERATOR>.</OPERATOR><OO>opt_len</OO> <OPERATOR>=</OPERATOR> (<TYPE>int</TYPE>) (s<OPERATOR>.</OPERATOR><OO>opt_len</OO> <OPERATOR>+</OPERATOR> ((<TYPE>long</TYPE>) bits <OPERATOR>-</OPERATOR> (<TYPE>long</TYPE>) tree[m <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>]) <OPERATOR>*</OPERATOR> (<TYPE>long</TYPE>) tree[m <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>])<OPERATOR>;</OPERATOR>
                                                tree[m <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) bits<OPERATOR>;</OPERATOR>
                                        }
                                        n<OPERATOR>--;</OPERATOR>
                                }
                        }
                }

                <COMMENT>// Construct one Huffman tree and assigns the code bit strings and lengths.</COMMENT>
                <COMMENT>// Update the total bit length for the current block.</COMMENT>
                <COMMENT>// IN assertion: the field freq is set for all tree elements.</COMMENT>
                <COMMENT>// OUT assertions: the fields len and code are set to the optimal bit length</COMMENT>
                <COMMENT>//     and corresponding code. The length opt_len is updated; static_len is</COMMENT>
                <COMMENT>//     also updated if stree is not null. The field max_code is set.</COMMENT>
                <KEYWORD>internal</KEYWORD> <TYPE>void</TYPE>  build_tree(Deflate s)
                {
                        <TYPE>short</TYPE>[] tree <OPERATOR>=</OPERATOR> dyn_tree<OPERATOR>;</OPERATOR>
                        <TYPE>short</TYPE>[] stree <OPERATOR>=</OPERATOR> <OBJ>stat_desc</OBJ><OPERATOR>.</OPERATOR><OO>static_tree</OO><OPERATOR>;</OPERATOR>
                        <TYPE>int</TYPE> elems <OPERATOR>=</OPERATOR> <OBJ>stat_desc</OBJ><OPERATOR>.</OPERATOR><OO>elems</OO><OPERATOR>;</OPERATOR>
                        <TYPE>int</TYPE> n<OPERATOR>,</OPERATOR> m<OPERATOR>;</OPERATOR> <COMMENT>// iterate over heap elements</COMMENT>
                        <TYPE>int</TYPE> max_code <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>// largest code with non zero frequency</COMMENT>
                        <TYPE>int</TYPE> node<OPERATOR>;</OPERATOR> <COMMENT>// new node being created</COMMENT>

                        <COMMENT>// Construct the initial heap, with least frequent element in</COMMENT>
                        <COMMENT>// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].</COMMENT>
                        <COMMENT>// heap[0] is not used.</COMMENT>
                        s<OPERATOR>.</OPERATOR><OO>heap_len</OO> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
                        s<OPERATOR>.</OPERATOR><OO>heap_max</OO> <OPERATOR>=</OPERATOR> <CONSTANT>HEAP_SIZE</CONSTANT><OPERATOR>;</OPERATOR>

                        <KEYWORD>for</KEYWORD> (n <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> n <OPERATOR>&lt;</OPERATOR> elems<OPERATOR>;</OPERATOR> n<OPERATOR>++</OPERATOR>)
                        {
                                <KEYWORD>if</KEYWORD> (tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>] <OPERATOR>!=</OPERATOR> <NUMERIC>0</NUMERIC>)
                                {
                                        s<OPERATOR>.</OPERATOR><OO>heap</OO>[<OPERATOR>++</OPERATOR>s<OPERATOR>.</OPERATOR><OO>heap_len</OO>] <OPERATOR>=</OPERATOR> max_code <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR>
                                        s<OPERATOR>.</OPERATOR><OO>depth</OO>[n] <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
                                }
                                <KEYWORD>else</KEYWORD>
                                {
                                        tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
                                }
                        }

                        <COMMENT>// The pkzip format requires that at least one distance code exists,</COMMENT>
                        <COMMENT>// and that at least one bit should be sent even if there is only one</COMMENT>
                        <COMMENT>// possible code. So to avoid special checks later on we force at least</COMMENT>
                        <COMMENT>// two codes of non zero frequency.</COMMENT>
                        <KEYWORD>while</KEYWORD> (s<OPERATOR>.</OPERATOR><OO>heap_len</OO> <OPERATOR>&lt;</OPERATOR> <NUMERIC>2</NUMERIC>)
                        {
                                node <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[<OPERATOR>++</OPERATOR>s<OPERATOR>.</OPERATOR><OO>heap_len</OO>] <OPERATOR>=</OPERATOR> (max_code <OPERATOR>&lt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>?++</OPERATOR>max_code<OPERATOR>:</OPERATOR><NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
                                tree[node <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>] <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>depth</OO>[node] <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>opt_len</OO><OPERATOR>--;</OPERATOR>
                                <KEYWORD>if</KEYWORD> (stree <OPERATOR>!=</OPERATOR> <KEYWORD>null</KEYWORD>)
                                        s<OPERATOR>.</OPERATOR><OO>static_len</OO> <OPERATOR>-=</OPERATOR> stree[node <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>
                                <COMMENT>// node is 0 or 1 so it does not have extra bits</COMMENT>
                        }
                        <OBJ>this</OBJ><OPERATOR>.</OPERATOR><OO>max_code</OO> <OPERATOR>=</OPERATOR> max_code<OPERATOR>;</OPERATOR>

                        <COMMENT>// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,</COMMENT>
                        <COMMENT>// establish sub-heaps of increasing lengths:</COMMENT>

                        <KEYWORD>for</KEYWORD> (n <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap_len</OO> <OPERATOR>/</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR> n <OPERATOR>&gt;=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> n<OPERATOR>--</OPERATOR>)
                                s<OPERATOR>.</OPERATOR><OO>pqdownheap</OO>(tree<OPERATOR>,</OPERATOR> n)<OPERATOR>;</OPERATOR>

                        <COMMENT>// Construct the Huffman tree by repeatedly combining the least two</COMMENT>
                        <COMMENT>// frequent nodes.</COMMENT>

                        node <OPERATOR>=</OPERATOR> elems<OPERATOR>;</OPERATOR> <COMMENT>// next internal node of the tree</COMMENT>
                        <KEYWORD>do</KEYWORD>
                        {
                                <COMMENT>// n = node of least frequency</COMMENT>
                                n <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[<NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>heap</OO>[<NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[s<OPERATOR>.</OPERATOR><OO>heap_len</OO><OPERATOR>--</OPERATOR>]<OPERATOR>;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>pqdownheap</OO>(tree<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                                m <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[<NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR> <COMMENT>// m = node of next least frequency</COMMENT>

                                s<OPERATOR>.</OPERATOR><OO>heap</OO>[<OPERATOR>--</OPERATOR>s<OPERATOR>.</OPERATOR><OO>heap_max</OO>] <OPERATOR>=</OPERATOR> n<OPERATOR>;</OPERATOR> <COMMENT>// keep the nodes sorted by frequency</COMMENT>
                                s<OPERATOR>.</OPERATOR><OO>heap</OO>[<OPERATOR>--</OPERATOR>s<OPERATOR>.</OPERATOR><OO>heap_max</OO>] <OPERATOR>=</OPERATOR> m<OPERATOR>;</OPERATOR>

                                <COMMENT>// Create a new node father of n and m</COMMENT>
                                tree[node <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>] <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) (tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>] <OPERATOR>+</OPERATOR> tree[m <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>])<OPERATOR>;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>depth</OO>[node] <OPERATOR>=</OPERATOR> (<TYPE>byte</TYPE>) (<OBJ>System</OBJ><OPERATOR>.</OPERATOR><OO>Math</OO><OPERATOR>.</OPERATOR><OO>Max</OO>((<TYPE>byte</TYPE>) s<OPERATOR>.</OPERATOR><OO>depth</OO>[n]<OPERATOR>,</OPERATOR> (<TYPE>byte</TYPE>) s<OPERATOR>.</OPERATOR><OO>depth</OO>[m]) <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                                tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> tree[m <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) node<OPERATOR>;</OPERATOR>

                                <COMMENT>// and insert the new node in the heap</COMMENT>
                                s<OPERATOR>.</OPERATOR><OO>heap</OO>[<NUMERIC>1</NUMERIC>] <OPERATOR>=</OPERATOR> node<OPERATOR>++;</OPERATOR>
                                s<OPERATOR>.</OPERATOR><OO>pqdownheap</OO>(tree<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                        }
                        <KEYWORD>while</KEYWORD> (s<OPERATOR>.</OPERATOR><OO>heap_len</OO> <OPERATOR>&gt;=</OPERATOR> <NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR>

                        s<OPERATOR>.</OPERATOR><OO>heap</OO>[<OPERATOR>--</OPERATOR>s<OPERATOR>.</OPERATOR><OO>heap_max</OO>] <OPERATOR>=</OPERATOR> s<OPERATOR>.</OPERATOR><OO>heap</OO>[<NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>

                        <COMMENT>// At this point, the fields freq and dad are set. We can now</COMMENT>
                        <COMMENT>// generate the bit lengths.</COMMENT>

                        gen_bitlen(s)<OPERATOR>;</OPERATOR>

                        <COMMENT>// The field len is now set, we can generate the bit codes</COMMENT>
                        gen_codes(tree<OPERATOR>,</OPERATOR> max_code<OPERATOR>,</OPERATOR> s<OPERATOR>.</OPERATOR><OO>bl_count</OO>)<OPERATOR>;</OPERATOR>
                }

                <COMMENT>// Generate the codes for a given tree and bit counts (which need not be</COMMENT>
                <COMMENT>// optimal).</COMMENT>
                <COMMENT>// IN assertion: the array bl_count contains the bit length statistics for</COMMENT>
                <COMMENT>// the given tree and the field len is set for all tree elements.</COMMENT>
                <COMMENT>// OUT assertion: the field code is set for all tree elements of non</COMMENT>
                <COMMENT>//     zero code length.</COMMENT>
                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <TYPE>void</TYPE>  gen_codes(<TYPE>short</TYPE>[] tree<OPERATOR>,</OPERATOR> <TYPE>int</TYPE> max_code<OPERATOR>,</OPERATOR> <TYPE>short</TYPE>[] bl_count)
                {
                        <TYPE>short</TYPE>[] next_code <OPERATOR>=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>short</TYPE>[<CONSTANT>MAX_BITS</CONSTANT> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR> <COMMENT>// next code value for each bit length</COMMENT>
                        <TYPE>short</TYPE> code <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT>// running code value</COMMENT>
                        <TYPE>int</TYPE> bits<OPERATOR>;</OPERATOR> <COMMENT>// bit index</COMMENT>
                        <TYPE>int</TYPE> n<OPERATOR>;</OPERATOR> <COMMENT>// code index</COMMENT>

                        <COMMENT>// The distribution counts are first used to generate the code values</COMMENT>
                        <COMMENT>// without bit reversal.</COMMENT>
                        <KEYWORD>for</KEYWORD> (bits <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> bits <OPERATOR>&lt;=</OPERATOR> <CONSTANT>MAX_BITS</CONSTANT><OPERATOR>;</OPERATOR> bits<OPERATOR>++</OPERATOR>)
                        {
                                next_code[bits] <OPERATOR>=</OPERATOR> code <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) ((code <OPERATOR>+</OPERATOR> bl_count[bits <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>]) <OPERATOR>&lt;&lt;</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                        }

                        <COMMENT>// Check that the bit counts in bl_count are consistent. The last code</COMMENT>
                        <COMMENT>// must be all ones.</COMMENT>
                        <COMMENT>//Assert (code + bl_count[MAX_BITS]-1 == (1&lt;&lt;MAX_BITS)-1,</COMMENT>
                        <COMMENT>//        "inconsistent bit counts");</COMMENT>
                        <COMMENT>//Tracev((stderr,"\ngen_codes: max_code %d ", max_code));</COMMENT>

                        <KEYWORD>for</KEYWORD> (n <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> n <OPERATOR>&lt;=</OPERATOR> max_code<OPERATOR>;</OPERATOR> n<OPERATOR>++</OPERATOR>)
                        {
                                <TYPE>int</TYPE> len <OPERATOR>=</OPERATOR> tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC> <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>]<OPERATOR>;</OPERATOR>
                                <KEYWORD>if</KEYWORD> (len <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>)
                                        <KEYWORD>continue</KEYWORD><OPERATOR>;</OPERATOR>
                                <COMMENT>// Now reverse the bits</COMMENT>
                                tree[n <OPERATOR>*</OPERATOR> <NUMERIC>2</NUMERIC>] <OPERATOR>=</OPERATOR> (<TYPE>short</TYPE>) (bi_reverse(next_code[len]<OPERATOR>++,</OPERATOR> len))<OPERATOR>;</OPERATOR>
                        }
                }

                <COMMENT>// Reverse the first len bits of a code, using straightforward code (a faster</COMMENT>
                <COMMENT>// method would use a table)</COMMENT>
                <COMMENT>// IN assertion: 1 &lt;= len &lt;= 15</COMMENT>
                <KEYWORD>internal</KEYWORD> <KEYWORD>static</KEYWORD> <TYPE>int</TYPE> bi_reverse(<TYPE>int</TYPE> code<OPERATOR>,</OPERATOR> <TYPE>int</TYPE> len)
                {
                        <TYPE>int</TYPE> res <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
                        <KEYWORD>do</KEYWORD>
                        {
                                res <OPERATOR>|=</OPERATOR> code <OPERATOR>&amp;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
                                code <OPERATOR>=</OPERATOR> <OBJ>SupportClass</OBJ><OPERATOR>.</OPERATOR><OO>URShift</OO>(code<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                                res <OPERATOR>&lt;&lt;=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
                        }
                        <KEYWORD>while</KEYWORD> (<OPERATOR>--</OPERATOR>len <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC>)<OPERATOR>;</OPERATOR>
                        <KEYWORD>return</KEYWORD> <OBJ>SupportClass</OBJ><OPERATOR>.</OPERATOR><OO>URShift</OO>(res<OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                }
        }
}