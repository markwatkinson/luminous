<DIFF_HEADER_OLD>--- d1	2010-08-10 13:59:31.419161676 +0100</DIFF_HEADER_OLD>
<DIFF_HEADER_NEW>+++ d2	2010-08-10 14:00:04.016162754 +0100</DIFF_HEADER_NEW>
<DIFF_RANGE>@@ -1,186 +1,237 @@</DIFF_RANGE>
<DIFF_UNCHANGED> Python (programming language)</DIFF_UNCHANGED>
<DIFF_UNCHANGED> From Wikipedia, the free encyclopedia</DIFF_UNCHANGED>
<DIFF_OLD>-This is an old revision of this page, as edited by TJRC (talk | contribs) at 14:03, 20 March 2009. It may differ significantly from the current revision.</DIFF_OLD>
<DIFF_NEW>+This is the current revision of this page, as edited by Graham87 (talk | contribs) at 00:28, 6 August 2010. The present address (URL) is a permanent link to this version.</DIFF_NEW>
<DIFF_UNCHANGED> (diff) ← Previous revision | Current revision (diff) | Newer revision → (diff)</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Python</DIFF_UNCHANGED>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_OLD>-Paradigm	multi-paradigm: object-oriented, imperative, functional</DIFF_OLD>
<DIFF_NEW>+Paradigm	multi-paradigm: object-oriented, imperative, functional, reflective</DIFF_NEW>
<DIFF_UNCHANGED> Appeared in	1991</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Designed by	Guido van Rossum</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Developer	Python Software Foundation</DIFF_UNCHANGED>
<DIFF_OLD>-Stable release	3.0.1/February 13, 2009; 17 months ago</DIFF_OLD>
<DIFF_OLD>-2.6.1/December 4, 2008; 19 months ago</DIFF_OLD>
<DIFF_NEW>+Stable release	3.1.2/ March 21, 2010; 4 months ago</DIFF_NEW>
<DIFF_NEW>+2.7/ July 3, 2010; 34 days ago</DIFF_NEW>
<DIFF_UNCHANGED> Typing discipline	duck, dynamic, strong</DIFF_UNCHANGED>
<DIFF_OLD>-Major implementations	CPython, Jython, IronPython, PyPy, Python for S60</DIFF_OLD>
<DIFF_NEW>+Major implementations	CPython, IronPython, Jython, Python for S60, PyPy, Unladen Swallow</DIFF_NEW>
<DIFF_UNCHANGED> Dialects	Stackless Python, RPython</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Influenced by	ABC, ALGOL 68,[1] C, Haskell, Icon, Lisp, Modula-3, Perl, Java</DIFF_UNCHANGED>
<DIFF_OLD>-Influenced	Boo, Groovy, Ruby, Cobra, D</DIFF_OLD>
<DIFF_NEW>+Influenced	Boo, Cobra, D, Falcon, Groovy, Ruby, JavaScript</DIFF_NEW>
<DIFF_UNCHANGED> OS	Cross-platform</DIFF_UNCHANGED>
<DIFF_UNCHANGED> License	Python Software Foundation License</DIFF_UNCHANGED>
<DIFF_OLD>-Website	http://www.python.org/</DIFF_OLD>
<DIFF_OLD>-Python is a general-purpose high-level programming language.[2] Its design philosophy emphasizes code readability.[3] Python's core syntax and semantics are minimalistic, while the standard library is large and comprehensive. Its use of whitespace as block delimiters is unusual among popular programming languages.</DIFF_OLD>
<DIFF_OLD>-Python supports multiple programming paradigms (primarily object oriented, imperative, and functional) and features a fully dynamic type system and automatic memory management, similar to Perl, Ruby, Scheme, and Tcl. Like other dynamic languages, Python is often used as a scripting language.</DIFF_OLD>
<DIFF_OLD>-The language has an open, community-based development model managed by the non-profit Python Software Foundation, which maintains the de facto standard definition of the language in CPython, the reference implementation.</DIFF_OLD>
<DIFF_NEW>+Usual file extensions	.py, .pyw, .pyc, .pyo, .pyd</DIFF_NEW>
<DIFF_NEW>+Website	www.python.org</DIFF_NEW>
<DIFF_NEW>+ Python Programming at Wikibooks</DIFF_NEW>
<DIFF_NEW>+Python is a general-purpose high-level programming language[2] whose design philosophy emphasizes code readability.[3] Python aims to combine "remarkable power with very clear syntax",[4] and its standard library is large and comprehensive. Its use of indentation for block delimiters is unusual among popular programming languages.</DIFF_NEW>
<DIFF_NEW>+Python supports multiple programming paradigms, primarily but not limited to object oriented, imperative and, to a lesser extent, functional programming styles. It features a fully dynamic type system and automatic memory management, similar to that of Scheme, Ruby, Perl, and Tcl. Like other dynamic languages, Python is often used as a scripting language, but is also used in a wide range of non-scripting contexts.</DIFF_NEW>
<DIFF_NEW>+The reference implementation of Python (CPython) is free and open source software and has a community-based development model, as do all or nearly all of its alternative implementations. CPython is managed by the non-profit Python Software Foundation.</DIFF_NEW>
<DIFF_UNCHANGED> Contents [hide]</DIFF_UNCHANGED>
<DIFF_UNCHANGED> 1 History</DIFF_UNCHANGED>
<DIFF_UNCHANGED> 2 Programming philosophy</DIFF_UNCHANGED>
<DIFF_OLD>-2.1 Neologisms</DIFF_OLD>
<DIFF_OLD>-3 Usage</DIFF_OLD>
<DIFF_OLD>-4 Syntax and semantics</DIFF_OLD>
<DIFF_OLD>-4.1 Indentation</DIFF_OLD>
<DIFF_OLD>-4.2 Statements and control flow</DIFF_OLD>
<DIFF_OLD>-4.3 Methods</DIFF_OLD>
<DIFF_OLD>-4.4 Typing</DIFF_OLD>
<DIFF_OLD>-5 Implementations</DIFF_OLD>
<DIFF_OLD>-5.1 CPython</DIFF_OLD>
<DIFF_OLD>-5.2 Alternative implementations</DIFF_OLD>
<DIFF_OLD>-5.3 Interpretational semantics</DIFF_OLD>
<DIFF_OLD>-6 Development</DIFF_OLD>
<DIFF_OLD>-7 Standard library</DIFF_OLD>
<DIFF_OLD>-8 Influences on other languages</DIFF_OLD>
<DIFF_OLD>-9 See also</DIFF_OLD>
<DIFF_OLD>-10 References</DIFF_OLD>
<DIFF_OLD>-11 External links</DIFF_OLD>
<DIFF_OLD>-History</DIFF_OLD>
<DIFF_OLD>-</DIFF_OLD>
<DIFF_OLD>-Main article: History of the Python programming language</DIFF_OLD>
<DIFF_OLD>-Python was conceived in the late 1980s[4] by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language (itself inspired by SETL)[5] capable of exception handling and interfacing with the Amoeba operating system.[6] Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).</DIFF_OLD>
<DIFF_OLD>-Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for unicode. However, the most important change was to the development process itself, with a shift to a more transparent and community-backed process.[7] Python 3.0, a major, backwards-incompatible release, was released on 3 December 2008[8] after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.6.[9]</DIFF_OLD>
<DIFF_OLD>-Programming philosophy</DIFF_OLD>
<DIFF_OLD>-</DIFF_OLD>
<DIFF_OLD>-Python is a multi-paradigm programming language. This means that, rather than forcing programmers to adopt a particular style of programming, it permits several styles: object oriented and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming[clarification needed]. Many other paradigms are supported using extensions, such as pyDBC and Contracts for Python which allow Design by Contract. Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.</DIFF_OLD>
<DIFF_OLD>-Another aspect of the language's design is ease of extensibility, rather than having everything built into the language core. New built-in modules are easily written in C or C++. Python can also be used as an extension language for existing modules and applications that need a programmable interface. This design of a small core language with a large standard library and an easily-extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).[4]</DIFF_OLD>
<DIFF_OLD>-The design of Python offers limited support for functional programming in the Lisp tradition. However, there are significant parallels between the philosophy of Python and those of minimalist Lisp-family languages such as Scheme. The library has two modules (itertools and functools) that implement proven functional tools borrowed from Haskell and Standard ML.[10]</DIFF_OLD>
<DIFF_OLD>-While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl, in favor of a sparser, less-cluttered grammar. As with Perl, Python's developers expressly promote a particular "culture" or ideology based on what they want the language to be, favoring language forms they see as "beautiful", "explicit" and "simple". As Alex Martelli put it in his Python Cookbook (2nd ed., p.230): "To describe something as clever is NOT considered a compliment in the Python culture." Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".[11]</DIFF_OLD>
<DIFF_OLD>-Python eschews premature optimization, and moreover, rejects patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity.[12] It is sometimes described as "slow".[13] However, most problems[who?] are not speed critical, and as computer hardware continues to become exponentially faster (Moore's Law), languages do have more hardware resources available. When speed is a problem, Python programmers tend to try to optimize bottlenecks by algorithm improvements or data structure changes, using a JIT compiler such as Psyco, rewriting the time-critical functions in "closer to the metal" languages such as C, or by translating Python code to C code using tools like Cython.[14]</DIFF_OLD>
<DIFF_OLD>-The core philosophy of the language is summarized by PEP 20 (The Zen of Python).</DIFF_OLD>
<DIFF_OLD>-Neologisms</DIFF_OLD>
<DIFF_NEW>+3 Name and neologisms</DIFF_NEW>
<DIFF_NEW>+4 Usage</DIFF_NEW>
<DIFF_NEW>+5 Syntax and semantics</DIFF_NEW>
<DIFF_NEW>+5.1 Indentation</DIFF_NEW>
<DIFF_NEW>+5.2 Statements and control flow</DIFF_NEW>
<DIFF_NEW>+5.3 Expressions</DIFF_NEW>
<DIFF_NEW>+5.4 Methods</DIFF_NEW>
<DIFF_NEW>+5.5 Typing</DIFF_NEW>
<DIFF_NEW>+6 Implementations</DIFF_NEW>
<DIFF_NEW>+6.1 CPython</DIFF_NEW>
<DIFF_NEW>+6.2 Alternative implementations</DIFF_NEW>
<DIFF_NEW>+6.3 Interpretational semantics</DIFF_NEW>
<DIFF_NEW>+7 Development</DIFF_NEW>
<DIFF_NEW>+8 Standard library</DIFF_NEW>
<DIFF_NEW>+9 Influences on other languages</DIFF_NEW>
<DIFF_NEW>+10 See also</DIFF_NEW>
<DIFF_NEW>+11 References</DIFF_NEW>
<DIFF_NEW>+12 Further reading</DIFF_NEW>
<DIFF_NEW>+13 External links</DIFF_NEW>
<DIFF_NEW>+[edit]History</DIFF_NEW>
<DIFF_NEW>+</DIFF_NEW>
<DIFF_NEW>+Main article: History of Python</DIFF_NEW>
<DIFF_NEW>+Python was conceived in the late 1980s[5] and its implementation was started in December 1989[6] by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language (itself inspired by SETL)[7] capable of exception handling and interfacing with the Amoeba operating system.[8] Van Rossum is Python's principal author, and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community, Benevolent Dictator for Life (BDFL).</DIFF_NEW>
<DIFF_NEW>+Python 2.0 was released on 16 October 2000, with many major new features including a full garbage collector and support for Unicode. However, the most important change was to the development process itself, with a shift to a more transparent and community-backed process.[9] Python 3.0, a major, backwards-incompatible release, was released on 3 December 2008[10] after a long period of testing. Many of its major features have been backported to the backwards-compatible Python 2.7.[11]</DIFF_NEW>
<DIFF_NEW>+[edit]Programming philosophy</DIFF_NEW>
<DIFF_NEW>+</DIFF_NEW>
<DIFF_NEW>+Python is a multi-paradigm programming language. Rather than forcing programmers to adopt a particular style of programming, it permits several styles: object-oriented programming and structured programming are fully supported, and there are a number of language features which support functional programming and aspect-oriented programming (including by metaprogramming[12] and by magic methods).[13] Many other paradigms are supported using extensions, such as pyDBC[14] and Contracts for Python[15] which allow Design by Contract.</DIFF_NEW>
<DIFF_NEW>+Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. An important feature of Python is dynamic name resolution (late binding), which binds method and variable names during program execution.</DIFF_NEW>
<DIFF_NEW>+Rather than requiring all desired functionality to be built into the language's core, Python was designed to be highly extensible. New built-in modules can be easily written in C, C++ or Cython. Python can also be used as an extension language for existing modules and applications that need a programmable interface. This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC (which espoused the opposite mindset).[5]</DIFF_NEW>
<DIFF_NEW>+The design of Python offers only limited support for functional programming in the Lisp tradition. However, Python's design philosophy exhibits significant similarities to those of minimalist Lisp-family languages, such as Scheme.[citation needed] The library has two modules (itertools and functools) that implement proven functional tools borrowed from Haskell and Standard ML.[16]</DIFF_NEW>
<DIFF_NEW>+While offering choice in coding methodology, the Python philosophy rejects exuberant syntax, such as in Perl, in favor of a sparser, less-cluttered grammar. Python's developers expressly promote a particular "culture" or ideology based on what they want the language to be, favoring language forms they see as "beautiful", "explicit" and "simple". As Alex Martelli put it in his Python Cookbook (2nd ed., p. 230): "To describe something as clever is NOT considered a compliment in the Python culture." Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".[17]</DIFF_NEW>
<DIFF_NEW>+Python's developers eschew premature optimization, and moreover, reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity.[18] Python is sometimes described as "slow".[19] However, by the Pareto principle, most problems and sections of programs are not speed critical. When speed is a problem, Python programmers tend to try to optimize bottlenecks by algorithm improvements or data structure changes, using a JIT compiler such as Psyco, rewriting the time-critical functions in "closer to the metal" languages such as C, or by translating (a dialect of) Python code to C code using tools like Cython.[20]</DIFF_NEW>
<DIFF_NEW>+The core philosophy of the language is summarized by the document "PEP 20 (The Zen of Python)".[17]</DIFF_NEW>
<DIFF_NEW>+[edit]Name and neologisms</DIFF_NEW>
<DIFF_NEW>+</DIFF_NEW>
<DIFF_NEW>+An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name (based on the television series Monty Python's Flying Circus), in the common practice of using Monty Python references in example code, and in an occasionally playful approach to tutorials and reference materials.[21][22] For example, the metasyntactic variables often used in Python literature are spam and eggs, instead of the traditional foo and bar.</DIFF_NEW>
<DIFF_UNCHANGED> A common neologism in the Python community is pythonic, which can have a wide range of meanings related to program style. To say that a piece of code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language. Likewise, to say of an interface or language feature that it is pythonic is to say that it works well with Python idioms, that its use meshes well with the rest of the language.</DIFF_UNCHANGED>
<DIFF_OLD>-In contrast, a mark of unpythonic code is that it attempts to "write C++ (or Lisp, or Perl, or Java) code in Python"—that is, provides a rough transcription rather than an idiomatic translation of forms from another language. The concept of pythonicity is tightly bound to Python's minimalist philosophy of readability and avoiding the "there's more than one way to do it" approach. Unreadable code or incomprehensible idioms are unpythonic.</DIFF_OLD>
<DIFF_OLD>-Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as Pythonists, Pythonistas, and Pythoneers.</DIFF_OLD>
<DIFF_NEW>+In contrast, a mark of unpythonic code is that it attempts to write C++ (or Lisp, Perl, or Java) code in Python—that is, provides a rough transcription rather than an idiomatic translation of forms from another language. The concept of pythonicity is tightly bound to Python's minimalist philosophy of readability and avoiding the "there's more than one way to do it" approach. Unreadable code or incomprehensible idioms are unpythonic.</DIFF_NEW>
<DIFF_NEW>+Users and admirers of Python—most especially those considered knowledgeable or experienced—are often referred to as Pythonists, Pythonistas, and Pythoneers.[23]</DIFF_NEW>
<DIFF_UNCHANGED> The prefix Py can be used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create games); PyS60, an implementation for the Symbian Series 60 Operating System; PyQt and PyGTK, which bind Qt and GTK, respectively, to Python; and PyPy, a Python implementation written in Python. The prefix is also used outside of naming software packages: the major Python conference is named PyCon.</DIFF_UNCHANGED>
<DIFF_OLD>-An important goal of the Python developers is making Python fun to use. This is reflected in the origin of the name (based on the television series Monty Python's Flying Circus), in the common practice of using Monty Python references in example code, and in an occasionally playful approach to tutorials and reference materials.[15] For example, the metasyntactic variables often used in Python literature are spam and eggs, instead of the traditional foo and bar.</DIFF_OLD>
<DIFF_OLD>-Usage</DIFF_OLD>
<DIFF_NEW>+[edit]Usage</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> Main article: Python software</DIFF_UNCHANGED>
<DIFF_OLD>-Python is often used as a scripting language for web applications, e.g. via mod_python for the Apache web server. With Web Server Gateway Interface a standard API has been developed to facilitate these applications. Web application frameworks or application servers like web2py, Zope, and Django support developers in the design and maintenance of complex applications.</DIFF_OLD>
<DIFF_OLD>-Python has seen extensive use in the information security industry, including in exploit development.[16] Python has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus, 3D animation packages such as Maya, Softimage XSI, and Blender, and 2D imaging programs like GIMP, Inkscape, Scribus, and Paint Shop Pro.[17] ESRI is now promoting Python as the best choice for writing scripts in ArcGIS.[18] It has even been used in several videogames.[19]</DIFF_OLD>
<DIFF_OLD>-For many operating systems, Python is a standard component; it ships with most Linux distributions, with NetBSD, and OpenBSD, and with Mac OS X. Red Hat Linux and Fedora both use the pythonic Anaconda installer. Gentoo Linux uses Python in its package management system, Portage, and the standard tool to access it, emerge. Pardus uses it for administration and during system boot.[20]</DIFF_OLD>
<DIFF_OLD>-Among the users of Python are YouTube[21] and the original BitTorrent client.[22] Large organizations that make use of Python include Google,[23] Yahoo!,[24] CERN,[25], NASA,[26]and ITA.[27] Most of the Sugar software for the One Laptop Per Child XO, now developed at Sugar Labs, is written in Python.[28]</DIFF_OLD>
<DIFF_OLD>-Syntax and semantics</DIFF_OLD>
<DIFF_NEW>+Python is often used as a scripting language for web applications, e.g. via mod_wsgi for the Apache web server. With Web Server Gateway Interface a standard API has been developed to facilitate these applications. Web application frameworks or application servers like Django, Pylons, TurboGears, web2py and Zope support developers in the design and maintenance of complex applications. Libraries like NumPy, SciPy and Matplotlib allow Python to be used effectively in scientific computing.</DIFF_NEW>
<DIFF_NEW>+Python has been successfully embedded in a number of software products as a scripting language, including in finite element method software such as Abaqus, 3D animation packages such as Maya, MotionBuilder, Softimage, Cinema 4D, BodyPaint 3D, modo, and Blender, and 2D imaging programs like GIMP, Inkscape, Scribus, and Paint Shop Pro.[24] ESRI is now promoting Python as the best choice for writing scripts in ArcGIS.[25] It has even been used in several videogames.[26]</DIFF_NEW>
<DIFF_NEW>+For many operating systems, Python is a standard component; it ships with most Linux distributions, with NetBSD, and OpenBSD, and with Mac OS X and can be used from the terminal. A number of Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage, and the standard tool to access it, emerge. Pardus uses it for administration and during system boot.[27]</DIFF_NEW>
<DIFF_NEW>+Python has also seen extensive use in the information security industry, including exploit development.[28]</DIFF_NEW>
<DIFF_NEW>+Among the users of Python are YouTube[29] and the original BitTorrent client.[30] Large organizations that make use of Python include Google,[31] Yahoo!,[32] CERN,[33] NASA,[34] and ITA.[35] Most of the Sugar software for the One Laptop Per Child XO, now developed at Sugar Labs, is written in Python.[36]</DIFF_NEW>
<DIFF_NEW>+[edit]Syntax and semantics</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> Syntax-highlighted Python 2.x code.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Main article: Python syntax and semantics</DIFF_UNCHANGED>
<DIFF_OLD>-Python was intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Python requires less boilerplate than traditional manifestly-typed structured languages such as C or Pascal, and has a smaller number of syntactic exceptions and special cases than either of these.[29]</DIFF_OLD>
<DIFF_OLD>-Indentation</DIFF_OLD>
<DIFF_OLD>-Python uses whitespace indentation, rather than curly braces or keywords, to delimit statement blocks (a feature also known as the off-side rule). An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[30]</DIFF_OLD>
<DIFF_OLD>-Statements and control flow</DIFF_OLD>
<DIFF_OLD>-Python's statements include:</DIFF_OLD>
<DIFF_NEW>+Python was intended to be a highly readable language. It is designed to have an uncluttered visual layout, frequently using English keywords where other languages use punctuation. Python requires less boilerplate than traditional manifestly typed structured languages such as C or Pascal, and has a smaller number of syntactic exceptions and special cases than either of these.[37]</DIFF_NEW>
<DIFF_NEW>+[edit]Indentation</DIFF_NEW>
<DIFF_NEW>+Python uses whitespace indentation, rather than curly braces or keywords, to delimit blocks (a feature also known as the off-side rule). An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[38]</DIFF_NEW>
<DIFF_NEW>+[edit]Statements and control flow</DIFF_NEW>
<DIFF_NEW>+Python's statements include (among others):</DIFF_NEW>
<DIFF_UNCHANGED> The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).</DIFF_UNCHANGED>
<DIFF_UNCHANGED> The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.</DIFF_UNCHANGED>
<DIFF_OLD>-The try statement, which allows errors thrown in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will be always be run regardless of how the block exits.</DIFF_OLD>
<DIFF_OLD>-The class statement, which executes a block of code and attaches its local namespace to a class, for use in object oriented programming.</DIFF_OLD>
<DIFF_OLD>-The def statement, which defines a function.</DIFF_OLD>
<DIFF_OLD>-The with statement which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run, and releasing the lock afterwards).</DIFF_OLD>
<DIFF_NEW>+The while statement, which executes a block of code as long as its condition is true.</DIFF_NEW>
<DIFF_NEW>+The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits.</DIFF_NEW>
<DIFF_NEW>+The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming.</DIFF_NEW>
<DIFF_NEW>+The def statement, which defines a function or method.</DIFF_NEW>
<DIFF_NEW>+The with statement (from Python 2.6), which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run, and releasing the lock afterwards).</DIFF_NEW>
<DIFF_UNCHANGED> The pass statement, which serves as a NOP and can be used in place of a code block.</DIFF_UNCHANGED>
<DIFF_NEW>+The assert statement, used during debugging to check for conditions that ought to apply.</DIFF_NEW>
<DIFF_NEW>+The yield statement, which returns a value from a generator function. (From Python 2.5, yield is also an operator. This form is used to implement coroutines -- see below.)</DIFF_NEW>
<DIFF_NEW>+The print statement, which writes a value to an output stream (e.g. file or console). From Python 3, this statement is replaced by a function.</DIFF_NEW>
<DIFF_NEW>+The exec statement, which dynamically executes a string or file containing Python code in the form of one or more statements. From Python 3, this statement is replaced by a function.</DIFF_NEW>
<DIFF_UNCHANGED> Each statement has its own semantics: for example, the def statement does not execute its block immediately, unlike most other statements.</DIFF_UNCHANGED>
<DIFF_OLD>-CPython does not support continuations, and according to Guido van Rossum it never will.[31] However, better support for coroutine-like functionality is provided in 2.5, by extending Python's generators.[32] Prior to 2.5, generators were lazy iterators; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function.</DIFF_OLD>
<DIFF_OLD>-Methods</DIFF_OLD>
<DIFF_OLD>-Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).[33]</DIFF_OLD>
<DIFF_OLD>-Typing</DIFF_OLD>
<DIFF_OLD>-	This section requires expansion with:</DIFF_OLD>
<DIFF_OLD>-information on old-style vs. new-style classes and type-class unification.</DIFF_OLD>
<DIFF_OLD>-Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding nonsense operations (for example, adding a number to a string) rather than silently attempting to make sense of them.</DIFF_OLD>
<DIFF_OLD>-Python allows programmers to define their own types using classes, which are most often used for an object-oriented style of programming. New instances of classes are constructed by calling the class (for example, FooClass()), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.</DIFF_OLD>
<DIFF_OLD>-Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style". Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 3.0 and 2.2, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type.</DIFF_OLD>
<DIFF_NEW>+CPython does not support continuations, and according to Guido van Rossum it never will.[39] However, better support for coroutine-like functionality is provided in 2.5, by extending Python's generators.[40] Prior to 2.5, generators were lazy iterators; information was passed unidirectionally out of the generator. As of Python 2.5, it is possible to pass information back into a generator function.</DIFF_NEW>
<DIFF_NEW>+[edit]Expressions</DIFF_NEW>
<DIFF_NEW>+Python expressions are similar to languages such as C and Java. Some important notes:</DIFF_NEW>
<DIFF_NEW>+In Python 2, the / operator on integers does integer division, i.e. it truncates the result to an integer. In Python 3, however, the result of / is always a floating-point value, and a new operator // is introduced to do integer division. In Python 2, this behavior can be enabled using the statement from __future__ import division.</DIFF_NEW>
<DIFF_NEW>+In Python, == compares by value, in contrast to Java, where it compares by reference (value comparisons in Java use the equals method). To compare by reference in Python, use the is operator.</DIFF_NEW>
<DIFF_NEW>+Python uses named and, or, not operators rather than symbolic &amp;&amp;, ||, !.</DIFF_NEW>
<DIFF_NEW>+Python has an important type of expression known as a list comprehension. Recent versions of Python have extended list comprehensions into a more general expression known as a generator expression.</DIFF_NEW>
<DIFF_NEW>+Anonymous functions are implemented using lambda expressions; however, these are limited in that the body can only be a single expression.</DIFF_NEW>
<DIFF_NEW>+Conditional expressions in Python are written as y if x else z (different in order of operands from the ?: operator common to many other languages).</DIFF_NEW>
<DIFF_NEW>+Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3] are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples are written as (1, 2, 3), are immutable and thus can be used as the keys of dictionaries. The parentheses around the tuple are optional in some contexts. Tuples can appear on the left side of an equal sign; hence an expression like x, y = y, x can be used to swap two variables.</DIFF_NEW>
<DIFF_NEW>+Python has a "string format" operator %. This functions analogous to printf expressions in C, e.g. "foo=%s bar=%d" % ("blah", 2) evaluates to "foo=blah bar=2".</DIFF_NEW>
<DIFF_NEW>+Python has various kinds of strings.</DIFF_NEW>
<DIFF_NEW>+Either single or double quotes can be used to quote strings. Unlike in Unix shell languages, Perl or Perl-influenced languages such as Ruby or Groovy, single quotes and double quotes function identically, i.e. there is no string interpolation of $foo expressions.</DIFF_NEW>
<DIFF_NEW>+There are also multi-line strings, which begin and end with a series of three single or double quotes and function like here documents in shell languages, Perl and Ruby.</DIFF_NEW>
<DIFF_NEW>+Finally, all of the previously-mentioned string types come in "raw" varieties (denoted by placing a literal r before the opening quote), which do no backslash-interpolation and hence are very useful for regular expressions or Windows-style paths; compare "@-quoting" in C#.</DIFF_NEW>
<DIFF_NEW>+Python has slice expressions on lists, denoted as ...[left:right] or ...[left:right:stride]. For example, if the variable nums is assigned the list [1, 3, 5, 7, 8, 13, 20], then:</DIFF_NEW>
<DIFF_NEW>+nums[2:5] == [5, 7, 8], i.e. the slice goes up to, but not including, the right index.</DIFF_NEW>
<DIFF_NEW>+nums[1:] == [3, 5, 7, 8, 13, 20], i.e. all elements but the first, because an omitted right index means "the end".</DIFF_NEW>
<DIFF_NEW>+nums[:-3] == [1, 3, 5, 7], i.e. an omitted left index means "the start", and a negative index (either left or right) counts from the end.</DIFF_NEW>
<DIFF_NEW>+nums[:] makes a copy of the list. This means nums == nums[:] is true but nums is nums[:] is false. Changes to the copy will not affect the original.</DIFF_NEW>
<DIFF_NEW>+nums[1:5:2] == [3, 7], i.e. if three numbers are given, the third is the "stride", indicating in this case that every second element will be selected.</DIFF_NEW>
<DIFF_NEW>+In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme or Ruby. This leads to some duplication of functionality, e.g.</DIFF_NEW>
<DIFF_NEW>+list comprehensions vs. "for" loops</DIFF_NEW>
<DIFF_NEW>+conditional expressions vs. "if" blocks</DIFF_NEW>
<DIFF_NEW>+The eval() vs. exec() builtins (in Python 2, exec is a statement declarator); eval() is for expressions, exec() is for statements.</DIFF_NEW>
<DIFF_NEW>+Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as 'a =1' cannot form part of the conditional expression of a conditional statement, this has the advantage of avoiding a classic C error of mistaking an assignment token '=', for an equality operator '==' which would remain valid C in if (c = 1) { ... } but if c = 1: ... is invalid Python code.</DIFF_NEW>
<DIFF_NEW>+[edit]Methods</DIFF_NEW>
<DIFF_NEW>+Methods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self in some other object-oriented programming languages (for example, Java, C++ or Ruby).[41]</DIFF_NEW>
<DIFF_NEW>+[edit]Typing</DIFF_NEW>
<DIFF_NEW>+Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.</DIFF_NEW>
<DIFF_NEW>+Python allows programmers to define their own types using classes, which are most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes themselves are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.</DIFF_NEW>
<DIFF_NEW>+Prior to version 3.0, Python had two kinds of classes: "old-style" and "new-style". Old-style classes were eliminated in Python 3.0, making all classes new-style. In versions between 2.2 and 3.0, both kinds of classes could be used. The syntax of both styles is the same, the difference being whether the class object is inherited from, directly or indirectly (all new-style classes inherit from object and are instances of type).</DIFF_NEW>
<DIFF_UNCHANGED> Here is a summary of Python's built-in types:</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Type	Description	Syntax example</DIFF_UNCHANGED>
<DIFF_UNCHANGED> str	An immutable sequence of Unicode characters	'Wikipedia'</DIFF_UNCHANGED>
<DIFF_UNCHANGED> "Wikipedia"</DIFF_UNCHANGED>
<DIFF_NEW>+"""Spanning</DIFF_NEW>
<DIFF_NEW>+multiple</DIFF_NEW>
<DIFF_NEW>+lines"""</DIFF_NEW>
<DIFF_UNCHANGED> bytes	An immutable sequence of bytes	b'Some ASCII'</DIFF_UNCHANGED>
<DIFF_UNCHANGED> b"Some ASCII"</DIFF_UNCHANGED>
<DIFF_UNCHANGED> list	Mutable, can contain mixed types	[4.0, 'string', True]</DIFF_UNCHANGED>
<DIFF_UNCHANGED> tuple	Immutable, can contain mixed types	(4.0, 'string', True)</DIFF_UNCHANGED>
<DIFF_UNCHANGED> set, frozenset	Unordered, contains no duplicates	{4.0, 'string', True}</DIFF_UNCHANGED>
<DIFF_UNCHANGED> frozenset([4.0, 'string', True])</DIFF_UNCHANGED>
<DIFF_OLD>-dict	A mutable group of key and value pairs	{'key1': 1.0, 'key2': False}</DIFF_OLD>
<DIFF_NEW>+dict	A mutable group of key and value pairs	{'key1': 1.0, 3: False}</DIFF_NEW>
<DIFF_UNCHANGED> int	An immutable fixed precision number of unlimited magnitude	42</DIFF_UNCHANGED>
<DIFF_UNCHANGED> float	An immutable floating point number (system-defined precision)	3.1415927</DIFF_UNCHANGED>
<DIFF_OLD>-complex	An immutable complex number with real number and imaginary parts	3+2j</DIFF_OLD>
<DIFF_NEW>+complex	An immutable complex number with real number and imaginary parts	3+2.7j</DIFF_NEW>
<DIFF_UNCHANGED> bool	An immutable truth value	True</DIFF_UNCHANGED>
<DIFF_UNCHANGED> False</DIFF_UNCHANGED>
<DIFF_OLD>-Implementations</DIFF_OLD>
<DIFF_NEW>+While many programming languages round the result of integer division towards zero, Python always rounds it down towards minus infinity; so that 7//3 is 2, but (−7)//3 is −3.</DIFF_NEW>
<DIFF_NEW>+Python provides a round function for rounding floats to integers. Version 2.6.1 and lower use round-away-from-zero: round(0.5) is 1.0, round(-0.5) is -1.0. Version 3.0 and higher use round-to-even: round(1.5) is 2.0, round(2.5) is 2.0. The Decimal type/class in module decimal (since version 2.4) provides exact numerical representation and several rounding modes.</DIFF_NEW>
<DIFF_NEW>+[edit]Implementations</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_OLD>-CPython</DIFF_OLD>
<DIFF_NEW>+[edit]CPython</DIFF_NEW>
<DIFF_UNCHANGED> Main article: CPython</DIFF_UNCHANGED>
<DIFF_OLD>-The mainstream Python implementation, known as CPython, is written in C meeting the C89 standard,[34]. CPython compiles the Python program into intermediate bytecode,[35] which is then executed by the virtual machine.[36] It is distributed with a large standard library written in a mixture of C and Python. CPython ships in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform; its use and development on esoteric platforms such as Amoeba, alongside more conventional ones like Unix and Mac OS, has greatly helped in this regard.[37]</DIFF_OLD>
<DIFF_OLD>-Stackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack. CPython uses a GIL to allow only one thread to execute at a time while the Stackless Python threads are independent of the OS and can run concurrently. Stackless Python is better suited to scalable tasks and for use on microcontrollers or other limited resource platforms due to the thread's light weight. It can be expected to run on approximately the same platforms that CPython runs on.</DIFF_OLD>
<DIFF_OLD>-Alternative implementations</DIFF_OLD>
<DIFF_OLD>-Jython compiles the Python program into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the utilization of Java class library functions from the Python program. IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime. PyPy is an experimental self-hosting implementation of Python, written in Python, that can output several types of bytecode, object code and intermediate languages. There also exist compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language. PyPy is of this type, compiling RPython to several languages; other examples include Pyjamas compiling to Javascript; Shed Skin compiling to C++; and Cython &amp; Pyrex compiling to C.</DIFF_OLD>
<DIFF_OLD>-In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. There is also a Python interpreter for Windows CE devices (including Pocket PC). It is called PythonCE. There are additional tools available for easy application and GUI development.</DIFF_OLD>
<DIFF_NEW>+The mainstream Python implementation, known as CPython, is written in C meeting the C89 standard.[42] CPython compiles Python programs into intermediate bytecode,[43] which are then executed by the virtual machine.[44] It is distributed with a large standard library written in a mixture of C and Python. CPython ships in versions for many platforms, including Microsoft Windows and most modern Unix-like systems. CPython was intended from almost its very conception to be cross-platform; its use and development on esoteric platforms such as Amoeba, alongside more conventional ones like Unix and Mac OS, has greatly helped in this regard.[45]</DIFF_NEW>
<DIFF_NEW>+Stackless Python is a significant fork of CPython that implements microthreads; it does not use the C memory stack. It can be expected to run on approximately the same platforms that CPython runs on.</DIFF_NEW>
<DIFF_NEW>+Google started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times and improving its multithreading ability to scale to thousands of cores.[46]</DIFF_NEW>
<DIFF_NEW>+[edit]Alternative implementations</DIFF_NEW>
<DIFF_NEW>+Jython compiles the Python program into Java byte code, which can then be executed by every Java Virtual Machine implementation. This also enables the use of Java class library functions from the Python program. IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime. PyPy is an experimental self-hosting implementation of Python, written in Python, that can output several types of bytecode, object code and intermediate languages. There also exist compilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language. PyPy is of this type, compiling RPython to several languages; other examples include Pyjamas compiling to Javascript; Shed Skin compiling to C++; and Cython &amp; Pyrex compiling to C.</DIFF_NEW>
<DIFF_NEW>+In 2005 Nokia released a Python interpreter for the Series 60 mobile phones called PyS60. It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system. This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available. The Nokia N900 also supports Python with gtk windows libraries, with the feature that programs can be both written and run on the device itself. There is also a Python interpreter for Windows CE devices (including Pocket PC). It is called PythonCE. There are additional tools available for easy application and GUI development.</DIFF_NEW>
<DIFF_NEW>+Around 2004 and 2006[citation needed], the Pyastra project and the PyMite project started porting Python to some very resource-constrained microcontrollers -- less than 4 KBytes of RAM.[47]</DIFF_NEW>
<DIFF_UNCHANGED> ChinesePython (中蟒) is a Python programming language using Chinese language lexicon. Besides reserved words and variable names, most data type operations can be coded in Chinese as well.</DIFF_UNCHANGED>
<DIFF_OLD>-Interpretational semantics</DIFF_OLD>
<DIFF_OLD>-Most Python implementations (including CPython, the primary implementation) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell. While the semantics of the other modes of execution (bytecode compilation, or compilation to native code) preserve the sequential semantics, they offer a speed boost at the cost of interactivity, so they are usually only used outside of a command-line interaction (eg, when importing a module).</DIFF_OLD>
<DIFF_NEW>+[edit]Interpretational semantics</DIFF_NEW>
<DIFF_NEW>+Most Python implementations (including CPython, the primary implementation) can function as a command line interpreter, for which the user enters statements sequentially and receives the results immediately. In short, Python acts as a shell. While the semantics of the other modes of execution (bytecode compilation, or compilation to native code) preserve the sequential semantics, they offer a speed boost at the cost of interactivity, so they are usually only used outside of a command-line interaction (e.g., when importing a module).</DIFF_NEW>
<DIFF_UNCHANGED> Other shells add capabilities beyond those in the basic interpreter, including IDLE and IPython. While generally following the visual style of the Python shell, they implement features like auto-completion, retention of session state, and syntax highlighting.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Some implementations can compile not only to bytecode, but can turn Python code into machine code. So far, this has only been done for restricted subsets of Python. PyPy takes this approach, naming its restricted compilable version of Python RPython.</DIFF_UNCHANGED>
<DIFF_OLD>-Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certain data types and is faster than standard Python code. Psyco is compatible with all Python code, not only a subset.[38]</DIFF_OLD>
<DIFF_OLD>-Development</DIFF_OLD>
<DIFF_NEW>+Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime. The produced code is specialised for certain data types and is faster than standard Python code. Psyco is compatible with all Python code, not only a subset.[48]</DIFF_NEW>
<DIFF_NEW>+[edit]Development</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_OLD>-Python development is conducted largely through the Python Enhancement Proposal (or "PEP") process. PEPs are standardized design documents providing general information related to Python, including proposals, descriptions, design rationales, and explanations for language features.[39] Outstanding PEPs are reviewed and commented upon by Van Rossum, the Python project's Benevolent Dictator for Life ( leader / language architect).[40] CPython's developers also communicate over a mailing list, python-dev, which is the primary forum for discussion about the language's development; specific issues are discussed in the roundup bug tracker maintained at python.org.[41] Development takes place at the self-hosted svn.python.org.</DIFF_OLD>
<DIFF_NEW>+Python development is conducted largely through the Python Enhancement Proposal (or "PEP") process. PEPs are standardized design documents providing general information related to Python, including proposals, descriptions, design rationales, and explanations for language features.[49] Outstanding PEPs are reviewed and commented upon by Van Rossum, the Python project's Benevolent Dictator for Life (leader / language architect).[50] CPython's developers also communicate over a mailing list, python-dev, which is the primary forum for discussion about the language's development; specific issues are discussed in the Roundup bug tracker maintained at python.org.[51] Development takes place at the self-hosted svn.python.org.</DIFF_NEW>
<DIFF_UNCHANGED> CPython's public releases come in three types, distinguished by which part of the version number is incremented:</DIFF_UNCHANGED>
<DIFF_UNCHANGED> backwards-incompatible versions, where code is expected to break and must be manually ported. The first part of the version number is incremented. These releases happen infrequently—for example, version 3.0 was released 8 years after 2.0.</DIFF_UNCHANGED>
<DIFF_OLD>-major or 'feature' releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.[42]</DIFF_OLD>
<DIFF_OLD>-bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.[43]</DIFF_OLD>
<DIFF_OLD>-A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the buildbot continuous integration system.[44]</DIFF_OLD>
<DIFF_OLD>-Standard library</DIFF_OLD>
<DIFF_NEW>+major or 'feature' releases, which are largely compatible but introduce new features. The second part of the version number is incremented. These releases are scheduled to occur roughly every 18 months, and each major version is supported by bugfixes for several years after its release.[52]</DIFF_NEW>
<DIFF_NEW>+bugfix releases, which introduce no new features but fix bugs. The third and final part of the version number is incremented. These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release, or roughly every 3 months. Security vulnerabilities are also patched in bugfix releases.[53]</DIFF_NEW>
<DIFF_NEW>+A number of alpha, beta, and release-candidates are also released as previews and for testing before the final release is made. Although there is a rough schedule for each release, this is often pushed back if the code is not ready. The development team monitor the state of the code by running the large unit test suite during development, and using the BuildBot continuous integration system.[54]</DIFF_NEW>
<DIFF_NEW>+[edit]Standard library</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_OLD>-Python has a large standard library, commonly cited as one of Python's greatest strengths,[45] providing pre-written tools suited to many tasks. This is deliberate and has been described as a "batteries included" Python philosophy. The modules of the standard library can be augmented with custom modules written in either C or Python. Recently, Boost C++ Libraries includes a library, Boost.Python, to enable interoperability between C++ and Python. Because of the wide variety of tools provided by the standard library, combined with the ability to use a lower-level language such as C and C++, which is already capable of interfacing between other libraries, Python can be a powerful glue language between languages and tools.</DIFF_OLD>
<DIFF_OLD>-The standard library is particularly well tailored to writing Internet-facing applications, with a large number of standard formats and protocols (such as MIME and HTTP) already supported. Modules for creating graphical user interfaces, connecting to relational databases, arithmetic with arbitrary precision decimals, manipulating regular expressions, and doing unit testing are also included.[46]</DIFF_OLD>
<DIFF_NEW>+Python has a large standard library, commonly cited as one of Python's greatest strengths,[55] providing pre-written tools suited to many tasks. This is deliberate and has been described as a "batteries included"[56] Python philosophy. The modules of the standard library can be augmented with custom modules written in either C or Python. Boost C++ Libraries includes a library, Boost.Python, to enable interoperability between C++ and Python. Because of the wide variety of tools provided by the standard library, combined with the ability to use a lower-level language such as C and C++, which is already capable of interfacing between other libraries, Python can be a powerful glue language between languages and tools.</DIFF_NEW>
<DIFF_NEW>+The standard library is particularly well tailored to writing Internet-facing applications, with a large number of standard formats and protocols (such as MIME and HTTP) already supported. Modules for creating graphical user interfaces, connecting to relational databases, arithmetic with arbitrary precision decimals, manipulating regular expressions, and doing unit testing are also included.[57]</DIFF_NEW>
<DIFF_UNCHANGED> Some parts of the standard library are covered by specifications (for example, the WSGI implementation wsgiref follows PEP 333), but the majority of the modules are not. They are specified by their code, internal documentation, and test suite (if supplied). However, because most of the standard library is cross-platform Python code, there are only a few modules that must be altered or completely rewritten by alternative implementations.</DIFF_UNCHANGED>
<DIFF_OLD>-Influences on other languages</DIFF_OLD>
<DIFF_NEW>+The standard library is not essential to run python or embed python within an application. Blender 2.49 for instance omits most of the standard library.</DIFF_NEW>
<DIFF_NEW>+[edit]Influences on other languages</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_OLD>-Python's design and philosophy have influenced several programming languages:</DIFF_OLD>
<DIFF_NEW>+Python's design and philosophy have influenced several programming languages, including:</DIFF_NEW>
<DIFF_UNCHANGED> Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter. The language is mostly Python with syntax extensions for C and C++ features. Both languages produce compilable C code as output.</DIFF_UNCHANGED>
<DIFF_OLD>-Boo uses indentation, a similar syntax, and a similar object model. However, Boo uses static typing and is closely integrated with the .NET framework.[47]</DIFF_OLD>
<DIFF_OLD>-Cobra is similar to Python, using indentation for blocks. It offers optional static typing and generates code designed for .NET/Mono. Cobra directly supports design-by-contract.[48]</DIFF_OLD>
<DIFF_OLD>-ECMAScript borrowed iterators, generators and list comprehensions from Python.[49]</DIFF_OLD>
<DIFF_OLD>-Groovy was motivated by the desire to bring the Python design philosophy to Java.[50]</DIFF_OLD>
<DIFF_OLD>-Converge is syntactically similar to Python, but has a novel approach to generators and backtracking as well as macros and compile-time metaprogramming.[51]</DIFF_OLD>
<DIFF_OLD>-OCaml has an optional syntax, called twt (That Whitespace Thing), and a new Batteries Included approach, both inspired by Python.[52]</DIFF_OLD>
<DIFF_OLD>-Python's development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (ie, a PEP) is also used in Tcl[53] and Erlang[54] because of Python's influence.</DIFF_OLD>
<DIFF_OLD>-See also</DIFF_OLD>
<DIFF_NEW>+Boo uses indentation, a similar syntax, and a similar object model. However, Boo uses static typing and is closely integrated with the .NET framework.[58]</DIFF_NEW>
<DIFF_NEW>+Cobra uses indentation and a similar syntax. Cobra's "Acknowledgements" document lists Python first among languages that influenced it.[59] However, Cobra directly supports design-by-contract, unit tests and optional static typing.[60]</DIFF_NEW>
<DIFF_NEW>+ECMAScript borrowed iterators, generators, and list comprehensions from Python.[61]</DIFF_NEW>
<DIFF_NEW>+Go is described as incorporating the "development speed of working in a dynamic language like Python".[62]</DIFF_NEW>
<DIFF_NEW>+Groovy was motivated by the desire to bring the Python design philosophy to Java.[63]</DIFF_NEW>
<DIFF_NEW>+OCaml has an optional syntax, called twt (The Whitespace Thing), inspired by Python and Haskell.[64]</DIFF_NEW>
<DIFF_NEW>+Python's development practices have also been emulated by other languages. The practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python's case, a PEP) is also used in Tcl[65] and Erlang[66] because of Python's influence.</DIFF_NEW>
<DIFF_NEW>+[edit]See also</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> 	Free software portal</DIFF_UNCHANGED>
<DIFF_UNCHANGED> List of programming languages</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Comparison of computer shells</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Comparison of programming languages</DIFF_UNCHANGED>
<DIFF_OLD>-List of applications written in Python</DIFF_OLD>
<DIFF_NEW>+List of Python software</DIFF_NEW>
<DIFF_UNCHANGED> List of integrated development environments for Python</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Scripting language</DIFF_UNCHANGED>
<DIFF_OLD>-References</DIFF_OLD>
<DIFF_NEW>+[edit]References</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "Interview with Guido van Rossum". July 1998. Retrieved 29 2007.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "What is Python Good For?". General Python FAQ. Python Foundation. Retrieved 2008-09-05.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "What is Python? Executive Summary". Python documentation. Python Foundation. Retrieved 2007-03-21.</DIFF_UNCHANGED>
<DIFF_NEW>+^ "General Python FAQ". python.org. Python Software Foundation. Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_UNCHANGED> ^ a b "The Making of Python". Artima Developer. Retrieved 2007-03-22.</DIFF_UNCHANGED>
<DIFF_OLD>-^ http://mail.python.org/pipermail/python-dev/2000-August/008881.html</DIFF_OLD>
<DIFF_NEW>+^ "A Brief Timeline of Python". Guido van Rossum. Retrieved 2009-01-20.</DIFF_NEW>
<DIFF_NEW>+^ van Rossum, Guido. "[Python-Dev] SETL (was: Lukewarm about range literals)". Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_UNCHANGED> ^ "Why was Python created in the first place?". Python FAQ. Retrieved 2007-03-22.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ A.M. Kuchling and Moshe Zadka. "What's New in Python 2.0". Retrieved 2007-03-22.</DIFF_UNCHANGED>
<DIFF_OLD>-^ Python 3.0 release</DIFF_OLD>
<DIFF_OLD>-^ PEP 3000</DIFF_OLD>
<DIFF_NEW>+^ "Python 3.0 Release". Python Software Foundation. Retrieved 2009-07-08.</DIFF_NEW>
<DIFF_NEW>+^ van Rossum, Guido (5 April 2006). "PEP 3000 -- Python 3000". Python Software Foundation. Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_NEW>+^ The Cain Gang Ltd.. "Python Metaclasses: Who? Why? When?" (PDF). Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_NEW>+^ "3.3. Special method names". The Python Language Reference. Python Software Foundation. Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_NEW>+^ Contracts for Python, PyDBC</DIFF_NEW>
<DIFF_NEW>+^ Contracts for Python, pycontract</DIFF_NEW>
<DIFF_UNCHANGED> ^ "6.5 itertools - Functions creating iterators for efficient looping". Docs.python.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_OLD>-^ "PEP 20 - The Zen of Python". Python.org. Retrieved 2008-11-24.</DIFF_OLD>
<DIFF_NEW>+^ a b "PEP 20 - The Zen of Python". Python Software Foundation. 2004-08-23. Retrieved 2008-11-24.</DIFF_NEW>
<DIFF_UNCHANGED> ^ Python Culture</DIFF_UNCHANGED>
<DIFF_OLD>-^ Python is... slow? — Peter Bowyer’s weblog</DIFF_OLD>
<DIFF_NEW>+^ Python is... slow? December 21st, 2004 — Peter Bowyer’s weblog]</DIFF_NEW>
<DIFF_UNCHANGED> ^ Python Patterns - An Optimization Anecdote</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ Python Tutorial</DIFF_UNCHANGED>
<DIFF_OLD>-^ Products and discussion of this use of Python include "IMMUNITY : Knowing You're Secure". Immunitysec.com. Retrieved 2008-11-24.; CORE Security Technologies' open source software repository; "Wapiti - Web application security auditor". Wapiti.sourceforge.net. Retrieved 2008-11-24.; "TAOF - theartoffuzzing.com - Home". Theartoffuzzing.com. Retrieved 2008-11-24.; "[Dailydave] RE: Network Exploitation Tools aka Exploitation Engines". Fist.immunitysec.com. Retrieved 2008-11-24.</DIFF_OLD>
<DIFF_NEW>+^ Python Challenge tutorial</DIFF_NEW>
<DIFF_NEW>+^ David Goodger. "Code Like a Pythonista: Idiomatic Python".; "How to think like a Pythonista".</DIFF_NEW>
<DIFF_UNCHANGED> ^ Documentation of the PSP Scripting API can be found at JASC Paint Shop Pro 9: Additional Download Resources</DIFF_UNCHANGED>
<DIFF_OLD>-^ "About getting started with writing geoprocessing scripts". November 2006. Retrieved Apr 2007.</DIFF_OLD>
<DIFF_NEW>+^ "About getting started with writing geoprocessing scripts". November 2006. Retrieved April 2007.</DIFF_NEW>
<DIFF_UNCHANGED> ^ Two video games using Python are "Civilization IV". 2kgames.com. Retrieved 2008-11-24. and CCP. "EVE Online | EVE Insider | Dev Blog". Myeve.eve-online.com. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ ":: Pardus :: TÜBİTAK/UEKAE ::". Pardus.org.tr. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_NEW>+^ Products and discussion of this use of Python include "IMMUNITY : Knowing You're Secure". Immunitysec.com. Retrieved 2008-11-24.; CORE Security Technologies' open source software repository; "Wapiti - Web application security auditor". Wapiti.sourceforge.net. Retrieved 2008-11-24.; "TAOF - theartoffuzzing.com - Home". Theartoffuzzing.com. Retrieved 2008-11-24.; "[Dailydave] RE: Network Exploitation Tools aka Exploitation Engines". Fist.immunitysec.com. Retrieved 2008-11-24.</DIFF_NEW>
<DIFF_UNCHANGED> ^ "Coder Who Says Py: YouTube runs on Python!". Sayspy.blogspot.com. December 12, 2006. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ Review of original BitTorrent software at O'Reilly Python Dev Center</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "Quotes about Python". Python.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_UNCHANGED></DIFF_UNCHANGED><DIFF_RANGE>@@ -188,7 +239,7 @@</DIFF_RANGE>
<DIFF_UNCHANGED> ^ CERN Document Server: Record#974627: Python : the holy grail of programming</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "Python Success Stories". Python.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ Python Slithers into Systems by Darryl K. Taft</DIFF_UNCHANGED>
<DIFF_OLD>-^ "What is Sugar? - Sugar Labs". sugarlabs.org. 2008-5-10. Retrieved 0r-2-11.</DIFF_OLD>
<DIFF_NEW>+^ "What is Sugar? - Sugar Labs". sugarlabs.org. 2008-05-10. Retrieved 0r-2-11.</DIFF_NEW>
<DIFF_UNCHANGED> ^ "Is Python a good language for beginning programmers?". General Python FAQ. Python Foundation. March 7, 2005. Retrieved 2007-03-21.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ Myths about indentation in Python</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ van Rossum, Guido (February 9, 2006). "Language Design Is Not Just Solving Puzzles". Artima forums. Artima. Retrieved 2007-03-21.</DIFF_UNCHANGED>
<DIFF_UNCHANGED></DIFF_UNCHANGED><DIFF_RANGE>@@ -198,31 +249,45 @@</DIFF_RANGE>
<DIFF_UNCHANGED> ^ CPython byte code</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ Python 2.5 internals</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "O'Reilly - An Interview with Guido van Rossum". Oreilly.com. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_NEW>+^ ProjectPlan, Plans for optimizing Python - unladen-swallow</DIFF_NEW>
<DIFF_NEW>+^ PyMite: Python-on-a-chip</DIFF_NEW>
<DIFF_UNCHANGED> ^ Introduction to Psyco</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ PEP 1 -- PEP Purpose and Guidelines</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "Parade of the PEPs". Python.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_OLD>-^ http://python.org/dev/intro/</DIFF_OLD>
<DIFF_OLD>-^ http://mail.python.org/pipermail/python-dev/2002-April/022739.html</DIFF_OLD>
<DIFF_OLD>-^ http://python.org/dev/peps/pep-0006/</DIFF_OLD>
<DIFF_OLD>-^ http://python.org/dev/buildbot/</DIFF_OLD>
<DIFF_OLD>-^ Przemyslaw Piotrowski, Build a Rapid Web Development Environment for Python Server Pages and Oracle, Oracle Technology Network, July 2006. Accessed October 21, 2008.</DIFF_OLD>
<DIFF_NEW>+^ Cannon, Brett. "Guido, Some Guys, and a Mailing List: How Python is Developed". python.org. Python Software Foundation. Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_NEW>+^ Norwitz, Neal (8 April 2002]]). "[Python-Dev] Release Schedules (was Stability &amp; change)". Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_NEW>+^ Baxter, Anthony; Aahz (2001-03-15). "PEP 6 -- Bug Fix Releases". Python Software Foundation. Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_NEW>+^ Python Buildbot, Python</DIFF_NEW>
<DIFF_NEW>+^ Przemyslaw Piotrowski, Build a Rapid Web Development Environment for Python Server Pages and Oracle, Oracle Technology Network, July 2006. Retrieved October 21, 2008.</DIFF_NEW>
<DIFF_NEW>+^ "About Python". python.org. Python Software Foundation. Retrieved 2009-06-27.</DIFF_NEW>
<DIFF_UNCHANGED> ^ "PEP 327 - Decimal Data Type". Python.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ "BOO - Gotchas for Python Users". Boo.codehaus.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_OLD>-^ Comparison to Python, cobra-language.com</DIFF_OLD>
<DIFF_NEW>+^ "Cobra - Acknowledgements". cobra-language.com. Retrieved 2010-04-07.</DIFF_NEW>
<DIFF_NEW>+^ "Cobra - Comparison to Python". cobra-language.com. Retrieved 2010-04-07.</DIFF_NEW>
<DIFF_UNCHANGED> ^ "proposals:iterators_and_generators [ES4 Wiki]". Wiki.ecmascript.org. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_NEW>+^ Kincaid, Jason (2009-11-10). "Google’s Go: A New Programming Language That’s Python Meets C++". TechCrunch. Retrieved 2010-01-29.</DIFF_NEW>
<DIFF_UNCHANGED> ^ James Strachan (2003-08-29). "Groovy - the birth of a new dynamic language for the Java platform".</DIFF_UNCHANGED>
<DIFF_OLD>-^ Laurence Tratt. "Converge - About".</DIFF_OLD>
<DIFF_OLD>-^ David Teller. "OCaml Batteries Included".</DIFF_OLD>
<DIFF_NEW>+^ Mike Lin. ""The Whitespace Thing" for OCaml". Retrieved 2009-04-12.</DIFF_NEW>
<DIFF_UNCHANGED> ^ "TIP #3: TIP Format". Tcl.tk. Retrieved 2008-11-24.</DIFF_UNCHANGED>
<DIFF_UNCHANGED> ^ EEP - Erlang Enhancement Proposal</DIFF_UNCHANGED>
<DIFF_OLD>-External links</DIFF_OLD>
<DIFF_NEW>+[edit]Further reading</DIFF_NEW>
<DIFF_NEW>+</DIFF_NEW>
<DIFF_NEW>+Payne, James (2010). Beginning Python: Using Python 2.6 and Python3.1 (1st ed.). Wrox. ISBN 978-0470414637.</DIFF_NEW>
<DIFF_NEW>+Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. ISBN 978-0672329784.</DIFF_NEW>
<DIFF_NEW>+Summerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0321680563.</DIFF_NEW>
<DIFF_NEW>+Lutz, Mark (2009). Learning Python (4th ed.). O'Reilly Media. ISBN 978-0596158064.</DIFF_NEW>
<DIFF_NEW>+Hamilton, Naomi (5 August 2008). "The A-Z of Programming Languages: Python". Computerworld. Retrieved 2010-03-31. - An interview with Guido Van Rossum on Python</DIFF_NEW>
<DIFF_NEW>+Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook (2nd ed.). O'Reilly Media. ISBN 978-0596007973.</DIFF_NEW>
<DIFF_NEW>+Pilgrim, Mark (2004). Dive Into Python. Apress. ISBN 978-1590593561.</DIFF_NEW>
<DIFF_NEW>+Downey, Allen B.. Think Python: How to Think Like a Computer Scientist.</DIFF_NEW>
<DIFF_NEW>+[edit]External links</DIFF_NEW>
<DIFF_UNCHANGED> </DIFF_UNCHANGED>
<DIFF_UNCHANGED> 	Wikibooks has a book on the topic of</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Python Programming</DIFF_UNCHANGED>
<DIFF_UNCHANGED> 	Wikimedia Commons has media related to: Python (programming language)</DIFF_UNCHANGED>
<DIFF_OLD>-	Wikiversity has learning materials about Python Programming</DIFF_OLD>
<DIFF_NEW>+	Wikiversity has learning materials about Python Programming at</DIFF_NEW>
<DIFF_NEW>+Topic:Python</DIFF_NEW>
<DIFF_UNCHANGED> 	Wikiquote has a collection of quotations related to: Python</DIFF_UNCHANGED>
<DIFF_UNCHANGED> Official Python website</DIFF_UNCHANGED>
<DIFF_OLD>-Computerworld Interview with Guido Van Rossum on Python</DIFF_OLD>
<DIFF_OLD>-PythonCE website</DIFF_OLD>
<DIFF_OLD>-Python at the Open Directory Project</DIFF_OLD>
<DIFF_UNCHANGED></DIFF_UNCHANGED>\ No newline at end of file
<DIFF_NEW>+Python at the Open Directory Project</DIFF_NEW>
<DIFF_NEW>+</DIFF_NEW>
<DIFF_UNCHANGED></DIFF_UNCHANGED>