<COMMENT>#!/bin/sh</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># Some things this script could/should do when finished</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># * detect whether it's a GNU compiler or not (for compiler settings)</COMMENT>
<COMMENT># * command line options to...</COMMENT>
<COMMENT>#   - override the host settings (for cross compiles</COMMENT>
<COMMENT>#   - whether to do a debug build (with -g) or an optimized build (-O3 etc.)</COMMENT>
<COMMENT># * detect whether the chosen backend is available (e.g. call sdl-config)</COMMENT>
<COMMENT># * ....</COMMENT>


<COMMENT># use environment vars if set</COMMENT>
<VARIABLE>CXXFLAGS</VARIABLE>=<STRING>"<VARIABLE>$CXXFLAGS</VARIABLE> <VARIABLE>$CPPFLAGS</VARIABLE>"</STRING>

<COMMENT># default lib behaviour yes/no/auto</COMMENT>
<VARIABLE>_opengl</VARIABLE>=auto
<VARIABLE>_zlib</VARIABLE>=auto

<COMMENT># default option behaviour yes/no</COMMENT>
<VARIABLE>_build_gl</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_windowed</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_sound</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_debugger</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_snapshot</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_joystick</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_cheats</VARIABLE>=<FUNCTION>yes</FUNCTION>
<VARIABLE>_build_static</VARIABLE>=no
<VARIABLE>_build_profile</VARIABLE>=no

<COMMENT># more defaults</COMMENT>
<VARIABLE>_ranlib</VARIABLE>=ranlib
<VARIABLE>_install</VARIABLE>=<FUNCTION>install</FUNCTION>
<VARIABLE>_ar</VARIABLE>=<STRING>"ar cru"</STRING>
<VARIABLE>_strip</VARIABLE>=strip
<VARIABLE>_mkdir</VARIABLE>=<STRING>"mkdir -p"</STRING>
<VARIABLE>_echo</VARIABLE>=<FUNCTION>printf</FUNCTION>
<VARIABLE>_cat</VARIABLE>=<FUNCTION>cat</FUNCTION>
<VARIABLE>_rm</VARIABLE>=<STRING>"rm -f"</STRING>
<VARIABLE>_rm_rec</VARIABLE>=<STRING>"<VARIABLE>$_rm</VARIABLE> -r"</STRING>
<VARIABLE>_zip</VARIABLE>=<STRING>"zip -q"</STRING>
<VARIABLE>_cp</VARIABLE>=<FUNCTION>cp</FUNCTION>
<VARIABLE>_win32path</VARIABLE>=<STRING>""</STRING>
<VARIABLE>_windres</VARIABLE>=windres
<VARIABLE>_sdlconfig</VARIABLE>=sdl-config
<VARIABLE>_sdlpath</VARIABLE>=<STRING>"<VARIABLE>$PATH</VARIABLE>"</STRING>
<VARIABLE>_prefix</VARIABLE>=/usr/<FUNCTION>local</FUNCTION>
<VARIABLE>X_LIBS</VARIABLE>=<STRING>"/usr/X11R6/lib"</STRING>

<VARIABLE>_srcdir</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>dirname</FUNCTION> <VARIABLE>$0</VARIABLE><KEYWORD>`</KEYWORD>

<COMMENT># <COMMENT_NOTE>TODO:</COMMENT_NOTE> We should really use mktemp(1) to determine a random tmp file name.</COMMENT>
<COMMENT># However, that tool might not be available everywhere.</COMMENT>
<VARIABLE>TMPO</VARIABLE>=<KEYWORD>${</KEYWORD>_srcdir<KEYWORD>}</KEYWORD>/stella-conf
<VARIABLE>TMPC</VARIABLE>=<KEYWORD>${</KEYWORD><CONSTANT>TMPO</CONSTANT><KEYWORD>}</KEYWORD>.cxx
<VARIABLE>TMPLOG</VARIABLE>=<KEYWORD>${</KEYWORD>_srcdir<KEYWORD>}</KEYWORD>/config.log

<COMMENT># For cross compiling</COMMENT>
<VARIABLE>_host</VARIABLE>=<STRING>""</STRING>
<VARIABLE>_host_cpu</VARIABLE>=<STRING>""</STRING>
<VARIABLE>_host_vendor</VARIABLE>=<STRING>""</STRING>
<VARIABLE>_host_os</VARIABLE>=<STRING>""</STRING>
<VARIABLE>_host_prefix</VARIABLE>=<STRING>""</STRING>

cc_check() {
	<FUNCTION>echo</FUNCTION> <KEYWORD>&gt;&gt;</KEYWORD> <STRING>"<VARIABLE>$TMPLOG</VARIABLE>"</STRING>
	<FUNCTION>cat</FUNCTION> <STRING>"<VARIABLE>$TMPC</VARIABLE>"</STRING> <KEYWORD>&gt;&gt;</KEYWORD> <STRING>"<VARIABLE>$TMPLOG</VARIABLE>"</STRING>
	<FUNCTION>echo</FUNCTION> <KEYWORD>&gt;&gt;</KEYWORD> <STRING>"<VARIABLE>$TMPLOG</VARIABLE>"</STRING>
	<FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$CXX</VARIABLE> <VARIABLE>$TMPC</VARIABLE> -o <VARIABLE>$TMPO</VARIABLE><VARIABLE>$EXEEXT</VARIABLE> $@"</STRING> <KEYWORD>&gt;&gt;</KEYWORD> <STRING>"<VARIABLE>$TMPLOG</VARIABLE>"</STRING>
	<FUNCTION>rm</FUNCTION> -f <STRING>"<VARIABLE>$TMPO</VARIABLE><VARIABLE>$EXEEXT</VARIABLE>"</STRING>
	( <VARIABLE>$CXX</VARIABLE> <STRING>"<VARIABLE>$TMPC</VARIABLE>"</STRING> -o <STRING>"<VARIABLE>$TMPO</VARIABLE><VARIABLE>$EXEEXT</VARIABLE>"</STRING> <STRING>"$@"</STRING> ) <KEYWORD>&gt;&gt;</KEYWORD> <STRING>"<VARIABLE>$TMPLOG</VARIABLE>"</STRING> <KEYWORD>2&gt;&amp;1</KEYWORD>
	<VARIABLE>TMP</VARIABLE>=<STRING>"$?"</STRING>
	<FUNCTION>echo</FUNCTION> <KEYWORD>&gt;&gt;</KEYWORD> <STRING>"<VARIABLE>$TMPLOG</VARIABLE>"</STRING>
	<FUNCTION>return</FUNCTION> <STRING>"<VARIABLE>$TMP</VARIABLE>"</STRING>
}

echocheck () {
	echo_n <STRING>"Checking for $@... "</STRING>
}

<COMMENT>#</COMMENT>
<COMMENT># Check whether the given command is a working C++ compiler</COMMENT>
<COMMENT>#</COMMENT>
test_compiler ()
{
<FUNCTION>cat</FUNCTION> &lt;&lt;<KEYWORD>EOF</KEYWORD><HEREDOC> &gt;tmp_cxx_compiler.cpp</HEREDOC>
<HEREDOC>class Foo {</HEREDOC>
<HEREDOC>	int a;</HEREDOC>
<HEREDOC>};</HEREDOC>
<HEREDOC>int main(int argc, char **argv)</HEREDOC>
<HEREDOC>{</HEREDOC>
<HEREDOC>	Foo *a = new Foo();</HEREDOC>
<HEREDOC>	delete a;</HEREDOC>
<HEREDOC>	return 0;</HEREDOC>
<HEREDOC>}</HEREDOC>
<HEREDOC></HEREDOC><KEYWORD>EOF</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -n <STRING>"<VARIABLE>$_host</VARIABLE>"</STRING>; <KEYWORD>then</KEYWORD>
	<COMMENT># In cross-compiling mode, we cannot run the result</COMMENT>
	<FUNCTION>eval</FUNCTION> <STRING>"<VARIABLE>$1</VARIABLE> -o tmp_cxx_compiler<VARIABLE>$EXEEXT</VARIABLE> tmp_cxx_compiler.cpp 2&gt; /dev/null"</STRING> &amp;&amp; <FUNCTION>rm</FUNCTION> -f tmp_cxx_compiler<VARIABLE>$EXEEXT</VARIABLE> tmp_cxx_compiler.cpp
<KEYWORD>else</KEYWORD>
	<FUNCTION>eval</FUNCTION> <STRING>"<VARIABLE>$1</VARIABLE> -o tmp_cxx_compiler<VARIABLE>$EXEEXT</VARIABLE> tmp_cxx_compiler.cpp 2&gt; /dev/null"</STRING> &amp;&amp; <FUNCTION>eval</FUNCTION> <STRING>"./tmp_cxx_compiler 2&gt; /dev/null"</STRING> &amp;&amp; <FUNCTION>rm</FUNCTION> -f tmp_cxx_compiler<VARIABLE>$EXEEXT</VARIABLE> tmp_cxx_compiler.cpp
<KEYWORD>fi</KEYWORD>
}

<COMMENT>#</COMMENT>
<COMMENT># Determine sdl-config</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># <COMMENT_NOTE>TODO:</COMMENT_NOTE> small bit of code to test sdl useability</COMMENT>
find_sdlconfig()
{
	echo_n <STRING>"Looking for sdl-config... "</STRING>
	<VARIABLE>sdlconfigs</VARIABLE>=<STRING>"<VARIABLE>$_sdlconfig</VARIABLE>:sdl-config:sdl11-config:sdl12-config"</STRING>
	<VARIABLE>_sdlconfig</VARIABLE>=
	
	<VARIABLE>IFS</VARIABLE>=<STRING>"<VARIABLE>${IFS=   }</VARIABLE>"</STRING>; ac_save_ifs=<STRING>"<VARIABLE>$IFS</VARIABLE>"</STRING>; IFS=<STRING>"<VARIABLE>$SEPARATOR</VARIABLE>"</STRING>
	<VARIABLE>done</VARIABLE>=0
	<KEYWORD>for</KEYWORD> path_dir <KEYWORD>in</KEYWORD> <VARIABLE>$_sdlpath</VARIABLE>; <KEYWORD>do</KEYWORD>
                <COMMENT>#reset separator to parse sdlconfigs</COMMENT>
                <VARIABLE>IFS</VARIABLE>=<STRING>":"</STRING>
		<KEYWORD>for</KEYWORD> sdlconfig <KEYWORD>in</KEYWORD> <VARIABLE>$sdlconfigs</VARIABLE>; <KEYWORD>do</KEYWORD>
			<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -x <STRING>"<VARIABLE>$path_dir</VARIABLE>/<VARIABLE>$sdlconfig</VARIABLE>"</STRING> ; <KEYWORD>then</KEYWORD>
				<VARIABLE>_sdlconfig</VARIABLE>=<STRING>"<VARIABLE>$path_dir</VARIABLE>/<VARIABLE>$sdlconfig</VARIABLE>"</STRING>
				<VARIABLE>done</VARIABLE>=1
				<FUNCTION>break</FUNCTION>
			<KEYWORD>fi</KEYWORD>
		<KEYWORD>done</KEYWORD>
		<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <VARIABLE>$done</VARIABLE> -eq 1 ; <KEYWORD>then</KEYWORD>
			<FUNCTION>echo</FUNCTION> <VARIABLE>$_sdlconfig</VARIABLE>
			<FUNCTION>break</FUNCTION>
		<KEYWORD>fi</KEYWORD>
	<KEYWORD>done</KEYWORD>
	
	<VARIABLE>IFS</VARIABLE>=<STRING>"<VARIABLE>$ac_save_ifs</VARIABLE>"</STRING>
	
	<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -z <STRING>"<VARIABLE>$_sdlconfig</VARIABLE>"</STRING>; <KEYWORD>then</KEYWORD>
		<FUNCTION>echo</FUNCTION> <STRING>"none found!"</STRING>
		<FUNCTION>exit</FUNCTION> 1
	<KEYWORD>fi</KEYWORD>
}

<COMMENT>#</COMMENT>
<COMMENT># Function to provide echo -n for bourne shells that don't have it</COMMENT>
<COMMENT>#</COMMENT>
echo_n() 
{ 
	<FUNCTION>printf</FUNCTION> <STRING>"$@"</STRING>
}

<COMMENT>#</COMMENT>
<COMMENT># Greet user</COMMENT>
<COMMENT>#</COMMENT>

<FUNCTION>echo</FUNCTION> <STRING>"Running Stella configure..."</STRING>
<FUNCTION>echo</FUNCTION> <STRING>"Configure run on"</STRING> <KEYWORD>`</KEYWORD><FUNCTION>date</FUNCTION><KEYWORD>`</KEYWORD> <KEYWORD>&gt;</KEYWORD> <VARIABLE>$TMPLOG</VARIABLE>

<COMMENT>#</COMMENT>
<COMMENT># Check any parameters we received</COMMENT>
<COMMENT>#</COMMENT>
<COMMENT># <COMMENT_NOTE>TODO:</COMMENT_NOTE></COMMENT>
<COMMENT># * Change --disable-mad / --enable-mad to the way it's done in autoconf:</COMMENT>
<COMMENT>#  That is, --without-mad / --with-mad=/prefix/to/mad. Useful for people</COMMENT>
<COMMENT>#  who have Mad/Vorbis/ALSA installed in a non-standard locations.</COMMENT>
<COMMENT>#</COMMENT>

<KEYWORD>for</KEYWORD> parm <KEYWORD>in</KEYWORD> <STRING>"$@"</STRING> ; <KEYWORD>do</KEYWORD>
  <KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$parm</VARIABLE>"</STRING> = <STRING>"--help"</STRING> || <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$parm</VARIABLE>"</STRING> = <STRING>"-help"</STRING> || <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$parm</VARIABLE>"</STRING> = <STRING>"-h"</STRING> ; <KEYWORD>then</KEYWORD>
    <FUNCTION>cat</FUNCTION> &lt;&lt; <KEYWORD>EOF</KEYWORD><HEREDOC></HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>Usage: $0 [OPTIONS]...</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>Configuration:</HEREDOC>
<HEREDOC>  -h, --help             display this help and exit</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>Installation directories:</HEREDOC>
<HEREDOC>  --prefix=DIR           use this prefix for installing stella  [/usr/local]</HEREDOC>
<HEREDOC>  --bindir=DIR           directory to install the stella binary [PREFIX/bin]</HEREDOC>
<HEREDOC>  --docdir=DIR           directory to install documentation     [PREFIX/share/doc/stella]</HEREDOC>
<HEREDOC>  --datadir=DIR          directory to install icons/data files  [PREFIX/share]</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>Optional Features:</HEREDOC>
<HEREDOC>  --enable-gl            enable/disable OpenGL rendering support [enabled]</HEREDOC>
<HEREDOC>  --disable-gl</HEREDOC>
<HEREDOC>  --enable-windowed      enable/disable windowed rendering modes [enabled]</HEREDOC>
<HEREDOC>  --disable-windowed</HEREDOC>
<HEREDOC>  --enable-sound         enable/disable sound support [enabled]</HEREDOC>
<HEREDOC>  --disable-sound</HEREDOC>
<HEREDOC>  --enable-debugger      enable/disable all debugger options [enabled]</HEREDOC>
<HEREDOC>  --disable-debugger</HEREDOC>
<HEREDOC>  --enable-joystick      enable/disable joystick support [enabled]</HEREDOC>
<HEREDOC>  --disable-joystick</HEREDOC>
<HEREDOC>  --enable-cheats        enable/disable cheatcode support [enabled]</HEREDOC>
<HEREDOC>  --disable-cheats</HEREDOC>
<HEREDOC>  --enable-shared        build shared binary [enabled]</HEREDOC>
<HEREDOC>  --enable-static        build static binary (if possible) [disabled]</HEREDOC>
<HEREDOC>  --disable-static</HEREDOC>
<HEREDOC>  --enable-profile       build binary with profiling info [disabled]</HEREDOC>
<HEREDOC>  --disable-profile</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>Optional Libraries:</HEREDOC>
<HEREDOC>  --with-sdl-prefix=DIR    Prefix where the sdl-config script is installed (optional)</HEREDOC>
<HEREDOC>  --with-zlib-prefix=DIR   Prefix where zlib is installed (optional)</HEREDOC>
<HEREDOC>  --x-libraries            Path to X11 libraries [${X_LIBS}]</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>Some influential environment variables:</HEREDOC>
<HEREDOC>  LDFLAGS	linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a</HEREDOC>
<HEREDOC>  		nonstandard directory &lt;lib dir&gt;</HEREDOC>
<HEREDOC>  CXX		C++ compiler command</HEREDOC>
<HEREDOC>  CXXFLAGS	C++ compiler flags</HEREDOC>
<HEREDOC>  CPPFLAGS	C++ preprocessor flags, e.g. -I&lt;include dir&gt; if you have</HEREDOC>
<HEREDOC>  		headers in a nonstandard directory &lt;include dir&gt;</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC></HEREDOC><KEYWORD>EOF</KEYWORD>
    <FUNCTION>exit</FUNCTION> 0
  <KEYWORD>fi</KEYWORD>
<KEYWORD>done</KEYWORD> <COMMENT># for parm in ...</COMMENT>

<KEYWORD>for</KEYWORD> ac_option <KEYWORD>in</KEYWORD> <VARIABLE>$@</VARIABLE>; <KEYWORD>do</KEYWORD>
    <KEYWORD>case</KEYWORD> <STRING>"<VARIABLE>$ac_option</VARIABLE>"</STRING> <KEYWORD>in</KEYWORD>
      --enable-gl)              _build_gl=<FUNCTION>yes</FUNCTION>        ;;
      --disable-gl)             _build_gl=no         ;;
      --enable-windowed)        _build_windowed=<FUNCTION>yes</FUNCTION>  ;;
      --disable-windowed)       _build_windowed=no   ;;
      --enable-sound)           _build_sound=<FUNCTION>yes</FUNCTION>     ;;
      --disable-sound)          _build_sound=no      ;;
      --enable-debugger)        _build_debugger=<FUNCTION>yes</FUNCTION>  ;;
      --disable-debugger)       _build_debugger=no   ;;
      --enable-joystick)        _build_joystick=<FUNCTION>yes</FUNCTION>  ;;
      --disable-joystick)       _build_joystick=no   ;;
      --enable-cheats)          _build_cheats=<FUNCTION>yes</FUNCTION>    ;;
      --disable-cheats)         _build_cheats=no     ;;
      --enable-shared)          _build_static=no     ;;
      --enable-static)          _build_static=<FUNCTION>yes</FUNCTION>    ;;
      --disable-static)         _build_static=no     ;;
      --enable-profile)         _build_profile=<FUNCTION>yes</FUNCTION>   ;;
      --disable-profile)        _build_profile=no    ;;
      --with-sdl-prefix=*)
        <VARIABLE>arg</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        <VARIABLE>_sdlpath</VARIABLE>=<STRING>"<VARIABLE>$arg</VARIABLE>:<VARIABLE>$arg</VARIABLE>/bin"</STRING>
        ;;
      --with-zlib-prefix=*)
        <VARIABLE>_prefix</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        <VARIABLE>ZLIB_CFLAGS</VARIABLE>=<STRING>"-I<VARIABLE>$_prefix</VARIABLE>/include"</STRING>
        <VARIABLE>ZLIB_LIBS</VARIABLE>=<STRING>"-L<VARIABLE>$_prefix</VARIABLE>/lib"</STRING>
        ;;
      --x-libraries=*)
        <VARIABLE>arg</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        <VARIABLE>X_LIBS</VARIABLE>=<STRING>"<VARIABLE>$arg</VARIABLE>"</STRING>
        ;;
      --host=*)
        <VARIABLE>_host</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        ;;
      --prefix=*)
        <VARIABLE>_prefix</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        ;;
      --bindir=*)
        <VARIABLE>_bindir</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        ;;
      --docdir=*)
        <VARIABLE>_docdir</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        ;;
      --datadir=*)
        <VARIABLE>_datadir</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$ac_option</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'='</STRING> -f 2<KEYWORD>`</KEYWORD>
        ;;
      *)
        <FUNCTION>echo</FUNCTION> <STRING>"warning: unrecognised option: <VARIABLE>$ac_option</VARIABLE>"</STRING>
        ;;
    <KEYWORD>esac</KEYWORD>;
<KEYWORD>done</KEYWORD>;

<VARIABLE>CXXFLAGS</VARIABLE>=<STRING>"<VARIABLE>$CXXFLAGS</VARIABLE> <VARIABLE>$DEBFLAGS</VARIABLE>"</STRING>

<KEYWORD>case</KEYWORD> <VARIABLE>$_host</VARIABLE> <KEYWORD>in</KEYWORD>
<COMMENT>#linupy)</COMMENT>
<COMMENT>#	_host_os=linux</COMMENT>
<COMMENT>#	_host_cpu=arm</COMMENT>
<COMMENT>#	;;</COMMENT>
<COMMENT>#arm-riscos-aof)</COMMENT>
<COMMENT>#	_host_os=riscos</COMMENT>
<COMMENT>#	_host_cpu=arm</COMMENT>
<COMMENT>#	;;</COMMENT>
<COMMENT>#ppc-amigaos)</COMMENT>
<COMMENT>#	_host_os=amigaos</COMMENT>
<COMMENT>#	_host_cpu=ppc</COMMENT>
<COMMENT>#	;;</COMMENT>
gp2x)
	<VARIABLE>_host_os</VARIABLE>=gp2x
	<VARIABLE>_host_cpu</VARIABLE>=arm
	<VARIABLE>_host_prefix</VARIABLE>=arm-open2x-linux
	;;
mingw32-cross)
	<VARIABLE>_host_os</VARIABLE>=mingw32msvc
	<VARIABLE>_host_cpu</VARIABLE>=i386
	<VARIABLE>_host_prefix</VARIABLE>=i386-mingw32msvc
	;;
*)
	<VARIABLE>guessed_host</VARIABLE>=<KEYWORD>`</KEYWORD><VARIABLE>$_srcdir</VARIABLE>/config.guess<KEYWORD>`</KEYWORD>
	<VARIABLE>_host_cpu</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$guessed_host</VARIABLE> | <FUNCTION>sed</FUNCTION> <STRING>'s/^<ESC>\(</ESC>[^-]*<ESC>\)</ESC>-<ESC>\(</ESC>[^-]*<ESC>\)</ESC>-<ESC>\(</ESC>.*<ESC>\)</ESC>$/<ESC>\1</ESC>/'</STRING><KEYWORD>`</KEYWORD>
	<VARIABLE>_host_os</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$guessed_host</VARIABLE> | <FUNCTION>sed</FUNCTION> <STRING>'s/^<ESC>\(</ESC>[^-]*<ESC>\)</ESC>-<ESC>\(</ESC>[^-]*<ESC>\)</ESC>-<ESC>\(</ESC>.*<ESC>\)</ESC>$/<ESC>\3</ESC>/'</STRING><KEYWORD>`</KEYWORD>
	<VARIABLE>_host_vendor</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$guessed_host</VARIABLE> | <FUNCTION>sed</FUNCTION> <STRING>'s/^<ESC>\(</ESC>[^-]*<ESC>\)</ESC>-<ESC>\(</ESC>[^-]*<ESC>\)</ESC>-<ESC>\(</ESC>.*<ESC>\)</ESC>$/<ESC>\2</ESC>/'</STRING><KEYWORD>`</KEYWORD>
	;;
<KEYWORD>esac</KEYWORD>

<COMMENT>#</COMMENT>
<COMMENT># Determine extension used for executables</COMMENT>
<COMMENT>#</COMMENT>
<KEYWORD>case</KEYWORD> <VARIABLE>$_host_os</VARIABLE> <KEYWORD>in</KEYWORD>
mingw* | cygwin* |os2-emx*)
	<VARIABLE>EXEEXT</VARIABLE>=<STRING>".exe"</STRING>
	;;
arm-riscos-aof)
	<VARIABLE>EXEEXT</VARIABLE>=<STRING>",ff8"</STRING>
	;;
psp)
	<VARIABLE>EXEEXT</VARIABLE>=<STRING>".elf"</STRING>
	;;
gp2x)
	<VARIABLE>EXEEXT</VARIABLE>=<STRING>""</STRING>
	;;
*)
	<VARIABLE>EXEEXT</VARIABLE>=<STRING>""</STRING>
	;;
<KEYWORD>esac</KEYWORD>

<COMMENT>#</COMMENT>
<COMMENT># Determine separator used for $PATH</COMMENT>
<COMMENT>#</COMMENT>
<KEYWORD>case</KEYWORD> <VARIABLE>$_host_os</VARIABLE> <KEYWORD>in</KEYWORD>
os2-emx* )
        <VARIABLE>SEPARATOR</VARIABLE>=<STRING>";"</STRING>
        ;;
* )
        <VARIABLE>SEPARATOR</VARIABLE>=<STRING>":"</STRING>
        ;;
<KEYWORD>esac</KEYWORD>


<COMMENT>#</COMMENT>
<COMMENT># Determine the C++ compiler</COMMENT>
<COMMENT>#</COMMENT>
echo_n <STRING>"Looking for C++ compiler... "</STRING>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -n <STRING>"<VARIABLE>$_host</VARIABLE>"</STRING>; <KEYWORD>then</KEYWORD>
	<VARIABLE>compilers</VARIABLE>=<STRING>"<VARIABLE>$CXX</VARIABLE> <VARIABLE>$_host_prefix</VARIABLE>-g++ <VARIABLE>$_host_prefix</VARIABLE>-c++ <VARIABLE>$_host_cpu</VARIABLE>-<VARIABLE>$_host_os</VARIABLE>-g++ <VARIABLE>$_host_cpu</VARIABLE>-<VARIABLE>$_host_os</VARIABLE>-c++"</STRING>
<KEYWORD>else</KEYWORD>
	<VARIABLE>compilers</VARIABLE>=<STRING>"<VARIABLE>$CXX</VARIABLE> g++ c++"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>for</KEYWORD> compiler <KEYWORD>in</KEYWORD> <VARIABLE>$compilers</VARIABLE>; <KEYWORD>do</KEYWORD>
	<KEYWORD>if</KEYWORD> test_compiler <VARIABLE>$compiler</VARIABLE>; <KEYWORD>then</KEYWORD>
		<VARIABLE>CXX</VARIABLE>=<VARIABLE>$compiler</VARIABLE>
		<FUNCTION>echo</FUNCTION> <VARIABLE>$CXX</VARIABLE>
		<FUNCTION>break</FUNCTION>
	<KEYWORD>fi</KEYWORD>
<KEYWORD>done</KEYWORD>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -z <VARIABLE>$CXX</VARIABLE>; <KEYWORD>then</KEYWORD>
	<FUNCTION>echo</FUNCTION> <STRING>"none found!"</STRING>
	<FUNCTION>exit</FUNCTION> 1
<KEYWORD>fi</KEYWORD>

<COMMENT>#</COMMENT>
<COMMENT># Determine the compiler version</COMMENT>

echocheck <STRING>"compiler version"</STRING>

<VARIABLE>cxx_name</VARIABLE>=<KEYWORD>`</KEYWORD>( <VARIABLE>$cc</VARIABLE> -v ) <KEYWORD>2&gt;&amp;1</KEYWORD> | <FUNCTION>tail</FUNCTION> -n 1 | <FUNCTION>cut</FUNCTION> -d <STRING>' '</STRING> -f 1<KEYWORD>`</KEYWORD>
<VARIABLE>cxx_version</VARIABLE>=<KEYWORD>`</KEYWORD>( <VARIABLE>$CXX</VARIABLE> -dumpversion ) <KEYWORD>2&gt;&amp;1</KEYWORD><KEYWORD>`</KEYWORD>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"$?"</STRING> -gt 0; <KEYWORD>then</KEYWORD>
	<VARIABLE>cxx_version</VARIABLE>=<STRING>"not found"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>case</KEYWORD> <VARIABLE>$cxx_version</VARIABLE> <KEYWORD>in</KEYWORD>
	2.95.<KEYWORD>[</KEYWORD>2-9<KEYWORD>]</KEYWORD>|2.95.<KEYWORD>[</KEYWORD>2-9<KEYWORD>]</KEYWORD><KEYWORD>[</KEYWORD>-.<KEYWORD>]</KEYWORD>*|3.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>|3.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>|3.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD><KEYWORD>[</KEYWORD>-.<KEYWORD>]</KEYWORD>*|4.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>|4.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD>.<KEYWORD>[</KEYWORD>0-9<KEYWORD>]</KEYWORD><KEYWORD>[</KEYWORD>-.<KEYWORD>]</KEYWORD>*)
		<VARIABLE>_cxx_major</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$cxx_version</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'.'</STRING> -f 1<KEYWORD>`</KEYWORD>
		<VARIABLE>_cxx_minor</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>echo</FUNCTION> <VARIABLE>$cxx_version</VARIABLE> | <FUNCTION>cut</FUNCTION> -d <STRING>'.'</STRING> -f 2<KEYWORD>`</KEYWORD>
		<VARIABLE>cxx_version</VARIABLE>=<STRING>"<VARIABLE>$cxx_version</VARIABLE>, ok"</STRING>
		<VARIABLE>cxx_verc_fail</VARIABLE>=no
		;;
	<COMMENT># whacky beos version strings</COMMENT>
	2.9-beos-991026*|2.9-beos-000224*)	
		<VARIABLE>_cxx_major</VARIABLE>=2
		<VARIABLE>_cxx_minor</VARIABLE>=95
		<VARIABLE>cxx_version</VARIABLE>=<STRING>"<VARIABLE>$cxx_version</VARIABLE>, ok"</STRING>
		<VARIABLE>cxx_verc_fail</VARIABLE>=no
		;;
	3_4)
		<VARIABLE>_cxx_major</VARIABLE>=3
		<VARIABLE>_mxx_minor</VARIABLE>=4
		;;
	<STRING>'not found'</STRING>)
		<VARIABLE>cxx_verc_fail</VARIABLE>=<FUNCTION>yes</FUNCTION>
		;;
	*)
		<VARIABLE>cxx_version</VARIABLE>=<STRING>"<VARIABLE>$cxx_version</VARIABLE>, bad"</STRING>
		<VARIABLE>cxx_verc_fail</VARIABLE>=<FUNCTION>yes</FUNCTION>
		;;
<KEYWORD>esac</KEYWORD>

<FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$cxx_version</VARIABLE>"</STRING>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$cxx_verc_fail</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<FUNCTION>echo</FUNCTION>
	<FUNCTION>echo</FUNCTION> <STRING>"The version of your compiler is not supported at this time"</STRING>
	<FUNCTION>echo</FUNCTION> <STRING>"Please ensure you are using GCC 2.95.x or GCC 3.x"</STRING>
	<FUNCTION>exit</FUNCTION> 1	
<KEYWORD>fi</KEYWORD>

<COMMENT>#</COMMENT>
<COMMENT># Do CXXFLAGS now we know the compiler version</COMMENT>
<COMMENT>#</COMMENT>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_cxx_major</VARIABLE>"</STRING> -ge <STRING>"3"</STRING> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>CXXFLAGS</VARIABLE>=<STRING>"<VARIABLE>$CXXFLAGS</VARIABLE>"</STRING>
	<VARIABLE>_make_def_HAVE_GCC3</VARIABLE>=<STRING>'HAVE_GCC3 = 1'</STRING>
<KEYWORD>fi</KEYWORD>;

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -n <STRING>"<VARIABLE>$_host</VARIABLE>"</STRING>; <KEYWORD>then</KEYWORD>
	<COMMENT># Cross-compiling mode - add your target here if needed</COMMENT>
	<KEYWORD>case</KEYWORD> <STRING>"<VARIABLE>$_host</VARIABLE>"</STRING> <KEYWORD>in</KEYWORD>
<COMMENT>#		linupy|arm-riscos-aof)</COMMENT>
<COMMENT>#			echo "Cross-compiling to $_host, forcing endianness, alignment and type sizes"</COMMENT>
<COMMENT>#			DEFINES="$DEFINES -DUNIX"</COMMENT>
<COMMENT>#			_def_endianness='#define SCUMM_LITTLE_ENDIAN'</COMMENT>
<COMMENT>#			_def_align='#define SCUMM_NEED_ALIGNMENT'</COMMENT>
<COMMENT>#			_def_linupy="#define DLINUPY"</COMMENT>
<COMMENT>#			type_1_byte='char'</COMMENT>
<COMMENT>#			type_2_byte='short'</COMMENT>
<COMMENT>#			type_4_byte='int'</COMMENT>
<COMMENT>#			;;</COMMENT>
<COMMENT>#		ppc-amigaos)</COMMENT>
<COMMENT>#			echo "Cross-compiling to $_host, forcing endianness, alignment and type sizes"</COMMENT>
<COMMENT>#			_def_endianness='#define SCUMM_BIG_ENDIAN'</COMMENT>
<COMMENT>#			_def_align='#define	SCUMM_NEED_ALIGNMENT'</COMMENT>
<COMMENT>#			type_1_byte='char'</COMMENT>
<COMMENT>#			type_2_byte='short'</COMMENT>
<COMMENT>#			type_4_byte='long'</COMMENT>
<COMMENT>#			CXXFLAGS="$CFLAGS -newlib -mstrict-align -mcpu=750 -mtune=7400"</COMMENT>
<COMMENT>#			LDFLAGS="$LDFLAGS -newlib"</COMMENT>
<COMMENT>#			;;</COMMENT>
		gp2x)
			<FUNCTION>echo</FUNCTION> <STRING>"Cross-compiling to <VARIABLE>$_host</VARIABLE>, forcing static build, and disabling OpenGL."</STRING>
			<VARIABLE>_build_static</VARIABLE>=<FUNCTION>yes</FUNCTION>
			<VARIABLE>_build_gl</VARIABLE>=no
			<VARIABLE>_build_windowed</VARIABLE>=no
			;;
		mingw32-cross)
			<FUNCTION>echo</FUNCTION> <STRING>"Cross-compiling for Win32 using MinGW."</STRING>
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DWIN32"</STRING>
			<VARIABLE>_host_os</VARIABLE>=win32
			;;
		*)
			<FUNCTION>echo</FUNCTION> <STRING>"Cross-compiling to unknown target, please add your target to configure."</STRING>
			<FUNCTION>exit</FUNCTION> 1
			;;
	<KEYWORD>esac</KEYWORD>
	
<KEYWORD>else</KEYWORD>
	<COMMENT>#</COMMENT>
	<COMMENT># Determine build settings</COMMENT>
	<COMMENT>#</COMMENT>
	<COMMENT># <COMMENT_NOTE>TODO</COMMENT_NOTE> - also add an command line option to override this?!?</COMMENT>
	echo_n <STRING>"Checking hosttype... "</STRING>
	<FUNCTION>echo</FUNCTION> <VARIABLE>$_host_os</VARIABLE>
	<KEYWORD>case</KEYWORD> <VARIABLE>$_host_os</VARIABLE> <KEYWORD>in</KEYWORD>
		linux* | openbsd* | freebsd* | netbsd* | bsd* | sunos* | hpux* | beos*)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DUNIX"</STRING>
			<VARIABLE>_host_os</VARIABLE>=unix
			;;
		irix*)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DUNIX"</STRING>
			<VARIABLE>_ranlib</VARIABLE>=:
			<VARIABLE>_host_os</VARIABLE>=unix
			;;
		mingw*)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DWIN32"</STRING>
			<VARIABLE>_host_os</VARIABLE>=win32
			;;
		cygwin*)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -mno-cygwin -DWIN32"</STRING>
			<VARIABLE>LIBS</VARIABLE>=<STRING>"<VARIABLE>$LIBS</VARIABLE> -mno-cygwin -lmingw32 -lwinmm"</STRING>
			<VARIABLE>_host_os</VARIABLE>=win32
			;;
		os2*)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DUNIX -DOS2"</STRING>
			<VARIABLE>_host_os</VARIABLE>=unix
			;;
		<COMMENT># given this is a shell script assume some type of unix</COMMENT>
		*)
			<FUNCTION>echo</FUNCTION> <STRING>"WARNING: could not establish system type, assuming unix like"</STRING>
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DUNIX"</STRING>
			;;
	<KEYWORD>esac</KEYWORD>
<KEYWORD>fi</KEYWORD>

<COMMENT># Cross-compilers use their own commands for the following functions</COMMENT>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> -n <STRING>"<VARIABLE>$_host_prefix</VARIABLE>"</STRING>; <KEYWORD>then</KEYWORD>
	<VARIABLE>_strip</VARIABLE>=<STRING>"<VARIABLE>$_host_prefix</VARIABLE>-<VARIABLE>$_strip</VARIABLE>"</STRING>
	<VARIABLE>_windres</VARIABLE>=<STRING>"<VARIABLE>$_host_prefix</VARIABLE>-<VARIABLE>$_windres</VARIABLE>"</STRING>
<KEYWORD>fi</KEYWORD>

<COMMENT>#</COMMENT>
<COMMENT># Check for ZLib</COMMENT>
<COMMENT>#</COMMENT>
echocheck <STRING>"zlib"</STRING>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_zlib</VARIABLE>"</STRING> = auto ; <KEYWORD>then</KEYWORD>
	<VARIABLE>_zlib</VARIABLE>=no
	<FUNCTION>cat</FUNCTION> <KEYWORD>&gt;</KEYWORD> <VARIABLE>$TMPC</VARIABLE> &lt;&lt; <KEYWORD>EOF</KEYWORD><HEREDOC></HEREDOC>
<HEREDOC>#include &lt;string.h&gt;</HEREDOC>
<HEREDOC>#include &lt;zlib.h&gt;</HEREDOC>
<HEREDOC>int main(void) { return strcmp(ZLIB_VERSION, zlibVersion()); }</HEREDOC>
<HEREDOC></HEREDOC><KEYWORD>EOF</KEYWORD>
	cc_check <VARIABLE>$LDFLAGS</VARIABLE> <VARIABLE>$CXXFLAGS</VARIABLE> <VARIABLE>$ZLIB_CFLAGS</VARIABLE> <VARIABLE>$ZLIB_LIBS</VARIABLE> -lz &amp;&amp; _zlib=<FUNCTION>yes</FUNCTION>
<KEYWORD>fi</KEYWORD>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_zlib</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$_zlib</VARIABLE>"</STRING>
<KEYWORD>else</KEYWORD>
	<FUNCTION>echo</FUNCTION> <STRING>"none found, using built-in version"</STRING>
<KEYWORD>fi</KEYWORD>

<COMMENT>#</COMMENT>
<COMMENT># Check for GL</COMMENT>
<COMMENT>#</COMMENT>
echocheck <STRING>"opengl"</STRING>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_opengl</VARIABLE>"</STRING> = auto ; <KEYWORD>then</KEYWORD>
	<VARIABLE>_opengl</VARIABLE>=no
	<FUNCTION>cat</FUNCTION> <KEYWORD>&gt;</KEYWORD> <VARIABLE>$TMPC</VARIABLE> &lt;&lt; <KEYWORD>EOF</KEYWORD><HEREDOC></HEREDOC>
<HEREDOC>#include &lt;string.h&gt;</HEREDOC>
<HEREDOC>#include &lt;GL/gl.h&gt;</HEREDOC>
<HEREDOC>#include &lt;GL/glu.h&gt;</HEREDOC>
<HEREDOC>int main(void) { return 0; }</HEREDOC>
<HEREDOC></HEREDOC><KEYWORD>EOF</KEYWORD>
	cc_check <VARIABLE>$LDFLAGS</VARIABLE> <VARIABLE>$CXXFLAGS</VARIABLE> &amp;&amp; _opengl=<FUNCTION>yes</FUNCTION>
<KEYWORD>fi</KEYWORD>
<FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$_opengl</VARIABLE>"</STRING>

<COMMENT>#</COMMENT>
<COMMENT># figure out installation directories</COMMENT>
<COMMENT>#</COMMENT>
<FUNCTION>test</FUNCTION> -z <STRING>"<VARIABLE>$_bindir</VARIABLE>"</STRING> &amp;&amp; _bindir=<STRING>"<VARIABLE>$_prefix</VARIABLE>/bin"</STRING>
<FUNCTION>test</FUNCTION> -z <STRING>"<VARIABLE>$_docdir</VARIABLE>"</STRING> &amp;&amp; _docdir=<STRING>"<VARIABLE>$_prefix</VARIABLE>/share/doc/stella"</STRING>
<FUNCTION>test</FUNCTION> -z <STRING>"<VARIABLE>$_datadir</VARIABLE>"</STRING> &amp;&amp; _datadir=<STRING>"<VARIABLE>$_prefix</VARIABLE>/share"</STRING>

<FUNCTION>echo</FUNCTION>
echo_n <STRING>"Summary:"</STRING>
<FUNCTION>echo</FUNCTION>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_gl</VARIABLE>"</STRING> = <STRING>"yes"</STRING> ; <KEYWORD>then</KEYWORD>
	<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_opengl</VARIABLE>"</STRING> = <STRING>"yes"</STRING> ; <KEYWORD>then</KEYWORD>
		echo_n <STRING>"   OpenGL rendering enabled"</STRING>
		<FUNCTION>echo</FUNCTION>
	<KEYWORD>else</KEYWORD>
		echo_n <STRING>"   OpenGL rendering disabled (missing OpenGL headers)"</STRING>
		<FUNCTION>echo</FUNCTION>
		<VARIABLE>_build_gl</VARIABLE>=no
	<KEYWORD>fi</KEYWORD>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   OpenGL rendering disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_windowed</VARIABLE>"</STRING> = <STRING>"yes"</STRING> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Windowed rendering modes enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Windowed rendering modes disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_sound</VARIABLE>"</STRING> = <STRING>"yes"</STRING> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Sound support enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Sound support disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_debugger</VARIABLE>"</STRING> = <STRING>"yes"</STRING> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Debugger support enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Debugger support disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_snapshot</VARIABLE>"</STRING> = <STRING>"yes"</STRING> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Snapshot support enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Snapshot support disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_joystick</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Joystick support enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Joystick support disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_cheats</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Cheatcode support enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Cheatcode support disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_static</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Static binary enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Static binary disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_profile</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	echo_n <STRING>"   Profiling enabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>else</KEYWORD>
	echo_n <STRING>"   Profiling disabled"</STRING>
	<FUNCTION>echo</FUNCTION>
<KEYWORD>fi</KEYWORD>


<COMMENT>#</COMMENT>
<COMMENT># Now, add the appropriate defines/libraries/headers</COMMENT>
<COMMENT>#</COMMENT>
<FUNCTION>echo</FUNCTION>
find_sdlconfig

<VARIABLE>SRC</VARIABLE>=<STRING>"src"</STRING>
<VARIABLE>CORE</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/emucore"</STRING>
<VARIABLE>COMMON</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/common"</STRING>
<VARIABLE>GUI</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/gui"</STRING>
<VARIABLE>DBG</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/debugger"</STRING>
<VARIABLE>DBGGUI</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/debugger/gui"</STRING>
<VARIABLE>YACC</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/yacc"</STRING>
<VARIABLE>CHEAT</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/cheat"</STRING>
<VARIABLE>ZLIB</VARIABLE>=<STRING>"<VARIABLE>$SRC</VARIABLE>/zlib"</STRING>

<VARIABLE>INCLUDES</VARIABLE>=<STRING>"-I<VARIABLE>$CORE</VARIABLE> -I<VARIABLE>$COMMON</VARIABLE> -I<VARIABLE>$GUI</VARIABLE>"</STRING>

<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> `<VARIABLE>$_sdlconfig</VARIABLE> --cflags`"</STRING>
<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_static</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>_sdl_conf_libs</VARIABLE>=<STRING>"--static-libs"</STRING>
	<VARIABLE>LDFLAGS</VARIABLE>=<STRING>"-static <VARIABLE>$LDFLAGS</VARIABLE>"</STRING>
<KEYWORD>else</KEYWORD>
	<VARIABLE>_sdl_conf_libs</VARIABLE>=<STRING>"--libs"</STRING>
<KEYWORD>fi</KEYWORD>

<VARIABLE>LIBS</VARIABLE>=<STRING>"<VARIABLE>$LIBS</VARIABLE> `<VARIABLE>$_sdlconfig</VARIABLE> <VARIABLE>$_sdl_conf_libs</VARIABLE>`"</STRING>
<VARIABLE>LD</VARIABLE>=<VARIABLE>$CXX</VARIABLE> 
<KEYWORD>case</KEYWORD> <VARIABLE>$_host_os</VARIABLE> <KEYWORD>in</KEYWORD>
		unix)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DBSPF_UNIX -DHAVE_GETTIMEOFDAY -DHAVE_INTTYPES"</STRING>
			<VARIABLE>MODULES</VARIABLE>=<STRING>"<VARIABLE>$MODULES</VARIABLE> <VARIABLE>$SRC</VARIABLE>/unix"</STRING>
			<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> -I<VARIABLE>$SRC</VARIABLE>/unix"</STRING>
			;;
		win32)
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DBSPF_WIN32 -DHAVE_GETTIMEOFDAY -DHAVE_INTTYPES"</STRING>
			<VARIABLE>MODULES</VARIABLE>=<STRING>"<VARIABLE>$MODULES</VARIABLE> <VARIABLE>$SRC</VARIABLE>/win32"</STRING>
			<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> -I<VARIABLE>$SRC</VARIABLE>/win32"</STRING>
			<VARIABLE>LIBS</VARIABLE>=<STRING>"<VARIABLE>$LIBS</VARIABLE> -lmingw32 -lwinmm"</STRING>
			;;
		gp2x)
			<COMMENT># -O3 hangs the GP2X, do not use.</COMMENT>
			<VARIABLE>CXXFLAGS</VARIABLE>=<STRING>"-O2 -finline-functions -mtune=arm920t"</STRING>
			<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DBSPF_GP2X -DGP2X -DHAVE_GETTIMEOFDAY -DHAVE_INTTYPES"</STRING>
			<VARIABLE>MODULES</VARIABLE>=<STRING>"<VARIABLE>$MODULES</VARIABLE> <VARIABLE>$SRC</VARIABLE>/gp2x"</STRING>
			<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> -I<VARIABLE>$SRC</VARIABLE>/gp2x <VARIABLE>$ZLIB_CFLAGS</VARIABLE>"</STRING>
			
			<VARIABLE>_ranlib</VARIABLE>=<STRING>"arm-linux-ranlib"</STRING>
			<VARIABLE>_ar</VARIABLE>=<STRING>"arm-linux-ar cru"</STRING>
			;;
		*)
			<FUNCTION>echo</FUNCTION> <STRING>"WARNING: host system not currenty supported"</STRING>
			<FUNCTION>exit</FUNCTION>
			;;
<KEYWORD>esac</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_zlib</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
  <VARIABLE>LIBS</VARIABLE>=<STRING>"<VARIABLE>$LIBS</VARIABLE> -lz"</STRING>
<KEYWORD>else</KEYWORD>
	<VARIABLE>MODULES</VARIABLE>=<STRING>"<VARIABLE>$MODULES</VARIABLE> <VARIABLE>$ZLIB</VARIABLE>"</STRING>
	<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> -I<VARIABLE>$ZLIB</VARIABLE>"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_gl</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DDISPLAY_OPENGL"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_windowed</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DWINDOWED_SUPPORT"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_sound</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DSOUND_SUPPORT"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_debugger</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DDEBUGGER_SUPPORT"</STRING>
	<VARIABLE>MODULES</VARIABLE>=<STRING>"<VARIABLE>$MODULES</VARIABLE> <VARIABLE>$DBG</VARIABLE> <VARIABLE>$DBGGUI</VARIABLE> <VARIABLE>$YACC</VARIABLE>"</STRING>
	<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> -I<VARIABLE>$DBG</VARIABLE> -I<VARIABLE>$DBGGUI</VARIABLE> -I<VARIABLE>$YACC</VARIABLE>"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_snapshot</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DSNAPSHOT_SUPPORT"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_joystick</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DJOYSTICK_SUPPORT"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_cheats</VARIABLE>"</STRING> = <FUNCTION>yes</FUNCTION> ; <KEYWORD>then</KEYWORD>
	<VARIABLE>DEFINES</VARIABLE>=<STRING>"<VARIABLE>$DEFINES</VARIABLE> -DCHEATCODE_SUPPORT"</STRING>
	<VARIABLE>MODULES</VARIABLE>=<STRING>"<VARIABLE>$MODULES</VARIABLE> <VARIABLE>$CHEAT</VARIABLE>"</STRING>
	<VARIABLE>INCLUDES</VARIABLE>=<STRING>"<VARIABLE>$INCLUDES</VARIABLE> -I<VARIABLE>$CHEAT</VARIABLE>"</STRING>
<KEYWORD>fi</KEYWORD>

<KEYWORD>if</KEYWORD> <FUNCTION>test</FUNCTION> <STRING>"<VARIABLE>$_build_profile</VARIABLE>"</STRING> = no ; <KEYWORD>then</KEYWORD>
	<VARIABLE>_build_profile</VARIABLE>=
<KEYWORD>fi</KEYWORD>


<FUNCTION>echo</FUNCTION> <STRING>"Creating config.mak"</STRING>
<FUNCTION>cat</FUNCTION> <KEYWORD>&gt;</KEYWORD> config.mak &lt;&lt; <KEYWORD>EOF</KEYWORD><HEREDOC></HEREDOC>
<HEREDOC># -------- Generated by configure -----------</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>CXX := $CXX</HEREDOC>
<HEREDOC>CXXFLAGS := $CXXFLAGS</HEREDOC>
<HEREDOC>LD := $LD</HEREDOC>
<HEREDOC>LIBS += $LIBS</HEREDOC>
<HEREDOC>RANLIB := $_ranlib</HEREDOC>
<HEREDOC>INSTALL := $_install</HEREDOC>
<HEREDOC>AR := $_ar</HEREDOC>
<HEREDOC>MKDIR := $_mkdir</HEREDOC>
<HEREDOC>ECHO := $_echo</HEREDOC>
<HEREDOC>CAT := $_cat</HEREDOC>
<HEREDOC>RM := $_rm</HEREDOC>
<HEREDOC>RM_REC := $_rm_rec</HEREDOC>
<HEREDOC>ZIP := $_zip</HEREDOC>
<HEREDOC>CP := $_cp</HEREDOC>
<HEREDOC>WIN32PATH=$_win32path</HEREDOC>
<HEREDOC>STRIP := $_strip</HEREDOC>
<HEREDOC>WINDRES := $_windres</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>MODULES += $MODULES</HEREDOC>
<HEREDOC>MODULE_DIRS += $MODULE_DIRS</HEREDOC>
<HEREDOC>EXEEXT := $EXEEXT</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>PREFIX := $_prefix</HEREDOC>
<HEREDOC>BINDIR := $_bindir</HEREDOC>
<HEREDOC>DOCDIR := $_docdir</HEREDOC>
<HEREDOC>DATADIR := $_datadir</HEREDOC>
<HEREDOC>PROFILE := $_build_profile</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>$_make_def_HAVE_GCC3</HEREDOC>
<HEREDOC></HEREDOC>
<HEREDOC>INCLUDES += $INCLUDES</HEREDOC>
<HEREDOC>OBJS += $OBJS</HEREDOC>
<HEREDOC>DEFINES += $DEFINES</HEREDOC>
<HEREDOC>LDFLAGS += $LDFLAGS</HEREDOC>
<HEREDOC></HEREDOC><KEYWORD>EOF</KEYWORD>

<COMMENT># This should be taken care of elsewhere, but I'm not sure where</COMMENT>
<FUNCTION>rm</FUNCTION> -f stella-conf*
