<COMMENT>#!/bin/bash</COMMENT>

<COMMENT>#</COMMENT>
<COMMENT># Author: Matt Tomasello, 2011</COMMENT>
<COMMENT># Based on the JavaScript implementation written by Thomas Mueller, 2008-2010</COMMENT>
<COMMENT># which was based on the C reference implementation written by Doug Whitting,</COMMENT>
<COMMENT># 2008. Special thanks to Mike Drob for the zero-fill right-shift algorithm.</COMMENT>
<COMMENT># This algorithm and source code is released to the public domain.</COMMENT>
<COMMENT>#</COMMENT>

<COMMENT># 64-bit architecture check</COMMENT>
<FUNCTION>declare</FUNCTION> <CONSTANT>ARCH</CONSTANT>=0
<KEYWORD>for</KEYWORD> (( i=0; i&lt;8; i++ )); <KEYWORD>do</KEYWORD>
        <VARIABLE>j</VARIABLE>=<KEYWORD>$((</KEYWORD>2**i<KEYWORD>))</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <KEYWORD>$((</KEYWORD>1&lt;&lt;j<KEYWORD>))</KEYWORD> -eq 1 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>ARCH</VARIABLE>=<VARIABLE>$j</VARIABLE>
                <FUNCTION>break</FUNCTION>;
        <KEYWORD>fi</KEYWORD>
<KEYWORD>done</KEYWORD>
<KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <VARIABLE>$ARCH</VARIABLE> -lt 64 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>'This program is written for 64-bit architectures.'</STRING>
        <FUNCTION>exit</FUNCTION> 1
<KEYWORD>fi</KEYWORD>

<COMMENT># Globals</COMMENT>
<FUNCTION>readonly</FUNCTION> <CONSTANT>WORD16</CONSTANT>=0xFFFF
<FUNCTION>readonly</FUNCTION> <CONSTANT>WORD32</CONSTANT>=0xFFFFFFFF
<FUNCTION>readonly</FUNCTION> N=0x7FFFFFFFFFFFFFFF
<FUNCTION>declare</FUNCTION> <CONSTANT>DEBUG</CONSTANT>=0
<FUNCTION>declare</FUNCTION> <CONSTANT>PASS</CONSTANT>
<FUNCTION>declare</FUNCTION> <CONSTANT>STR2HEX</CONSTANT>
<FUNCTION>declare</FUNCTION> <CONSTANT>HEX2STR</CONSTANT>
<FUNCTION>declare</FUNCTION> <CONSTANT>BYTES2HEX</CONSTANT>
<FUNCTION>declare</FUNCTION> ZF
<FUNCTION>declare</FUNCTION> HI
<FUNCTION>declare</FUNCTION> LO
<FUNCTION>declare</FUNCTION> -a SL
<FUNCTION>declare</FUNCTION> -a SR
<FUNCTION>declare</FUNCTION> -a <CONSTANT>STR2BYTES</CONSTANT>
<FUNCTION>declare</FUNCTION> -a <CONSTANT>HEX2BYTES</CONSTANT>
<FUNCTION>declare</FUNCTION> -a MSG
<FUNCTION>declare</FUNCTION> -a <CONSTANT>TWEAK</CONSTANT>
<FUNCTION>declare</FUNCTION> -a C
<FUNCTION>declare</FUNCTION> -a <CONSTANT>HASH</CONSTANT>
<FUNCTION>readonly</FUNCTION> -a <CONSTANT>SKEIN</CONSTANT>=(83 72 65 51 1 0 0 0 0 2)
<FUNCTION>readonly</FUNCTION> -a R=(46 36 19 37 33 42 14 27 17 49 36 39 44 56 54 9 39 30 34 24 13 17 10 50 25 29 39 43 8 22 56 35)

<COMMENT># Only displays messages when DEBUG is enabled</COMMENT>
<KEYWORD>function</KEYWORD> debug {
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$DEBUG</VARIABLE>"</STRING> -eq 1 &amp;&amp; -n <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> <KEYWORD>&gt;&amp;2</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Displays usage info</COMMENT>
<KEYWORD>function</KEYWORD> usage {
        <FUNCTION>echo</FUNCTION> <STRING>'Author: Matt Tomasello, 2011'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'Based on the JavaScript implementation written by Thomas Mueller, 2008-2010'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'which was based on the C reference implementation written by Doug Whitting,'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'2008. Special thanks to Mike Drob for the zero-fill right-shift algorithm.'</STRING>
        <FUNCTION>echo</FUNCTION>
        <FUNCTION>echo</FUNCTION> <STRING>'This algorithm and source code is released to the public domain.'</STRING>
        <FUNCTION>echo</FUNCTION>
        <FUNCTION>echo</FUNCTION> <STRING>'This program will calculate the Skein 512-512 hash of STDIN using version 1.3 of'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'the Skein algorithm.'</STRING>
        <FUNCTION>echo</FUNCTION>
        <FUNCTION>echo</FUNCTION> <STRING>'Usage: cat FILE | skein [ARGS]'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>"       echo 'some-string' | skein [ARGS]"</STRING>
        <FUNCTION>echo</FUNCTION>
        <FUNCTION>echo</FUNCTION> <STRING>'Valid arguments may start with one or two hyphens, and include:'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'  -h, -help     Display this help information'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'  -selftest     Perform self-test'</STRING>
        <FUNCTION>echo</FUNCTION> <STRING>'  -debug        Display short debug information on STDERR'</STRING>
        <FUNCTION>echo</FUNCTION>
        <FUNCTION>exit</FUNCTION>
}

<COMMENT># Converts hex-string like '62FF0ACC' into ASCII string</COMMENT>
<KEYWORD>function</KEYWORD> hex2str {
        <VARIABLE>HEX2STR</VARIABLE>=<STRING>''</STRING>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> -n <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> &amp;&amp; <KEYWORD>${</KEYWORD>#1<KEYWORD>}</KEYWORD>%2 -eq 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0; i&lt;${#1}; i=i+2 )); <KEYWORD>do</KEYWORD>
                        <VARIABLE>HEX2STR</VARIABLE>=<VARIABLE>$HEX2STR</VARIABLE><KEYWORD>$(</KEYWORD><FUNCTION>echo</FUNCTION> -e <STRING>"<ESC>\\</ESC>x<VARIABLE>${1:i:2}</VARIABLE>"</STRING><KEYWORD>)</KEYWORD>
                <KEYWORD>done</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Converts string like 'foobar' into hex-string</COMMENT>
<COMMENT># Result may be decoded with hex2str</COMMENT>
<KEYWORD>function</KEYWORD> str2hex {
        <VARIABLE>STR2HEX</VARIABLE>=<STRING>''</STRING>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> -n <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0; i&lt;${#1}; i++ )); <KEYWORD>do</KEYWORD>
                        <VARIABLE>STR2HEX</VARIABLE>=<VARIABLE>$STR2HEX</VARIABLE><KEYWORD>$(</KEYWORD><FUNCTION>printf</FUNCTION> <STRING>'%x'</STRING> <STRING>"'<VARIABLE>${1:i:1}</VARIABLE>"</STRING><KEYWORD>)</KEYWORD>
                <KEYWORD>done</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Converts hex-string into array of bytes</COMMENT>
<KEYWORD>function</KEYWORD> hex2bytes {
        <VARIABLE>HEX2BYTES</VARIABLE>=()
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> -n <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> &amp;&amp; <KEYWORD>${</KEYWORD>#1<KEYWORD>}</KEYWORD>%2 -eq 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0,j=0; j&lt;${#1}; i++,j=j+2 )); <KEYWORD>do</KEYWORD>
                        <CONSTANT>HEX2BYTES</CONSTANT><KEYWORD>[</KEYWORD>i<KEYWORD>]</KEYWORD>=<KEYWORD>$(</KEYWORD><FUNCTION>printf</FUNCTION> <STRING>'%d'</STRING> <STRING>"'</STRING><INTERPOLATED><KEYWORD>$(</KEYWORD><FUNCTION>echo</FUNCTION> -e <STRING>"<ESC>\\</ESC>x<VARIABLE>${1:j:2}</VARIABLE>"</STRING><KEYWORD>)</KEYWORD></INTERPOLATED><STRING>"</STRING><KEYWORD>)</KEYWORD>
                <KEYWORD>done</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Converts array of bytes into hex-string</COMMENT>
<KEYWORD>function</KEYWORD> bytes2hex {
        <VARIABLE>BYTES2HEX</VARIABLE>=<STRING>''</STRING>
        <FUNCTION>local</FUNCTION> bytes=(<STRING>"<VARIABLE>${!1}</VARIABLE>"</STRING>)
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${#bytes[@]}</VARIABLE>"</STRING> -gt 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0; i&lt;${#bytes[@]}; i++ )); <KEYWORD>do</KEYWORD>
                        <FUNCTION>local</FUNCTION> char=<KEYWORD>$(</KEYWORD><FUNCTION>printf</FUNCTION> <STRING>'%x'</STRING> <STRING>"<VARIABLE>${bytes[i]}</VARIABLE>"</STRING><KEYWORD>)</KEYWORD>
                        <VARIABLE>BYTES2HEX</VARIABLE>=<VARIABLE>$BYTES2HEX</VARIABLE><KEYWORD>${</KEYWORD>char:1:2<KEYWORD>}</KEYWORD>
                <KEYWORD>done</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Converts string into array of bytes (character-values)</COMMENT>
<KEYWORD>function</KEYWORD> str2bytes {
        <VARIABLE>STR2BYTES</VARIABLE>=()
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> -n <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0; i&lt;${#1}; i++ )); <KEYWORD>do</KEYWORD>
                        <FUNCTION>local</FUNCTION> c=<KEYWORD>$(</KEYWORD><FUNCTION>printf</FUNCTION> <STRING>'%d'</STRING> <STRING>"'<VARIABLE>${1:i:1}</VARIABLE>"</STRING><KEYWORD>)</KEYWORD>
                        <CONSTANT>STR2BYTES</CONSTANT><KEYWORD>[</KEYWORD>i<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> c&amp;255 <KEYWORD>))</KEYWORD>
                <KEYWORD>done</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Left shift</COMMENT>
<KEYWORD>function</KEYWORD> shift_left {
        SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=0
        SL<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=0
        <FUNCTION>local</FUNCTION> lo=<KEYWORD>${</KEYWORD>1:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> hi=<KEYWORD>${</KEYWORD>2:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> n=<KEYWORD>${</KEYWORD>3:-0<KEYWORD>}</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> ! <STRING>"<VARIABLE>$lo</VARIABLE>"</STRING> -eq 0 || ! <STRING>"<VARIABLE>$hi</VARIABLE>"</STRING> -eq 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$n</VARIABLE>"</STRING> -gt 32 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> (hi&lt;&lt;(n-32<KEYWORD>))</KEYWORD>&amp;<CONSTANT>WORD32</CONSTANT> ))
                        SL<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=0
                <KEYWORD>elif</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$n</VARIABLE>"</STRING> -eq 32 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<VARIABLE>$hi</VARIABLE>
                        SL<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=0
                <KEYWORD>elif</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$n</VARIABLE>"</STRING> -eq 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<VARIABLE>$lo</VARIABLE>
                        SL<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<VARIABLE>$hi</VARIABLE>
                <KEYWORD>else</KEYWORD>
                        zf_shift_right hi <KEYWORD>$((</KEYWORD> 32-n <KEYWORD>))</KEYWORD>
                        SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> ((lo&lt;&lt;n)|ZF)&amp;WORD32 <KEYWORD>))</KEYWORD>
                        SL<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> (hi&lt;&lt;n)&amp;WORD32 <KEYWORD>))</KEYWORD>
                <KEYWORD>fi</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Right shift</COMMENT>
<KEYWORD>function</KEYWORD> shift_right {
        SR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=0
        SR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=0
        <FUNCTION>local</FUNCTION> lo=<KEYWORD>${</KEYWORD>1:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> hi=<KEYWORD>${</KEYWORD>2:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> n=<KEYWORD>${</KEYWORD>3:-0<KEYWORD>}</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> ! <STRING>"<VARIABLE>$lo</VARIABLE>"</STRING> -eq 0 || ! <STRING>"<VARIABLE>$hi</VARIABLE>"</STRING> -eq 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$n</VARIABLE>"</STRING> -gt 32 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        zf_shift_right lo <KEYWORD>$((</KEYWORD> n-32 <KEYWORD>))</KEYWORD>
                        SR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=0
                        SR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<VARIABLE>$ZF</VARIABLE>
                <KEYWORD>elif</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$n</VARIABLE>"</STRING> -eq 32 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        SR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=0
                        SR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<VARIABLE>$lo</VARIABLE>
                <KEYWORD>elif</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$n</VARIABLE>"</STRING> -eq 0 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        SR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<VARIABLE>$lo</VARIABLE>
                        SR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<VARIABLE>$hi</VARIABLE>
                <KEYWORD>else</KEYWORD>
                        zf_shift_right lo n
                        SR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<VARIABLE>$ZF</VARIABLE>
                        zf_shift_right hi n
                        SR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> ((lo&lt;&lt;(32-n<KEYWORD>))</KEYWORD>|ZF)&amp;<CONSTANT>WORD32</CONSTANT>  ))
                <KEYWORD>fi</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Xor</COMMENT>
<KEYWORD>function</KEYWORD> xor {
        XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=0
        XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=0
        <FUNCTION>local</FUNCTION> x0=<KEYWORD>${</KEYWORD>1:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> x1=<KEYWORD>${</KEYWORD>2:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> y0=<KEYWORD>${</KEYWORD>3:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> y1=<KEYWORD>${</KEYWORD>4:-0<KEYWORD>}</KEYWORD>
        XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> (x0^y0)&amp;WORD32 <KEYWORD>))</KEYWORD>
        XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> (x1^y1)&amp;WORD32 <KEYWORD>))</KEYWORD>
}

<COMMENT># Add</COMMENT>
<KEYWORD>function</KEYWORD> add {
        ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=0
        ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=0
        <FUNCTION>local</FUNCTION> x0=<KEYWORD>${</KEYWORD>1:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> x1=<KEYWORD>${</KEYWORD>2:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> y0=<KEYWORD>${</KEYWORD>3:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> y1=<KEYWORD>${</KEYWORD>4:-0<KEYWORD>}</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> -z <STRING>"<VARIABLE>$3</VARIABLE>"</STRING> || -z <STRING>"<VARIABLE>$4</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<VARIABLE>$x0</VARIABLE>
                ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<VARIABLE>$x1</VARIABLE>
        <KEYWORD>else</KEYWORD>
                <FUNCTION>local</FUNCTION> lsw=<KEYWORD>$((</KEYWORD> (x1&amp;WORD16)+(y1&amp;WORD16) <KEYWORD>))</KEYWORD>
                zf_shift_right x1 16
                <FUNCTION>local</FUNCTION> xs=<VARIABLE>$ZF</VARIABLE>
                zf_shift_right y1 16
                <FUNCTION>local</FUNCTION> ys=<VARIABLE>$ZF</VARIABLE>
                zf_shift_right lsw 16
                <FUNCTION>local</FUNCTION> msw=<KEYWORD>$((</KEYWORD> xs + ys + ZF <KEYWORD>))</KEYWORD>
                <FUNCTION>local</FUNCTION> lo=<KEYWORD>$((</KEYWORD> ((msw&amp;WORD16)&lt;&lt;16)|(lsw&amp;WORD16) <KEYWORD>))</KEYWORD>
                zf_shift_right msw 16
                <VARIABLE>lsw</VARIABLE>=<KEYWORD>$((</KEYWORD> (x0&amp;WORD16)+(y0&amp;WORD16)+ZF <KEYWORD>))</KEYWORD>
                zf_shift_right x0 16
                <VARIABLE>xs</VARIABLE>=<VARIABLE>$ZF</VARIABLE>
                zf_shift_right y0 16
                <VARIABLE>ys</VARIABLE>=<VARIABLE>$ZF</VARIABLE>
                zf_shift_right lsw 16
                <VARIABLE>msw</VARIABLE>=<KEYWORD>$((</KEYWORD> xs + ys + ZF <KEYWORD>))</KEYWORD>
                <FUNCTION>local</FUNCTION> hi=<KEYWORD>$((</KEYWORD> ((msw&amp;WORD16)&lt;&lt;16)|(lsw&amp;WORD16) <KEYWORD>))</KEYWORD>
                ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> hi&amp;WORD32 <KEYWORD>))</KEYWORD>
                ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> lo&amp;WORD32 <KEYWORD>))</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<COMMENT># Zero-fill right-shift</COMMENT>
<KEYWORD>function</KEYWORD> zf_shift_right {
        <VARIABLE>ZF</VARIABLE>=0
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> -n <STRING>"<VARIABLE>$1</VARIABLE>"</STRING> &amp;&amp; -n <STRING>"<VARIABLE>$2</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>ZF</VARIABLE>=<KEYWORD>$((</KEYWORD> ($1 &gt;&gt; $2) &amp; (N&gt;&gt;~-$2) <KEYWORD>))</KEYWORD>
        <KEYWORD>fi</KEYWORD>
}

<KEYWORD>function</KEYWORD> block {
        <FUNCTION>local</FUNCTION> offset=<KEYWORD>${</KEYWORD>1:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> b=(<STRING>"<VARIABLE>${!2}</VARIABLE>"</STRING>)
        <FUNCTION>local</FUNCTION> nil=<KEYWORD>${</KEYWORD>3:-0<KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> x=()
        <FUNCTION>local</FUNCTION> t=()
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$nil</VARIABLE>"</STRING> -eq 1 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <FUNCTION>unset</FUNCTION> b
        <KEYWORD>fi</KEYWORD>
        C<KEYWORD>[</KEYWORD>16<KEYWORD>]</KEYWORD>=466688986
        C<KEYWORD>[</KEYWORD>17<KEYWORD>]</KEYWORD>=2851871266
        <KEYWORD>for</KEYWORD> (( i=0; i&lt;8; i++ )); <KEYWORD>do</KEYWORD>
                <KEYWORD>for</KEYWORD> (( j=7,k=offset+i*8+7; j&gt;=0; j--,k-- )); <KEYWORD>do</KEYWORD>
                        shift_left <KEYWORD>${</KEYWORD>t<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>t<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> 8
                        t<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        <VARIABLE>bk</VARIABLE>=<KEYWORD>$((</KEYWORD> b[k] &amp; 255 <KEYWORD>))</KEYWORD>
                        t<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> SL[1]|(bk&amp;255) <KEYWORD>))</KEYWORD>
                <KEYWORD>done</KEYWORD>
                add t<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD> t<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD> C<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD> C<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD>
                x<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                x<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                xor <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>16<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>17<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                C<KEYWORD>[</KEYWORD>16<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                C<KEYWORD>[</KEYWORD>17<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <KEYWORD>done</KEYWORD>
        add x<KEYWORD>[</KEYWORD>10<KEYWORD>]</KEYWORD> x<KEYWORD>[</KEYWORD>11<KEYWORD>]</KEYWORD> <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD> <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>
        x<KEYWORD>[</KEYWORD>10<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        x<KEYWORD>[</KEYWORD>11<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        add x<KEYWORD>[</KEYWORD>12<KEYWORD>]</KEYWORD> x<KEYWORD>[</KEYWORD>13<KEYWORD>]</KEYWORD> <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>2<KEYWORD>]</KEYWORD> <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>3<KEYWORD>]</KEYWORD>
        x<KEYWORD>[</KEYWORD>12<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        x<KEYWORD>[</KEYWORD>13<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        xor <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>3<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>4<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>5<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <KEYWORD>for</KEYWORD> (( round=1; round&lt;=18; round++ )); <KEYWORD>do</KEYWORD>
                <FUNCTION>local</FUNCTION> p=<KEYWORD>$((</KEYWORD> 16-((round&amp;1)&lt;&lt;4) <KEYWORD>))</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0; i&lt;16; i++ )); <KEYWORD>do</KEYWORD>
                        <FUNCTION>local</FUNCTION> m=<KEYWORD>$((</KEYWORD> 2*((i+(1+i+i)*(i&gt;&gt;2<KEYWORD>))</KEYWORD>&amp;3) ))
                        <FUNCTION>local</FUNCTION> n=<KEYWORD>$((</KEYWORD> (1+i+i)&amp;7 <KEYWORD>))</KEYWORD>
                        <FUNCTION>local</FUNCTION> r0=<KEYWORD>${</KEYWORD>R<KEYWORD>[</KEYWORD>p+i<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        add x<KEYWORD>[</KEYWORD>m*2<KEYWORD>]</KEYWORD> x<KEYWORD>[</KEYWORD>m*2+1<KEYWORD>]</KEYWORD> x<KEYWORD>[</KEYWORD>n*2<KEYWORD>]</KEYWORD> x<KEYWORD>[</KEYWORD>n*2+1<KEYWORD>]</KEYWORD>
                        x<KEYWORD>[</KEYWORD>m*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>m*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        shift_left <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>n*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>n*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> r0
                        shift_right <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>n*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>n*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>$((</KEYWORD> 64-r0 <KEYWORD>))</KEYWORD>
                        xor <KEYWORD>${</KEYWORD>SL<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>SL<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>SR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>SR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>n*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>n*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        xor <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>n*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>n*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>m*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>m*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>n*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>n*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                <KEYWORD>done</KEYWORD>
                <KEYWORD>for</KEYWORD> (( i=0; i&lt;8; i++ )); <KEYWORD>do</KEYWORD>
                        <FUNCTION>local</FUNCTION> ri9=<KEYWORD>$((</KEYWORD> (round+i)%9 <KEYWORD>))</KEYWORD>
                        add <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>ri9*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>ri9*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                        x<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                <KEYWORD>done</KEYWORD>
                <FUNCTION>local</FUNCTION> r3=<KEYWORD>$((</KEYWORD> round%3 <KEYWORD>))</KEYWORD>
                add <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>10<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>11<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>r3*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>r3*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                x<KEYWORD>[</KEYWORD>10<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                x<KEYWORD>[</KEYWORD>11<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                <FUNCTION>local</FUNCTION> r13=<KEYWORD>$((</KEYWORD> (round+1)%3 <KEYWORD>))</KEYWORD>
                add <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>12<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>13<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>r13*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD><CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>r13*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                x<KEYWORD>[</KEYWORD>12<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                x<KEYWORD>[</KEYWORD>13<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                add x<KEYWORD>[</KEYWORD>14<KEYWORD>]</KEYWORD> x<KEYWORD>[</KEYWORD>15<KEYWORD>]</KEYWORD> 0 round
                x<KEYWORD>[</KEYWORD>14<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                x<KEYWORD>[</KEYWORD>15<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>ADD<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <KEYWORD>done</KEYWORD>
        <KEYWORD>for</KEYWORD> (( i=0; i&lt;8; i++ )); <KEYWORD>do</KEYWORD>
                xor <KEYWORD>${</KEYWORD>t<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>t<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>x<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                C<KEYWORD>[</KEYWORD>i*2<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>0<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
                C<KEYWORD>[</KEYWORD>i*2+1<KEYWORD>]</KEYWORD>=<KEYWORD>${</KEYWORD>XOR<KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <KEYWORD>done</KEYWORD>
}

<COMMENT># Call to generate Skein-512-512 hash of string</COMMENT>
<KEYWORD>function</KEYWORD> <FUNCTION>hash</FUNCTION> {
        <VARIABLE>C</VARIABLE>=()
        str2hex <STRING>"<VARIABLE>$1</VARIABLE>"</STRING>
        str2bytes <STRING>"<VARIABLE>$1</VARIABLE>"</STRING>
        debug <STRING>"String in hex: <VARIABLE>${STR2HEX[*]}</VARIABLE>"</STRING>
        debug <STRING>"String bytes: <VARIABLE>${STR2BYTES[*]}</VARIABLE>"</STRING>
        <VARIABLE>TWEAK</VARIABLE>=(0 32 3288334336 0)
        block 0 <CONSTANT>SKEIN</CONSTANT><KEYWORD>[</KEYWORD>@<KEYWORD>]</KEYWORD>
        <VARIABLE>TWEAK</VARIABLE>=(0 0 1879048192 0)
        <FUNCTION>local</FUNCTION> len=<KEYWORD>${</KEYWORD>#<CONSTANT>STR2BYTES</CONSTANT><KEYWORD>[</KEYWORD>@<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD>
        <FUNCTION>local</FUNCTION> pos=0
        <KEYWORD>for</KEYWORD> (( ; len&gt;64; len-=64,pos+=64 )); <KEYWORD>do</KEYWORD>
                <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> TWEAK[1]+64 <KEYWORD>))</KEYWORD>
                block pos <CONSTANT>STR2BYTES</CONSTANT><KEYWORD>[</KEYWORD>@<KEYWORD>]</KEYWORD>
                <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>2<KEYWORD>]</KEYWORD>=805306368
        <KEYWORD>done</KEYWORD>
        <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> TWEAK[1]+len <KEYWORD>))</KEYWORD>
        <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>2<KEYWORD>]</KEYWORD>=<KEYWORD>$((</KEYWORD> TWEAK[2]|2147483648 <KEYWORD>))</KEYWORD>
        block pos <CONSTANT>STR2BYTES</CONSTANT><KEYWORD>[</KEYWORD>@<KEYWORD>]</KEYWORD>
        <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>1<KEYWORD>]</KEYWORD>=8
        <CONSTANT>TWEAK</CONSTANT><KEYWORD>[</KEYWORD>2<KEYWORD>]</KEYWORD>=4278190080
        block 0 0 1
        <VARIABLE>HASH</VARIABLE>=()
        <KEYWORD>for</KEYWORD> (( i=0; i&lt;64; i++ )); <KEYWORD>do</KEYWORD>
                <FUNCTION>local</FUNCTION> is3=<KEYWORD>$((</KEYWORD> i&gt;&gt;3 <KEYWORD>))</KEYWORD>
                shift_right <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>is3*2<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>${</KEYWORD>C<KEYWORD>[</KEYWORD>is3*2+1<KEYWORD>]</KEYWORD><KEYWORD>}</KEYWORD> <KEYWORD>$((</KEYWORD> (i&amp;7)*8 <KEYWORD>))</KEYWORD>
                <FUNCTION>local</FUNCTION> b=<KEYWORD>$((</KEYWORD> (SR[1]&amp;255)+256 <KEYWORD>))</KEYWORD>
                <CONSTANT>HASH</CONSTANT><KEYWORD>[</KEYWORD>i<KEYWORD>]</KEYWORD>=<VARIABLE>$b</VARIABLE>
        <KEYWORD>done</KEYWORD>
        bytes2hex <CONSTANT>HASH</CONSTANT><KEYWORD>[</KEYWORD>@<KEYWORD>]</KEYWORD>
        <FUNCTION>echo</FUNCTION> <VARIABLE>$BYTES2HEX</VARIABLE>
}

<COMMENT># Checks that all functions operate correctly</COMMENT>
<KEYWORD>function</KEYWORD> selftest {
        <VARIABLE>PASS</VARIABLE>=1
        <FUNCTION>local</FUNCTION> hex=<STRING>'666f6f626172'</STRING>
        <FUNCTION>local</FUNCTION> str=<STRING>'foobar'</STRING>
        <FUNCTION>local</FUNCTION> bytes=(102 111 111 98 97 114)
        <FUNCTION>local</FUNCTION> chk=0
        <FUNCTION>local</FUNCTION> msg=<STRING>''</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing hex2str:'</STRING>
        hex2str <STRING>"<VARIABLE>$hex</VARIABLE>"</STRING>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$HEX2STR</VARIABLE>"</STRING> = <STRING>"<VARIABLE>$str</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${HEX2STR[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing str2hex:'</STRING>
        str2hex <STRING>"<VARIABLE>$str</VARIABLE>"</STRING>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$STR2HEX</VARIABLE>"</STRING> = <STRING>"<VARIABLE>$hex</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${STR2HEX[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing hex2bytes:'</STRING>
        hex2bytes <STRING>"<VARIABLE>$hex</VARIABLE>"</STRING>
        <VARIABLE>chk</VARIABLE>=1
        <KEYWORD>for</KEYWORD> (( i=0; i&lt;${#HEX2BYTES[@]}; i++ )); <KEYWORD>do</KEYWORD>
                <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${HEX2BYTES[i]}</VARIABLE>"</STRING> -eq <STRING>"<VARIABLE>${bytes[i]}</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD> || chk=0
        <KEYWORD>done</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <VARIABLE>$chk</VARIABLE> -eq 1 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${HEX2BYTES[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing str2bytes:'</STRING>
        str2bytes <STRING>"<VARIABLE>$str</VARIABLE>"</STRING>
        <VARIABLE>chk</VARIABLE>=1
        <KEYWORD>for</KEYWORD> (( i=0; i&lt;${#STR2BYTES[@]}; i++ )); <KEYWORD>do</KEYWORD>
                <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${STR2BYTES[i]}</VARIABLE>"</STRING> -eq <STRING>"<VARIABLE>${bytes[i]}</VARIABLE>"</STRING> <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD> || chk=0
        <KEYWORD>done</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <VARIABLE>$chk</VARIABLE> -eq 1 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${STR2BYTES[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing shift_left:'</STRING>
        shift_left 0xF0F0F0F0 0xF0F0F0F0 4
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${SL[0]}</VARIABLE>"</STRING> -eq 0x0F0F0F0F &amp;&amp; <STRING>"<VARIABLE>${SL[1]}</VARIABLE>"</STRING> -eq 0x0F0F0F00 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${SL[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing shift_right:'</STRING>
        shift_right 0xF0F0F0F0 0xF0F0F0F0 4
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${SR[0]}</VARIABLE>"</STRING> -eq 0x0F0F0F0F &amp;&amp; <STRING>"<VARIABLE>${SR[1]}</VARIABLE>"</STRING> -eq 0x0F0F0F0F <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${SR[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing zf_shift_right:'</STRING>
        zf_shift_right 0xF0F0F0F0 4
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$ZF</VARIABLE>"</STRING> -eq 0x0F0F0F0F <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>$ZF</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing add:'</STRING>
        add 0x0FFFFFFF 0x0FFFFFFF 0xF0000000 0xF0000000
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${ADD[0]}</VARIABLE>"</STRING> -eq 0xFFFFFFFF &amp;&amp; <STRING>"<VARIABLE>${ADD[1]}</VARIABLE>"</STRING> -eq 0xFFFFFFFF <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${ADD[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>

        <VARIABLE>msg</VARIABLE>=<STRING>'Testing xor:'</STRING>
        xor 0xAAAAAAAA 0x55555555 0x55555555 0xAAAAAAAA
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>${XOR[0]}</VARIABLE>"</STRING> -eq 0xFFFFFFFF &amp;&amp; <STRING>"<VARIABLE>${XOR[1]}</VARIABLE>"</STRING> -eq 0xFFFFFFFF <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Success"</STRING>
        <KEYWORD>else</KEYWORD>
                <VARIABLE>PASS</VARIABLE>=0
                <VARIABLE>msg</VARIABLE>=<STRING>"<VARIABLE>$msg</VARIABLE> Failed with <VARIABLE>${XOR[@]}</VARIABLE>"</STRING>
        <KEYWORD>fi</KEYWORD>
        <FUNCTION>echo</FUNCTION> <STRING>"<VARIABLE>$msg</VARIABLE>"</STRING>
}

<COMMENT># Check for the few args this program supports</COMMENT>
<KEYWORD>for</KEYWORD> ARG <KEYWORD>in</KEYWORD> <VARIABLE>$@</VARIABLE>; <KEYWORD>do</KEYWORD>
        <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$ARG</VARIABLE>"</STRING> =~ --?(h|<FUNCTION>help</FUNCTION>|\?) <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                usage
        <KEYWORD>elif</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$ARG</VARIABLE>"</STRING> =~ --?selftest <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                selftest
                <KEYWORD>if</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$PASS</VARIABLE>"</STRING> -eq 1 <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                        <FUNCTION>exit</FUNCTION>
                <KEYWORD>fi</KEYWORD>
                <FUNCTION>exit</FUNCTION> 1
        <KEYWORD>elif</KEYWORD> <KEYWORD>[</KEYWORD><KEYWORD>[</KEYWORD> <STRING>"<VARIABLE>$ARG</VARIABLE>"</STRING> =~ --?debug <KEYWORD>]</KEYWORD><KEYWORD>]</KEYWORD>; <KEYWORD>then</KEYWORD>
                <VARIABLE>DEBUG</VARIABLE>=1
        <KEYWORD>fi</KEYWORD>
<KEYWORD>done</KEYWORD>

<VARIABLE>DATA</VARIABLE>=<KEYWORD>`</KEYWORD><FUNCTION>cat</FUNCTION><KEYWORD>`</KEYWORD>
<FUNCTION>hash</FUNCTION> <STRING>"<VARIABLE>$DATA</VARIABLE>"</STRING>
 
