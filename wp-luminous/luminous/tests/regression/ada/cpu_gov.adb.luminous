<KEYWORD>pragma</KEYWORD> License (GPL);
<COMMENT>------------------------------------------------------------------------------</COMMENT>
<COMMENT>-- Author: darkestkhan                                                      --</COMMENT>
<COMMENT>-- Email: darkestkhan@gmail.com                                             --</COMMENT>
<COMMENT>-- License: GNU GPLv3 or any later as published by Free Software Foundation --</COMMENT>
<COMMENT>-- (see README file)                                                        --</COMMENT>
<COMMENT>--                    Copyright Â© 2010 darkestkhan                          --</COMMENT>
<COMMENT>------------------------------------------------------------------------------</COMMENT>
<COMMENT>--  This Program is Free Software: You can redistribute it and/or modify    --</COMMENT>
<COMMENT>--  it under the terms of The GNU General Public License as published by    --</COMMENT>
<COMMENT>--    the Free Software Foundation, either version 3 of the license, or     --</COMMENT>
<COMMENT>--                (at Your option) any later version.                       --</COMMENT>
<COMMENT>--                                                                          --</COMMENT>
<COMMENT>--      This Program is distributed in the hope that it will be useful,     --</COMMENT>
<COMMENT>--      but WITHOUT ANY WARRANTY; without even the implied warranty of      --</COMMENT>
<COMMENT>--      MERCHANTABILITY or FITNESS for A PARTICULAR PURPOSE. See the        --</COMMENT>
<COMMENT>--              GNU General Public License for more details.                --</COMMENT>
<COMMENT>--                                                                          --</COMMENT>
<COMMENT>--    You should have received a copy of the GNU General Public License     --</COMMENT>
<COMMENT>--   along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.   --</COMMENT>
<COMMENT>------------------------------------------------------------------------------</COMMENT>
<KEYWORD>with</KEYWORD> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>;
<KEYWORD>with</KEYWORD> <OBJ>Ada</OBJ>.<OO>Integer_Text_IO</OO>;
<KEYWORD>procedure</KEYWORD> CPU_Gov <KEYWORD>is</KEYWORD>

  <KEYWORD>type</KEYWORD> Temperature <KEYWORD>is</KEYWORD> <KEYWORD>delta</KEYWORD> <NUMERIC>0.001</NUMERIC> <KEYWORD>range</KEYWORD> <OPERATOR>-</OPERATOR><NUMERIC>273.150</NUMERIC> .. <NUMERIC>130.000</NUMERIC>;
  <KEYWORD>package</KEYWORD> Temperature_IO <KEYWORD>is</KEYWORD> <KEYWORD>new</KEYWORD> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Fixed_IO</OO> (Temperature);

  <KEYWORD>type</KEYWORD> Freq_Step <KEYWORD>is</KEYWORD> (First, Second, Third, Fourth);

  <KEYWORD>type</KEYWORD> Pathname <KEYWORD>is</KEYWORD> <KEYWORD>access</KEYWORD> <TYPE>String</TYPE>;

  <KEYWORD>type</KEYWORD> CPU_Freq <KEYWORD>is</KEYWORD>
  <KEYWORD>record</KEYWORD>
    Path: Pathname;
    Min: Freq_Step;
    Max: Freq_Step;
  <KEYWORD>end</KEYWORD> <KEYWORD>record</KEYWORD>;

  Core_Meltdown: <KEYWORD>exception</KEYWORD>;

  <KEYWORD>function</KEYWORD> Freq_Step_Image (This: <OPERATOR>in</OPERATOR> Freq_Step) <KEYWORD>return</KEYWORD> <TYPE>String</TYPE> <KEYWORD>is</KEYWORD>
  <KEYWORD>begin</KEYWORD>
    <KEYWORD>case</KEYWORD> This <KEYWORD>is</KEYWORD>
      <KEYWORD>when</KEYWORD> First <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <KEYWORD>return</KEYWORD> <STRING>"1000000"</STRING>;
      <KEYWORD>when</KEYWORD> Second <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <KEYWORD>return</KEYWORD> <STRING>"1333000"</STRING>;
      <KEYWORD>when</KEYWORD> Third <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <KEYWORD>return</KEYWORD> <STRING>"1667000"</STRING>;
      <KEYWORD>when</KEYWORD> Fourth <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <KEYWORD>return</KEYWORD> <STRING>"2167000"</STRING>;
    <KEYWORD>end</KEYWORD> <KEYWORD>case</KEYWORD>;
  <KEYWORD>end</KEYWORD> Freq_Step_Image;

  <KEYWORD>function</KEYWORD> Freq_Step_Value (This: <OPERATOR>in</OPERATOR> <TYPE>String</TYPE>) <KEYWORD>return</KEYWORD> Freq_Step <KEYWORD>is</KEYWORD>
  <KEYWORD>begin</KEYWORD>
    <KEYWORD>if</KEYWORD> This <OPERATOR>=</OPERATOR> <STRING>"1000000"</STRING> <KEYWORD>then</KEYWORD>
      <KEYWORD>return</KEYWORD> First;
    <KEYWORD>elsif</KEYWORD> This <OPERATOR>=</OPERATOR> <STRING>"1333000"</STRING> <KEYWORD>then</KEYWORD>
      <KEYWORD>return</KEYWORD> Second;
    <KEYWORD>elsif</KEYWORD> This <OPERATOR>=</OPERATOR> <STRING>"1667000"</STRING> <KEYWORD>then</KEYWORD>
      <KEYWORD>return</KEYWORD> Third;
    <KEYWORD>elsif</KEYWORD> This <OPERATOR>=</OPERATOR> <STRING>"2167000"</STRING> <KEYWORD>then</KEYWORD>
      <KEYWORD>return</KEYWORD> Fourth;
    <KEYWORD>else</KEYWORD>
      <KEYWORD>raise</KEYWORD> Core_Meltdown <KEYWORD>with</KEYWORD> This;
    <KEYWORD>end</KEYWORD> <KEYWORD>if</KEYWORD>;
  <KEYWORD>exception</KEYWORD>
    <KEYWORD>when</KEYWORD> Core_Meltdown <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put_Line</OO> (<STRING>"Frequency of "</STRING> <OPERATOR>&amp;</OPERATOR> This <OPERATOR>&amp;</OPERATOR> <STRING>" caused core meltdown."</STRING>);
                          <KEYWORD>raise</KEYWORD> Program_Error;
  <KEYWORD>end</KEYWORD> Freq_Step_Value;

  <KEYWORD>function</KEYWORD> Read_Temp <KEYWORD>return</KEYWORD> Temperature <KEYWORD>is</KEYWORD>
    Sensor: <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>File_Type</OO>;
    Sensor_Name: <KEYWORD>constant</KEYWORD> <TYPE>String</TYPE> <OPERATOR>:=</OPERATOR> <STRING>"/sys/devices/virtual/thermal/thermal_zone0/temp"</STRING>;
    Reading: <TYPE>Integer</TYPE>;
  <KEYWORD>begin</KEYWORD>
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Open</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Sensor, Name <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Sensor_Name, Mode <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>In_File</OO>);
    <OBJ>Ada</OBJ>.<OO>Integer_Text_IO</OO>.<OO>Get</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Sensor, Item <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Reading);
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Close</OO> (Sensor);
    <KEYWORD>return</KEYWORD> Temperature (<TYPE>Float</TYPE> (Reading) <OPERATOR>/</OPERATOR> <NUMERIC>1_000.0</NUMERIC>);
  <KEYWORD>end</KEYWORD> Read_Temp;

  <KEYWORD>function</KEYWORD> Create_Pathname (From: <OPERATOR>in</OPERATOR> <TYPE>String</TYPE>) <KEYWORD>return</KEYWORD> Pathname <KEYWORD>is</KEYWORD>
    var: Pathname;
  <KEYWORD>begin</KEYWORD>
    var <OPERATOR>:=</OPERATOR> <KEYWORD>new</KEYWORD> <TYPE>String</TYPE> (From'<OO>First</OO> .. From'<OO>Last</OO>);
    <KEYWORD>for</KEYWORD> I <OPERATOR>in</OPERATOR> From'<OO>Range</OO> <KEYWORD>loop</KEYWORD>
      var (I) <OPERATOR>:=</OPERATOR> From (I);
    <KEYWORD>end</KEYWORD> <KEYWORD>loop</KEYWORD>;
    <KEYWORD>return</KEYWORD> var;
  <KEYWORD>end</KEYWORD> Create_Pathname;

  <KEYWORD>procedure</KEYWORD> Dec_Freq (This: <OPERATOR>in</OPERATOR> <KEYWORD>out</KEYWORD> CPU_Freq) <KEYWORD>is</KEYWORD>
    File: <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>File_Type</OO>;
  <KEYWORD>begin</KEYWORD>
    <KEYWORD>if</KEYWORD> Freq_Step'<OO>Pos</OO> (<OBJ>This</OBJ>.<OO>Max</OO>) <OPERATOR>-</OPERATOR> Freq_Step'<OO>Pos</OO> (<OBJ>This</OBJ>.<OO>Min</OO>) <OPERATOR>&gt;</OPERATOR> <NUMERIC>0</NUMERIC> <KEYWORD>then</KEYWORD>
      <OBJ>This</OBJ>.<OO>Max</OO> <OPERATOR>:=</OPERATOR> Freq_Step'<OO>Val</OO> (Freq_Step'<OO>Pos</OO> (<OBJ>This</OBJ>.<OO>Max</OO>) <OPERATOR>-</OPERATOR> <NUMERIC>1</NUMERIC>);
      <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Open</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File, Name <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> (<OBJ>This</OBJ>.<OO>Path</OO>.<OO>all</OO> <OPERATOR>&amp;</OPERATOR> <STRING>"scaling_max_freq"</STRING>), Mode <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Out_File</OO>);
      <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put_Line</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File, Item <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Freq_Step_Image (<OBJ>This</OBJ>.<OO>Max</OO>));
      <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Close</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File);
    <KEYWORD>else</KEYWORD>
      <KEYWORD>return</KEYWORD>;
    <KEYWORD>end</KEYWORD> <KEYWORD>if</KEYWORD>;
  <KEYWORD>end</KEYWORD> Dec_Freq;

  <KEYWORD>procedure</KEYWORD> Inc_Freq (This: <OPERATOR>in</OPERATOR> <KEYWORD>out</KEYWORD> CPU_Freq) <KEYWORD>is</KEYWORD>
    File: <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>File_Type</OO>;
  <KEYWORD>begin</KEYWORD>
    <KEYWORD>if</KEYWORD> <OBJ>This</OBJ>.<OO>Max</OO> <OPERATOR>/=</OPERATOR> Freq_Step'<OO>Last</OO> <KEYWORD>then</KEYWORD>
      <OBJ>This</OBJ>.<OO>Max</OO> <OPERATOR>:=</OPERATOR> Freq_Step'<OO>Val</OO> (Freq_Step'<OO>Pos</OO> (<OBJ>This</OBJ>.<OO>Max</OO>) <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>);
      <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Open</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File, Name <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> (<OBJ>This</OBJ>.<OO>Path</OO>.<OO>all</OO> <OPERATOR>&amp;</OPERATOR> <STRING>"scaling_max_freq"</STRING>), Mode <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Out_File</OO>);
      <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put_Line</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File, Item <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Freq_Step_Image (<OBJ>This</OBJ>.<OO>Max</OO>));
      <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Close</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File);
    <KEYWORD>else</KEYWORD>
      <KEYWORD>return</KEYWORD>;
    <KEYWORD>end</KEYWORD> <KEYWORD>if</KEYWORD>;
  <KEYWORD>end</KEYWORD> Inc_Freq;

  <KEYWORD>function</KEYWORD> Get_Min_Freq (This: <OPERATOR>in</OPERATOR> CPU_Freq) <KEYWORD>return</KEYWORD> Freq_Step <KEYWORD>is</KEYWORD>
    File: <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>File_Type</OO>;
    Result: Freq_Step;
  <KEYWORD>begin</KEYWORD>
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Open</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File, Name <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> (<OBJ>This</OBJ>.<OO>Path</OO>.<OO>all</OO> <OPERATOR>&amp;</OPERATOR> <STRING>"scaling_min_freq"</STRING>), Mode <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>In_File</OO>);
    Result <OPERATOR>:=</OPERATOR> Freq_Step_Value (<OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Get_Line</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File));
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Close</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File);
    <KEYWORD>return</KEYWORD> Result;
  <KEYWORD>end</KEYWORD> Get_Min_Freq;

  <KEYWORD>function</KEYWORD> Get_Max_Freq (This: <OPERATOR>in</OPERATOR> CPU_Freq) <KEYWORD>return</KEYWORD> Freq_Step <KEYWORD>is</KEYWORD>
    File: <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>File_Type</OO>;
    Result: Freq_Step;
  <KEYWORD>begin</KEYWORD>
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Open</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File, Name <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> (<OBJ>This</OBJ>.<OO>Path</OO>.<OO>all</OO> <OPERATOR>&amp;</OPERATOR> <STRING>"scaling_max_freq"</STRING>), Mode <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>In_File</OO>);
    Result <OPERATOR>:=</OPERATOR> Freq_Step_Value (<OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Get_Line</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File));
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Close</OO> (File <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> File);
    <KEYWORD>return</KEYWORD> Result;
  <KEYWORD>end</KEYWORD> Get_Max_Freq;

  <KEYWORD>procedure</KEYWORD> Init_CPU_Freq (This: <OPERATOR>in</OPERATOR> <KEYWORD>out</KEYWORD> CPU_Freq; Path: <OPERATOR>in</OPERATOR> <TYPE>String</TYPE>) <KEYWORD>is</KEYWORD>
  <KEYWORD>begin</KEYWORD>
    <OBJ>This</OBJ>.<OO>Path</OO> <OPERATOR>:=</OPERATOR> Create_Pathname (From <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> Path);
    <OBJ>This</OBJ>.<OO>Min</OO> <OPERATOR>:=</OPERATOR> Get_Min_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> This);
    <OBJ>This</OBJ>.<OO>Max</OO> <OPERATOR>:=</OPERATOR> Get_Max_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> This);
  <KEYWORD>end</KEYWORD> Init_CPU_Freq;

  <KEYWORD>procedure</KEYWORD> Print_CPU_Freq (This: <OPERATOR>in</OPERATOR> CPU_Freq) <KEYWORD>is</KEYWORD>
  <KEYWORD>begin</KEYWORD>
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put_Line</OO> (<STRING>"Path is: "</STRING> <OPERATOR>&amp;</OPERATOR> <OBJ>This</OBJ>.<OO>Path</OO>.<OO>all</OO>);
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put_Line</OO> (<STRING>"Minimum frequency is: "</STRING> <OPERATOR>&amp;</OPERATOR> Freq_Step_Image (<OBJ>This</OBJ>.<OO>Min</OO>));
    <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put_Line</OO> (<STRING>"Maximum frequency is: "</STRING> <OPERATOR>&amp;</OPERATOR> Freq_Step_Image (<OBJ>This</OBJ>.<OO>Max</OO>));
  <KEYWORD>end</KEYWORD> Print_CPU_Freq;

  <KEYWORD>procedure</KEYWORD> Actualize_Freq (This: <OPERATOR>in</OPERATOR> <KEYWORD>out</KEYWORD> CPU_Freq) <KEYWORD>is</KEYWORD>
  <KEYWORD>begin</KEYWORD>
    <OBJ>This</OBJ>.<OO>Min</OO> <OPERATOR>:=</OPERATOR> Get_Min_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> This);
    <OBJ>This</OBJ>.<OO>Max</OO> <OPERATOR>:=</OPERATOR> Get_Max_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> This);
  <KEYWORD>end</KEYWORD> Actualize_Freq;

  Temp: Temperature;
  <CONSTANT>CPU0</CONSTANT>: CPU_Freq;
  <CONSTANT>CPU1</CONSTANT>: CPU_Freq;

<KEYWORD>begin</KEYWORD>
  Init_CPU_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <CONSTANT>CPU0</CONSTANT>, Path <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <STRING>"/sys/devices/system/cpu/cpu0/cpufreq/"</STRING>);
  Init_CPU_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <CONSTANT>CPU1</CONSTANT>, Path <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <STRING>"/sys/devices/system/cpu/cpu1/cpufreq/"</STRING>);
  <KEYWORD>loop</KEYWORD>
    Temp <OPERATOR>:=</OPERATOR> Read_Temp;
    <KEYWORD>if</KEYWORD> Temp <OPERATOR>&gt;</OPERATOR> <NUMERIC>90.000</NUMERIC> <KEYWORD>then</KEYWORD>
      Actualize_Freq (<CONSTANT>CPU0</CONSTANT>);
      Dec_Freq (<CONSTANT>CPU0</CONSTANT>);
      Actualize_Freq (<CONSTANT>CPU1</CONSTANT>);
      Dec_Freq (<CONSTANT>CPU1</CONSTANT>);
    <KEYWORD>elsif</KEYWORD> Temp <OPERATOR>&lt;</OPERATOR> <NUMERIC>85.000</NUMERIC> <KEYWORD>then</KEYWORD>
      Actualize_Freq (<CONSTANT>CPU0</CONSTANT>);
      Inc_Freq (<CONSTANT>CPU0</CONSTANT>);
      Actualize_Freq (<CONSTANT>CPU1</CONSTANT>);
      Inc_Freq (<CONSTANT>CPU1</CONSTANT>);
    <KEYWORD>end</KEYWORD> <KEYWORD>if</KEYWORD>;

    <KEYWORD>goto</KEYWORD> No_Debug_Logs;
    Debug_Logs:
      <KEYWORD>declare</KEYWORD>
      <KEYWORD>begin</KEYWORD>
        <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>Put</OO> (<STRING>"Temperature is: "</STRING>);
        <OBJ>Temperature_IO</OBJ>.<OO>Put</OO> (Temp);
        <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>New_Line</OO>;
        Print_CPU_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <CONSTANT>CPU0</CONSTANT>);
        Print_CPU_Freq (This <OPERATOR>=</OPERATOR><OPERATOR>&gt;</OPERATOR> <CONSTANT>CPU1</CONSTANT>);
        <OBJ>Ada</OBJ>.<OO>Text_IO</OO>.<OO>New_Line</OO>;
      <KEYWORD>end</KEYWORD> Debug_Logs;
    <OPERATOR>&lt;</OPERATOR><OPERATOR>&lt;</OPERATOR>No_Debug_Logs<OPERATOR>&gt;</OPERATOR><OPERATOR>&gt;</OPERATOR>

    <KEYWORD>delay</KEYWORD> <NUMERIC>3.0</NUMERIC>;
  <KEYWORD>end</KEYWORD> <KEYWORD>loop</KEYWORD>;
<KEYWORD>end</KEYWORD> CPU_Gov;