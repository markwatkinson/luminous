<KEYWORD>package</KEYWORD> <OBJ>MediaWiki</OBJ><OPERATOR>::</OPERATOR><OO>Bot</OO><OPERATOR>;</OPERATOR>
<COMMENT># ABSTRACT: a MediaWiki bot framework written in Perl</COMMENT>

<KEYWORD>use</KEYWORD> strict<OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> warnings<OPERATOR>;</OPERATOR>

<KEYWORD>use</KEYWORD> <OBJ>HTML</OBJ><OPERATOR>::</OPERATOR><OO>Entities</OO> <NUMERIC>3.28</NUMERIC><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>URI</OBJ><OPERATOR>::</OPERATOR><OO>Escape</OO> <NUMERIC>1.35</NUMERIC><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>XML</OBJ><OPERATOR>::</OPERATOR><OO>Simple</OO> <NUMERIC>2.16</NUMERIC><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> Carp<OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>URI</OBJ><OPERATOR>::</OPERATOR><OO>Escape</OO> <DELIMITER>qw(</DELIMITER><STRING>uri_escape_utf8</STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>Digest</OBJ><OPERATOR>::</OPERATOR><OO>MD5</OO> <NUMERIC>2.39</NUMERIC> <DELIMITER>qw(</DELIMITER><STRING>md5_hex</STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> Encode <DELIMITER>qw(</DELIMITER><STRING>encode_utf8</STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>MediaWiki</OBJ><OPERATOR>::</OPERATOR><OO>API</OO> <NUMERIC>0.20</NUMERIC><OPERATOR>;</OPERATOR>

<KEYWORD>use</KEYWORD> <OBJ>Module</OBJ><OPERATOR>::</OPERATOR><OO>Pluggable</OO> search_path <OPERATOR>=&gt;</OPERATOR> [<DELIMITER>qw(</DELIMITER><STRING>MediaWiki::Bot::Plugin</STRING><DELIMITER>)</DELIMITER>]<OPERATOR>,</OPERATOR> <STRING>'require'</STRING> <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
<KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$plugin</VARIABLE> (<OBJ>__PACKAGE__</OBJ><OPERATOR>-&gt;</OPERATOR><OO>plugins</OO>) {

    <COMMENT>#print "Found plugin $plugin\n";</COMMENT>
    <VARIABLE>$plugin</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>import</OO>()<OPERATOR>;</OPERATOR>
}

<KEYWORD>our</KEYWORD> <VARIABLE>$VERSION</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'3.2.6'</STRING><OPERATOR>;</OPERATOR>

<DOCCOMMENT>=head1 SYNOPSIS</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    use MediaWiki::Bot;</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $bot = MediaWiki::Bot-&gt;new({</DOCCOMMENT>
<DOCCOMMENT>        assert      =&gt; 'bot',</DOCCOMMENT>
<DOCCOMMENT>        protocol    =&gt; 'https',</DOCCOMMENT>
<DOCCOMMENT>        host        =&gt; 'secure.wikimedia.org',</DOCCOMMENT>
<DOCCOMMENT>        path        =&gt; 'wikipedia/meta/w',</DOCCOMMENT>
<DOCCOMMENT>        login_data  =&gt; { username =&gt; "Mike's bot account", password =&gt; "password" },</DOCCOMMENT>
<DOCCOMMENT>    });</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $revid = $bot-&gt;get_last("User:Mike.lifeguard/sandbox", "Mike.lifeguard");</DOCCOMMENT>
<DOCCOMMENT>    print "Reverting to $revid\n" if defined($revid);</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;revert('User:Mike.lifeguard', $revid, 'rvv');</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=head1 DESCRIPTION</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>MediaWiki::Bot is a framework that can be used to write bots which interface</DOCCOMMENT>
<DOCCOMMENT>with the MediaWiki API (L&lt;http://en.wikipedia.org/w/api.php&gt;).</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=head1 METHODS</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=head2 new($options_hashref)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Calling MediaWiki::Bot-&gt;new() will create a new MediaWiki::Bot object.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=over 4</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>agent sets a custom useragent</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>assert sets a parameter for the AssertEdit extension (commonly 'bot'). Refer to L&lt;http://mediawiki.org/wiki/Extension:AssertEdit&gt;.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>operator allows the bot to send you a message when it fails an assert, and will be integrated into the default useragent (which may not be used if you set agent yourself). The message will tell you that $useragent is logged out, so use a descriptive one if you set it.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>maxlag allows you to set the maxlag parameter (default is the recommended 5s). Please refer to the MediaWiki documentation prior to changing this from the default.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>protocol allows you to specify 'http' or 'https' (default is 'http'). This is commonly used with the domain and path settings below.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>host sets the domain name of the wiki to connect to.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>path sets the path to api.php (with no leading or trailing slash).</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>login_data is a hashref of credentials to pass to login(). See that section for a description.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>debug is whether to provide debug output. 1 provides only error messages; 2 provides further detail on internal operations.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=back</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>For example:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $bot = MediaWiki::Bot-&gt;new({</DOCCOMMENT>
<DOCCOMMENT>        assert      =&gt; 'bot',</DOCCOMMENT>
<DOCCOMMENT>        protocol    =&gt; 'https',</DOCCOMMENT>
<DOCCOMMENT>        host        =&gt; 'secure.wikimedia.org',</DOCCOMMENT>
<DOCCOMMENT>        path        =&gt; 'wikipedia/meta/w',</DOCCOMMENT>
<DOCCOMMENT>        login_data  =&gt; { username =&gt; "Mike's bot account", password =&gt; "password" },</DOCCOMMENT>
<DOCCOMMENT>    });</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>For backward compatibility, you can specify up to three parameters:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $bot = MediaWiki::Bot-&gt;new('MediaWiki::Bot 2.3.1 (User:Mike.lifeguard)', $assert, $operator);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This deprecated form will never do auto-login or autoconfiguration.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> new {
    <KEYWORD>my</KEYWORD> <VARIABLE>$package</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$agent</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$assert</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$operator</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$maxlag</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$protocol</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$host</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$path</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$login_data</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$debug</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>eq</OPERATOR> <STRING>'HASH'</STRING>) {
        <VARIABLE>$agent</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'agent'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$assert</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'assert'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$operator</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'operator'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$maxlag</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'maxlag'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$protocol</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$host</VARIABLE>       <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$path</VARIABLE>       <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'path'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$login_data</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'login_data'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$debug</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$agent</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$assert</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$operator</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$maxlag</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$protocol</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$host</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$path</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$debug</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    }

    <VARIABLE>$assert</VARIABLE>   <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>[&amp;?]assert=</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER> <KEYWORD>if</KEYWORD> <VARIABLE>$assert</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># Strip out param part, leaving just the value</COMMENT>
    <VARIABLE>$operator</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD>     <KEYWORD>if</KEYWORD> <VARIABLE>$operator</VARIABLE><OPERATOR>;</OPERATOR>

    <COMMENT># Set defaults</COMMENT>
    <KEYWORD>unless</KEYWORD> (<VARIABLE>$agent</VARIABLE>) {
        <VARIABLE>$agent</VARIABLE>  <OPERATOR>=</OPERATOR> <STRING>"MediaWiki::Bot/$VERSION"</STRING><OPERATOR>;</OPERATOR>
        <VARIABLE>$agent</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>" (User:$operator)"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$operator</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>bless</KEYWORD>({}<OPERATOR>,</OPERATOR> <VARIABLE>$package</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{errstr}   <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{assert}   <OPERATOR>=</OPERATOR> <VARIABLE>$assert</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{operator} <OPERATOR>=</OPERATOR> <VARIABLE>$operator</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$debug</VARIABLE> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}      <OPERATOR>=</OPERATOR> <OBJ>MediaWiki</OBJ><OPERATOR>::</OPERATOR><OO>API</OO><OPERATOR>-&gt;</OPERATOR><OO>new</OO>()<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR><OO>agent</OO>(<VARIABLE>$agent</VARIABLE>)<OPERATOR>;</OPERATOR>

    <COMMENT># Set wiki (handles setting $self-&gt;{host} etc)</COMMENT>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>set_wiki</OO>({
            protocol <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$protocol</VARIABLE><OPERATOR>,</OPERATOR>
            host     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$host</VARIABLE><OPERATOR>,</OPERATOR>
            path     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$path</VARIABLE><OPERATOR>,</OPERATOR>
    })<OPERATOR>;</OPERATOR>

    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{max_lag}         <OPERATOR>=</OPERATOR> <VARIABLE>$maxlag</VARIABLE> <OPERATOR>||</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{max_lag_delay}   <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{retries}         <OPERATOR>=</OPERATOR> <NUMERIC>5</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{max_lag_retries} <OPERATOR>=</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{retry_delay}     <OPERATOR>=</OPERATOR> <NUMERIC>30</NUMERIC><OPERATOR>;</OPERATOR>

    <COMMENT># Log-in, and maybe autoconfigure</COMMENT>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$login_data</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$success</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>login</OO>(<VARIABLE>$login_data</VARIABLE>)<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<VARIABLE>$success</VARIABLE>) {
            <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>;</OPERATOR>
        }
        <KEYWORD>else</KEYWORD> {
            carp <STRING>"Couldn't log in with supplied settings"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
            <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
        }
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 set_wiki($options)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Set what wiki to use. Host is the domain name; path is the path before api.php (usually 'w'); protocol is either 'http' or 'https'. For example:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;set_wiki(</DOCCOMMENT>
<DOCCOMMENT>        protocol    =&gt; 'https',</DOCCOMMENT>
<DOCCOMMENT>        host        =&gt; 'secure.wikimedia.org',</DOCCOMMENT>
<DOCCOMMENT>        path        =&gt; 'wikipedia/meta/w',</DOCCOMMENT>
<DOCCOMMENT>    );</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>For backward compatibility, you can specify up to two parameters in this deprecated form:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;set_wiki($host, $path);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>If you don't set any parameter, it's previous value is used. If it has never been set, the default settings are 'http', 'en.wikipedia.org' and 'w'.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> set_wiki {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$host</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$path</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$protocol</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>eq</OPERATOR> <STRING>'HASH'</STRING>) {
        <VARIABLE>$host</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$path</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'path'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$protocol</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$host</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$path</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    }

    <COMMENT># Set defaults</COMMENT>
    <VARIABLE>$protocol</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>} <OPERATOR>||</OPERATOR> <STRING>'http'</STRING>             <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$protocol</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$host</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>}     <OPERATOR>||</OPERATOR> <STRING>'en.wikipedia.org'</STRING> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$host</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$path</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'path'</STRING>}     <OPERATOR>||</OPERATOR> <STRING>'w'</STRING>                <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$path</VARIABLE>)<OPERATOR>;</OPERATOR>

    <COMMENT># Clean up the parts we will build a URL with</COMMENT>
    <VARIABLE>$protocol</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s,</DELIMITER><REGEX>://$</REGEX><DELIMITER>,</DELIMITER><STRING></STRING><DELIMITER>,</DELIMITER><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$host</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m,</DELIMITER><REGEX>^(http|https)(://)?</REGEX><DELIMITER>,</DELIMITER> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><VARIABLE>$protocol</VARIABLE>) {
        <VARIABLE>$protocol</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$1</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$host</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s,</DELIMITER><REGEX>^https?://</REGEX><DELIMITER>,</DELIMITER><STRING></STRING><DELIMITER>,</DELIMITER><OPERATOR>;</OPERATOR>
    <VARIABLE>$host</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s,</DELIMITER><REGEX>/$</REGEX><DELIMITER>,</DELIMITER><STRING></STRING><DELIMITER>,</DELIMITER><OPERATOR>;</OPERATOR>
    <VARIABLE>$path</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s,</DELIMITER><REGEX>/$</REGEX><DELIMITER>,</DELIMITER><STRING></STRING><DELIMITER>,</DELIMITER><OPERATOR>;</OPERATOR>

    <COMMENT># Invalidate wiki-specific cached data</COMMENT>
    <KEYWORD>if</KEYWORD> (   ((<KEYWORD>defined</KEYWORD>(<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>})) <OPERATOR>and</OPERATOR> (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>} <OPERATOR>ne</OPERATOR> <VARIABLE>$host</VARIABLE>))
        <OPERATOR>or</OPERATOR> ((<KEYWORD>defined</KEYWORD>(<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'path'</STRING>})) <OPERATOR>and</OPERATOR> (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'path'</STRING>} <OPERATOR>ne</OPERATOR> <VARIABLE>$path</VARIABLE>))
        <OPERATOR>or</OPERATOR> ((<KEYWORD>defined</KEYWORD>(<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>})) <OPERATOR>and</OPERATOR> (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>} <OPERATOR>ne</OPERATOR> <VARIABLE>$protocol</VARIABLE>))
    ) {
        <KEYWORD>delete</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'ns_data'</STRING>} <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'ns_data'</STRING>}<OPERATOR>;</OPERATOR>
    }

    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{protocol} <OPERATOR>=</OPERATOR> <VARIABLE>$protocol</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{host}     <OPERATOR>=</OPERATOR> <VARIABLE>$host</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{path}     <OPERATOR>=</OPERATOR> <VARIABLE>$path</VARIABLE><OPERATOR>;</OPERATOR>

    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{api_url} <OPERATOR>=</OPERATOR> <VARIABLE>$path</VARIABLE>
        <OPERATOR>?</OPERATOR> <STRING>"$protocol://$host/$path/api.php"</STRING>
        <OPERATOR>:</OPERATOR> <STRING>"$protocol://$host/api.php"</STRING><OPERATOR>;</OPERATOR> <COMMENT># $path is '', so don't use http://domain.com//api.php</COMMENT>
    <FUNCTION>warn</FUNCTION> <STRING>"Wiki set to "</STRING> <OPERATOR>.</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}{api_url} <OPERATOR>.</OPERATOR> <STRING>"<ESC>\n</ESC>"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 login($login_hashref)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Logs the use $username in, optionally using $password. First, an attempt will be made to use cookies to log in. If this fails, an attempt will be made to use the password provided to log in, if any. If the login was successful, returns true; false otherwise.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;login({</DOCCOMMENT>
<DOCCOMMENT>        username =&gt; $username,</DOCCOMMENT>
<DOCCOMMENT>        password =&gt; $password,</DOCCOMMENT>
<DOCCOMMENT>    }) or die "Login failed";</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Once logged in, attempt to do some simple auto-configuration. At present, this consists of:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=over 4</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Warning if the account doesn't have the bot flag, and isn't a sysop account.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Setting the use of apihighlimits if the account has that userright.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Setting an appropriate default assert.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=back</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>You can skip this autoconfiguration by passing C&lt;autoconfig =E&lt;gt&gt; 0&gt;</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=head3 Single User Login</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>On WMF wikis, C&lt;do_sul&gt; specifies whether to log in on all projects. The default is false. But even when false, you still get a CentralAuth cookie for, and are thus logged in on, all languages of a given domain (*.wikipedia.org, for example). When set, a login is done on each WMF domain so you are logged in on all ~800 content wikis. Since C&lt;*.wikimedia.org&gt; is not possible, we explicitly include meta, commons, incubator, and wikispecies. When C&lt;do_sul&gt; is set, the return is the number of domains that login was successful for. This allows callers to do the following:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;login({</DOCCOMMENT>
<DOCCOMMENT>        username    =&gt; $username,</DOCCOMMENT>
<DOCCOMMENT>        password    =&gt; $password,</DOCCOMMENT>
<DOCCOMMENT>        do_sul      =&gt; 1,</DOCCOMMENT>
<DOCCOMMENT>    }) or die "SUL failed";</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>For backward compatibility, you can call this as</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;login($username, $password);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This deprecated form will never do autoconfiguration or SUL login.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>If you need to supply basic auth credentials, pass a hashref of data as described by L&lt;LWP::UserAgent&gt;:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;login({</DOCCOMMENT>
<DOCCOMMENT>        username    =&gt; $username,</DOCCOMMENT>
<DOCCOMMENT>        password    =&gt; $password,</DOCCOMMENT>
<DOCCOMMENT>        basic_auth  =&gt; {    netloc  =&gt; "private.wiki.com:80",</DOCCOMMENT>
<DOCCOMMENT>                            realm   =&gt; "Authentication Realm",</DOCCOMMENT>
<DOCCOMMENT>                            uname   =&gt; "Basic auth username",</DOCCOMMENT>
<DOCCOMMENT>                            pass    =&gt; "password",</DOCCOMMENT>
<DOCCOMMENT>                        }</DOCCOMMENT>
<DOCCOMMENT>    }) or die "Couldn't log in";</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> login {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$username</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$password</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$lgdomain</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$autoconfig</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$basic_auth</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$do_sul</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>eq</OPERATOR> <STRING>'HASH'</STRING>) {
        <VARIABLE>$username</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'username'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$password</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'password'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$autoconfig</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>defined</KEYWORD>(<VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'autoconfig'</STRING>}) <OPERATOR>?</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'autoconfig'</STRING>} <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        <VARIABLE>$basic_auth</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'basic_auth'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$do_sul</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'do_sul'</STRING>} <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
        <VARIABLE>$lgdomain</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'lgdomain'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$username</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$password</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$autoconfig</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
        <VARIABLE>$do_sul</VARIABLE>     <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'username'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>;</OPERATOR>    <COMMENT># Remember who we are</COMMENT>

    <COMMENT># Handle basic auth first, if needed</COMMENT>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$basic_auth</VARIABLE>) {
        <FUNCTION>warn</FUNCTION> <STRING>"Applying basic auth credentials"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR><OO>credentials</OO>(
            <VARIABLE>$basic_auth</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'netloc'</STRING>}<OPERATOR>,</OPERATOR>
            <VARIABLE>$basic_auth</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'realm'</STRING>}<OPERATOR>,</OPERATOR>
            <VARIABLE>$basic_auth</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'uname'</STRING>}<OPERATOR>,</OPERATOR>
            <VARIABLE>$basic_auth</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'pass'</STRING>}
        )<OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$do_sul</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC> <KEYWORD>if</KEYWORD> (
        (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>} <OPERATOR>eq</OPERATOR> <STRING>'https'</STRING>) <OPERATOR>and</OPERATOR>
        (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>} <OPERATOR>eq</OPERATOR> <STRING>'secure.wikimedia.org'</STRING>) )<OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$do_sul</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$debug</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>   <COMMENT># Remember this for later</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$host</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'host'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$path</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'path'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$protocol</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'protocol'</STRING>}<OPERATOR>;</OPERATOR>

        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>           <COMMENT># Turn off debugging for these internal calls</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>@logins</VARIABLE><OPERATOR>;</OPERATOR>                     <COMMENT># Keep track of our successes</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>@WMF_projects</VARIABLE> <OPERATOR>=</OPERATOR> <DELIMITER>qw(</DELIMITER><STRING></STRING>
            <STRING>en.wikipedia.org</STRING>
            <STRING>en.wiktionary.org</STRING>
            <STRING>en.wikibooks.org</STRING>
            <STRING>en.wikinews.org</STRING>
            <STRING>en.wikiquote.org</STRING>
            <STRING>en.wikisource.org</STRING>
            <STRING>en.wikiversity.org</STRING>
            <STRING>meta.wikimedia.org</STRING>
            <STRING>commons.wikimedia.org</STRING>
            <STRING>species.wikimedia.org</STRING>
            <STRING>incubator.wikimedia.org</STRING>
        <STRING></STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>

        SUL<OPERATOR>:</OPERATOR> <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$project</VARIABLE> (<VARIABLE>@WMF_projects</VARIABLE>) {
            <FUNCTION>print</FUNCTION> <CONSTANT>STDERR</CONSTANT> <STRING>"Logging in on $project..."</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$debug</VARIABLE> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>set_wiki</OO>({
                host    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$project</VARIABLE><OPERATOR>,</OPERATOR>
            })<OPERATOR>;</OPERATOR>
            <KEYWORD>my</KEYWORD> <VARIABLE>$success</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>login</OO>({
                username    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>,</OPERATOR>
                password    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$password</VARIABLE><OPERATOR>,</OPERATOR>
                lgdomain    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$lgdomain</VARIABLE><OPERATOR>,</OPERATOR>
                do_sul      <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
                autoconfig  <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
            })<OPERATOR>;</OPERATOR>
            <FUNCTION>warn</FUNCTION> (<VARIABLE>$success</VARIABLE> <OPERATOR>?</OPERATOR> <STRING>" OK<ESC>\n</ESC>"</STRING> <OPERATOR>:</OPERATOR> <STRING>" FAILED<ESC>\n</ESC>"</STRING>) <KEYWORD>if</KEYWORD> <VARIABLE>$debug</VARIABLE> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            <FUNCTION>push</FUNCTION>(<VARIABLE>@logins</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$success</VARIABLE>)<OPERATOR>;</OPERATOR>
        }
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>set_wiki</OO>({           <COMMENT># Switch back to original wiki</COMMENT>
            protocol <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$protocol</VARIABLE><OPERATOR>,</OPERATOR>
            host     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$host</VARIABLE><OPERATOR>,</OPERATOR>
            path     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$path</VARIABLE><OPERATOR>,</OPERATOR>
        })<OPERATOR>;</OPERATOR>

        <KEYWORD>my</KEYWORD> <VARIABLE>$sum</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
        <VARIABLE>$sum</VARIABLE> <OPERATOR>+=</OPERATOR> <VARIABLE>$_</VARIABLE> <KEYWORD>for</KEYWORD> <VARIABLE>@logins</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$total</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>scalar</KEYWORD> <VARIABLE>@WMF_projects</VARIABLE><OPERATOR>;</OPERATOR>
        <FUNCTION>warn</FUNCTION> <STRING>"$sum/$total logins succeeded<ESC>\n</ESC>"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$debug</VARIABLE> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$debug</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># Reset debug to it's old value</COMMENT>

        <KEYWORD>return</KEYWORD> <VARIABLE>$sum</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$cookies</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>".mediawiki-bot-$username-cookies"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<OPERATOR>-</OPERATOR>r <VARIABLE>$cookies</VARIABLE>) {
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR>{cookie_jar}<OPERATOR>-&gt;</OPERATOR><OO>load</OO>(<VARIABLE>$cookies</VARIABLE>)<OPERATOR>;</OPERATOR>
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR>{cookie_jar}<OPERATOR>-&gt;</OPERATOR>{ignore_discard} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

        <KEYWORD>my</KEYWORD> <VARIABLE>$logged_in</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_is_loggedin</OO>()<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<VARIABLE>$logged_in</VARIABLE>) {
            <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_do_autoconfig</OO>() <KEYWORD>if</KEYWORD> <VARIABLE>$autoconfig</VARIABLE><OPERATOR>;</OPERATOR>
            <FUNCTION>warn</FUNCTION> <STRING>"Logged in successfully with cookies"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT># If we're already logged in, nothing more is needed</COMMENT>
        }
    }

    <KEYWORD>unless</KEYWORD> (<VARIABLE>$password</VARIABLE>) {
        carp <STRING>"No login cookies available, and no password to continue with authentication"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'login'</STRING><OPERATOR>,</OPERATOR>
        lgname      <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>,</OPERATOR>
        lgpassword  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$password</VARIABLE><OPERATOR>,</OPERATOR>
        lgdomain    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$lgdomain</VARIABLE>
    }) <OPERATOR>or</OPERATOR> <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>()<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR>{cookie_jar}<OPERATOR>-&gt;</OPERATOR><OO>extract_cookies</OO>(<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{response})<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR>{cookie_jar}<OPERATOR>-&gt;</OPERATOR><OO>save</OO>(<VARIABLE>$cookies</VARIABLE>) <KEYWORD>if</KEYWORD> (<OPERATOR>-</OPERATOR>w(<VARIABLE>$cookies</VARIABLE>) <OPERATOR>or</OPERATOR> <OPERATOR>-</OPERATOR>w(<STRING>'.'</STRING>))<OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'result'</STRING>} <OPERATOR>eq</OPERATOR> <STRING>'NeedToken'</STRING>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$token</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'token'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
            action      <OPERATOR>=&gt;</OPERATOR> <STRING>'login'</STRING><OPERATOR>,</OPERATOR>
            lgname      <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>,</OPERATOR>
            lgpassword  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$password</VARIABLE><OPERATOR>,</OPERATOR>
            lgdomain    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$lgdomain</VARIABLE><OPERATOR>,</OPERATOR>
            lgtoken     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$token</VARIABLE><OPERATOR>,</OPERATOR>
        }) <OPERATOR>or</OPERATOR> <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>()<OPERATOR>;</OPERATOR>

        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR>{cookie_jar}<OPERATOR>-&gt;</OPERATOR><OO>extract_cookies</OO>(<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{response})<OPERATOR>;</OPERATOR>
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR>{cookie_jar}<OPERATOR>-&gt;</OPERATOR><OO>save</OO>(<VARIABLE>$cookies</VARIABLE>) <KEYWORD>if</KEYWORD> (<OPERATOR>-</OPERATOR>w(<VARIABLE>$cookies</VARIABLE>) <OPERATOR>or</OPERATOR> <OPERATOR>-</OPERATOR>w(<STRING>'.'</STRING>))<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>if</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'result'</STRING>} <OPERATOR>eq</OPERATOR> <STRING>'Success'</STRING>) {
        <KEYWORD>if</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'lgusername'</STRING>} <OPERATOR>eq</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'username'</STRING>}) {
            <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_do_autoconfig</OO>() <KEYWORD>if</KEYWORD> <VARIABLE>$autoconfig</VARIABLE><OPERATOR>;</OPERATOR>
            <FUNCTION>warn</FUNCTION> <STRING>"Logged in successfully with password"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        }
    }

    <KEYWORD>return</KEYWORD> (
        (<KEYWORD>defined</KEYWORD>(<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'lgusername'</STRING>})) <OPERATOR>and</OPERATOR>
        (<KEYWORD>defined</KEYWORD>(<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'result'</STRING>})) <OPERATOR>and</OPERATOR>
        (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'lgusername'</STRING>} <OPERATOR>eq</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'username'</STRING>}) <OPERATOR>and</OPERATOR>
        (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'login'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'result'</STRING>} <OPERATOR>eq</OPERATOR> <STRING>'Success'</STRING>)
    )<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 set_highlimits($flag)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Tells MediaWiki::Bot to start/stop using APIHighLimits for certain queries.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;set_highlimits(1);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> set_highlimits {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>       <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$highlimits</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>defined</KEYWORD>(<VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]) <OPERATOR>?</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>:</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{highlimits} <OPERATOR>=</OPERATOR> <VARIABLE>$highlimits</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 logout()</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>The logout procedure deletes the login tokens and other browser cookies.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;logout();</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> logout {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'logout'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 edit($options_hashref)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Puts text on a page. If provided, use a specified edit summary, mark the edit as minor, as a non-bot edit, or add an assertion. Set section to edit a single section instead of the whole page. An MD5 hash is sent to guard against data corruption while in transit.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $text = $bot-&gt;get_text('My page');</DOCCOMMENT>
<DOCCOMMENT>    $text .= "\n\n* More text\n";</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;edit({</DOCCOMMENT>
<DOCCOMMENT>        page    =&gt; 'My page',</DOCCOMMENT>
<DOCCOMMENT>        text    =&gt; $text,</DOCCOMMENT>
<DOCCOMMENT>        summary =&gt; 'Adding new content',</DOCCOMMENT>
<DOCCOMMENT>        section =&gt; 'new',</DOCCOMMENT>
<DOCCOMMENT>    });</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>You can also call this using the deprecated form:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;edit($page, $text, $summary, $is_minor, $assert, $markasbot);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> edit {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$text</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$summary</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$is_minor</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$assert</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$markasbot</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$section</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>eq</OPERATOR> <STRING>'HASH'</STRING>) {
        <VARIABLE>$page</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'page'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$text</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'text'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$summary</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'summary'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$is_minor</VARIABLE>  <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'is_minor'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$assert</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'assert'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$markasbot</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'markasbot'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$section</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'section'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$page</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$text</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$summary</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$is_minor</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$assert</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$markasbot</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$section</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    }

    <COMMENT># Set defaults</COMMENT>
    <VARIABLE>$summary</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'BOT: Changing page text'</STRING> <KEYWORD>unless</KEYWORD> <VARIABLE>$summary</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$assert</VARIABLE>) {
        <VARIABLE>$assert</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^[&amp;?]assert=</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$assert</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'assert'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$is_minor</VARIABLE>  <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$is_minor</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$markasbot</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$markasbot</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> (<VARIABLE>$edittoken</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$lastedit</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$tokentime</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_edittoken</OO>(<VARIABLE>$page</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$edittoken</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action         <OPERATOR>=&gt;</OPERATOR> <STRING>'edit'</STRING><OPERATOR>,</OPERATOR>
        title          <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        token          <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$edittoken</VARIABLE><OPERATOR>,</OPERATOR>
        text           <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$text</VARIABLE><OPERATOR>,</OPERATOR>
        md5            <OPERATOR>=&gt;</OPERATOR> md5_hex(encode_utf8(<VARIABLE>$text</VARIABLE>))<OPERATOR>,</OPERATOR>    <COMMENT># Guard against data corruption</COMMENT>
                                                          <COMMENT># Pass only bytes to md5_hex()</COMMENT>
        summary        <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$summary</VARIABLE><OPERATOR>,</OPERATOR>
        basetimestamp  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$lastedit</VARIABLE><OPERATOR>,</OPERATOR>                      <COMMENT># Guard against edit conflicts</COMMENT>
        starttimestamp <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$tokentime</VARIABLE><OPERATOR>,</OPERATOR>                     <COMMENT># Guard against the page being deleted/moved</COMMENT>
        bot            <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$markasbot</VARIABLE><OPERATOR>,</OPERATOR>
        assert         <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$assert</VARIABLE><OPERATOR>,</OPERATOR>
        minor          <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$is_minor</VARIABLE><OPERATOR>,</OPERATOR>
        section        <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$section</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>delete</KEYWORD> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'section'</STRING>} <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$section</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'api'</STRING>}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'edit'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'result'</STRING>} <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'edit'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'result'</STRING>} <OPERATOR>eq</OPERATOR> <STRING>'Failure'</STRING>) {
        <KEYWORD>if</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'operator'</STRING>}) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$optalk</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_text</OO>(<STRING>'User talk:'</STRING> <OPERATOR>.</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'operator'</STRING>})<OPERATOR>;</OPERATOR>
            <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$optalk</VARIABLE>)) {
                carp <STRING>"Sending warning!"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
                <KEYWORD>if</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'username'</STRING>}) {
                    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>edit</OO>(
                        page     <OPERATOR>=&gt;</OPERATOR> <STRING>"User talk:$self-&gt;{'operator'}"</STRING><OPERATOR>,</OPERATOR>
                        text     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$optalk</VARIABLE>
                                    <OPERATOR>.</OPERATOR> <STRING>"<ESC>\n</ESC><ESC>\n</ESC>==Error with $self-&gt;{'username'}==<ESC>\n</ESC>"</STRING>
                                    <OPERATOR>.</OPERATOR> <STRING>"$self-&gt;{'username'} needs to be logged in! ~~~~"</STRING><OPERATOR>,</OPERATOR>
                        summary  <OPERATOR>=&gt;</OPERATOR> <STRING>'bot issue'</STRING><OPERATOR>,</OPERATOR>
                        is_minor <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
                        assert   <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
                    )<OPERATOR>;</OPERATOR>
                    croak <STRING>"$self-&gt;{'username'} got logged out"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
                }
                <KEYWORD>else</KEYWORD> { <COMMENT># The bot wasn't ever supposed to be logged in</COMMENT>
                    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>edit</OO>(
                        page     <OPERATOR>=&gt;</OPERATOR> <STRING>"User talk:$self-&gt;{'operator'}"</STRING><OPERATOR>,</OPERATOR>
                        text     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$optalk</VARIABLE>
                                    <OPERATOR>.</OPERATOR> <STRING>"<ESC>\n</ESC><ESC>\n</ESC>==Error with your bot==<ESC>\n</ESC>"</STRING>
                                    <OPERATOR>.</OPERATOR> <STRING>"Your bot encountered an error. ~~~~"</STRING><OPERATOR>,</OPERATOR>
                        summary  <OPERATOR>=&gt;</OPERATOR> <STRING>'bot issue'</STRING><OPERATOR>,</OPERATOR>
                        is_minor <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
                        assert   <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
                    )<OPERATOR>;</OPERATOR>
                    croak <STRING>"Bot encountered an error while editing"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
                }
            }
        }
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 move($from, $to, $reason, $options_hashref)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This moves a page from $from to $to. If you wish to specify more options (like whether to suppress creation of a redirect), use $options_hashref.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=over 4</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>movetalk specifies whether to attempt to the talk page.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>noredirect specifies whether to suppress creation of a redirect.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>movesubpages specifies whether to move subpages, if applicable.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>watch and unwatch add or remove the page and the redirect from your watchlist.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>ignorewarnings ignores warnings.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=back</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = ("Humor", "Rumor");</DOCCOMMENT>
<DOCCOMMENT>    foreach my $page (@pages) {</DOCCOMMENT>
<DOCCOMMENT>        my $to = $page;</DOCCOMMENT>
<DOCCOMMENT>        $to =~ s/or$/our/;</DOCCOMMENT>
<DOCCOMMENT>        $bot-&gt;move($page, $to, "silly 'merricans");</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> move {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$from</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$to</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$reason</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$opts</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'move'</STRING><OPERATOR>,</OPERATOR>
        from   <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$from</VARIABLE><OPERATOR>,</OPERATOR>
        to     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$to</VARIABLE><OPERATOR>,</OPERATOR>
        reason <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$reason</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'movetalk'</STRING>}   <OPERATOR>=</OPERATOR> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'movetalk'</STRING>}   <KEYWORD>if</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'movetalk'</STRING>})<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'noredirect'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'noredirect'</STRING>} <KEYWORD>if</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'noredirect'</STRING>})<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>edit</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># should we return something more useful?</COMMENT>
}

<DOCCOMMENT>=head2 get_history($pagename[,$limit])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing the history of the specified page, with $limit number of revisions (default is as many as possible). The array structure contains 'revid', 'user', 'comment', 'timestamp_date', and 'timestamp_time'.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_history {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$pagename</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$limit</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'max'</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$rvstartid</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$direction</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>@revisions</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        prop    <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
        titles  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$pagename</VARIABLE><OPERATOR>,</OPERATOR>
        rvprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'ids|timestamp|user|comment'</STRING><OPERATOR>,</OPERATOR>
        rvlimit <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$limit</VARIABLE>
    }<OPERATOR>;</OPERATOR>

    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{rvstartid} <OPERATOR>=</OPERATOR> <VARIABLE>$rvstartid</VARIABLE> <KEYWORD>if</KEYWORD> (<VARIABLE>$rvstartid</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{direction} <OPERATOR>=</OPERATOR> <VARIABLE>$direction</VARIABLE> <KEYWORD>if</KEYWORD> (<VARIABLE>$direction</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE>) <OPERATOR>=</OPERATOR> <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$array</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{revisions}<OPERATOR>;</OPERATOR>

    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> (@{<VARIABLE>$array</VARIABLE>}) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$revid</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{revid}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE>  <OPERATOR>=</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{user}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> (<VARIABLE>$timestamp_date</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$timestamp_time</VARIABLE>) <OPERATOR>=</OPERATOR> <FUNCTION>split</FUNCTION>(<DELIMITER>/</DELIMITER><REGEX>T</REGEX><DELIMITER>/</DELIMITER><OPERATOR>,</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{timestamp})<OPERATOR>;</OPERATOR>
        <VARIABLE>$timestamp_time</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>Z$</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$comment</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{comment}<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION>(
            <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR>
            {
                revid          <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$revid</VARIABLE><OPERATOR>,</OPERATOR>
                user           <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$user</VARIABLE><OPERATOR>,</OPERATOR>
                timestamp_date <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$timestamp_date</VARIABLE><OPERATOR>,</OPERATOR>
                timestamp_time <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$timestamp_time</VARIABLE><OPERATOR>,</OPERATOR>
                comment        <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$comment</VARIABLE><OPERATOR>,</OPERATOR>
            })<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_text($pagename,[$revid,$section_number])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an the wikitext of the specified page. If $revid is defined, it will return the text of that revision; if $section_number is defined, it will return the text of that section. A blank page will return wikitext of "" (which evaluates to false in Perl, but is defined); a nonexistent page will return undef (which also evaluates to false in Perl, but is obviously undefined). You can distinguish between blank and nonexistent by using defined():</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $wikitext = $bot-&gt;get_text('Page title');</DOCCOMMENT>
<DOCCOMMENT>    print "Wikitext: $wikitext\n" if defined $wikitext;</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_text {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$pagename</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$revid</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$section</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        titles <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$pagename</VARIABLE><OPERATOR>,</OPERATOR>
        prop   <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
        rvprop <OPERATOR>=&gt;</OPERATOR> <STRING>'content'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{rvstartid} <OPERATOR>=</OPERATOR> <VARIABLE>$revid</VARIABLE>   <KEYWORD>if</KEYWORD> (<VARIABLE>$revid</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{rvsection} <OPERATOR>=</OPERATOR> <VARIABLE>$section</VARIABLE> <KEYWORD>if</KEYWORD> (<VARIABLE>$section</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$data</VARIABLE>) <OPERATOR>=</OPERATOR> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$id</VARIABLE> <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>) {    <COMMENT># Page doesn't exist</COMMENT>
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {              <COMMENT># Page exists</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$wikitext</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{revisions}[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'*'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD> <VARIABLE>$wikitext</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 get_id($pagename)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns the id of the specified page. Returns undef if page does not exist.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $pageid = $bot-&gt;get_id("Main Page");</DOCCOMMENT>
<DOCCOMMENT>    croak "Page doesn't exist\n" if !defined($pageid);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_id {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$pagename</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        titles <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$pagename</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$data</VARIABLE>) <OPERATOR>=</OPERATOR> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$id</VARIABLE> <OPERATOR>==</OPERATOR> <OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD> <VARIABLE>$id</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 get_pages(\@pages)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns the text of the specified pages in a hashref. Content of undef means page does not exist. Also handles redirects or article names that use namespace aliases.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = ('Page 1', 'Page 2', 'Page 3');</DOCCOMMENT>
<DOCCOMMENT>    my $thing = $bot-&gt;get_pages(\@pages);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $page (keys %$thing) {</DOCCOMMENT>
<DOCCOMMENT>        my $text = $thing-&gt;{$page};</DOCCOMMENT>
<DOCCOMMENT>        print "$text\n" if defined($text);</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_pages {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>@pages</VARIABLE> <OPERATOR>=</OPERATOR> (<KEYWORD>ref</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) <OPERATOR>?</OPERATOR> @{<VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]} <OPERATOR>:</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>%return</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        titles <OPERATOR>=&gt;</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>@pages</VARIABLE>)<OPERATOR>,</OPERATOR>
        prop   <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
        rvprop <OPERATOR>=&gt;</OPERATOR> <STRING>'content'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$diff</VARIABLE><OPERATOR>;</OPERATOR>    <COMMENT># Used to track problematic article names</COMMENT>
    <FUNCTION>map</FUNCTION> { <VARIABLE>$diff</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$_</VARIABLE>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> } <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$id</VARIABLE> (<FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'pages'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<VARIABLE>$diff</VARIABLE><OPERATOR>-&gt;</OPERATOR>{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} }) {
            <VARIABLE>$diff</VARIABLE><OPERATOR>-&gt;</OPERATOR>{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} }<OPERATOR>++;</OPERATOR>
        }
        <KEYWORD>else</KEYWORD> {
            <KEYWORD>next</KEYWORD><OPERATOR>;</OPERATOR>
        }

        <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'missing'</STRING>})) {
            <VARIABLE>$return</VARIABLE>{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} } <OPERATOR>=</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
            <KEYWORD>next</KEYWORD><OPERATOR>;</OPERATOR>
        }
        <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'revisions'</STRING>})) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$revisions</VARIABLE> <OPERATOR>=</OPERATOR> @{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'revisions'</STRING>} }[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'*'</STRING>}<OPERATOR>;</OPERATOR>
            <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>defined</KEYWORD> <VARIABLE>$revisions</VARIABLE>) {
                <VARIABLE>$return</VARIABLE>{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} } <OPERATOR>=</OPERATOR> <VARIABLE>$revisions</VARIABLE><OPERATOR>;</OPERATOR>
            }
            <KEYWORD>elsif</KEYWORD> (<FUNCTION>length</FUNCTION>(<VARIABLE>$revisions</VARIABLE>) <OPERATOR>&lt;</OPERATOR> <NUMERIC>150</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$revisions</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>\#REDIRECT\s\[\[([^\[\]]+)\]\]</REGEX><DELIMITER>/</DELIMITER>) {    <COMMENT># FRAGILE!</COMMENT>
                <KEYWORD>my</KEYWORD> <VARIABLE>$redirect_to</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$1</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$return</VARIABLE>{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} } <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_text</OO>(<VARIABLE>$redirect_to</VARIABLE>)<OPERATOR>;</OPERATOR>
            }
            <KEYWORD>else</KEYWORD> {
                <VARIABLE>$return</VARIABLE>{ <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} } <OPERATOR>=</OPERATOR> <VARIABLE>$revisions</VARIABLE><OPERATOR>;</OPERATOR>
            }
        }
    }

    <COMMENT># Based on api.php?action=query&amp;meta=siteinfo&amp;siprop=namespaces|namespacealiases</COMMENT>
    <COMMENT># Should be done on an as-needed basis! This is only correct for enwiki (and</COMMENT>
    <COMMENT># it is probably incomplete anyways, or will be eventually).</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$expand</VARIABLE> <OPERATOR>=</OPERATOR> {
        <STRING>'WP'</STRING>         <OPERATOR>=&gt;</OPERATOR> <STRING>'Wikipedia'</STRING><OPERATOR>,</OPERATOR>
        <STRING>'WT'</STRING>         <OPERATOR>=&gt;</OPERATOR> <STRING>'Wikipedia talk'</STRING><OPERATOR>,</OPERATOR>
        <STRING>'Image'</STRING>      <OPERATOR>=&gt;</OPERATOR> <STRING>'File'</STRING><OPERATOR>,</OPERATOR>
        <STRING>'Image talk'</STRING> <OPERATOR>=&gt;</OPERATOR> <STRING>'File talk'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>

    <COMMENT># Only for those article names that remained after the first part</COMMENT>
    <COMMENT># If we're here we are dealing most likely with a WP:CSD type of article name</COMMENT>
    <KEYWORD>for</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE> (<FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$diff</VARIABLE>) {
        <KEYWORD>if</KEYWORD> (<VARIABLE>$diff</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$title</VARIABLE>} <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>) {
            <KEYWORD>my</KEYWORD> <VARIABLE>@pieces</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>split</FUNCTION>(<DELIMITER>/</DELIMITER><REGEX>:</REGEX><DELIMITER>/</DELIMITER><OPERATOR>,</OPERATOR> <VARIABLE>$title</VARIABLE>)<OPERATOR>;</OPERATOR>
            <KEYWORD>if</KEYWORD> (<VARIABLE>@pieces</VARIABLE> <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC>) {
                <VARIABLE>$pieces</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>=</OPERATOR> (<VARIABLE>$expand</VARIABLE><OPERATOR>-&gt;</OPERATOR>{ <VARIABLE>$pieces</VARIABLE>[<NUMERIC>0</NUMERIC>] } <OPERATOR>||</OPERATOR> <VARIABLE>$pieces</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
                <KEYWORD>my</KEYWORD> <VARIABLE>$v</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_text</OO>(<FUNCTION>join</FUNCTION> <STRING>':'</STRING><OPERATOR>,</OPERATOR> <VARIABLE>@pieces</VARIABLE>)<OPERATOR>;</OPERATOR>
                <FUNCTION>warn</FUNCTION> <STRING>"Detected article name that needed expanding $title<ESC>\n</ESC>"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

                <VARIABLE>$return</VARIABLE>{<VARIABLE>$title</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>$v</VARIABLE><OPERATOR>;</OPERATOR>
                <KEYWORD>if</KEYWORD> (<VARIABLE>$v</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>\#REDIRECT\s\[\[([^\[\]]+)\]\]</REGEX><DELIMITER>/</DELIMITER>) {
                    <VARIABLE>$v</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_text</OO>(<VARIABLE>$1</VARIABLE>)<OPERATOR>;</OPERATOR>
                    <VARIABLE>$return</VARIABLE>{<VARIABLE>$title</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>$v</VARIABLE><OPERATOR>;</OPERATOR>
                }
            }
        }
    }
    <KEYWORD>return</KEYWORD> <OPERATOR>\%</OPERATOR><KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 revert($pagename, $revid[,$summary])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Reverts the specified page to $revid, with an edit summary of $summary. A default edit summary will be used if $summary is omitted.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $revid = $bot-&gt;get_last("User:Mike.lifeguard/sandbox", "Mike.lifeguard");</DOCCOMMENT>
<DOCCOMMENT>    print "Reverting to $revid\n" if defined($revid);</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;revert('User:Mike.lifeguard', $revid, 'rvv');</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> revert {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$pagename</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$revid</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$summary</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>"Reverting to old revision $revid"</STRING><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$text</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_text</OO>(<VARIABLE>$pagename</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$revid</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>edit</OO>({
        page    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$pagename</VARIABLE><OPERATOR>,</OPERATOR>
        text    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$text</VARIABLE><OPERATOR>,</OPERATOR>
        summary <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$summary</VARIABLE><OPERATOR>,</OPERATOR>
    })<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 undo($pagename, $revid[,$summary[,$after]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Reverts the specified $revid, with an edit summary of $summary, using the undo function. To undo all revisions from $revid up to but not including this one, set $after to another revid. If not set, just undo the one revision ($revid).</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> undo {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$revid</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$summary</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>"Reverting revision #$revid"</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$after</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <VARIABLE>$summary</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"Reverting edits between #$revid &amp; #$after"</STRING> <KEYWORD>if</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$after</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Is that clear? Correct?</COMMENT>

    <KEYWORD>my</KEYWORD> (<VARIABLE>$edittoken</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$basetimestamp</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$starttimestamp</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_edittoken</OO>(<VARIABLE>$page</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action         <OPERATOR>=&gt;</OPERATOR> <STRING>'edit'</STRING><OPERATOR>,</OPERATOR>
        title          <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        undo           <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$revid</VARIABLE><OPERATOR>,</OPERATOR>
        undoafter      <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$after</VARIABLE><OPERATOR>,</OPERATOR>
        summary        <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$summary</VARIABLE><OPERATOR>,</OPERATOR>
        token          <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$edittoken</VARIABLE><OPERATOR>,</OPERATOR>
        starttimestamp <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$starttimestamp</VARIABLE><OPERATOR>,</OPERATOR>
        basetimestamp  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$basetimestamp</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_last($page, $user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns the revid of the last revision to $page not made by $user. undef is returned if no result was found, as would be the case if the page is deleted.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $revid = $bot-&gt;get_last("User:Mike.lifeguard/sandbox", "Mike.lifeguard");</DOCCOMMENT>
<DOCCOMMENT>    if defined($revid) {</DOCCOMMENT>
<DOCCOMMENT>        print "Reverting to $revid\n";</DOCCOMMENT>
<DOCCOMMENT>        $bot-&gt;revert('User:Mike.lifeguard', $revid, 'rvv');</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_last {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$revertto</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
            action        <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            titles        <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
            prop          <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
            rvlimit       <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
            rvprop        <OPERATOR>=&gt;</OPERATOR> <STRING>'ids|user'</STRING><OPERATOR>,</OPERATOR>
            rvexcludeuser <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$user</VARIABLE><OPERATOR>,</OPERATOR>
    })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$data</VARIABLE>) <OPERATOR>=</OPERATOR> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$revid</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'revisions'</STRING>}[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'revid'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$revid</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 update_rc($limit[,$options_hashref])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>B&lt;Note:&gt; C&lt;update_rc()&gt; is deprecated in favour of C&lt;recentchanges()&gt;, which</DOCCOMMENT>
<DOCCOMMENT>returns all available data, including rcid.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing the Recent Changes to the wiki Main</DOCCOMMENT>
<DOCCOMMENT>namespace. The array structure contains 'title', 'revid', 'old_revid',</DOCCOMMENT>
<DOCCOMMENT>and 'timestamp'. The $options_hashref is the same as described in the</DOCCOMMENT>
<DOCCOMMENT>section on linksearch().</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @rc = $bot-&gt;update_rc(5);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $hashref (@rc) {</DOCCOMMENT>
<DOCCOMMENT>        my $title = $hash-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>        print "$title\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    # Or, use a callback for incremental processing:</DOCCOMMENT>
<DOCCOMMENT>    my $options = { hook =&gt; \&amp;mysub, };</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;update_rc($options);</DOCCOMMENT>
<DOCCOMMENT>    sub mysub {</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hashref (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $page = $hashref-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            print "$page\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> update_rc {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$limit</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'max'</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'recentchanges'</STRING><OPERATOR>,</OPERATOR>
        rcnamespace <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
        rclimit     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$limit</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@rc_table</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> (@{<VARIABLE>$res</VARIABLE>}) {
        <FUNCTION>push</FUNCTION>(
            <VARIABLE>@rc_table</VARIABLE><OPERATOR>,</OPERATOR>
            {
                title     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>,</OPERATOR>
                revid     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'revid'</STRING>}<OPERATOR>,</OPERATOR>
                old_revid <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'old_revid'</STRING>}<OPERATOR>,</OPERATOR>
                timestamp <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'timestamp'</STRING>}<OPERATOR>,</OPERATOR>
            })<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>@rc_table</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 recentchanges($ns, $limit, $options_hashref)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array of hashrefs containing recentchanges data. That hashref</DOCCOMMENT>
<DOCCOMMENT>might contain the following keys:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=over 4</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item ns - the namespace number</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item revid</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item old_revid</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item timestamp</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item rcid - can be used with C&lt;patrol()&gt;</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item pageid</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item type - one of edit, new, log, and maybe more</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item title</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=back</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>By default, the main namespace is used, and limit is set to 50. Pass an</DOCCOMMENT>
<DOCCOMMENT>arrayref of namespace numbers to get results from several namespaces.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>The $options_hashref is the same as described in the section on linksearch().</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @rc = $bot-&gt;update_rc(4, 10);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $hashref (@rc) {</DOCCOMMENT>
<DOCCOMMENT>        print $hashref-&gt;{'title'} . "\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    # Or, use a callback for incremental processing:</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;update_rc(0, 500, { hook =&gt; \&amp;mysub });</DOCCOMMENT>
<DOCCOMMENT>    sub mysub {</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hashref (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $page = $hashref-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            print "$page\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> recentchanges {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$limit</VARIABLE>   <OPERATOR>=</OPERATOR> <KEYWORD>defined</KEYWORD>(<VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]) <OPERATOR>?</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>:</OPERATOR> <NUMERIC>50</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>) <KEYWORD>if</KEYWORD> <KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'recentchanges'</STRING><OPERATOR>,</OPERATOR>
        rcnamespace <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ns</VARIABLE><OPERATOR>,</OPERATOR>
        rclimit     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$limit</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>
    <KEYWORD>return</KEYWORD> @<VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 what_links_here($page[,$filter[,$ns[,$options]]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing a list of all pages linking to $page. The array structure contains 'title' and 'redirect' is defined if the title is a redirect. $filter can be one of: all (default), redirects (list only redirects), nonredirects (list only non-redirects). $ns is a namespace number to search (pass an arrayref to search in multiple namespaces). $options is a hashref as described by MediaWiki::API: Set max to limit the number of queries performed. Set hook to a subroutine reference to use a callback hook for incremental processing. Refer to the section on linksearch() for examples.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>A typical query:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @links = $bot-&gt;what_links_here("Meta:Sandbox", undef, 1, {hook=&gt;\&amp;mysub});</DOCCOMMENT>
<DOCCOMMENT>    sub mysub{</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hash (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $title = $hash-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            my $is_redir = $hash-&gt;{'redirect'};</DOCCOMMENT>
<DOCCOMMENT>            print "Redirect: $title\n" if $is_redir;</DOCCOMMENT>
<DOCCOMMENT>            print "Page: $title\n" unless $is_redir;</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Transclusions are no longer handled by what_links_here() - use list_transcludes() instead.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> what_links_here {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$filter</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>) <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>)<OPERATOR>;</OPERATOR>    <COMMENT># Allow array of namespaces</COMMENT>
    <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$filter</VARIABLE>) <OPERATOR>and</OPERATOR> <VARIABLE>$filter</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>(all|redirects|nonredirects)</REGEX><DELIMITER>/</DELIMITER>) {    <COMMENT># Verify $filter</COMMENT>
        <VARIABLE>$filter</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$1</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <COMMENT># http://en.wikipedia.org/w/api.php?action=query&amp;list=backlinks&amp;bltitle=template:tlx</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'backlinks'</STRING><OPERATOR>,</OPERATOR>
        bltitle     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        blnamespace <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ns</VARIABLE><OPERATOR>,</OPERATOR>
        bllimit     <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'blfilterredir'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$filter</VARIABLE> <KEYWORD>if</KEYWORD> <VARIABLE>$filter</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># When using a callback hook, this won't be a reference</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@links</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$redirect</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>defined</KEYWORD>(<VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'redirect'</STRING>})<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION> <VARIABLE>@links</VARIABLE><OPERATOR>,</OPERATOR> { title <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$title</VARIABLE><OPERATOR>,</OPERATOR> redirect <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$redirect</VARIABLE> }<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@links</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 list_transclusions($page[,$filter[,$ns[,$options]]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing a list of all pages transcluding $page. The array structure contains 'title' and 'redirect' is defined if the title is a redirect. $filter can be one of: all (default), redirects (list only redirects), nonredirects (list only non-redirects). $ns is a namespace number to search (pass an arrayref to search in multiple namespaces). $options is a hashref as described by MediaWiki::API: Set max to limit the number of queries performed. Set hook to a subroutine reference to use a callback hook for incremental processing. Refer to the section on linksearch() or what_links_here() for examples.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>A typical query:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;list_transclusions("Template:Tlx", undef, 4, {hook =&gt; \&amp;mysub});</DOCCOMMENT>
<DOCCOMMENT>    sub mysub{</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hash (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $title = $hash-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            my $is_redir = $hash-&gt;{'redirect'};</DOCCOMMENT>
<DOCCOMMENT>            print "Redirect: $title\n" if $is_redir;</DOCCOMMENT>
<DOCCOMMENT>            print "Page: $title\n" unless $is_redir;</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> list_transclusions {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$filter</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>) <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>)<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$filter</VARIABLE>) <OPERATOR>and</OPERATOR> <VARIABLE>$filter</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>(all|redirects|nonredirects)</REGEX><DELIMITER>/</DELIMITER>) {    <COMMENT># Verify $filter</COMMENT>
        <VARIABLE>$filter</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$1</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <COMMENT># http://en.wikipedia.org/w/api.php?action=query&amp;list=embeddedin&amp;eititle=Template:Stub</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'embeddedin'</STRING><OPERATOR>,</OPERATOR>
        eititle     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        einamespace <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ns</VARIABLE><OPERATOR>,</OPERATOR>
        eilimit     <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'eifilterredir'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$filter</VARIABLE> <KEYWORD>if</KEYWORD> <VARIABLE>$filter</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># When using a callback hook, this won't be a reference</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@links</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$redirect</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>defined</KEYWORD>(<VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'redirect'</STRING>})<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION> <VARIABLE>@links</VARIABLE><OPERATOR>,</OPERATOR> { title <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$title</VARIABLE><OPERATOR>,</OPERATOR> redirect <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$redirect</VARIABLE> }<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@links</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_pages_in_category($category_name[,$options_hashref])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing the names of all pages in the specified category (include Category: prefix). Does not recurse into sub-categories.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = $bot-&gt;get_pages_in_category("Category:People on stamps of Gabon");</DOCCOMMENT>
<DOCCOMMENT>    print "The pages in Category:People on stamps of Gabon are:\n@pages\n";</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>The options hashref is as described in the section on linksearch(). Use { max =&gt; 0 } to get all results.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_pages_in_category {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$category</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$category</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>:</REGEX><DELIMITER>/</DELIMITER>) {    <COMMENT># It might have a namespace name</COMMENT>
        <KEYWORD>my</KEYWORD> (<VARIABLE>$cat</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$title</VARIABLE>) <OPERATOR>=</OPERATOR> <FUNCTION>split</FUNCTION>(<DELIMITER>/</DELIMITER><REGEX>:</REGEX><DELIMITER>/</DELIMITER><OPERATOR>,</OPERATOR> <VARIABLE>$category</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<VARIABLE>$cat</VARIABLE> <OPERATOR>ne</OPERATOR> <STRING>'Category'</STRING>) {    <COMMENT># 'Category' is a canonical name for ns14</COMMENT>
            <KEYWORD>my</KEYWORD> <VARIABLE>$ns_data</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_ns_data</OO>()<OPERATOR>;</OPERATOR>
            <KEYWORD>my</KEYWORD> <VARIABLE>$cat_ns_name</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$ns_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'14'</STRING>}<OPERATOR>;</OPERATOR>        <COMMENT># ns14 gives us the localized name for 'Category'</COMMENT>
            <KEYWORD>if</KEYWORD> (<VARIABLE>$cat</VARIABLE> <OPERATOR>ne</OPERATOR> <VARIABLE>$cat_ns_name</VARIABLE>) {
                <VARIABLE>$category</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"$cat_ns_name:$category"</STRING><OPERATOR>;</OPERATOR>
            }
        }
    }
    <KEYWORD>else</KEYWORD> {                                             <COMMENT># Definitely no namespace name, since there's no colon</COMMENT>
        <VARIABLE>$category</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"Category:$category"</STRING><OPERATOR>;</OPERATOR>
    }
    <FUNCTION>warn</FUNCTION> <STRING>"Category to fetch is [[$category]]"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list    <OPERATOR>=&gt;</OPERATOR> <STRING>'categorymembers'</STRING><OPERATOR>,</OPERATOR>
        cmtitle <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$category</VARIABLE><OPERATOR>,</OPERATOR>
        cmlimit <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>})<OPERATOR>;</OPERATOR>
    <KEYWORD>delete</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}) <KEYWORD>if</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a hashref when using callback</COMMENT>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION> <VARIABLE>@pages</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$title</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_all_pages_in_category($category_name[,$options_hashref])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing the names of ALL pages in the specified category (include the Category: prefix), including sub-categories. The $options_hashref is the same as described for get_pages_in_category().</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

{    <COMMENT># Instead of using the state pragma, use a bare block</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>%data</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>sub</KEYWORD> get_all_pages_in_category {
        <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>          <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$base_category</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE>       <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>})<OPERATOR>;</OPERATOR>

        <KEYWORD>my</KEYWORD> <VARIABLE>@first</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_pages_in_category</OO>(<VARIABLE>$base_category</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
        <VARIABLE>%data</VARIABLE> <OPERATOR>=</OPERATOR> () <KEYWORD>unless</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>;</OPERATOR>    <COMMENT># This is a special flag for internal use.</COMMENT>
                                    <COMMENT># It marks a call to this method as being</COMMENT>
                                    <COMMENT># internal. Since %data is a fake state variable,</COMMENT>
                                    <COMMENT># it needs to be cleared for every *external*</COMMENT>
                                    <COMMENT># call, but not cleared when the call is recursive.</COMMENT>

        <KEYWORD>my</KEYWORD> <VARIABLE>$ns_data</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_ns_data</OO>()<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$cat_ns_name</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$ns_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'14'</STRING>}<OPERATOR>;</OPERATOR>

        <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> (<VARIABLE>@first</VARIABLE>) {
            <KEYWORD>if</KEYWORD> (<VARIABLE>$page</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>^$cat_ns_name:</REGEX><DELIMITER>/</DELIMITER>) {
                <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>exists</FUNCTION>(<VARIABLE>$data</VARIABLE>{<VARIABLE>$page</VARIABLE>})) {
                    <VARIABLE>$data</VARIABLE>{<VARIABLE>$page</VARIABLE>} <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
                    <KEYWORD>my</KEYWORD> <VARIABLE>@pages</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_all_pages_in_category</OO>(<VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
                    <KEYWORD>foreach</KEYWORD> (<VARIABLE>@pages</VARIABLE>) {
                        <VARIABLE>$data</VARIABLE>{<VARIABLE>$_</VARIABLE>} <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
                    }
                }
                <KEYWORD>else</KEYWORD> {
                    <VARIABLE>$data</VARIABLE>{<VARIABLE>$page</VARIABLE>} <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
                }
            }
            <KEYWORD>else</KEYWORD> {
                <VARIABLE>$data</VARIABLE>{<VARIABLE>$page</VARIABLE>} <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
            }
        }
        <KEYWORD>return</KEYWORD> <FUNCTION>keys</FUNCTION> <VARIABLE>%data</VARIABLE><OPERATOR>;</OPERATOR>
    }
}    <COMMENT># This ends the bare block around get_all_pages_in_category()</COMMENT>

<DOCCOMMENT>=head2 linksearch($link[,$ns[,$protocol[,$options]]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Runs a linksearch on the specified link and returns an array containing anonymous hashes with keys 'url' for the outbound URL, and 'title' for the page the link is on. $ns is a namespace number to search (pass an arrayref to search in multiple namespaces). You can search by $protocol (http is default). The optional $options hashref is fully documented in MediaWiki::API: Set `max` to limit the number of queries performed. Set `hook` to a subroutine reference to use a callback hook for incremental processing.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Set max in $options to get more than one query's worth of results:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $options = { max =&gt; 10, }; # I only want some results</DOCCOMMENT>
<DOCCOMMENT>    my @links = $bot-&gt;linksearch("slashdot.org", 1, undef, $options);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $hash (@links) {</DOCCOMMENT>
<DOCCOMMENT>        my $url = $hash-&gt;{'url'};</DOCCOMMENT>
<DOCCOMMENT>        my $page = $hash-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>        print "$page: $url\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>You can also specify a callback function in $options:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $options = { hook =&gt; \&amp;mysub, }; # I want to do incremental processing</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;linksearch("slashdot.org", 1, undef, $options);</DOCCOMMENT>
<DOCCOMMENT>    sub mysub {</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hashref (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $url  = $hashref-&gt;{'url'};</DOCCOMMENT>
<DOCCOMMENT>            my $page = $hashref-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            print "$page: $url\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> linksearch {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$link</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$prot</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>) <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'exturlusage'</STRING><OPERATOR>,</OPERATOR>
        euprop      <OPERATOR>=&gt;</OPERATOR> <STRING>'url|title'</STRING><OPERATOR>,</OPERATOR>
        euquery     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$link</VARIABLE><OPERATOR>,</OPERATOR>
        eunamespace <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ns</VARIABLE><OPERATOR>,</OPERATOR>
        euprotocol  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$prot</VARIABLE><OPERATOR>,</OPERATOR>
        eulimit     <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># When using a callback hook, this won't be a reference</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@links</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$url</VARIABLE>  <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'url'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION>(<VARIABLE>@links</VARIABLE><OPERATOR>,</OPERATOR> { <STRING>'url'</STRING> <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$url</VARIABLE><OPERATOR>,</OPERATOR> <STRING>'title'</STRING> <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE> })<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>@links</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 purge_page($pagename)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Purges the server cache of the specified page. Pass an array reference to purge multiple pages. Returns true on success; false on failure. If you really care, a true return value is the number of pages successfully purged. You could check that it is the same as the number you wanted to purge.- maybe some pages don't exist, or you passed invalid titles, or you aren't allowed to purge the cache:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @to_purge = ('Main Page', 'A', 'B', 'C', 'Very unlikely to exist');</DOCCOMMENT>
<DOCCOMMENT>    my $size = scalar @to_purge;</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    print "all-at-once:\n";</DOCCOMMENT>
<DOCCOMMENT>    my $success = $bot-&gt;purge_page(\@to_purge);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    if ($success == $size) {</DOCCOMMENT>
<DOCCOMMENT>        print "@to_purge: OK ($success/$size)\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT>    else {</DOCCOMMENT>
<DOCCOMMENT>        my $missed = @to_purge - $success;</DOCCOMMENT>
<DOCCOMMENT>        print "We couldn't purge $missed pages (list was: "</DOCCOMMENT>
<DOCCOMMENT>            . join(', ', @to_purge)</DOCCOMMENT>
<DOCCOMMENT>            . ")\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    # OR</DOCCOMMENT>
<DOCCOMMENT>    print "\n\none-at-a-time:\n";</DOCCOMMENT>
<DOCCOMMENT>    foreach my $page (@to_purge) {</DOCCOMMENT>
<DOCCOMMENT>        my $ok = $bot-&gt;purge_page($page);</DOCCOMMENT>
<DOCCOMMENT>        print "$page: $ok\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> purge_page {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {             <COMMENT># If it is an array reference...</COMMENT>
        <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
            action <OPERATOR>=&gt;</OPERATOR> <STRING>'purge'</STRING><OPERATOR>,</OPERATOR>
            titles <OPERATOR>=&gt;</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$page</VARIABLE>)<OPERATOR>,</OPERATOR>    <COMMENT># dereference it and purge all those titles</COMMENT>
        }<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {                                  <COMMENT># Just one page</COMMENT>
        <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
            action <OPERATOR>=&gt;</OPERATOR> <STRING>'purge'</STRING><OPERATOR>,</OPERATOR>
            titles <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        }<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$success</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (@{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'purge'</STRING>} }) {
        <VARIABLE>$success</VARIABLE><OPERATOR>++</OPERATOR> <KEYWORD>if</KEYWORD> <FUNCTION>exists</FUNCTION> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'purged'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$success</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_namespace_names()</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>get_namespace_names returns a hash linking the namespace id, such as 1, to its named equivalent, such as "Talk".</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_namespace_names {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>%return</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
            action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            meta   <OPERATOR>=&gt;</OPERATOR> <STRING>'siteinfo'</STRING><OPERATOR>,</OPERATOR>
            siprop <OPERATOR>=&gt;</OPERATOR> <STRING>'namespaces'</STRING>
    })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$id</VARIABLE> (<FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{namespaces} }) {
        <VARIABLE>$return</VARIABLE>{<VARIABLE>$id</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{namespaces}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'*'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>if</KEYWORD> (<VARIABLE>$return</VARIABLE>{<NUMERIC>1</NUMERIC>} <OPERATOR>or</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <VARIABLE>%return</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_namespace_names</OO>(<VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>+</OPERATOR> <NUMERIC>1</NUMERIC>)<OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 image_usage($image[,$ns[,$filter,[$options]]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Gets a list of pages which include a certain image. Additional parameters are the namespace number to fetch results from (or an arrayref of multiple namespace numbers); $filter is 'all', 'redirect' (to return only redirects), or 'nonredirects' (to return no redirects). $options is a hashref as described in the section for linksearch().</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = $bot-&gt;image_usage("File:Albert Einstein Head.jpg");</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>or, make use of the options hashref to do incremental processing:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;image_usage("File:Albert Einstein Head.jpg", undef, undef, {hook=&gt;\&amp;mysub, max=&gt;5});</DOCCOMMENT>
<DOCCOMMENT>    sub mysub {</DOCCOMMENT>
<DOCCOMMENT>        my $res = shift;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $page (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $title = $page-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            print "$title\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> image_usage {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$image</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$filter</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$image</VARIABLE> <OPERATOR>!~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>^File:|Image:</REGEX><DELIMITER>/</DELIMITER>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$ns_data</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_ns_data</OO>()<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$image_ns_name</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$ns_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'6'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<VARIABLE>$image</VARIABLE> <OPERATOR>!~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>^\Q$image_ns_name\E:</REGEX><DELIMITER>/</DELIMITER>) {
            <VARIABLE>$image</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"$image_ns_name:$image"</STRING><OPERATOR>;</OPERATOR>
        }
    }

    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>})<OPERATOR>;</OPERATOR>
    <KEYWORD>delete</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}) <KEYWORD>if</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

    <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>) <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action          <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list            <OPERATOR>=&gt;</OPERATOR> <STRING>'imageusage'</STRING><OPERATOR>,</OPERATOR>
        iutitle         <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$image</VARIABLE><OPERATOR>,</OPERATOR>
        iunamespace     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ns</VARIABLE><OPERATOR>,</OPERATOR>
        iulimit         <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$filter</VARIABLE>) <OPERATOR>and</OPERATOR> <VARIABLE>$filter</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>(all|redirects|nonredirects)</REGEX><DELIMITER>/</DELIMITER>) {
        <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'iufilterredir'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$1</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># When using a callback hook, this won't be a reference</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION>(<VARIABLE>@pages</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$title</VARIABLE>)<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 links_to_image($image)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>A backward-compatible call to image_usage(). You can provide only the image name.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> links_to_image {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>image_usage</OO>(<VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 is_blocked($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Checks if a user is currently blocked.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> is_blocked {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <COMMENT># http://en.wikipedia.org/w/api.php?action=query&amp;meta=blocks&amp;bkusers=$user&amp;bklimit=1&amp;bkprop=id</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list    <OPERATOR>=&gt;</OPERATOR> <STRING>'blocks'</STRING><OPERATOR>,</OPERATOR>
        bkusers <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$user</VARIABLE><OPERATOR>,</OPERATOR>
        bklimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
        bkprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'id'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$number</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>scalar</KEYWORD> @{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{<STRING>"blocks"</STRING>} }<OPERATOR>;</OPERATOR>    <COMMENT># The number of blocks returned</COMMENT>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>elsif</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR> <COMMENT># UNPOSSIBLE!</COMMENT>
    }
}

<DOCCOMMENT>=head2 test_blocked($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Retained for backwards compatibility. Use is_blocked($user) for clarity.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> test_blocked { <COMMENT># For backwards-compatibility</COMMENT>
    <KEYWORD>return</KEYWORD> (is_blocked(<VARIABLE>@_</VARIABLE>))<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 test_image_exists($page)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Checks if an image exists at $page. 0 means no, 1 means yes, local, 2</DOCCOMMENT>
<DOCCOMMENT>means on commons, 3 means doesn't exist but there is text on the page.</DOCCOMMENT>
<DOCCOMMENT>If you pass in an arrayref of images, you'll get out an arrayref of</DOCCOMMENT>
<DOCCOMMENT>results.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $exists = $bot-&gt;test_image_exists('File:Albert Einstein Head.jpg');</DOCCOMMENT>
<DOCCOMMENT>    if ($exists == 0) {</DOCCOMMENT>
<DOCCOMMENT>        print "Doesn't exist\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT>    elsif ($exists == 1) {</DOCCOMMENT>
<DOCCOMMENT>        print "Exists locally\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT>    elsif ($exists == 2) {</DOCCOMMENT>
<DOCCOMMENT>        print "Exists on Commons\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> test_image_exists {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$image</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$multi</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$image</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {
        <VARIABLE>$image</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$image</VARIABLE>)<OPERATOR>;</OPERATOR>
        <VARIABLE>$multi</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT># so we know whether to return a hash or a single scalar</COMMENT>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        titles  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$image</VARIABLE><OPERATOR>,</OPERATOR>
        iilimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
        prop    <OPERATOR>=&gt;</OPERATOR> <STRING>'imageinfo'</STRING>
    })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    <COMMENT># use Data::Dumper; print STDERR Dumper($res) and die;</COMMENT>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$id</VARIABLE> (<FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{title}<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{imagerepository} <OPERATOR>eq</OPERATOR> <STRING>'shared'</STRING>) {
            <KEYWORD>if</KEYWORD> (<VARIABLE>$multi</VARIABLE>) {
                <FUNCTION>unshift</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
            }
            <KEYWORD>else</KEYWORD> {
                <KEYWORD>return</KEYWORD> <NUMERIC>2</NUMERIC><OPERATOR>;</OPERATOR>
            }
        }
        <KEYWORD>elsif</KEYWORD> (<FUNCTION>exists</FUNCTION>(<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{missing})) {
            <KEYWORD>if</KEYWORD> (<VARIABLE>$multi</VARIABLE>) {
                <FUNCTION>unshift</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
            }
            <KEYWORD>else</KEYWORD> {
                <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
            }
        }
        <KEYWORD>elsif</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{imagerepository} <OPERATOR>eq</OPERATOR> <STRING>''</STRING>) {
            <KEYWORD>if</KEYWORD> (<VARIABLE>$multi</VARIABLE>) {
                <FUNCTION>unshift</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR>
            }
            <KEYWORD>else</KEYWORD> {
                <KEYWORD>return</KEYWORD> <NUMERIC>3</NUMERIC><OPERATOR>;</OPERATOR>
            }
        }
        <KEYWORD>elsif</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{imagerepository} <OPERATOR>eq</OPERATOR> <STRING>'local'</STRING>) {
            <KEYWORD>if</KEYWORD> (<VARIABLE>$multi</VARIABLE>) {
                <FUNCTION>unshift</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            }
            <KEYWORD>else</KEYWORD> {
                <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            }
        }
    }

    <COMMENT># use Data::Dumper; print STDERR Dumper(\@return) and die;</COMMENT>
    <KEYWORD>return</KEYWORD> <OPERATOR>\</OPERATOR><VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_pages_in_namespace($namespace_id, $page_limit)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array containing the names of all pages in the specified namespace. The $namespace_id must be a number, not a namespace name. Setting $page_limit is optional. If $page_limit is over 500, it will be rounded up to the next multiple of 500.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_pages_in_namespace {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$namespace</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$limit</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'max'</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'allpages'</STRING><OPERATOR>,</OPERATOR>
        apnamespace <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$namespace</VARIABLE><OPERATOR>,</OPERATOR>
        aplimit     <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$limit</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> (@{<VARIABLE>$res</VARIABLE>}) {
        <FUNCTION>push</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR>{title}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 count_contributions($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Uses the API to count $user's contributions.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> count_contributions {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$username</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <VARIABLE>$username</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD><OPERATOR>;</OPERATOR>    <COMMENT># Strip namespace</COMMENT>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>({
            action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            list    <OPERATOR>=&gt;</OPERATOR> <STRING>'users'</STRING><OPERATOR>,</OPERATOR>
            ususers <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>,</OPERATOR>
            usprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'editcount'</STRING>
        }<OPERATOR>,</OPERATOR>
        { max <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC> })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> ${<VARIABLE>$res</VARIABLE>}[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'editcount'</STRING>}<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 last_active($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns the last active time of $user in YYYY-MM-DDTHH:MM:SSZ</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> last_active {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$username</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>unless</KEYWORD> (<VARIABLE>$username</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>/</DELIMITER><REGEX>User:</REGEX><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD>) { <VARIABLE>$username</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"User:"</STRING> <OPERATOR>.</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>;</OPERATOR> }
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>({
            action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            list    <OPERATOR>=&gt;</OPERATOR> <STRING>'usercontribs'</STRING><OPERATOR>,</OPERATOR>
            ucuser  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$username</VARIABLE><OPERATOR>,</OPERATOR>
            uclimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC>
        }<OPERATOR>,</OPERATOR>
        { max <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC> })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> ${<VARIABLE>$res</VARIABLE>}[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'timestamp'</STRING>}<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 recent_edit_to_page($page)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns timestamp and username for most recent (top) edit to $page.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> recent_edit_to_page {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE>  <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
            action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            prop    <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
            titles  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
            rvlimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC>
        }<OPERATOR>,</OPERATOR>
        { max <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC> })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$data</VARIABLE>) <OPERATOR>=</OPERATOR> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{revisions}[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{timestamp}<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_users($page, $limit, $revision, $direction)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Gets the most recent editors to $page, up to $limit, starting from $revision and goint in $direction.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_users {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$pagename</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$limit</VARIABLE>     <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'max'</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$rvstartid</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$direction</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>@revisions</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$limit</VARIABLE> <OPERATOR>&gt;</OPERATOR> <NUMERIC>50</NUMERIC>) {
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{errstr} <OPERATOR>=</OPERATOR> <STRING>"Error requesting history for $pagename: Limit may not be set to values above 50"</STRING><OPERATOR>;</OPERATOR>
        carp <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{errstr}<OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        prop    <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
        titles  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$pagename</VARIABLE><OPERATOR>,</OPERATOR>
        rvprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'ids|timestamp|user|comment'</STRING><OPERATOR>,</OPERATOR>
        rvlimit <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$limit</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{rvstartid} <OPERATOR>=</OPERATOR> <VARIABLE>$rvstartid</VARIABLE> <KEYWORD>if</KEYWORD> (<VARIABLE>$rvstartid</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{rvdir}     <OPERATOR>=</OPERATOR> <VARIABLE>$direction</VARIABLE> <KEYWORD>if</KEYWORD> (<VARIABLE>$direction</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE>) <OPERATOR>=</OPERATOR> <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$array</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{query}<OPERATOR>-&gt;</OPERATOR>{pages}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$id</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{revisions}<OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> (@{<VARIABLE>$array</VARIABLE>}) {
        <FUNCTION>push</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR>{user}<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 was_blocked($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns 1 if $user has ever been blocked.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> was_blocked {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD><OPERATOR>;</OPERATOR>    <COMMENT># Strip User: prefix, if present</COMMENT>

    <COMMENT># http://en.wikipedia.org/w/api.php?action=query&amp;list=logevents&amp;letype=block&amp;letitle=User:127.0.0.1&amp;lelimit=1&amp;leprop=ids</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list    <OPERATOR>=&gt;</OPERATOR> <STRING>'logevents'</STRING><OPERATOR>,</OPERATOR>
        letype  <OPERATOR>=&gt;</OPERATOR> <STRING>'block'</STRING><OPERATOR>,</OPERATOR>
        letitle <OPERATOR>=&gt;</OPERATOR> <STRING>"User:$user"</STRING><OPERATOR>,</OPERATOR>    <COMMENT># Ensure the User: prefix is there!</COMMENT>
        lelimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
        leprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'ids'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$number</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>scalar</KEYWORD> @{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'logevents'</STRING>} }<OPERATOR>;</OPERATOR>    <COMMENT># The number of blocks returned</COMMENT>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>elsif</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR> <COMMENT># UNPOSSIBLE!</COMMENT>
    }
}

<DOCCOMMENT>=head2 test_block_hist($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Retained for backwards compatibility. Use was_blocked($user) for clarity.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> test_block_hist { <COMMENT># Backwards compatibility</COMMENT>
    <KEYWORD>return</KEYWORD> (was_blocked(<VARIABLE>@_</VARIABLE>))<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 expandtemplates($page[, $text])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Expands templates on $page, using $text if provided, otherwise loading the page text automatically.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> expandtemplates {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$text</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>unless</KEYWORD> (<VARIABLE>$text</VARIABLE>) {
        <VARIABLE>$text</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_text</OO>(<VARIABLE>$page</VARIABLE>)<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'expandtemplates'</STRING><OPERATOR>,</OPERATOR>
        title  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        text   <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$text</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$expanded</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'expandtemplates'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'*'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$expanded</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_allusers($limit, $group, $opts)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array of all users. Default limit is 500. Optionally specify a group to list that group only. The last optional parameter is an options hashref, as detailed elsewhere.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_allusers {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$limit</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'max'</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$group</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$opts</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
            action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            list    <OPERATOR>=&gt;</OPERATOR> <STRING>'allusers'</STRING><OPERATOR>,</OPERATOR>
            aulimit <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$limit</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{augroup} <OPERATOR>=</OPERATOR> <VARIABLE>$group</VARIABLE> <KEYWORD>if</KEYWORD> <KEYWORD>defined</KEYWORD> <VARIABLE>$group</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{max} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <FUNCTION>exists</FUNCTION> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{max}<OPERATOR>;</OPERATOR>
    <KEYWORD>delete</KEYWORD> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{max} <KEYWORD>if</KEYWORD> <FUNCTION>exists</FUNCTION> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{max} <OPERATOR>and</OPERATOR> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{max} <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$opts</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>

    <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>for</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$ref</VARIABLE> (@{ <VARIABLE>$res</VARIABLE> }) {
        <FUNCTION>push</FUNCTION> <VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$ref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{name}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 db_to_domain($wiki)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Converts a wiki/database name (enwiki) to the domain name (en.wikipedia.org).</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @wikis = ("enwiki", "kowiki", "bat-smgwiki", "nonexistent");</DOCCOMMENT>
<DOCCOMMENT>    foreach my $wiki (@wikis) {</DOCCOMMENT>
<DOCCOMMENT>        my $domain = $bot-&gt;db_to_domain($wiki);</DOCCOMMENT>
<DOCCOMMENT>        next if !defined($domain);</DOCCOMMENT>
<DOCCOMMENT>        print "$wiki: $domain\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>You can pass an arrayref to do bulk lookup:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @wikis = ("enwiki", "kowiki", "bat-smgwiki", "nonexistent");</DOCCOMMENT>
<DOCCOMMENT>    my $domains = $bot-&gt;db_to_domain(\@wikis);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $domain (@$domains) {</DOCCOMMENT>
<DOCCOMMENT>        next if !defined($domain);</DOCCOMMENT>
<DOCCOMMENT>        print "$domain\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> db_to_domain {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$wiki</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{sitematrix}) {
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_sitematrix</OO>()<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$wiki</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$w</VARIABLE> (@<VARIABLE>$wiki</VARIABLE>) {
            <VARIABLE>$wiki</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>_p$</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>    <COMMENT># Strip off a _p suffix, if present</COMMENT>
            <KEYWORD>my</KEYWORD> <VARIABLE>$domain</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$w</VARIABLE>} <OPERATOR>||</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
            <FUNCTION>push</FUNCTION>(<VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$domain</VARIABLE>)<OPERATOR>;</OPERATOR>
        }
        <KEYWORD>return</KEYWORD> <OPERATOR>\</OPERATOR><VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$wiki</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>_p$</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>        <COMMENT># Strip off a _p suffix, if present</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$domain</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$wiki</VARIABLE>} <OPERATOR>||</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD> <VARIABLE>$domain</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 domain_to_db($wiki)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>As you might expect, does the opposite of domain_to_db(): Converts a domain</DOCCOMMENT>
<DOCCOMMENT>name into a database/wiki name.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> domain_to_db {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$wiki</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{sitematrix}) {
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_sitematrix</OO>()<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$wiki</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$w</VARIABLE> (@<VARIABLE>$wiki</VARIABLE>) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$db</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$w</VARIABLE>} <OPERATOR>||</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
            <FUNCTION>push</FUNCTION>(<VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$db</VARIABLE>)<OPERATOR>;</OPERATOR>
        }
        <KEYWORD>return</KEYWORD> <OPERATOR>\</OPERATOR><VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>my</KEYWORD> <VARIABLE>$db</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$wiki</VARIABLE>} <OPERATOR>||</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD> <VARIABLE>$db</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 diff($options_hashref)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This allows retrieval of a diff from the API. The return is a scalar containing the HTML table of the diff. Options are as follows:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=over 4</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>title is the title to use. Provide I&lt;either&gt; this or revid.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>revid is any revid to diff from. If you also specified title, only title will be honoured.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>oldid is an identifier to diff to. This can be a revid, or the special values 'cur', 'prev' or 'next'</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=back</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> diff {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$revid</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$oldid</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>] <OPERATOR>eq</OPERATOR> <STRING>'HASH'</STRING>) {
        <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$revid</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'revid'</STRING>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$oldid</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$_</VARIABLE>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'oldid'</STRING>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$revid</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
        <VARIABLE>$oldid</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action   <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        prop     <OPERATOR>=&gt;</OPERATOR> <STRING>'revisions'</STRING><OPERATOR>,</OPERATOR>
        rvdiffto <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$oldid</VARIABLE><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$title</VARIABLE>) {
        <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'titles'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$title</VARIABLE><OPERATOR>;</OPERATOR>
        <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'rvlimit'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>elsif</KEYWORD> (<VARIABLE>$revid</VARIABLE>) {
        <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'revids'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$revid</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>@revids</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'pages'</STRING>} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$diff</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'pages'</STRING>}<OPERATOR>-&gt;</OPERATOR>{ <VARIABLE>$revids</VARIABLE>[<NUMERIC>0</NUMERIC>] }<OPERATOR>-&gt;</OPERATOR>{<STRING>'revisions'</STRING>}<OPERATOR>-&gt;</OPERATOR>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'diff'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'*'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$diff</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 prefixindex($prefix[,$filter[,$ns[,$options]]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This returns an array of hashrefs containing page titles that start with the given $prefix. $filter is one of 'all', 'redirects', or 'nonredirects'; $ns is a single namespace number (unlike linksearch etc, which can accept an arrayref of numbers). $options is a hashref as described in the section on linksearch() or in MediaWiki::API. The hashref has keys 'title' and 'redirect' (present if the page is a redirect, not present otherwise).</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @prefix_pages = $bot-&gt;prefixindex("User:Mike.lifeguard");</DOCCOMMENT>
<DOCCOMMENT>    # Or, the more efficient equivalent</DOCCOMMENT>
<DOCCOMMENT>    my @prefix_pages = $bot-&gt;prefixindex("Mike.lifeguard", 2);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $hashref (@pages) {</DOCCOMMENT>
<DOCCOMMENT>        my $title = $hashref-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>        if $hashref-&gt;{'redirect'} {</DOCCOMMENT>
<DOCCOMMENT>            print "$title is a redirect\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>        else {</DOCCOMMENT>
<DOCCOMMENT>            print "$title\n is not a redirect\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> prefixindex {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$prefix</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$filter</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>defined</KEYWORD>(<VARIABLE>$filter</VARIABLE>) <OPERATOR>and</OPERATOR> <VARIABLE>$filter</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>(all|redirects|nonredirects)</REGEX><DELIMITER>/</DELIMITER>) {    <COMMENT># Verify</COMMENT>
        <VARIABLE>$filter</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$1</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><VARIABLE>$ns</VARIABLE> <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$prefix</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>:</REGEX><DELIMITER>/</DELIMITER>) {
        <FUNCTION>print</FUNCTION> <CONSTANT>STDERR</CONSTANT> <STRING>"Converted '$prefix' to..."</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> (<VARIABLE>$name</VARIABLE>) <OPERATOR>=</OPERATOR> <FUNCTION>split</FUNCTION>(<DELIMITER>/</DELIMITER><REGEX>:</REGEX><DELIMITER>/</DELIMITER><OPERATOR>,</OPERATOR> <VARIABLE>$prefix</VARIABLE><OPERATOR>,</OPERATOR> <NUMERIC>2</NUMERIC>)<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$ns_data</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_ns_data</OO>()<OPERATOR>;</OPERATOR>
        <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$ns_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$name</VARIABLE>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$prefix</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^$name:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>
        <FUNCTION>warn</FUNCTION> <STRING>"'$prefix' with a namespace filter $ns"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action   <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list     <OPERATOR>=&gt;</OPERATOR> <STRING>'allpages'</STRING><OPERATOR>,</OPERATOR>
        apprefix <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$prefix</VARIABLE><OPERATOR>,</OPERATOR>
        aplimit  <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'apnamespace'</STRING>}   <OPERATOR>=</OPERATOR> <VARIABLE>$ns</VARIABLE>     <KEYWORD>if</KEYWORD> <VARIABLE>$ns</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'apfilterredir'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$filter</VARIABLE> <KEYWORD>if</KEYWORD> <VARIABLE>$filter</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback hook</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$redirect</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>defined</KEYWORD>(<VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'redirect'</STRING>})<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION> <VARIABLE>@pages</VARIABLE><OPERATOR>,</OPERATOR> { title <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$title</VARIABLE><OPERATOR>,</OPERATOR> redirect <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$redirect</VARIABLE> }<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 search($search_term[,$ns[,$options_hashref]])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This is a simple search for your $search_term in page text. $ns is a namespace number to search in, or an arrayref of numbers (default is main namespace). $options_hashref is a hashref as described in MediaWiki::API or the section on linksearch(). It returns an array of page titles matching.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = $bot-&gt;search("Mike.lifeguard", 2);</DOCCOMMENT>
<DOCCOMMENT>    print "@pages\n";</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Or, use a callback for incremental processing:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = $bot-&gt;search("Mike.lifeguard", 2, { hook =&gt; \&amp;mysub });</DOCCOMMENT>
<DOCCOMMENT>    sub mysub {</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hashref (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $page = $hashref-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            print "$page\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> search {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$term</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>      <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {    <COMMENT># Accept a hashref</COMMENT>
        <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>)<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action   <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list     <OPERATOR>=&gt;</OPERATOR> <STRING>'search'</STRING><OPERATOR>,</OPERATOR>
        srsearch <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$term</VARIABLE><OPERATOR>,</OPERATOR>
        srwhat   <OPERATOR>=&gt;</OPERATOR> <STRING>'text'</STRING><OPERATOR>,</OPERATOR>
        srlimit  <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>

        <COMMENT>#srinfo      =&gt; 'totalhits',</COMMENT>
        srprop      <OPERATOR>=&gt;</OPERATOR> <STRING>'size'</STRING><OPERATOR>,</OPERATOR>
        srredirects <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when used with callback</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$result</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$result</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <FUNCTION>push</FUNCTION> <VARIABLE>@pages</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$title</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@pages</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 get_log($data, $options)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This fetches log entries, and returns results as an array of hashes. The options are as follows:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=over 4</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>type is the log type (block, delete...)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>user is the user who I&lt;performed&gt; the action. Do not include the User: prefix</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=item *</DOCCOMMENT>
<DOCCOMMENT>target is the target of the action. Where an action was performed to a page, it is the page title. Where an action was performed to a user, it is User:$username.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=back</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $log = $bot-&gt;get_log({</DOCCOMMENT>
<DOCCOMMENT>            type =&gt; 'block',</DOCCOMMENT>
<DOCCOMMENT>            user =&gt; 'User:Mike.lifeguard',</DOCCOMMENT>
<DOCCOMMENT>        });</DOCCOMMENT>
<DOCCOMMENT>    foreach my $entry (@$log) {</DOCCOMMENT>
<DOCCOMMENT>        my $user = $entry-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>        print "$user\n";</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;get_log({</DOCCOMMENT>
<DOCCOMMENT>            type =&gt; 'block',</DOCCOMMENT>
<DOCCOMMENT>            user =&gt; 'User:Mike.lifeguard',</DOCCOMMENT>
<DOCCOMMENT>        },</DOCCOMMENT>
<DOCCOMMENT>        { hook =&gt; \&amp;mysub, max =&gt; 10 }</DOCCOMMENT>
<DOCCOMMENT>    );</DOCCOMMENT>
<DOCCOMMENT>    sub mysub {</DOCCOMMENT>
<DOCCOMMENT>        my ($res) = @_;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $hashref (@$res) {</DOCCOMMENT>
<DOCCOMMENT>            my $title = $hashref-&gt;{'title'};</DOCCOMMENT>
<DOCCOMMENT>            print "$title\n";</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_log {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$data</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$log_type</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'type'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'user'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$target</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'target'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$ns_data</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_ns_data</OO>()<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user_ns_name</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$ns_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'2'</STRING>}<OPERATOR>;</OPERATOR>
    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^$user_ns_name:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list    <OPERATOR>=&gt;</OPERATOR> <STRING>'logevents'</STRING><OPERATOR>,</OPERATOR>
        lelimit <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'letype'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$log_type</VARIABLE> <KEYWORD>if</KEYWORD> <VARIABLE>$log_type</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'leuser'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$user</VARIABLE>     <KEYWORD>if</KEYWORD> <VARIABLE>$user</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$hash</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'letitle'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$target</VARIABLE>   <KEYWORD>if</KEYWORD> <VARIABLE>$target</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>(<VARIABLE>$hash</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>

    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 is_g_blocked($ip)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns what IP/range block I&lt;currently in place&gt; affects the IP/range. The return is a scalar of an IP/range if found (evaluates to true in boolean context); undef otherwise (evaluates false in boolean context). Pass in a single IP or CIDR range.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> is_g_blocked {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ip</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <COMMENT># http://en.wikipedia.org/w/api.php?action=query&amp;list=globalblocks&amp;bglimit=1&amp;bgprop=address&amp;bgip=127.0.0.1</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
            action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            list    <OPERATOR>=&gt;</OPERATOR> <STRING>'globalblocks'</STRING><OPERATOR>,</OPERATOR>
            bglimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
            bgprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'address'</STRING><OPERATOR>,</OPERATOR>
            bgip    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ip</VARIABLE><OPERATOR>,</OPERATOR>              <COMMENT># So handy! It searches for blocks affecting this IP or IP range, including rangeblocks! Can't get that from UI.</COMMENT>
    })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC> <KEYWORD>unless</KEYWORD> (<VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'globalblocks'</STRING>}<OPERATOR>-&gt;</OPERATOR>[<NUMERIC>0</NUMERIC>])<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'globalblocks'</STRING>}<OPERATOR>-&gt;</OPERATOR>[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'address'</STRING>}<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 was_g_blocked($ip)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns whether an IP/range was ever globally blocked. You should probably call this method only when your bot is operating on Meta.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> was_g_blocked {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ip</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <VARIABLE>$ip</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD><OPERATOR>;</OPERATOR> <COMMENT># Strip User: prefix, if present</COMMENT>

    <COMMENT># This query should always go to Meta</COMMENT>
    <KEYWORD>unless</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{api_url} <OPERATOR>=~</OPERATOR>
        <DELIMITER>m,</DELIMITER><REGEX></REGEX>
<REGEX>            http://meta.wikimedia.org/w/api.php</REGEX>
<REGEX>                |</REGEX>
<REGEX>            https://secure.wikimedia.org/wikipedia/meta/w/api.php</REGEX>
<REGEX>        </REGEX><DELIMITER>,</DELIMITER><KEYWORD>x</KEYWORD> <COMMENT># /x flag is pretty awesome :)</COMMENT>
        ) {
        carp <STRING>"GlobalBlocking queries should probably be sent to Meta; it doesn't look like you're doing so"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
    }

    <COMMENT># http://meta.wikimedia.org/w/api.php?action=query&amp;list=logevents&amp;letype=gblblock&amp;letitle=User:127.0.0.1&amp;lelimit=1&amp;leprop=ids</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list    <OPERATOR>=&gt;</OPERATOR> <STRING>'logevents'</STRING><OPERATOR>,</OPERATOR>
        letype  <OPERATOR>=&gt;</OPERATOR> <STRING>'gblblock'</STRING><OPERATOR>,</OPERATOR>
        letitle <OPERATOR>=&gt;</OPERATOR> <STRING>"User:$ip"</STRING><OPERATOR>,</OPERATOR>    <COMMENT># Ensure the User: prefix is there!</COMMENT>
        lelimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
        leprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'ids'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$number</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>scalar</KEYWORD> @{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'logevents'</STRING>} }<OPERATOR>;</OPERATOR>    <COMMENT># The number of blocks returned</COMMENT>

    <KEYWORD>if</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>elsif</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR> <COMMENT># UNPOSSIBLE!</COMMENT>
    }
}

<DOCCOMMENT>=head2 was_locked($user)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns whether a user was ever locked.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> was_locked {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <COMMENT># This query should always go to Meta</COMMENT>
    <KEYWORD>unless</KEYWORD> (
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{config}<OPERATOR>-&gt;</OPERATOR>{api_url} <OPERATOR>=~</OPERATOR> <DELIMITER>m,</DELIMITER><REGEX></REGEX>
<REGEX>            http://meta.wikimedia.org/w/api.php</REGEX>
<REGEX>                |</REGEX>
<REGEX>            https://secure.wikimedia.org/wikipedia/meta/w/api.php</REGEX>
<REGEX>        </REGEX><DELIMITER>,</DELIMITER><KEYWORD>x</KEYWORD>    <COMMENT># /x flag is pretty awesome :)</COMMENT>
        )
    {
        carp <STRING>"CentralAuth queries should probably be sent to Meta; it doesn't look like you're doing so"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
    }

    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD><OPERATOR>;</OPERATOR>
    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>\@global$</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>i</KEYWORD><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'api'</STRING>}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
            action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
            list    <OPERATOR>=&gt;</OPERATOR> <STRING>'logevents'</STRING><OPERATOR>,</OPERATOR>
            letype  <OPERATOR>=&gt;</OPERATOR> <STRING>'globalauth'</STRING><OPERATOR>,</OPERATOR>
            letitle <OPERATOR>=&gt;</OPERATOR> <STRING>"User:$user<ESC>\@</ESC>global"</STRING><OPERATOR>,</OPERATOR>
            lelimit <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>,</OPERATOR>
            leprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'ids'</STRING><OPERATOR>,</OPERATOR>
    })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$number</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>scalar</KEYWORD> @{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'logevents'</STRING>} }<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>elsif</KEYWORD> (<VARIABLE>$number</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 get_protection($page)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns data on page protection. If you care beyond true/false, information about page protection is returned as a array of up to two hashrefs. Each hashref has a type, level, and expiry. Levels are 'sysop' and 'autoconfirmed'; types are 'move' and 'edit'; expiry is a timestamp. Additionally, the key 'cascade' will exist if cascading protection is used.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my $page = "Main Page";</DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;edit({</DOCCOMMENT>
<DOCCOMMENT>        page    =&gt; $page,</DOCCOMMENT>
<DOCCOMMENT>        text    =&gt; rand(),</DOCCOMMENT>
<DOCCOMMENT>        summary =&gt; 'test',</DOCCOMMENT>
<DOCCOMMENT>    }) unless $bot-&gt;get_protection($page);</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>You can also pass an arrayref of page titles to do bulk queries:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = ("Main Page", "User:Mike.lifeguard", "Project:Sandbox");</DOCCOMMENT>
<DOCCOMMENT>    my $answer = $bot-&gt;get_protection(\@pages);</DOCCOMMENT>
<DOCCOMMENT>    foreach my $title (keys %$answer) {</DOCCOMMENT>
<DOCCOMMENT>        my $protected = $answer-&gt;{$title};</DOCCOMMENT>
<DOCCOMMENT>        print "$title is protected\n" if $protected;</DOCCOMMENT>
<DOCCOMMENT>        print "$title is unprotected\n" unless $protected;</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> get_protection {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {
        <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$page</VARIABLE>)<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        titles <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        prop   <OPERATOR>=&gt;</OPERATOR> <STRING>'info'</STRING><OPERATOR>,</OPERATOR>
        inprop <OPERATOR>=&gt;</OPERATOR> <STRING>'protection'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$data</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'pages'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$out_data</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$item</VARIABLE> (<FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$data</VARIABLE>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$title</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$item</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$protection</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$item</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'protection'</STRING>}<OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (@<VARIABLE>$protection</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC>) {
            <VARIABLE>$protection</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
        }
        <VARIABLE>$out_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$title</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>$protection</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>if</KEYWORD> (<KEYWORD>scalar</KEYWORD> <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$out_data</VARIABLE> <OPERATOR>==</OPERATOR> <NUMERIC>1</NUMERIC>) {
        <KEYWORD>return</KEYWORD> <VARIABLE>$out_data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$page</VARIABLE>}<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD> <VARIABLE>$out_data</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 is_protected($page)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This is a synonym for get_protection(), which should be used in preference.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> is_protected {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_protection</OO>(<VARIABLE>@_</VARIABLE>)<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 patrol($rcid)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Marks a page or revision identified by the rcid as patrolled. To mark several rcids as patrolled, you may pass an arrayref.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> patrol {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$rcid</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$rcid</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$id</VARIABLE> (@<VARIABLE>$rcid</VARIABLE>) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>patrol</OO>(<VARIABLE>$id</VARIABLE>)<OPERATOR>;</OPERATOR>
            <FUNCTION>push</FUNCTION>(<VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>
        }
        <KEYWORD>return</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>my</KEYWORD> (<VARIABLE>$token</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_edittoken</OO>()<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
                action <OPERATOR>=&gt;</OPERATOR> <STRING>'patrol'</STRING><OPERATOR>,</OPERATOR>
                rcid   <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$rcid</VARIABLE><OPERATOR>,</OPERATOR>
                token  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$token</VARIABLE><OPERATOR>,</OPERATOR>
        })<OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<DOCCOMMENT>=head2 email($user, $subject, $body)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>This allows you to send emails through the wiki. All 3 of $user (without the User: prefix), $subject and $body are required. If $user is an arrayref, this will send the same email (subject and body) to all users.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> email {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$subject</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$body</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$user</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$target</VARIABLE> (@<VARIABLE>$user</VARIABLE>) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>email</OO>(<VARIABLE>$target</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$subject</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$body</VARIABLE>)<OPERATOR>;</OPERATOR>
            <FUNCTION>push</FUNCTION>(<VARIABLE>@return</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>
        }
        <KEYWORD>return</KEYWORD> <VARIABLE>@return</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>:</REGEX><DELIMITER>/</DELIMITER>) {
        <KEYWORD>my</KEYWORD> <VARIABLE>$user_ns_name</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_ns_data</OO>()<OPERATOR>-&gt;</OPERATOR>{<NUMERIC>2</NUMERIC>}<OPERATOR>;</OPERATOR>
        <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^$user_ns_name:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> (<VARIABLE>$token</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_get_edittoken</OO>()<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'emailuser'</STRING><OPERATOR>,</OPERATOR>
        target  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$user</VARIABLE><OPERATOR>,</OPERATOR>
        subject <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$subject</VARIABLE><OPERATOR>,</OPERATOR>
        text    <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$body</VARIABLE><OPERATOR>,</OPERATOR>
        token   <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$token</VARIABLE><OPERATOR>,</OPERATOR>
    })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 top_edits($user[,$options])</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array of the page titles where the user is the latest editor.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    my @pages = $bot-&gt;top_edits("Mike.lifeguard", {max =&gt; 5});</DOCCOMMENT>
<DOCCOMMENT>    foreach my $page (@pages) {</DOCCOMMENT>
<DOCCOMMENT>        $bot-&gt;rollback($page, "Mike.lifeguard");</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Note that accessing the data with a callback happens B&lt;before&gt; filtering</DOCCOMMENT>
<DOCCOMMENT>the top edits is done. For that reason, you should use C&lt;contributions()&gt;</DOCCOMMENT>
<DOCCOMMENT>if you need to use a callback. If you use a callback with C&lt;top_edits()&gt;,</DOCCOMMENT>
<DOCCOMMENT>you B&lt;will not&gt; get top edits returned. It is safe to use a callback if</DOCCOMMENT>
<DOCCOMMENT>you I&lt;check&gt; that it is a top edit:</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>    $bot-&gt;top_edits("Mike.lifeguard", { hook =&gt; \&amp;rv });</DOCCOMMENT>
<DOCCOMMENT>    sub rv {</DOCCOMMENT>
<DOCCOMMENT>        my $data = shift;</DOCCOMMENT>
<DOCCOMMENT>        foreach my $page (@$data) {</DOCCOMMENT>
<DOCCOMMENT>            if (exists($page-&gt;{'top'})) {</DOCCOMMENT>
<DOCCOMMENT>                $bot-&gt;rollback($page-&gt;{'title'}, "Mike.lifeguard");</DOCCOMMENT>
<DOCCOMMENT>            }</DOCCOMMENT>
<DOCCOMMENT>        }</DOCCOMMENT>
<DOCCOMMENT>    }</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> top_edits {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE>    <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$options</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>

    <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>})<OPERATOR>;</OPERATOR>
    <KEYWORD>delete</KEYWORD>(<VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}) <KEYWORD>if</KEYWORD> <VARIABLE>$options</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'api'</STRING>}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>({
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list    <OPERATOR>=&gt;</OPERATOR> <STRING>'usercontribs'</STRING><OPERATOR>,</OPERATOR>
        ucuser  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$user</VARIABLE><OPERATOR>,</OPERATOR>
        ucprop  <OPERATOR>=&gt;</OPERATOR> <STRING>'title|flags'</STRING><OPERATOR>,</OPERATOR>
        uclimit <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>,</OPERATOR> <VARIABLE>$options</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> _handle_api_error() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>

    <KEYWORD>my</KEYWORD> <VARIABLE>@titles</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> (@<VARIABLE>$res</VARIABLE>) {
        <FUNCTION>push</FUNCTION> <VARIABLE>@titles</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'title'</STRING>} <KEYWORD>if</KEYWORD> <FUNCTION>exists</FUNCTION>(<VARIABLE>$page</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'top'</STRING>})<OPERATOR>;</OPERATOR>
    }

    <KEYWORD>return</KEYWORD> <VARIABLE>@titles</VARIABLE><OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head2 contributions($user, $ns, $options)</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>Returns an array of hashrefs of data for the user's contributions. $ns can be an</DOCCOMMENT>
<DOCCOMMENT>arrayref of namespace numbers.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<KEYWORD>sub</KEYWORD> contributions {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$user</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ns</VARIABLE>   <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$opts</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <VARIABLE>$user</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>^User:</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>

    <VARIABLE>$ns</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>join</FUNCTION>(<STRING>'|'</STRING><OPERATOR>,</OPERATOR> @<VARIABLE>$ns</VARIABLE>) <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$ns</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'ARRAY'</STRING>)<OPERATOR>;</OPERATOR>

    <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC> <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>})<OPERATOR>;</OPERATOR>
    <KEYWORD>delete</KEYWORD>(<VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>}) <KEYWORD>if</KEYWORD> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'max'</STRING>} <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'api'</STRING>}<OPERATOR>-&gt;</OPERATOR><OO>list</OO>({
        action      <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        list        <OPERATOR>=&gt;</OPERATOR> <STRING>'usercontribs'</STRING><OPERATOR>,</OPERATOR>
        ucuser      <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$user</VARIABLE><OPERATOR>,</OPERATOR>
        ucnamespace <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$ns</VARIABLE><OPERATOR>,</OPERATOR>
        ucprop      <OPERATOR>=&gt;</OPERATOR> <STRING>'ids|title|timestamp|comment|patrolled|flags'</STRING><OPERATOR>,</OPERATOR>
        uclimit     <OPERATOR>=&gt;</OPERATOR> <STRING>'max'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>,</OPERATOR> <VARIABLE>$opts</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> _handle_api_error() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC> <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><KEYWORD>ref</KEYWORD> <VARIABLE>$res</VARIABLE>)<OPERATOR>;</OPERATOR>    <COMMENT># Not a ref when using callback</COMMENT>

    <KEYWORD>return</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># Can we make this more useful?</COMMENT>
}

<COMMENT>################</COMMENT>
<COMMENT># Internal use #</COMMENT>
<COMMENT>################</COMMENT>

<KEYWORD>sub</KEYWORD> _get_edittoken { <COMMENT># Actually returns ($edittoken, $basetimestamp, $starttimestamp)</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$page</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'Main Page'</STRING><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$type</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> <STRING>'edit'</STRING><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({
        action  <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        titles  <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$page</VARIABLE><OPERATOR>,</OPERATOR>
        prop    <OPERATOR>=&gt;</OPERATOR> <STRING>'info|revisions'</STRING><OPERATOR>,</OPERATOR>
        intoken <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$type</VARIABLE><OPERATOR>,</OPERATOR>
    }) <OPERATOR>or</OPERATOR> <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>()<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> (<VARIABLE>$id</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$data</VARIABLE>) <OPERATOR>=</OPERATOR> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'pages'</STRING>} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$edittoken</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'edittoken'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$tokentimestamp</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'starttimestamp'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$basetimestamp</VARIABLE>  <OPERATOR>=</OPERATOR> <VARIABLE>$data</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'revisions'</STRING>}[<NUMERIC>0</NUMERIC>]<OPERATOR>-&gt;</OPERATOR>{<STRING>'timestamp'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> (<VARIABLE>$edittoken</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$basetimestamp</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$tokentimestamp</VARIABLE>)<OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> _handle_api_error {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    carp <STRING>'Error code '</STRING>
        <OPERATOR>.</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{error}<OPERATOR>-&gt;</OPERATOR>{code}
        <OPERATOR>.</OPERATOR> <STRING>": "</STRING>
        <OPERATOR>.</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{error}<OPERATOR>-&gt;</OPERATOR>{details} <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>}<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{error} <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{error}<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD><OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> _is_loggedin {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        meta   <OPERATOR>=&gt;</OPERATOR> <STRING>'userinfo'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$is</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'userinfo'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'name'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ought</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{username}<OPERATOR>;</OPERATOR>
    <FUNCTION>warn</FUNCTION> <STRING>"Testing if logged in: we are $is, and we should be $ought"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> (<VARIABLE>$is</VARIABLE> <OPERATOR>eq</OPERATOR> <VARIABLE>$ought</VARIABLE>)<OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> _do_autoconfig {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <COMMENT># http://en.wikipedia.org/w/api.php?action=query&amp;meta=userinfo&amp;uiprop=rights|groups</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$hash</VARIABLE> <OPERATOR>=</OPERATOR> {
        action <OPERATOR>=&gt;</OPERATOR> <STRING>'query'</STRING><OPERATOR>,</OPERATOR>
        meta   <OPERATOR>=&gt;</OPERATOR> <STRING>'userinfo'</STRING><OPERATOR>,</OPERATOR>
        uiprop <OPERATOR>=&gt;</OPERATOR> <STRING>'rights|groups'</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>(<VARIABLE>$hash</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$is</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'userinfo'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'name'</STRING>}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$ought</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{username}<OPERATOR>;</OPERATOR>

    <COMMENT># Should we try to recover by logging in again? croak?</COMMENT>
    carp <STRING>"We're logged in as $is but we should be logged in as $ought"</STRING> <KEYWORD>if</KEYWORD> (<VARIABLE>$is</VARIABLE> <OPERATOR>ne</OPERATOR> <VARIABLE>$ought</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>@rights</VARIABLE>            <OPERATOR>=</OPERATOR> @{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'userinfo'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'rights'</STRING>} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$has_bot</VARIABLE>           <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$has_apihighlimits</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$default_assert</VARIABLE>    <OPERATOR>=</OPERATOR> <STRING>'user'</STRING><OPERATOR>;</OPERATOR>                                           <COMMENT># At a *minimum*, the bot should be logged in.</COMMENT>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$right</VARIABLE> (<VARIABLE>@rights</VARIABLE>) {
        <KEYWORD>if</KEYWORD> (<VARIABLE>$right</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'bot'</STRING>) {
            <VARIABLE>$has_bot</VARIABLE>        <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            <VARIABLE>$default_assert</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'bot'</STRING><OPERATOR>;</OPERATOR>
        }
        <KEYWORD>elsif</KEYWORD> (<VARIABLE>$right</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'apihighlimits'</STRING>) {
            <VARIABLE>$has_apihighlimits</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        }
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>@groups</VARIABLE>   <OPERATOR>=</OPERATOR> @{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'query'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'userinfo'</STRING>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'groups'</STRING>} }<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$is_sysop</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$group</VARIABLE> (<VARIABLE>@groups</VARIABLE>) {
        <KEYWORD>if</KEYWORD> (<VARIABLE>$group</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'sysop'</STRING>) {
            <VARIABLE>$is_sysop</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
        }
    }

    <KEYWORD>unless</KEYWORD> (<VARIABLE>$has_bot</VARIABLE> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>!</OPERATOR><VARIABLE>$is_sysop</VARIABLE>) {
        <FUNCTION>warn</FUNCTION> <STRING>"$is doesn't have a bot flag; edits will be visible in RecentChanges"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'debug'</STRING>} <OPERATOR>&gt;</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>set_highlimits</OO>(<VARIABLE>$has_apihighlimits</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'assert'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$default_assert</VARIABLE> <KEYWORD>unless</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'assert'</STRING>}<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> _get_sitematrix {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$res</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR><OO>api</OO>({ action <OPERATOR>=&gt;</OPERATOR> <STRING>'sitematrix'</STRING> })<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_handle_api_error</OO>() <KEYWORD>unless</KEYWORD> <VARIABLE>$res</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>%sitematrix</VARIABLE> <OPERATOR>=</OPERATOR> <OPERATOR>%</OPERATOR>{ <VARIABLE>$res</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>} }<OPERATOR>;</OPERATOR>

<COMMENT>#    use Data::Dumper;</COMMENT>
<COMMENT>#    print STDERR Dumper(\%sitematrix) and die;</COMMENT>
    <COMMENT># This hash is a monstrosity (see http://sprunge.us/dfBD?pl), and needs</COMMENT>
    <COMMENT># lots of post-processing to have a sane data structure :\</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>%by_db</VARIABLE><OPERATOR>;</OPERATOR>
    <CONSTANT>SECTION</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$hashref</VARIABLE> (<VARIABLE>%sitematrix</VARIABLE>) {
        <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$hashref</VARIABLE> <OPERATOR>ne</OPERATOR> <STRING>'HASH'</STRING>) {    <COMMENT># Yes, there are non-hashrefs in here, wtf?!</COMMENT>
            <KEYWORD>if</KEYWORD> (<VARIABLE>$hashref</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'specials'</STRING>) {
                <CONSTANT>SPECIAL</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$special</VARIABLE> (@{ <VARIABLE>$sitematrix</VARIABLE>{<STRING>'specials'</STRING>} }) {
                    <KEYWORD>next</KEYWORD> <CONSTANT>SPECIAL</CONSTANT>
                        <KEYWORD>if</KEYWORD> (<FUNCTION>exists</FUNCTION>(<VARIABLE>$special</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'private'</STRING>})
                        <OPERATOR>or</OPERATOR> <FUNCTION>exists</FUNCTION>(<VARIABLE>$special</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'fishbowl'</STRING>}))<OPERATOR>;</OPERATOR>

                    <KEYWORD>my</KEYWORD> <VARIABLE>$db</VARIABLE>     <OPERATOR>=</OPERATOR> <VARIABLE>$special</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'code'</STRING>}<OPERATOR>;</OPERATOR>
                    <KEYWORD>my</KEYWORD> <VARIABLE>$domain</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$special</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'url'</STRING>}<OPERATOR>;</OPERATOR>
                    <VARIABLE>$domain</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s,</DELIMITER><REGEX>^http://</REGEX><DELIMITER>,</DELIMITER><STRING></STRING><DELIMITER>,</DELIMITER><OPERATOR>;</OPERATOR>

                    <VARIABLE>$by_db</VARIABLE>{<VARIABLE>$db</VARIABLE>}     <OPERATOR>=</OPERATOR> <VARIABLE>$domain</VARIABLE><OPERATOR>;</OPERATOR>
                }
            }
            <KEYWORD>next</KEYWORD> <CONSTANT>SECTION</CONSTANT><OPERATOR>;</OPERATOR>
        }

        <KEYWORD>my</KEYWORD> <VARIABLE>$lang</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'code'</STRING>}<OPERATOR>;</OPERATOR>

        <CONSTANT>WIKI</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$wiki_ref</VARIABLE> (<VARIABLE>$hashref</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'site'</STRING>}) {
            <CONSTANT>WIKI2</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$wiki_ref2</VARIABLE> (@<VARIABLE>$wiki_ref</VARIABLE>) {
                <KEYWORD>my</KEYWORD> <VARIABLE>$family</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$wiki_ref2</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'code'</STRING>}<OPERATOR>;</OPERATOR>
                <KEYWORD>my</KEYWORD> <VARIABLE>$domain</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$wiki_ref2</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'url'</STRING>}<OPERATOR>;</OPERATOR>
                <VARIABLE>$domain</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s,</DELIMITER><REGEX>^http://</REGEX><DELIMITER>,</DELIMITER><STRING></STRING><DELIMITER>,</DELIMITER><OPERATOR>;</OPERATOR>

                <KEYWORD>my</KEYWORD> <VARIABLE>$db</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$lang</VARIABLE> <OPERATOR>.</OPERATOR> <VARIABLE>$family</VARIABLE><OPERATOR>;</OPERATOR>    <COMMENT># Is simple concatenation /always/ correct?</COMMENT>

                <VARIABLE>$by_db</VARIABLE>{<VARIABLE>$db</VARIABLE>}     <OPERATOR>=</OPERATOR> <VARIABLE>$domain</VARIABLE><OPERATOR>;</OPERATOR>
            }
        }
    }

    <COMMENT># Now filter out closed wikis</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$response</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{api}<OPERATOR>-&gt;</OPERATOR>{ua}<OPERATOR>-&gt;</OPERATOR><OO>get</OO>(<STRING>'http://noc.wikimedia.org/conf/closed.dblist'</STRING>)<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$response</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>is_success</OO>()) {
        <KEYWORD>my</KEYWORD> <VARIABLE>@closed_list</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>split</FUNCTION>(<DELIMITER>/</DELIMITER><REGEX>\n</REGEX><DELIMITER>/</DELIMITER><OPERATOR>,</OPERATOR> <VARIABLE>$response</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>decoded_content</OO>)<OPERATOR>;</OPERATOR>
        <CONSTANT>CLOSED</CONSTANT><OPERATOR>:</OPERATOR> <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$closed</VARIABLE> (<VARIABLE>@closed_list</VARIABLE>) {
            <KEYWORD>delete</KEYWORD>(<VARIABLE>$by_db</VARIABLE>{<VARIABLE>$closed</VARIABLE>})<OPERATOR>;</OPERATOR>
        }
    }

    <COMMENT># Now merge in the reverse, so you can look up by domain as well as db</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>%by_domain</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>while</KEYWORD> (<KEYWORD>my</KEYWORD> (<VARIABLE>$key</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$value</VARIABLE>) <OPERATOR>=</OPERATOR> <FUNCTION>each</FUNCTION> <VARIABLE>%by_db</VARIABLE>) {
        <VARIABLE>$by_domain</VARIABLE>{<VARIABLE>$value</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>$key</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>%by_db</VARIABLE> <OPERATOR>=</OPERATOR> (<VARIABLE>%by_db</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>%by_domain</VARIABLE>)<OPERATOR>;</OPERATOR>

    <COMMENT># This could be saved to disk with Storable. Next time you call this</COMMENT>
    <COMMENT># method, if mtime is less than, say, 14d, you could load it from</COMMENT>
    <COMMENT># disk instead of over network.</COMMENT>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>} <OPERATOR>=</OPERATOR> <OPERATOR>\%</OPERATOR>by_db<OPERATOR>;</OPERATOR>
<COMMENT>#    use Data::Dumper;</COMMENT>
<COMMENT>#    print STDERR Dumper($self-&gt;{'sitematrix'}) and die;</COMMENT>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'sitematrix'</STRING>}<OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> _get_ns_data {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>

    <COMMENT># If we have it already, return the cached data</COMMENT>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'ns_data'</STRING>} <KEYWORD>if</KEYWORD> <FUNCTION>exists</FUNCTION>(<VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'ns_data'</STRING>})<OPERATOR>;</OPERATOR>

    <COMMENT># If we haven't returned by now, we have to ask the API</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>%ns_data</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_namespace_names</OO>()<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>%reverse</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>reverse</FUNCTION> <VARIABLE>%ns_data</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>%ns_data</VARIABLE> <OPERATOR>=</OPERATOR> (<VARIABLE>%ns_data</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>%reverse</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'ns_data'</STRING>} <OPERATOR>=</OPERATOR> <OPERATOR>\%</OPERATOR>ns_data<OPERATOR>;</OPERATOR>    <COMMENT># Save for later use</COMMENT>

    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'ns_data'</STRING>}<OPERATOR>;</OPERATOR>
}

<DOCCOMMENT>=head1 ERROR HANDLING</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>All functions will return undef in any handled error situation. Further error</DOCCOMMENT>
<DOCCOMMENT>data is stored in $bot-&gt;{'error'}-&gt;{'code'} and $bot-&gt;{'error'}-&gt;{'details'}.</DOCCOMMENT>
<DOCCOMMENT></DOCCOMMENT>
<DOCCOMMENT>=cut</DOCCOMMENT>

<NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

<DELIMITER>__END__</DELIMITER>