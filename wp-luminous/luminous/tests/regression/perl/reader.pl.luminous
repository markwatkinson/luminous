<COMMENT># vim: ts=8 sw=4 expandtab:</COMMENT>
<COMMENT>##########################################################</COMMENT>
<COMMENT>## This script is part of the Devel::NYTProf distribution</COMMENT>
<COMMENT>##</COMMENT>
<COMMENT>## Copyright, contact and other information can be found</COMMENT>
<COMMENT>## at the bottom of this file, or by going to:</COMMENT>
<COMMENT>## http://search.cpan.org/dist/Devel-NYTProf/</COMMENT>
<COMMENT>##</COMMENT>
<COMMENT>###########################################################</COMMENT>
<COMMENT>## $Id$</COMMENT>
<COMMENT>###########################################################</COMMENT>
<KEYWORD>package</KEYWORD> <OBJ>Devel</OBJ><OPERATOR>::</OPERATOR><OO>NYTProf</OO><OPERATOR>::</OPERATOR><OO>Reader</OO><OPERATOR>;</OPERATOR>

<KEYWORD>our</KEYWORD> <VARIABLE>$VERSION</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'4.06'</STRING><OPERATOR>;</OPERATOR>

<KEYWORD>use</KEYWORD> warnings<OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> strict<OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> Carp<OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> Config<OPERATOR>;</OPERATOR>

<KEYWORD>use</KEYWORD> <OBJ>List</OBJ><OPERATOR>::</OPERATOR><OO>Util</OO> <DELIMITER>qw(</DELIMITER><STRING>sum</STRING> <STRING>max</STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>Data</OBJ><OPERATOR>::</OPERATOR><OO>Dumper</OO><OPERATOR>;</OPERATOR>

<KEYWORD>use</KEYWORD> <OBJ>Devel</OBJ><OPERATOR>::</OPERATOR><OO>NYTProf</OO><OPERATOR>::</OPERATOR><OO>Data</OO><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> <OBJ>Devel</OBJ><OPERATOR>::</OPERATOR><OO>NYTProf</OO><OPERATOR>::</OPERATOR><OO>Util</OO> <DELIMITER>qw(</DELIMITER><STRING></STRING>
    <STRING>fmt_float</STRING>
    <STRING>fmt_time</STRING>
    <STRING>html_safe_filename</STRING>
    <STRING>calculate_median_absolute_deviation</STRING>
    <STRING>trace_level</STRING>
<STRING></STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>

<COMMENT># These control the limits for what the script will consider ok to severe times</COMMENT>
<COMMENT># specified in standard deviations from the mean time</COMMENT>
<KEYWORD>use</KEYWORD> constant <CONSTANT>SEVERITY_SEVERE</CONSTANT> <OPERATOR>=&gt;</OPERATOR> <NUMERIC>2.0</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT># above this deviation, a bottleneck</COMMENT>
<KEYWORD>use</KEYWORD> constant <CONSTANT>SEVERITY_BAD</CONSTANT>    <OPERATOR>=&gt;</OPERATOR> <NUMERIC>1.0</NUMERIC><OPERATOR>;</OPERATOR>
<KEYWORD>use</KEYWORD> constant <CONSTANT>SEVERITY_GOOD</CONSTANT>   <OPERATOR>=&gt;</OPERATOR> <NUMERIC>0.5</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT># within this deviation, okay</COMMENT>


<COMMENT># Static class variables</COMMENT>
<KEYWORD>our</KEYWORD> <VARIABLE>$FLOAT_FORMAT</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$Config</VARIABLE>{nvfformat}<OPERATOR>;</OPERATOR>
<VARIABLE>$FLOAT_FORMAT</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>"</REGEX><DELIMITER>/</DELIMITER><STRING></STRING><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD><OPERATOR>;</OPERATOR>

<COMMENT># Class methods</COMMENT>
<KEYWORD>sub</KEYWORD> new {
    <KEYWORD>my</KEYWORD> <VARIABLE>$class</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$file</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$opts</VARIABLE>  <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <OPERATOR>||</OPERATOR> {}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> {
        file <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$file</VARIABLE> <OPERATOR>||</OPERATOR> <STRING>'nytprof.out'</STRING><OPERATOR>,</OPERATOR>
        output_dir <OPERATOR>=&gt;</OPERATOR> <STRING>'.'</STRING><OPERATOR>,</OPERATOR>
        suffix     <OPERATOR>=&gt;</OPERATOR> <STRING>'.csv'</STRING><OPERATOR>,</OPERATOR>
        header     <OPERATOR>=&gt;</OPERATOR> <STRING>"# Profile data generated by Devel::NYTProf::Reader<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# Version: v$Devel::NYTProf::Core::VERSION<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# More information at http://search.cpan.org/dist/Devel-NYTProf/<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# Format: time,calls,time/call,code<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR>
        datastart <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
        mk_report_source_line <OPERATOR>=&gt;</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>,</OPERATOR>
        mk_report_xsub_line   <OPERATOR>=&gt;</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>,</OPERATOR>
        mk_report_separator_line <OPERATOR>=&gt;</OPERATOR> <KEYWORD>undef</KEYWORD><OPERATOR>,</OPERATOR>
        line      <OPERATOR>=&gt;</OPERATOR> [
            {}<OPERATOR>,</OPERATOR>
            {value <OPERATOR>=&gt;</OPERATOR> <STRING>'time'</STRING><OPERATOR>,</OPERATOR>      end <OPERATOR>=&gt;</OPERATOR> <STRING>','</STRING><OPERATOR>,</OPERATOR> default <OPERATOR>=&gt;</OPERATOR> <STRING>'0'</STRING>}<OPERATOR>,</OPERATOR>
            {value <OPERATOR>=&gt;</OPERATOR> <STRING>'calls'</STRING><OPERATOR>,</OPERATOR>     end <OPERATOR>=&gt;</OPERATOR> <STRING>','</STRING><OPERATOR>,</OPERATOR> default <OPERATOR>=&gt;</OPERATOR> <STRING>'0'</STRING>}<OPERATOR>,</OPERATOR>
            {value <OPERATOR>=&gt;</OPERATOR> <STRING>'time/call'</STRING><OPERATOR>,</OPERATOR> end <OPERATOR>=&gt;</OPERATOR> <STRING>','</STRING><OPERATOR>,</OPERATOR> default <OPERATOR>=&gt;</OPERATOR> <STRING>'0'</STRING>}<OPERATOR>,</OPERATOR>
            {value <OPERATOR>=&gt;</OPERATOR> <STRING>'source'</STRING><OPERATOR>,</OPERATOR>    end <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>  default <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING>}<OPERATOR>,</OPERATOR>
            {end   <OPERATOR>=&gt;</OPERATOR> <STRING>"<ESC>\n</ESC>"</STRING>}
        ]<OPERATOR>,</OPERATOR>
        dataend  <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
        footer   <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
        merged_fids <OPERATOR>=&gt;</OPERATOR> <STRING>''</STRING><OPERATOR>,</OPERATOR>
        taintmsg <OPERATOR>=&gt;</OPERATOR> <STRING>"# WARNING!<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# The source file used in generating this report has been modified<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# since generating the profiler database.  It might be out of sync<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR>
        sawampersand <OPERATOR>=&gt;</OPERATOR> <STRING>"# NOTE!<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# This file uses special regexp match variables that impact the performance<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# of all regular expression in the program!<ESC>\n</ESC>"</STRING>
            <OPERATOR>.</OPERATOR> <STRING>"# See WARNING in http://perldoc.perl.org/perlre.html#Capture-buffers<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR>
    }<OPERATOR>;</OPERATOR>

    <KEYWORD>bless</KEYWORD>(<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$class</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{profile} <OPERATOR>=</OPERATOR> <OBJ>Devel</OBJ><OPERATOR>::</OPERATOR><OO>NYTProf</OO><OPERATOR>::</OPERATOR><OO>Data</OO><OPERATOR>-&gt;</OPERATOR><OO>new</OO>({
        <OPERATOR>%</OPERATOR><VARIABLE>$opts</VARIABLE><OPERATOR>,</OPERATOR>
        filename <OPERATOR>=&gt;</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{file}<OPERATOR>,</OPERATOR>
    })<OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>;</OPERATOR>
}



<COMMENT>##</COMMENT>
<KEYWORD>sub</KEYWORD> set_param {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$param</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$value</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>exists</FUNCTION> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$param</VARIABLE>}) {
        confess <STRING>"Attempt to set $param to $value failed: $param is not a valid "</STRING> <OPERATOR>.</OPERATOR> <STRING>"parameter<ESC>\n</ESC>"</STRING><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>else</KEYWORD> {
        <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$param</VARIABLE>} <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$value</VARIABLE>)<OPERATOR>;</OPERATOR>
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$param</VARIABLE>} <OPERATOR>=</OPERATOR> <VARIABLE>$value</VARIABLE><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>undef</KEYWORD><OPERATOR>;</OPERATOR>
}


<KEYWORD>sub</KEYWORD> get_param {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$param</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$code_args</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$value</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$param</VARIABLE>}<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<KEYWORD>ref</KEYWORD> <VARIABLE>$value</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'CODE'</STRING>) {
        <VARIABLE>$code_args</VARIABLE> <OPERATOR>||=</OPERATOR> []<OPERATOR>;</OPERATOR>
        <VARIABLE>$value</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$value</VARIABLE><OPERATOR>-&gt;</OPERATOR>(@<VARIABLE>$code_args</VARIABLE>)<OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$value</VARIABLE><OPERATOR>;</OPERATOR>
}

<COMMENT>##</COMMENT>
<KEYWORD>sub</KEYWORD> file_has_been_modified {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$file</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <KEYWORD>undef</KEYWORD> <KEYWORD>unless</KEYWORD> <OPERATOR>-</OPERATOR>f <VARIABLE>$file</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$mtime</VARIABLE> <OPERATOR>=</OPERATOR> (<FUNCTION>stat</FUNCTION> <VARIABLE>$file</VARIABLE>)[<NUMERIC>9</NUMERIC>]<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> (<VARIABLE>$mtime</VARIABLE> <OPERATOR>&gt;</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{profile}{attribute}{basetime})<OPERATOR>;</OPERATOR>
}

<COMMENT>##</COMMENT>
<KEYWORD>sub</KEYWORD> _output_additional {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fname</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$content</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    <FUNCTION>open</FUNCTION>(OUT<OPERATOR>,</OPERATOR> <STRING>'&gt;'</STRING><OPERATOR>,</OPERATOR> <STRING>"$self-&gt;{output_dir}/$fname"</STRING>)
        <OPERATOR>or</OPERATOR> confess <STRING>"Unable to open $self-&gt;{output_dir}/$fname for writing; $!<ESC>\n</ESC>"</STRING><OPERATOR>;</OPERATOR>
    <FUNCTION>print</FUNCTION> OUT <VARIABLE>$content</VARIABLE><OPERATOR>;</OPERATOR>
    <FUNCTION>close</FUNCTION> OUT<OPERATOR>;</OPERATOR>
}

<COMMENT>##</COMMENT>
<KEYWORD>sub</KEYWORD> output_dir {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$dir</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{output_dir} <KEYWORD>unless</KEYWORD> <KEYWORD>defined</KEYWORD>(<VARIABLE>$dir</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><FUNCTION>mkdir</FUNCTION> <VARIABLE>$dir</VARIABLE>) {
        confess <STRING>"Unable to create directory $dir: $!<ESC>\n</ESC>"</STRING> <KEYWORD>if</KEYWORD> <OPERATOR>!</OPERATOR><VARIABLE>$!</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>/</DELIMITER><REGEX>exists</REGEX><DELIMITER>/</DELIMITER><OPERATOR>;</OPERATOR>
    }
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{output_dir} <OPERATOR>=</OPERATOR> <VARIABLE>$dir</VARIABLE><OPERATOR>;</OPERATOR>
}

<COMMENT>##</COMMENT>
<KEYWORD>sub</KEYWORD> report {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$opts</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$level_additional_sub</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{level_additional}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$profile</VARIABLE>              <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{profile}<OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$modes</VARIABLE>                <OPERATOR>=</OPERATOR> <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_profile_levels</OO><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>@levels</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>grep</FUNCTION> { {<FUNCTION>reverse</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$modes</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$_</VARIABLE>} } <DELIMITER>qw(</DELIMITER><STRING>sub</STRING> <STRING>block</STRING> <STRING>line</STRING><DELIMITER>)</DELIMITER><OPERATOR>;</OPERATOR>
    <KEYWORD>for</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$level</VARIABLE> (<VARIABLE>@levels</VARIABLE>) {
        <FUNCTION>print</FUNCTION> <STRING>"Writing $level reports to $self-&gt;{output_dir} directory<ESC>\n</ESC>"</STRING>
            <KEYWORD>unless</KEYWORD> <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{quiet}<OPERATOR>;</OPERATOR>
        <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>_generate_report</OO>(<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$level</VARIABLE><OPERATOR>,</OPERATOR>
            show_progress <OPERATOR>=&gt;</OPERATOR> (not <VARIABLE>$opts</VARIABLE><OPERATOR>-&gt;</OPERATOR>{quiet} <OPERATOR>and</OPERATOR> <OPERATOR>-</OPERATOR>t <CONSTANT>STDOUT</CONSTANT>)
        )<OPERATOR>;</OPERATOR>
        <VARIABLE>$level_additional_sub</VARIABLE><OPERATOR>-&gt;</OPERATOR>(<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$level</VARIABLE>)
            <KEYWORD>if</KEYWORD> <VARIABLE>$level_additional_sub</VARIABLE><OPERATOR>;</OPERATOR>
    }
}

<KEYWORD>sub</KEYWORD> current_level {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{current_level} <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> <KEYWORD>if</KEYWORD> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{current_level} <OPERATOR>||</OPERATOR> <STRING>'line'</STRING><OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> fname_for_fileinfo {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$level</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    confess <STRING>"No fileinfo"</STRING> <KEYWORD>unless</KEYWORD> <VARIABLE>$fi</VARIABLE><OPERATOR>;</OPERATOR>
    <VARIABLE>$level</VARIABLE> <OPERATOR>||=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>current_level</OO><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$fname</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>filename_without_inc</OO><OPERATOR>;</OPERATOR>

    <COMMENT># We want to have descriptive and unambiguous filename</COMMENT>
    <COMMENT># but we don't want to risk failure due to filenames being longer</COMMENT>
    <COMMENT># than MAXPATH (including the length of whatever dir we're writing</COMMENT>
    <COMMENT># the report files into). So we truncate to the last component if</COMMENT>
    <COMMENT># the filenames seems 'dangerously long'. <COMMENT_NOTE>XXX</COMMENT_NOTE> be smarter about this.</COMMENT>
    <COMMENT># This is safe from ambiguity because we add the fid to the filename below.</COMMENT>
    <KEYWORD>my</KEYWORD> <VARIABLE>$max_len</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$ENV</VARIABLE>{<CONSTANT>NYTPROF_FNAME_TRIM</CONSTANT>} <OPERATOR>||</OPERATOR> <NUMERIC>50</NUMERIC><OPERATOR>;</OPERATOR>
    <VARIABLE>$fname</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>s!</DELIMITER><REGEX>/.*/</REGEX><DELIMITER>!</DELIMITER><STRING>/.../</STRING><DELIMITER>!</DELIMITER> <KEYWORD>if</KEYWORD> <FUNCTION>length</FUNCTION>(<VARIABLE>$fname</VARIABLE>) <OPERATOR>&gt;</OPERATOR> <VARIABLE>$max_len</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># remove dir path</COMMENT>
    <VARIABLE>$fname</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"TOOLONG"</STRING>      <KEYWORD>if</KEYWORD> <FUNCTION>length</FUNCTION>(<VARIABLE>$fname</VARIABLE>) <OPERATOR>&gt;</OPERATOR> <VARIABLE>$max_len</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># just in case</COMMENT>

    <VARIABLE>$fname</VARIABLE> <OPERATOR>=</OPERATOR> html_safe_filename(<VARIABLE>$fname</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$fname</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"-"</STRING><OPERATOR>.</OPERATOR><VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>fid</OO><OPERATOR>;</OPERATOR> <COMMENT># to ensure uniqueness and for info</COMMENT>
    <VARIABLE>$fname</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"-$level"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$level</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$fname</VARIABLE><OPERATOR>;</OPERATOR>
}


<COMMENT>##</COMMENT>
<KEYWORD>sub</KEYWORD> _generate_report {
    <KEYWORD>my</KEYWORD> <VARIABLE>$self</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> (<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$LEVEL</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>%opts</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>

    <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>current_level</OO>(<VARIABLE>$LEVEL</VARIABLE>)<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>@all_fileinfos</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>all_fileinfos</OO>
        <OPERATOR>or</OPERATOR> carp <STRING>"Profile report data contains no files"</STRING><OPERATOR>;</OPERATOR>

    <COMMENT>#$profile-&gt;dump_profile_data({ filehandle =&gt; \*STDERR, separator=&gt;"\t", });</COMMENT>

    <KEYWORD>my</KEYWORD> <VARIABLE>@fis</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>@all_fileinfos</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<VARIABLE>$LEVEL</VARIABLE> <OPERATOR>ne</OPERATOR> <STRING>'line'</STRING>) {
        <COMMENT># we only generate line-level reports for evals</COMMENT>
        <COMMENT># for efficiency and because some data model editing only</COMMENT>
        <COMMENT># is only implemented for line-level data</COMMENT>
        <VARIABLE>@fis</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>grep</FUNCTION> { not <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>is_eval</OO> } <VARIABLE>@fis</VARIABLE><OPERATOR>;</OPERATOR>
    }

    <KEYWORD>my</KEYWORD> <VARIABLE>$progress</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$fi</VARIABLE> (<VARIABLE>@fis</VARIABLE>) {

        <KEYWORD>if</KEYWORD> (<VARIABLE>$opts</VARIABLE>{show_progress}) {
            <KEYWORD>local</KEYWORD> <VARIABLE>$|</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>
            <OPERATOR>++</OPERATOR><VARIABLE>$progress</VARIABLE><OPERATOR>;</OPERATOR>
            <FUNCTION>printf</FUNCTION> <STRING>"<ESC>\r</ESC> %3d%% ... "</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$progress</VARIABLE><OPERATOR>/</OPERATOR><VARIABLE>@fis</VARIABLE><OPERATOR>*</OPERATOR><NUMERIC>100</NUMERIC><OPERATOR>;</OPERATOR>
        }

        <KEYWORD>my</KEYWORD> <VARIABLE>$meta</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>meta</OO><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$filestr</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>filename</OO><OPERATOR>;</OPERATOR>

        <COMMENT># { linenumber =&gt; { subname =&gt; [ count, time ] } }</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$subcalls_at_line</VARIABLE> <OPERATOR>=</OPERATOR> { <OPERATOR>%</OPERATOR>{ <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>sub_call_lines</OO> } }<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$subcalls_max_line</VARIABLE> <OPERATOR>=</OPERATOR> max( <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$subcalls_at_line</VARIABLE> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

        <COMMENT># { linenumber =&gt; [ $subinfo, ... ] }</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$subdefs_at_line</VARIABLE> <OPERATOR>=</OPERATOR> { <OPERATOR>%</OPERATOR>{ <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>subs_defined_in_file_by_line</OO>(<VARIABLE>$filestr</VARIABLE>) } }<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$subdefs_max_line</VARIABLE> <OPERATOR>=</OPERATOR> max( <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$subdefs_at_line</VARIABLE> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
        <KEYWORD>delete</KEYWORD> <VARIABLE>$subdefs_at_line</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<NUMERIC>0</NUMERIC>}<OPERATOR>;</OPERATOR> <COMMENT># xsubs handled separately</COMMENT>

        <COMMENT># { linenumber =&gt; { fid =&gt; $fileinfo } }</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$evals_at_line</VARIABLE> <OPERATOR>=</OPERATOR> { <OPERATOR>%</OPERATOR>{ <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>evals_by_line</OO> } }<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$evals_max_line</VARIABLE> <OPERATOR>=</OPERATOR> max( <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$evals_at_line</VARIABLE> ) <OPERATOR>||</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

        <COMMENT># note that a file may have no source lines executed, so no keys here</COMMENT>
        <COMMENT># (but is included because some xsubs in the package were executed)</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$lines_array</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>line_time_data</OO>([<VARIABLE>$LEVEL</VARIABLE>]) <OPERATOR>||</OPERATOR> []<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$src_max_line</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>scalar</KEYWORD> @<VARIABLE>$lines_array</VARIABLE><OPERATOR>;</OPERATOR>

        <KEYWORD>for</KEYWORD> (<VARIABLE>$src_max_line</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$subcalls_max_line</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$subdefs_max_line</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$evals_max_line</VARIABLE>) {
            <KEYWORD>next</KEYWORD> <KEYWORD>if</KEYWORD> <VARIABLE>$_</VARIABLE> <OPERATOR>&lt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>**</OPERATOR><NUMERIC>16</NUMERIC><OPERATOR>;</OPERATOR>
            <FUNCTION>warn</FUNCTION> <STRING>"Ignoring indication that $filestr has $_ lines! (Possibly corrupt data)<ESC>\n</ESC>"</STRING><OPERATOR>;</OPERATOR>
            <VARIABLE>$_</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
        }

        <KEYWORD>my</KEYWORD> <VARIABLE>$max_linenum</VARIABLE> <OPERATOR>=</OPERATOR> max(
            <VARIABLE>$src_max_line</VARIABLE><OPERATOR>,</OPERATOR>
            <VARIABLE>$subcalls_max_line</VARIABLE><OPERATOR>,</OPERATOR>
            <VARIABLE>$subdefs_max_line</VARIABLE><OPERATOR>,</OPERATOR>
            <VARIABLE>$evals_max_line</VARIABLE><OPERATOR>,</OPERATOR>
        )<OPERATOR>;</OPERATOR>

        <FUNCTION>warn</FUNCTION> <FUNCTION>sprintf</FUNCTION> <STRING>"%s max lines: %s (stmts %s, subcalls %s, subdefs %s, evals %s)<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR>
                <VARIABLE>$filestr</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$max_linenum</VARIABLE><OPERATOR>,</OPERATOR> <KEYWORD>scalar</KEYWORD> @<VARIABLE>$lines_array</VARIABLE><OPERATOR>,</OPERATOR>
                <VARIABLE>$subcalls_max_line</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$subdefs_max_line</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$evals_max_line</VARIABLE>
            <KEYWORD>if</KEYWORD> trace_level() <OPERATOR>&gt;=</OPERATOR> <NUMERIC>4</NUMERIC> <OPERATOR>or</OPERATOR> <VARIABLE>$max_linenum</VARIABLE> <OPERATOR>&gt;</OPERATOR> <NUMERIC>2</NUMERIC><OPERATOR>**</OPERATOR><NUMERIC>15</NUMERIC><OPERATOR>;</OPERATOR>

        <KEYWORD>my</KEYWORD> <VARIABLE>%stats_accum</VARIABLE><OPERATOR>;</OPERATOR>           <COMMENT># holds all line times. used to find median</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>%stats_by_line</VARIABLE><OPERATOR>;</OPERATOR>         <COMMENT># holds individual line stats</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$runningTotalTime</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>  <COMMENT># holds the running total</COMMENT>
        <COMMENT># (should equal sum of $stats_accum)</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$runningTotalCalls</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT># holds the running total number of calls.</COMMENT>

        <KEYWORD>for</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$linenum</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <VARIABLE>$linenum</VARIABLE> <OPERATOR>&lt;=</OPERATOR> <VARIABLE>$max_linenum</VARIABLE><OPERATOR>;</OPERATOR> <OPERATOR>++</OPERATOR><VARIABLE>$linenum</VARIABLE>) {

            <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$subdefs</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>delete</KEYWORD> <VARIABLE>$subdefs_at_line</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$linenum</VARIABLE>}) {
                <VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$linenum</VARIABLE>}<OPERATOR>-&gt;</OPERATOR>{<STRING>'subdef_info'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$subdefs</VARIABLE><OPERATOR>;</OPERATOR>
            }

            <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$subcalls</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>delete</KEYWORD> <VARIABLE>$subcalls_at_line</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$linenum</VARIABLE>}) {
                <KEYWORD>my</KEYWORD> <VARIABLE>$line_stats</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$linenum</VARIABLE>} <OPERATOR>||=</OPERATOR> {}<OPERATOR>;</OPERATOR>

                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'subcall_info'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$subcalls</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'subcall_count'</STRING>} <OPERATOR>=</OPERATOR> sum(<FUNCTION>map</FUNCTION> { <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR>[<NUMERIC>0</NUMERIC>] } <FUNCTION>values</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$subcalls</VARIABLE>)<OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'subcall_time'</STRING>}  <OPERATOR>=</OPERATOR> sum(<FUNCTION>map</FUNCTION> { <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR>[<NUMERIC>1</NUMERIC>] } <FUNCTION>values</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$subcalls</VARIABLE>)<OPERATOR>;</OPERATOR>

                <FUNCTION>push</FUNCTION> @{<VARIABLE>$stats_accum</VARIABLE>{<VARIABLE>$_</VARIABLE>}}<OPERATOR>,</OPERATOR> <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$_</VARIABLE>}
                    <KEYWORD>for</KEYWORD> (<DELIMITER>qw(</DELIMITER><STRING>subcall_count</STRING> <STRING>subcall_time</STRING><DELIMITER>)</DELIMITER>)<OPERATOR>;</OPERATOR>
            }

            <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$evalcalls</VARIABLE> <OPERATOR>=</OPERATOR> <KEYWORD>delete</KEYWORD> <VARIABLE>$evals_at_line</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$linenum</VARIABLE>}) {
                <KEYWORD>my</KEYWORD> <VARIABLE>$line_stats</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$linenum</VARIABLE>} <OPERATOR>||=</OPERATOR> {}<OPERATOR>;</OPERATOR>

                <COMMENT># %$evals =&gt; { fid =&gt; $fileinfo }</COMMENT>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'evalcall_info'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$evalcalls</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'evalcall_count'</STRING>} <OPERATOR>=</OPERATOR> <FUNCTION>values</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$evalcalls</VARIABLE><OPERATOR>;</OPERATOR>

                <COMMENT># get list of evals, including nested evals</COMMENT>
                <KEYWORD>my</KEYWORD> <VARIABLE>@eval_fis</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>map</FUNCTION> { (<VARIABLE>$_</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>has_evals</OO>(<NUMERIC>1</NUMERIC>)) } <FUNCTION>values</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$evalcalls</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'evalcall_count_nested'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>@eval_fis</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'evalcall_stmts_time_nested'</STRING>} <OPERATOR>=</OPERATOR> sum(
                    <FUNCTION>map</FUNCTION> { <VARIABLE>$_</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>sum_of_stmts_time</OO> } <VARIABLE>@eval_fis</VARIABLE>)<OPERATOR>;</OPERATOR>
            }

            <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$stmts</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$lines_array</VARIABLE><OPERATOR>-&gt;</OPERATOR>[<VARIABLE>$linenum</VARIABLE>]) {
                <KEYWORD>next</KEYWORD> <KEYWORD>if</KEYWORD> <OPERATOR>!</OPERATOR>@<VARIABLE>$stmts</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># <COMMENT_NOTE>XXX</COMMENT_NOTE> happens for evals, investigate</COMMENT>

                <KEYWORD>my</KEYWORD> (<VARIABLE>$stmt_time</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$stmt_count</VARIABLE>) <OPERATOR>=</OPERATOR> @<VARIABLE>$stmts</VARIABLE><OPERATOR>;</OPERATOR>
                <KEYWORD>my</KEYWORD> <VARIABLE>$line_stats</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$linenum</VARIABLE>} <OPERATOR>||=</OPERATOR> {}<OPERATOR>;</OPERATOR>

                <COMMENT># The debugger cannot stop on BEGIN{...} lines.  A line in a begin</COMMENT>
                <COMMENT># may set a scalar reference to something that needs to be eval'd later.</COMMENT>
                <COMMENT># as a result, if the variable is expanded outside of the BEGIN, we'll</COMMENT>
                <COMMENT># see the original BEGIN line, but it won't have any calls or times</COMMENT>
                <COMMENT># associated. This will cause a divide by zero error.</COMMENT>
                <VARIABLE>$stmt_count</VARIABLE> <OPERATOR>||=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'time'</STRING>}  <OPERATOR>=</OPERATOR> <VARIABLE>$stmt_time</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'calls'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$stmt_count</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'time/call'</STRING>} <OPERATOR>=</OPERATOR> <VARIABLE>$stmt_time</VARIABLE><OPERATOR>/</OPERATOR><VARIABLE>$stmt_count</VARIABLE><OPERATOR>;</OPERATOR>

                <FUNCTION>push</FUNCTION> @{<VARIABLE>$stats_accum</VARIABLE>{<VARIABLE>$_</VARIABLE>}}<OPERATOR>,</OPERATOR> <VARIABLE>$line_stats</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$_</VARIABLE>}
                    <KEYWORD>for</KEYWORD> (<DELIMITER>qw(</DELIMITER><STRING>time</STRING> <STRING>calls</STRING> <STRING>time/call</STRING><DELIMITER>)</DELIMITER>)<OPERATOR>;</OPERATOR>

                <VARIABLE>$runningTotalTime</VARIABLE>  <OPERATOR>+=</OPERATOR> <VARIABLE>$stmt_time</VARIABLE><OPERATOR>;</OPERATOR>
                <VARIABLE>$runningTotalCalls</VARIABLE> <OPERATOR>+=</OPERATOR> <VARIABLE>$stmt_count</VARIABLE><OPERATOR>;</OPERATOR>
            }

            <FUNCTION>warn</FUNCTION> <STRING>"$linenum: @{[ %{ $stats_by_line{$linenum} } ]}<ESC>\n</ESC>"</STRING>
                <KEYWORD>if</KEYWORD> trace_level() <OPERATOR>&gt;=</OPERATOR> <NUMERIC>3</NUMERIC> <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$linenum</VARIABLE>}<OPERATOR>;</OPERATOR>
        }

        <FUNCTION>warn</FUNCTION> <STRING>"unprocessed keys in subdefs_at_line: @{[ keys %$subdefs_at_line ]}<ESC>\n</ESC>"</STRING>
            <KEYWORD>if</KEYWORD> <OPERATOR>%</OPERATOR><VARIABLE>$subdefs_at_line</VARIABLE><OPERATOR>;</OPERATOR>
        <FUNCTION>warn</FUNCTION> <STRING>"unprocessed keys in subcalls_at_line: @{[ keys %$subcalls_at_line ]}<ESC>\n</ESC>"</STRING>
            <KEYWORD>if</KEYWORD> <OPERATOR>%</OPERATOR><VARIABLE>$subcalls_at_line</VARIABLE><OPERATOR>;</OPERATOR>
        <FUNCTION>warn</FUNCTION> <STRING>"unprocessed keys in evals_at_line: @{[ keys %$evals_at_line ]}<ESC>\n</ESC>"</STRING>
            <KEYWORD>if</KEYWORD> <OPERATOR>%</OPERATOR><VARIABLE>$evals_at_line</VARIABLE><OPERATOR>;</OPERATOR>

        <VARIABLE>$meta</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'time'</STRING>}      <OPERATOR>=</OPERATOR> <VARIABLE>$runningTotalTime</VARIABLE><OPERATOR>;</OPERATOR>
        <VARIABLE>$meta</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'calls'</STRING>}     <OPERATOR>=</OPERATOR> <VARIABLE>$runningTotalCalls</VARIABLE><OPERATOR>;</OPERATOR>
        <VARIABLE>$meta</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<STRING>'time/call'</STRING>} <OPERATOR>=</OPERATOR>
            (<VARIABLE>$runningTotalCalls</VARIABLE>) <OPERATOR>?</OPERATOR> <VARIABLE>$runningTotalTime</VARIABLE> <OPERATOR>/</OPERATOR> <VARIABLE>$runningTotalCalls</VARIABLE><OPERATOR>:</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

        <COMMENT># Use Median Absolute Deviation Formula to get file deviations for each of</COMMENT>
        <COMMENT># calls, time and time/call values</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>%stats_for_file</VARIABLE> <OPERATOR>=</OPERATOR> (
            <STRING>'calls'</STRING>     <OPERATOR>=&gt;</OPERATOR> calculate_median_absolute_deviation(<VARIABLE>$stats_accum</VARIABLE>{<STRING>'calls'</STRING>}<OPERATOR>||</OPERATOR>[])<OPERATOR>,</OPERATOR>
            <STRING>'time'</STRING>      <OPERATOR>=&gt;</OPERATOR> calculate_median_absolute_deviation(<VARIABLE>$stats_accum</VARIABLE>{<STRING>'time'</STRING>}<OPERATOR>||</OPERATOR>[])<OPERATOR>,</OPERATOR>
            <STRING>'time/call'</STRING> <OPERATOR>=&gt;</OPERATOR> calculate_median_absolute_deviation(<VARIABLE>$stats_accum</VARIABLE>{<STRING>'time/call'</STRING>}<OPERATOR>||</OPERATOR>[])<OPERATOR>,</OPERATOR>
            subcall_count <OPERATOR>=&gt;</OPERATOR> calculate_median_absolute_deviation(<VARIABLE>$stats_accum</VARIABLE>{subcall_count}<OPERATOR>||</OPERATOR>[])<OPERATOR>,</OPERATOR>
            subcall_time  <OPERATOR>=&gt;</OPERATOR> calculate_median_absolute_deviation(<VARIABLE>$stats_accum</VARIABLE>{subcall_time}<OPERATOR>||</OPERATOR>[])<OPERATOR>,</OPERATOR>
        )<OPERATOR>;</OPERATOR>

        <COMMENT># the output file name that will be open later.  Not including directory at this time.</COMMENT>
        <COMMENT># keep here so that the variable replacement subs can get at it.</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$fname</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>fname_for_fileinfo</OO>(<VARIABLE>$fi</VARIABLE>) <OPERATOR>.</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{suffix}<OPERATOR>;</OPERATOR>

        <COMMENT># localize header and footer for variable replacement</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$header</VARIABLE>    <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'header'</STRING><OPERATOR>,</OPERATOR>    [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fname</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$LEVEL</VARIABLE>])<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$datastart</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'datastart'</STRING><OPERATOR>,</OPERATOR> [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>])<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$dataend</VARIABLE>   <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'dataend'</STRING><OPERATOR>,</OPERATOR>   [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>])<OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$FILE</VARIABLE>      <OPERATOR>=</OPERATOR> <VARIABLE>$filestr</VARIABLE><OPERATOR>;</OPERATOR>
<COMMENT>#warn Dumper(\%stats_by_line);</COMMENT>
        <COMMENT># open output file</COMMENT>
        <COMMENT>#warn "$self-&gt;{output_dir}/$fname";</COMMENT>
        <FUNCTION>open</FUNCTION>(OUT<OPERATOR>,</OPERATOR> <STRING>"&gt;"</STRING><OPERATOR>,</OPERATOR> <STRING>"$self-&gt;{output_dir}/$fname"</STRING>)
            <OPERATOR>or</OPERATOR> confess <STRING>"Unable to open $self-&gt;{output_dir}/$fname "</STRING> <OPERATOR>.</OPERATOR> <STRING>"for writing: $!<ESC>\n</ESC>"</STRING><OPERATOR>;</OPERATOR>

        <COMMENT># begin output</COMMENT>
        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$header</VARIABLE><OPERATOR>;</OPERATOR>

        <COMMENT># If we don't have savesrc for the file then we'll be reading the current</COMMENT>
        <COMMENT># file contents which may have changed since the profile was run.</COMMENT>
        <COMMENT># In this case we need to warn the user as the report would be garbled.</COMMENT>
        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'taintmsg'</STRING><OPERATOR>,</OPERATOR> [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>])
            <KEYWORD>if</KEYWORD> <OPERATOR>!</OPERATOR><VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>has_savesrc</OO> <OPERATOR>and</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>file_has_been_modified</OO>(<VARIABLE>$filestr</VARIABLE>)<OPERATOR>;</OPERATOR>

        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'sawampersand'</STRING><OPERATOR>,</OPERATOR> [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>])
            <KEYWORD>if</KEYWORD> <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR>{attribute}{sawampersand_fid}
            <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>fid</OO> <OPERATOR>==</OPERATOR> <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR>{attribute}{sawampersand_fid}<OPERATOR>;</OPERATOR>

        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'merged_fids'</STRING><OPERATOR>,</OPERATOR> [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>])
            <KEYWORD>if</KEYWORD> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>meta</OO><OPERATOR>-&gt;</OPERATOR>{merged_fids}<OPERATOR>;</OPERATOR>

        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$datastart</VARIABLE><OPERATOR>;</OPERATOR>

        <KEYWORD>my</KEYWORD> <VARIABLE>$LINE</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>    <COMMENT># line number in source code</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$src_lines</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>srclines_array</OO><OPERATOR>;</OPERATOR>
        <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><VARIABLE>$src_lines</VARIABLE>) { <COMMENT># no savesrc, and no file available</COMMENT>

            <KEYWORD>my</KEYWORD> <VARIABLE>$msg</VARIABLE><OPERATOR>;</OPERATOR>
            <KEYWORD>if</KEYWORD> (<VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>is_fake</OO>) {
                <COMMENT># eg the "/unknown-eval-invoker"</COMMENT>
                <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"No source code available for synthetic (fake) file $filestr."</STRING><OPERATOR>,</OPERATOR>
            }
            <KEYWORD>elsif</KEYWORD> (<VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>is_eval</OO>) {
                <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"No source code available for string eval $filestr.<ESC>\n</ESC>You probably need to use a more recent version of perl. See savesrc option in documentation."</STRING><OPERATOR>,</OPERATOR>
            }
            <KEYWORD>elsif</KEYWORD> (<VARIABLE>$filestr</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m{</DELIMITER><REGEX>^/loader/0x[0-9a-zA-Z]+/</REGEX><DELIMITER>}</DELIMITER>) {
                <COMMENT># a synthetic file name that perl assigns when reading</COMMENT>
                <COMMENT># code returned by a CODE ref in @INC</COMMENT>
                <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"No source code available for 'file' loaded via CODE reference in <ESC>\@</ESC>INC.<ESC>\n</ESC>See savesrc option in documentation."</STRING><OPERATOR>,</OPERATOR>
            }
            <KEYWORD>elsif</KEYWORD> (not <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>is_file</OO>) {
                <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"No source code available for non-file '$filestr'.<ESC>\n</ESC>You probably need to use a more recent version of perl. See savesrc option in documentation."</STRING><OPERATOR>,</OPERATOR>
            }
            <KEYWORD>else</KEYWORD> {
                <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"Unable to open '$filestr' for reading: $!"</STRING><OPERATOR>;</OPERATOR>

                <COMMENT># clarify some current Moose limitations <COMMENT_NOTE>XXX</COMMENT_NOTE></COMMENT>
                <KEYWORD>if</KEYWORD> (<VARIABLE>$filestr</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m!</DELIMITER><REGEX>/(accessor .*) defined at /</REGEX><DELIMITER>!</DELIMITER>) {
                    <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"Source for generated Moose $1 isn't available ($filestr: $!)"</STRING><OPERATOR>;</OPERATOR>
                }
                <KEYWORD>elsif</KEYWORD> (<VARIABLE>$filestr</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m!</DELIMITER><REGEX>/(generated method \(unknown origin\))</REGEX><DELIMITER>!</DELIMITER>) {
                    <VARIABLE>$msg</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>"Source for Moose $1 isn't available ($filestr: $!)"</STRING><OPERATOR>;</OPERATOR>
                }

                <COMMENT># the report will not be complete, but this doesn't need to be fatal</COMMENT>
                <KEYWORD>my</KEYWORD> <VARIABLE>$hint</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>''</STRING><OPERATOR>;</OPERATOR>
                <VARIABLE>$hint</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>" Try running $0 in the same directory as you ran Devel::NYTProf, "</STRING>
                      <OPERATOR>.</OPERATOR> <STRING>"or ensure <ESC>\@</ESC>INC is correct."</STRING>
                    <KEYWORD>if</KEYWORD> <VARIABLE>$filestr</VARIABLE> <OPERATOR>ne</OPERATOR> <STRING>'-e'</STRING>
                    <OPERATOR>and</OPERATOR> <VARIABLE>$filestr</VARIABLE> <OPERATOR>!~</OPERATOR> <DELIMITER>m:</DELIMITER><REGEX>^/</REGEX><DELIMITER>:</DELIMITER>
                    <OPERATOR>and</OPERATOR> not <KEYWORD>our</KEYWORD> <VARIABLE>$_generate_report_inc_hint</VARIABLE><OPERATOR>++;</OPERATOR>                <COMMENT># only once</COMMENT>

                <FUNCTION>warn</FUNCTION> <STRING>"$msg$hint<ESC>\n</ESC>"</STRING>
                    <KEYWORD>unless</KEYWORD> <KEYWORD>our</KEYWORD> <VARIABLE>$_generate_report_filestr_warn</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$filestr</VARIABLE>}<OPERATOR>++;</OPERATOR> <COMMENT># only once per filestr</COMMENT>

            }

            <VARIABLE>$src_lines</VARIABLE> <OPERATOR>=</OPERATOR> [ <VARIABLE>$msg</VARIABLE> ]<OPERATOR>;</OPERATOR>
            <VARIABLE>$LINE</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR> <COMMENT># start numbering from 0 to flag fake contents</COMMENT>
        }

        <COMMENT># ensure we don't have any undef source lines</COMMENT>
        <COMMENT># (to avoid warnings from the code below)</COMMENT>
        <KEYWORD>my</KEYWORD> <VARIABLE>$src_undefs</VARIABLE><OPERATOR>;</OPERATOR>
        <KEYWORD>defined</KEYWORD> <VARIABLE>$_</VARIABLE> <OPERATOR>or</OPERATOR> <VARIABLE>$_</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>''</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <OPERATOR>++</OPERATOR><VARIABLE>$src_undefs</VARIABLE> <KEYWORD>for</KEYWORD> @<VARIABLE>$src_lines</VARIABLE><OPERATOR>;</OPERATOR>
        <COMMENT># <COMMENT_NOTE>XXX</COMMENT_NOTE> shouldn't be need but don't have a test case so grumble</COMMENT>
        <COMMENT># about it in the hope of getting a test case</COMMENT>
        <FUNCTION>warn</FUNCTION> <FUNCTION>sprintf</FUNCTION> <STRING>"Saw %d missing (undef) lines in the %d lines of source code for %s<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR>
                <VARIABLE>$src_undefs</VARIABLE><OPERATOR>,</OPERATOR> <KEYWORD>scalar</KEYWORD> @<VARIABLE>$src_lines</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$filestr</VARIABLE>
            <KEYWORD>if</KEYWORD> <VARIABLE>$src_undefs</VARIABLE><OPERATOR>;</OPERATOR>

        <COMMENT># Since we use @$src_lines to drive the report generation, pad the array to</COMMENT>
        <COMMENT># ensure it has enough lines to include all the available profile info.</COMMENT>
        <COMMENT># Then the report is still useful even if we have no source code.</COMMENT>
        <FUNCTION>push</FUNCTION> @<VARIABLE>$src_lines</VARIABLE><OPERATOR>,</OPERATOR> <STRING>''</STRING> <KEYWORD>while</KEYWORD> @<VARIABLE>$src_lines</VARIABLE> <OPERATOR>&lt;</OPERATOR> <VARIABLE>$max_linenum</VARIABLE><OPERATOR>-</OPERATOR><NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>

        <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$z</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$stats_by_line</VARIABLE>{<NUMERIC>0</NUMERIC>}) {
            <COMMENT># typically indicates cases where we could do better</COMMENT>
            <KEYWORD>if</KEYWORD> (trace_level()) {
                <FUNCTION>warn</FUNCTION> <STRING>"$filestr has unexpected info for line 0: @{[ %$z ]}<ESC>\n</ESC>"</STRING><OPERATOR>;</OPERATOR>
                <COMMENT># sub defs: used to be xsubs but they're handled separately now</COMMENT>
                <COMMENT># so there are no known causes of this any more</COMMENT>
                <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$i</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$z</VARIABLE><OPERATOR>-&gt;</OPERATOR>{subdef_info}) {
                    <FUNCTION>warn</FUNCTION> <STRING>"0: @{[ map { $_-&gt;subname } @$i ]}<ESC>\n</ESC>"</STRING>
                }
                <COMMENT># sub calls: they're typically END blocks that appear to be</COMMENT>
                <COMMENT># invoked from the main .pl script perl ran.</COMMENT>
                <COMMENT># Also some BEGINs and things like main::CORE:ftfile</COMMENT>
                <COMMENT># (see CPANDB's cpangraph script for some examples)</COMMENT>
                <KEYWORD>if</KEYWORD> (<KEYWORD>my</KEYWORD> <VARIABLE>$i</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$z</VARIABLE><OPERATOR>-&gt;</OPERATOR>{subcall_info}) {
                    <FUNCTION>warn</FUNCTION> <FUNCTION>sprintf</FUNCTION> <STRING>"0: called %20s %s<ESC>\n</ESC>"</STRING><OPERATOR>,</OPERATOR> <VARIABLE>$_</VARIABLE><OPERATOR>,</OPERATOR> <FUNCTION>join</FUNCTION> <STRING>" "</STRING><OPERATOR>,</OPERATOR> @{ <VARIABLE>$i</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$_</VARIABLE>} }
                        <KEYWORD>for</KEYWORD> <FUNCTION>sort</FUNCTION> <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$i</VARIABLE><OPERATOR>;</OPERATOR>
                }
            }

            <VARIABLE>$LINE</VARIABLE> <OPERATOR>=</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>
            <FUNCTION>unshift</FUNCTION> @<VARIABLE>$src_lines</VARIABLE><OPERATOR>,</OPERATOR> <STRING>"Profile data that couldn't be associated with a specific line:"</STRING><OPERATOR>;</OPERATOR>
        }

        <KEYWORD>my</KEYWORD> <VARIABLE>$line_sub</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{mk_report_source_line}
            <OPERATOR>or</OPERATOR> <KEYWORD>die</KEYWORD> <STRING>"mk_report_source_line not set"</STRING><OPERATOR>;</OPERATOR>

        <KEYWORD>my</KEYWORD> <VARIABLE>$prev_line</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'-'</STRING><OPERATOR>;</OPERATOR>
        <KEYWORD>while</KEYWORD> ( @<VARIABLE>$src_lines</VARIABLE> ) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$line</VARIABLE> <OPERATOR>=</OPERATOR> <FUNCTION>shift</FUNCTION> @<VARIABLE>$src_lines</VARIABLE><OPERATOR>;</OPERATOR>
            <FUNCTION>chomp</FUNCTION> <VARIABLE>$line</VARIABLE><OPERATOR>;</OPERATOR>

            <COMMENT># detect a series of blank lines, e.g. a chunk of pod savesrc didn't store</COMMENT>
            <KEYWORD>my</KEYWORD> <VARIABLE>$skip_blanks</VARIABLE> <OPERATOR>=</OPERATOR> (
                <VARIABLE>$prev_line</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>''</STRING> <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$line</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>''</STRING> <OPERATOR>&amp;&amp;</OPERATOR>            <COMMENT># blank behind and here</COMMENT>
                @<VARIABLE>$src_lines</VARIABLE> <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$src_lines</VARIABLE><OPERATOR>-&gt;</OPERATOR>[<NUMERIC>0</NUMERIC>] <OPERATOR>=~</OPERATOR> <DELIMITER>/</DELIMITER><REGEX>^\s*$</REGEX><DELIMITER>/</DELIMITER> <OPERATOR>&amp;&amp;</OPERATOR>  <COMMENT># blank ahead</COMMENT>
                <OPERATOR>!</OPERATOR><VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$LINE</VARIABLE>}                        <COMMENT># nothing to report</COMMENT>
            )<OPERATOR>;</OPERATOR>

            <KEYWORD>if</KEYWORD> (<VARIABLE>$line</VARIABLE> <OPERATOR>=~</OPERATOR> <DELIMITER>m/</DELIMITER><REGEX>^\# \s* line \s+ (\d+) \b</REGEX><DELIMITER>/</DELIMITER><KEYWORD>x</KEYWORD>) {
                <COMMENT># <COMMENT_NOTE>XXX</COMMENT_NOTE> we should be smarter about this - patches welcome!</COMMENT>
                <COMMENT># We should at least ignore the common AutoSplit case</COMMENT>
                <COMMENT># which we detect and workaround elsewhere.</COMMENT>
                <FUNCTION>warn</FUNCTION> <STRING>"Ignoring '$line' directive at line $LINE - profile data for $filestr will be out of sync with source<ESC>\n</ESC>"</STRING>
                    <KEYWORD>unless</KEYWORD> <KEYWORD>our</KEYWORD> <VARIABLE>$line_directive_warn</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$filestr</VARIABLE>}<OPERATOR>++;</OPERATOR> <COMMENT># once per file</COMMENT>
            }

            <FUNCTION>print</FUNCTION> OUT <VARIABLE>$line_sub</VARIABLE><OPERATOR>-&gt;</OPERATOR>(
                (<VARIABLE>$skip_blanks</VARIABLE>) <OPERATOR>?</OPERATOR> <STRING>"- -"</STRING> <OPERATOR>:</OPERATOR> <VARIABLE>$LINE</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$line</VARIABLE><OPERATOR>,</OPERATOR>
                <VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$LINE</VARIABLE>} <OPERATOR>||</OPERATOR> {}<OPERATOR>,</OPERATOR>
                <OPERATOR>\%</OPERATOR>stats_for_file<OPERATOR>,</OPERATOR>
                <VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR>
                <VARIABLE>$fi</VARIABLE><OPERATOR>,</OPERATOR>
            )<OPERATOR>;</OPERATOR>

            <KEYWORD>if</KEYWORD> (<VARIABLE>$skip_blanks</VARIABLE>) {
                <KEYWORD>while</KEYWORD> (
                    @<VARIABLE>$src_lines</VARIABLE> <OPERATOR>&amp;&amp;</OPERATOR> <VARIABLE>$src_lines</VARIABLE><OPERATOR>-&gt;</OPERATOR>[<NUMERIC>0</NUMERIC>] <OPERATOR>=~</OPERATOR> <DELIMITER>/</DELIMITER><REGEX>^\s*$</REGEX><DELIMITER>/</DELIMITER> <OPERATOR>&amp;&amp;</OPERATOR>
                    <OPERATOR>!</OPERATOR><VARIABLE>$stats_by_line</VARIABLE>{<VARIABLE>$LINE</VARIABLE><OPERATOR>+</OPERATOR><NUMERIC>1</NUMERIC>}
                ) {
                    <FUNCTION>shift</FUNCTION> @<VARIABLE>$src_lines</VARIABLE><OPERATOR>;</OPERATOR>
                    <VARIABLE>$LINE</VARIABLE><OPERATOR>++;</OPERATOR>
                }
            }
            <VARIABLE>$prev_line</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$line</VARIABLE><OPERATOR>;</OPERATOR>
        }
        <KEYWORD>continue</KEYWORD> {
            <VARIABLE>$LINE</VARIABLE><OPERATOR>++;</OPERATOR>
        }

        <KEYWORD>my</KEYWORD> <VARIABLE>$separator_sub</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{mk_report_separator_line}<OPERATOR>;</OPERATOR>

        <COMMENT># iterate over xsubs </COMMENT>
        <VARIABLE>$line_sub</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{mk_report_xsub_line}
            <OPERATOR>or</OPERATOR> <KEYWORD>die</KEYWORD> <STRING>"mk_report_xsub_line not set"</STRING><OPERATOR>;</OPERATOR>
        <KEYWORD>my</KEYWORD> <VARIABLE>$subs_defined_in_file</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>subs_defined_in_file</OO>(<VARIABLE>$filestr</VARIABLE>)<OPERATOR>;</OPERATOR>
        <KEYWORD>foreach</KEYWORD> <KEYWORD>my</KEYWORD> <VARIABLE>$subname</VARIABLE> (<FUNCTION>sort</FUNCTION> <FUNCTION>keys</FUNCTION> <OPERATOR>%</OPERATOR><VARIABLE>$subs_defined_in_file</VARIABLE>) {
            <KEYWORD>my</KEYWORD> <VARIABLE>$subinfo</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$subs_defined_in_file</VARIABLE><OPERATOR>-&gt;</OPERATOR>{<VARIABLE>$subname</VARIABLE>}<OPERATOR>;</OPERATOR>
            <KEYWORD>my</KEYWORD> <VARIABLE>$kind</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$subinfo</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>kind</OO><OPERATOR>;</OPERATOR>

            <KEYWORD>next</KEYWORD> <KEYWORD>if</KEYWORD> <VARIABLE>$kind</VARIABLE> <OPERATOR>eq</OPERATOR> <STRING>'perl'</STRING><OPERATOR>;</OPERATOR>
            <KEYWORD>next</KEYWORD> <KEYWORD>if</KEYWORD> <VARIABLE>$subinfo</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>calls</OO> <OPERATOR>==</OPERATOR> <NUMERIC>0</NUMERIC><OPERATOR>;</OPERATOR>

            <KEYWORD>if</KEYWORD> (<VARIABLE>$separator_sub</VARIABLE>) {
                <FUNCTION>print</FUNCTION> OUT <VARIABLE>$separator_sub</VARIABLE><OPERATOR>-&gt;</OPERATOR>(<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>)<OPERATOR>;</OPERATOR>
                <KEYWORD>undef</KEYWORD> <VARIABLE>$separator_sub</VARIABLE><OPERATOR>;</OPERATOR> <COMMENT># do mk_report_separator_line just once</COMMENT>
            }

            <FUNCTION>print</FUNCTION> OUT <VARIABLE>$line_sub</VARIABLE><OPERATOR>-&gt;</OPERATOR>(
                <VARIABLE>$subname</VARIABLE><OPERATOR>,</OPERATOR>
                <STRING>"sub $subname; # $kind<ESC>\n</ESC><ESC>\t</ESC>"</STRING><OPERATOR>,</OPERATOR>
                { subdef_info <OPERATOR>=&gt;</OPERATOR> [ <VARIABLE>$subinfo</VARIABLE> ]<OPERATOR>,</OPERATOR> }<OPERATOR>,</OPERATOR>  <COMMENT>#stats_for_line</COMMENT>
                <KEYWORD>undef</KEYWORD><OPERATOR>,</OPERATOR> <COMMENT># stats_for_file</COMMENT>
                <VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>
            )<OPERATOR>;</OPERATOR>
        }

        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$dataend</VARIABLE><OPERATOR>;</OPERATOR>
        <FUNCTION>print</FUNCTION> OUT <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>get_param</OO>(<STRING>'footer'</STRING><OPERATOR>,</OPERATOR> [<VARIABLE>$profile</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$filestr</VARIABLE>])<OPERATOR>;</OPERATOR>
        <FUNCTION>close</FUNCTION> OUT<OPERATOR>;</OPERATOR>
    }
    <FUNCTION>print</FUNCTION> <STRING>"<ESC>\n</ESC>"</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$opts</VARIABLE>{show_progress}<OPERATOR>;</OPERATOR>
}


<KEYWORD>sub</KEYWORD> url_for_file {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$file</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$anchor</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$level</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    confess <STRING>"No file specified"</STRING> <KEYWORD>unless</KEYWORD> <VARIABLE>$file</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$fi</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{profile}<OPERATOR>-&gt;</OPERATOR><OO>fileinfo_of</OO>(<VARIABLE>$file</VARIABLE>)<OPERATOR>;</OPERATOR>
    <COMMENT>#return "" if $fi-&gt;is_fake;</COMMENT>
    <VARIABLE>$level</VARIABLE> <OPERATOR>=</OPERATOR> <STRING>'line'</STRING> <KEYWORD>if</KEYWORD> <VARIABLE>$fi</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>is_eval</OO><OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> <VARIABLE>$url</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>fname_for_fileinfo</OO>(<VARIABLE>$fi</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$level</VARIABLE>)<OPERATOR>;</OPERATOR>
    <VARIABLE>$url</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>'.html'</STRING><OPERATOR>;</OPERATOR>
    <VARIABLE>$url</VARIABLE> <OPERATOR>.=</OPERATOR> <STRING>"#$anchor"</STRING> <KEYWORD>if</KEYWORD> <KEYWORD>defined</KEYWORD> <VARIABLE>$anchor</VARIABLE><OPERATOR>;</OPERATOR>

    <KEYWORD>return</KEYWORD> <VARIABLE>$url</VARIABLE><OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> href_for_file {
    <KEYWORD>my</KEYWORD> <VARIABLE>$url</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>shift</OBJ><OPERATOR>-&gt;</OPERATOR><OO>url_for_file</OO>(<VARIABLE>@_</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <DELIMITER>qq{</DELIMITER><STRING>href="$url"</STRING><DELIMITER>}</DELIMITER> <KEYWORD>if</KEYWORD> <VARIABLE>$url</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$url</VARIABLE><OPERATOR>;</OPERATOR>
}


<KEYWORD>sub</KEYWORD> url_for_sub {
    <KEYWORD>my</KEYWORD> (<VARIABLE>$self</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$sub</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>%opts</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>@_</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>my</KEYWORD> <VARIABLE>$profile</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR>{profile}<OPERATOR>;</OPERATOR>

    <KEYWORD>my</KEYWORD> (<VARIABLE>$file</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fid</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$first</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$last</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$fi</VARIABLE>) <OPERATOR>=</OPERATOR> <VARIABLE>$profile</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>file_line_range_of_sub</OO>(<VARIABLE>$sub</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <STRING>""</STRING> <KEYWORD>unless</KEYWORD> <VARIABLE>$file</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>if</KEYWORD> (<OPERATOR>!</OPERATOR><VARIABLE>$first</VARIABLE>) {
        <COMMENT># use sanitized subname as label for xsubs</COMMENT>
        <COMMENT># <COMMENT_NOTE>XXX</COMMENT_NOTE> must match what nytprofhtml does for xsubs</COMMENT>
        (<VARIABLE>$first</VARIABLE> <OPERATOR>=</OPERATOR> <VARIABLE>$sub</VARIABLE>) <OPERATOR>=~</OPERATOR> <DELIMITER>s/</DELIMITER><REGEX>\W</REGEX><DELIMITER>/</DELIMITER><STRING>_</STRING><DELIMITER>/</DELIMITER><KEYWORD>g</KEYWORD><OPERATOR>;</OPERATOR>
    }
    <KEYWORD>return</KEYWORD> <VARIABLE>$self</VARIABLE><OPERATOR>-&gt;</OPERATOR><OO>url_for_file</OO>(<VARIABLE>$fi</VARIABLE><OPERATOR>,</OPERATOR> <VARIABLE>$first</VARIABLE>)<OPERATOR>;</OPERATOR>
}

<KEYWORD>sub</KEYWORD> href_for_sub {
    <KEYWORD>my</KEYWORD> <VARIABLE>$url</VARIABLE> <OPERATOR>=</OPERATOR> <OBJ>shift</OBJ><OPERATOR>-&gt;</OPERATOR><OO>url_for_sub</OO>(<VARIABLE>@_</VARIABLE>)<OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <DELIMITER>qq{</DELIMITER><STRING>href="$url"</STRING><DELIMITER>}</DELIMITER> <KEYWORD>if</KEYWORD> <VARIABLE>$url</VARIABLE><OPERATOR>;</OPERATOR>
    <KEYWORD>return</KEYWORD> <VARIABLE>$url</VARIABLE><OPERATOR>;</OPERATOR>
}


<NUMERIC>1</NUMERIC><OPERATOR>;</OPERATOR>