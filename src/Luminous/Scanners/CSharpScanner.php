<?php

namespace Luminous\Scanners;

use Luminous\Core\TokenPresets;
use Luminous\Core\Scanners\SimpleScanner;

class CSharpScanner extends SimpleScanner
{
    public function init()
    {
        $this->addPattern('PREPROCESSOR', "/\\#(?: [^\\\\\n]+ | \\\\. )*/sx");
        $this->addPattern('COMMENT', TokenPresets::$C_COMMENT_SL);
        $this->addPattern('COMMENT', TokenPresets::$C_COMMENT_ML);
        $this->addPattern('STRING', TokenPresets::$DOUBLE_STR);
        $this->addPattern('CHARACTER', TokenPresets::$SINGLE_STR);
        $this->addPattern('NUMERIC', TokenPresets::$NUM_HEX);
        $this->addPattern('NUMERIC', TokenPresets::$NUM_REAL);
        $this->addPattern('IDENT', '/[a-z_]\w+/i');
        $this->addPattern('OPERATOR', '/[Â¬!%^&*\-=+~|?\\/><;:.,]+/i');

        $this->addIdentifierMapping('KEYWORD', array(
            'abstract',
            'as',
            'base',
            'break',
            'case',
            'catch',
            'checked',
            'class',
            'continue',
            'default',
            'delegate',
            'do',
            'event',
            'explicit',
            'extern',
            'else',
            'finally',
            'false',
            'fixed',
            'for',
            'foreach',
            'goto',
            'if',
            'implicit',
            'in',
            'interface',
            'internal',
            'is',
            'lock',
            'new',
            'null',
            'namespace',
            'operator',
            'out',
            'override',
            'params',
            'private',
            'protected',
            'public',
            'readonly',
            'ref',
            'return',
            'struct',
            'switch',
            'sealed',
            'sizeof',
            'stackalloc',
            'static',
            'this',
            'throw',
            'true',
            'try',
            'typeof',
            'unchecked',
            'unsafe',
            'using',
            'var',
            'virtual',
            'volatile',
            'while',
            'yield'
        ));

        $this->addIdentifierMapping('TYPE', array(
            // primatives
            'bool',
            'byte',
            'char',
            'const',
            'double',
            'decimal',
            'enum',
            'float',
            'int',
            'long',
            'object',
            'sbyte',
            'short',
            'string',
            'uint',
            'ulong',
            'ushort',
            'void',
            // system
            'ArgIterator',
            'ArraySegment',
            'Boolean',
            'Byte',
            'Char',
            'ConsoleKeyInfo',
            'DateTime',
            'DateTimeOffset',
            'Decimal',
            'Double',
            'Guid',
            'Int16',
            'Int32',
            'Int64',
            'IntPtr',
            'ModuleHandle',
            'Nullable',
            'RuntimeArgumentHandle',
            'RuntimeFieldHandle',
            'RuntimeMethodHandle',
            'RuntimeTypeHandle',
            'SByte',
            'Single',
            'TimeSpan',
            'TimeZoneInfo',
            'TypedReference',
            'UInt16',
            'UInt32',
            'UInt64',
            'UIntPtr',
            'Void',

            // also system
            'AccessViolationException',
            'ActivationContext',
            'Activator',
            'AggregateException',
            'AppDomain',
            'AppDomainManager',
            'AppDomainSetup',
            'AppDomainUnloadedException',
            'ApplicationException',
            'ApplicationId',
            'ApplicationIdentity',
            'ArgumentException',
            'ArgumentNullException',
            'ArgumentOutOfRangeException',
            'ArithmeticException',
            'Array',
            'ArrayTypeMismatchException',
            'AssemblyLoadEventArgs',
            'Attribute',
            'AttributeUsageAttribute',
            'BadImageFormatException',
            'BitConverter',
            'Buffer',
            'CannotUnloadAppDomainException',
            'CharEnumerator',
            'CLSCompliantAttribute',
            'Console',
            'ConsoleCancelEventArgs',
            'ContextBoundObject',
            'ContextMarshalException',
            'ContextStaticAttribute',
            'Convert',
            'DataMisalignedException',
            'DBNull',
            'Delegate',
            'DivideByZeroException',
            'DllNotFoundException',
            'DuplicateWaitObjectException',
            'EntryPointNotFoundException',
            'Enum',
            'Environment',
            'EventArgs',
            'Exception',
            'ExecutionEngineException',
            'FieldAccessException',
            'FileStyleUriParser',
            'FlagsAttribute',
            'FormatException',
            'FtpStyleUriParser',
            'GC',
            'GenericUriParser',
            'GopherStyleUriParser',
            'HttpStyleUriParser',
            'IndexOutOfRangeException',
            'InsufficientExecutionStackException',
            'InsufficientMemoryException',
            'InvalidCastException',
            'InvalidOperationException',
            'InvalidProgramException',
            'InvalidTimeZoneException',
            'Lazy',
            'LdapStyleUriParser',
            'LoaderOptimizationAttribute',
            'LocalDataStoreSlot',
            'MarshalByRefObject',
            'Math',
            'MemberAccessException',
            'MethodAccessException',
            'MissingFieldException',
            'MissingMemberException',
            'MissingMethodException',
            'MTAThreadAttribute',
            'MulticastDelegate',
            'MulticastNotSupportedException',
            'NetPipeStyleUriParser',
            'NetTcpStyleUriParser',
            'NewsStyleUriParser',
            'NonSerializedAttribute',
            'NotFiniteNumberException',
            'NotImplementedException',
            'NotSupportedException',
            'Nullable',
            'NullReferenceException',
            'Object',
            'ObjectDisposedException',
            'ObsoleteAttribute',
            'OperatingSystem',
            'OperationCanceledException',
            'OutOfMemoryException',
            'OverflowException',
            'ParamArrayAttribute',
            'PlatformNotSupportedException',
            'Random',
            'RankException',
            'ResolveEventArgs',
            'SerializableAttribute',
            'StackOverflowException',
            'STAThreadAttribute',
            'String',
            'StringComparer',
            'SystemException',
            'ThreadStaticAttribute',
            'TimeoutException',
            'TimeZone',
            'TimeZoneInfo',
            'TimeZoneInfo',
            'TimeZoneNotFoundException',
            'Tuple',
            'Type',
            'TypeAccessException',
            'TypeInitializationException',
            'TypeLoadException',
            'TypeUnloadedException',
            'UnauthorizedAccessException',
            'UnhandledExceptionEventArgs',
            'Uri',
            'UriBuilder',
            'UriFormatException',
            'UriParser',
            'UriTemplate',
            'UriTemplateEquivalenceComparer',
            'UriTemplateMatch',
            'UriTemplateMatchException',
            'UriTemplateTable',
            'UriTypeConverter',
            'ValueType',
            'Version',
            'WeakReference',
            // system.collections
            'ArrayList',
            'BitArray',
            'CaseInsensitiveComparer',
            'CaseInsensitiveHashCodeProvider',
            'CollectionBase',
            'Comparer',
            'DictionaryBase',
            'DictionaryEntry',
            'Hashtable',
            'ICollection',
            'IComparer',
            'IDictionary',
            'IDictionaryEnumerator',
            'IEnumerable',
            'IEnumerator',
            'IEqualityComparer',
            'IHashCodeProvider',
            'IList',
            'IStructuralComparable',
            'IStructuralEquatable',
            'Queue',
            'ReadOnlyCollectionBase',
            'SortedList',
            'Stack',
            'StructuralComparisons',

            // System.Collections.Generic
            'Comparer',
            'Dictionary',
            'EqualityComparer',
            'HashSet',
            'ICollection',
            'IComparer',
            'IDictionary',
            'IEnumerable',
            'IEnumerator',
            'IEqualityComparer',
            'IList',
            'IReadOnlyCollection',
            'IReadOnlyDictionary',
            'IReadOnlyList',
            'ISet',
            'KeyedByTypeCollection',
            'KeyNotFoundException',
            'KeyValuePair',
            'LinkedList',
            'LinkedListNode',
            'List',
            'Queue',
            'SortedDictionary',
            'SortedList',
            'SortedSet',
            'Stack',
            'SynchronizedCollection',
            'SynchronizedKeyedCollection',
            'SynchronizedReadOnlyCollection',

            // system.io
            'BinaryReader',
            'BinaryWriter',
            'BufferedStream',
            'Directory',
            'DirectoryInfo',
            'DirectoryNotFoundException',
            'DriveInfo',
            'DriveNotFoundException',
            'EndOfStreamException',
            'ErrorEventArgs',
            'File',
            'FileFormatException',
            'FileInfo',
            'FileLoadException',
            'FileNotFoundException',
            'FileStream',
            'FileSystemEventArgs',
            'FileSystemInfo',
            'FileSystemWatcher',
            'InternalBufferOverflowException',
            'InvalidDataException',
            'IODescriptionAttribute',
            'IOException',
            'MemoryStream',
            'Path',
            'PathTooLongException',
            'PipeException',
            'RenamedEventArgs',
            'Stream',
            'StreamReader',
            'StreamWriter',
            'StringReader',
            'StringWriter',
            'TextReader',
            'TextWriter',
            'UnmanagedMemoryAccessor',
            'UnmanagedMemoryStream',
        ));
    }

    public static function guessLanguage($src, $info)
    {
        $p = 0.0;
        if (preg_match('/^\s*#region\\b/m', $src)) {
            $p += 0.10;
        }
        if (preg_match('/^\s*using\s+System;/m', $src)) {
            $p += 0.10;
        }
        if (preg_match('/^\s*using\s+System\\..*;/m', $src)) {
            $p += 0.10;
        }
        if (preg_match('/partial\s+class\s+\w+/', $src)) {
            $p += 0.05;
        }
        return $p;
    }
}
